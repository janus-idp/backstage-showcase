# This file is for AKS installation only. 
# It is applied by `helm upgrade` after the `values-showcase.yaml` is applied and only contains complementary differences for AKS.
# Note, that it overwrites the whole key that is present in this file. 
# The only exception is global.dynamic.plugins, that gets merged with the base file.
route:
  enabled: false
global:
  dynamic:
    plugins: []
upstream:
  backstage:
    appConfig:
      app:
        # Please update to match host in case you don't want to configure hostname via `global.clusterRouterBase` or `global.host`.
        baseUrl: 'https://{{- include "janus-idp.hostname" . }}'
      backend:
        baseUrl: 'https://{{- include "janus-idp.hostname" . }}'
        cors:
          origin: 'https://{{- include "janus-idp.hostname" . }}'
        database:
          connection:
            host: null
            port: null
            password: ${POSTGRESQL_ADMIN_PASSWORD}
            user: postgres
            ssl: null
        auth:
          keys:
            - secret: ${BACKEND_SECRET}
    extraEnvVars:
      - name: BACKEND_SECRET
        valueFrom:
          secretKeyRef:
            key: backend-secret
            name: '{{ include "janus-idp.backend-secret-name" $ }}'
      - name: POSTGRESQL_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: '{{ .Release.Name }}-postgresql'
      # disable telemetry in CI
      - name: SEGMENT_TEST_MODE
        value: 'true'
    extraVolumeMounts:
      # The initContainer below will install dynamic plugins in this volume mount.
      - name: dynamic-plugins-root
        mountPath: /opt/app-root/src/dynamic-plugins-root
      - name: rbac-policy
        mountPath: /opt/app-root/src/rbac
      - name: rbac-conditions
        mountPath: /opt/app-root/src/rbac-conditions
    extraVolumes:
      # -- Ephemeral volume that will contain the dynamic plugins installed by the initContainer below at start.
      # To have more control on underlying storage, the [emptyDir](https://docs.openshift.com/container-platform/4.13/storage/understanding-ephemeral-storage.html)
      # could be changed to a [generic ephemeral volume](https://docs.openshift.com/container-platform/4.13/storage/generic-ephemeral-vols.html#generic-ephemeral-vols-procedure_generic-ephemeral-volumes).
      - name: dynamic-plugins-root
        emptyDir: {}
      - name: rbac-policy
        configMap:
          defaultMode: 420
          name: rbac-policy
      - name: rbac-conditions
        emptyDir: {}
      # Volume that will expose the `dynamic-plugins.yaml` file from the `dynamic-plugins` config map.
      # The `dynamic-plugins` config map is created by the helm chart from the content of the `global.dynamic` field.
      - name: dynamic-plugins
        configMap:
          defaultMode: 420
          name: dynamic-plugins
          optional: true
      # Optional volume that allows exposing the `.npmrc` file (through a `dynamic-plugins-npmrc` secret)
      # to be used when running `npm pack` during the dynamic plugins installation by the initContainer.
      - name: dynamic-plugins-npmrc
        secret:
          defaultMode: 420
          optional: true
          secretName: dynamic-plugins-npmrc
    extraEnvVarsSecrets:
      - rhdh-secrets
    podSecurityContext:
      fsGroup: 3000
    startupProbe:
      failureThreshold: 10 # Override the default to account for longer startup time on Kubernetes.
  postgresql:
    enabled: true
    postgresqlDataDir: /var/lib/pgsql/data/userdata
    image:
      registry: quay.io
      repository: fedora/postgresql-15
      tag: latest
    auth:
      secretKeys:
        adminPasswordKey: postgres-password
        userPasswordKey: password
      existingSecret: null
    primary:
      securityContext:
        enabled: false
      podSecurityContext:
        enabled: true
        fsGroup: 3000
      containerSecurityContext:
        enabled: false
      persistence:
        enabled: true
        size: 1Gi
        mountPath: /var/lib/pgsql/data
      extraEnvVars:
        - name: POSTGRESQL_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              key: postgres-password
              name: '{{ .Release.Name }}-postgresql'
      # Tolerations and affinity needed to be scheduled on a spot AKS cluster. Only `postgresql` require it.
      tolerations:
      - key: "kubernetes.azure.com/scalesetpriority"
        operator: "Equal"
        value: "spot"
        effect: "NoSchedule"
      affinity:
        nodeAffinity:
          perferredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "kubernetes.azure.com/scalesetpriority"
                operator: In
                values:
                - "spot":
  volumePermissions:
    enabled: true
  ingress:
    enabled: true
    className: webapprouting.kubernetes.azure.com
    host: ''