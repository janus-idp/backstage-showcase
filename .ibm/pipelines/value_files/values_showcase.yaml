global:
  dynamic:
    # -- Array of YAML files listing dynamic plugins to include with those listed in the `plugins` field.
    # Relative paths are resolved from the working directory of the initContainer that will install the plugins (`/opt/app-root/src`).
    includes:
      # -- List of dynamic plugins included inside the `rhdh-community/rhdh` container image, some of which are disabled by default.
      # This file ONLY works with the `rhdh-community/rhdh` container image.
      - 'dynamic-plugins.default.yaml'

    # -- List of dynamic plugins, possibly overriding the plugins listed in `includes` files.
    # Every item defines the plugin `package` as a [NPM package spec](https://docs.npmjs.com/cli/v10/using-npm/package-spec),
    # an optional `pluginConfig` with plugin-specific backstage configuration, and an optional `disabled` flag to disable/enable a plugin
    # listed in `includes` files. It also includes an `integrity` field that is used to verify the plugin package [integrity](https://w3c.github.io/webappsec-subresource-integrity/#integrity-metadata-description).
    plugins:
      - package: ./dynamic-plugins/dist/backstage-plugin-scaffolder-backend-module-github-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-plugin-catalog-backend-module-github-dynamic
        disabled: false
        pluginConfig:
          catalog:
            providers:
              github:
                my-test-org:
                  organization: janus-qe
                  catalogPath: '/catalog-info.yaml'
                  schedule:
                    frequency:
                      minutes: 1
                    timeout:
                      minutes: 1
                    initialDelay:
                      seconds: 15
      - package: ./dynamic-plugins/dist/backstage-plugin-catalog-backend-module-github-org-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-community-plugin-github-issues
        disabled: false
      - package: ./dynamic-plugins/dist/roadiehq-backstage-plugin-github-pull-requests
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-community-plugin-github-actions
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-community-plugin-quay
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-community-plugin-catalog-backend-module-keycloak-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-community-plugin-tekton
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-plugin-kubernetes-backend-dynamic
        disabled: false
        pluginConfig:
          kubernetes:
            clusterLocatorMethods:
              - clusters:
                  - authProvider: serviceAccount
                    name: 'my-cluster'
                    serviceAccountToken: ${K8S_CLUSTER_TOKEN_ENCODED}
                    url: ${K8S_CLUSTER_API_SERVER_URL}
                type: config
            customResources:
              # Add for tekton
              - apiVersion: 'v1'
                group: 'tekton.dev'
                plural: 'pipelines'
              - apiVersion: v1
                group: tekton.dev
                plural: pipelineruns
              - apiVersion: v1
                group: tekton.dev
                plural: taskruns
              # Add for topology plugin
              - apiVersion: 'v1'
                group: 'route.openshift.io'
                plural: 'routes'
            serviceLocatorMethod:
              type: multiTenant
      # Enable OCM plugins.
      - package: ./dynamic-plugins/dist/backstage-community-plugin-ocm-backend-dynamic
        disabled: false
        pluginConfig:
          catalog:
            providers:
              ocm:
                default:
                  name: testCluster # Can be any arbitrary name supported by kubernetes
                  url: ${OCM_CLUSTER_URL}
                  serviceAccountToken: ${OCM_CLUSTER_TOKEN}
                  skipTLSVerify: true
                  owner: janus-authors
      - package: ./dynamic-plugins/dist/backstage-community-plugin-ocm
        disabled: false
      # Enable bulk import plugins.
      - package: ./dynamic-plugins/dist/red-hat-developer-hub-backstage-plugin-bulk-import-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/red-hat-developer-hub-backstage-plugin-bulk-import
        disabled: false
      # Enable tech-radar plugins.
      - package: ./dynamic-plugins/dist/backstage-community-plugin-tech-radar
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-community-plugin-tech-radar-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-community-plugin-acr
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-community-plugin-scaffolder-backend-module-kubernetes-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/roadiehq-scaffolder-backend-module-http-request-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-community-plugin-catalog-backend-module-scaffolder-relation-processor-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/immobiliarelabs-backstage-plugin-gitlab-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-plugin-catalog-backend-module-gitlab-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/backstage-community-plugin-topology
        disabled: false
      - package: '@pataknight/backstage-plugin-rhdh-qe-theme@0.5.5'
        disabled: false
        integrity: sha512-srTnFDYn3Ett6z33bX4nL2NQY8wqux8TkpgBQNsE8S73nMfsor/wAdmVgHL+xW7pxQ09DT4YTdaG3GkH+cyyNQ==
      - package: '@backstage-community/plugin-todo@0.2.42'
        disabled: false
        integrity: sha512-agmfwxHkZPy0zaXzjMKY9Us9l7J2og+z7p2lDWQBmlJ1KZRo6OBQdnlG1mTEryfEEl/bx5Ko+f1PhFj2/BmiIQ==
      - package: ./dynamic-plugins/dist/red-hat-developer-hub-backstage-plugin-catalog-backend-module-marketplace-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/red-hat-developer-hub-backstage-plugin-marketplace-backend-dynamic
        disabled: false
      - package: ./dynamic-plugins/dist/red-hat-developer-hub-backstage-plugin-marketplace
        disabled: false

# -- Upstream Backstage [chart configuration](https://github.com/backstage/charts/blob/main/charts/backstage/values.yaml)
upstream:
  nameOverride: backstage
  commonLabels:
    backstage.io/kubernetes-id: developer-hub
  backstage:
    image:
      pullPolicy: Always
      registry: quay.io
      repository: rhdh-community/rhdh
      tag: next
    extraEnvVars:
      - name: BACKEND_SECRET
        valueFrom:
          secretKeyRef:
            key: backend-secret
            name: '{{ include "janus-idp.backend-secret-name" $ }}'
      - name: POSTGRESQL_ADMIN_PASSWORD
        valueFrom:
          secretKeyRef:
            key: postgres-password
            name: '{{ .Release.Name }}-postgresql'
      # disable telemetry in CI
      - name: SEGMENT_TEST_MODE
        value: 'true'
      - name: NODE_TLS_REJECT_UNAUTHORIZED
        value: '0'
      - name: ENABLE_CORE_ROOTHTTPROUTER_OVERRIDE
        value: 'true' 
    extraAppConfig:
      - configMapRef: app-config-rhdh
        filename: app-config-rhdh.yaml
      - configMapRef: dynamic-plugins-config
        filename: dynamic-plugins-config.yaml
    startupProbe:
      # This gives enough time upon container startup before the liveness and readiness probes are triggered.
      # Giving (120s = initialDelaySeconds + failureThreshold * periodSeconds) to account for the worst case scenario.
      httpGet:
        path: /.backstage/health/v1/liveness
        port: backend
        scheme: HTTP
      initialDelaySeconds: 30
      timeoutSeconds: 4
      periodSeconds: 20
      successThreshold: 1
      failureThreshold: 3
    readinessProbe:
      failureThreshold: 3
      httpGet:
        path: /.backstage/health/v1/readiness
        port: backend
        scheme: HTTP
      # Both liveness and readiness probes won't be triggered until the startup probe is successful.
      # The startup probe is already configured to give enough time for the application to be started.
      # So removing the additional delay here allows the readiness probe to be checked right away after the startup probe,
      # which helps make the application available faster to the end-user.
      # initialDelaySeconds: 30
      periodSeconds: 10
      successThreshold: 2
      timeoutSeconds: 4
    livenessProbe:
      failureThreshold: 3
      httpGet:
        path: /.backstage/health/v1/liveness
        port: backend
        scheme: HTTP
      # Both liveness and readiness probes won't be triggered until the startup probe is successful.
      # The startup probe is already configured to give enough time for the application to be started.
      # So removing the additional delay here allows the liveness probe to be checked right away after the startup probe,
      # which helps make the application available faster to the end-user.
      # initialDelaySeconds: 60
      periodSeconds: 10
      successThreshold: 1
      timeoutSeconds: 4
    extraEnvVarsSecrets:
      - rhdh-secrets
      - redis-secret
  ingress:
    host: '{{ .Values.global.host }}'
