diff --git a/dist/index.d.ts b/dist/index.d.ts
index 68527860f605be16b39ec2e5776fdbfba5d2d164..dde92cff6a3546db9c9f510c739ea7558bef11bb 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -56,11 +56,15 @@ declare namespace gcpIapSignInResolvers {
     /**
      * Looks up the user by matching their email to the `google.com/email` annotation.
      */
-    const emailMatchingUserEntityAnnotation: _backstage_plugin_auth_node.SignInResolverFactory<GcpIapResult, unknown>;
+    const emailMatchingUserEntityAnnotation: _backstage_plugin_auth_node.SignInResolverFactory<GcpIapResult, {
+        dangerouslyAllowSignInWithoutUserInCatalog?: boolean | undefined;
+    } | undefined>;
     /**
      * Looks up the user by matching their user ID to the `google.com/user-id` annotation.
      */
-    const idMatchingUserEntityAnnotation: _backstage_plugin_auth_node.SignInResolverFactory<GcpIapResult, unknown>;
+    const idMatchingUserEntityAnnotation: _backstage_plugin_auth_node.SignInResolverFactory<GcpIapResult, {
+        dangerouslyAllowSignInWithoutUserInCatalog?: boolean | undefined;
+    } | undefined>;
 }
 
 export { type GcpIapResult, type GcpIapTokenInfo, authModuleGcpIapProvider as default, gcpIapAuthenticator, gcpIapSignInResolvers };
diff --git a/dist/resolvers.cjs.js b/dist/resolvers.cjs.js
index 406ed967659611e8a2a8258f251ee7d524ee66b5..7df5fc8537aa6ace156bac83ab95689cdb6dd029 100644
--- a/dist/resolvers.cjs.js
+++ b/dist/resolvers.cjs.js
@@ -1,33 +1,58 @@
 'use strict';
 
 var pluginAuthNode = require('@backstage/plugin-auth-node');
+var zod = require('zod');
 
 exports.gcpIapSignInResolvers = void 0;
 ((gcpIapSignInResolvers2) => {
   gcpIapSignInResolvers2.emailMatchingUserEntityAnnotation = pluginAuthNode.createSignInResolverFactory({
-    create() {
+    optionsSchema: zod.z.object({
+      dangerouslyAllowSignInWithoutUserInCatalog: zod.z.boolean().optional()
+    }).optional(),
+    create(options = {}) {
       return async (info, ctx) => {
         const email = info.result.iapToken.email;
         if (!email) {
           throw new Error("Google IAP sign-in result is missing email");
         }
-        return ctx.signInWithCatalogUser({
-          annotations: {
-            "google.com/email": email
-          }
-        });
+        try {
+          return await ctx.signInWithCatalogUser({
+            annotations: {
+              "google.com/email": email
+            }
+          });
+        } catch (error) {
+          return await pluginAuthNode.handleSignInUserNotFound({
+            ctx,
+            error,
+            userEntityName: email,
+            dangerouslyAllowSignInWithoutUserInCatalog: options?.dangerouslyAllowSignInWithoutUserInCatalog
+          });
+        }
       };
     }
   });
   gcpIapSignInResolvers2.idMatchingUserEntityAnnotation = pluginAuthNode.createSignInResolverFactory({
-    create() {
+    optionsSchema: zod.z.object({
+      dangerouslyAllowSignInWithoutUserInCatalog: zod.z.boolean().optional()
+    }).optional(),
+    create(options = {}) {
       return async (info, ctx) => {
         const userId = info.result.iapToken.sub.split(":")[1];
-        return ctx.signInWithCatalogUser({
-          annotations: {
-            "google.com/user-id": userId
-          }
-        });
+        try {
+          return await ctx.signInWithCatalogUser({
+            annotations: {
+              "google.com/user-id": userId
+            }
+          });
+        } catch (error) {
+          return await pluginAuthNode.handleSignInUserNotFound({
+            ctx,
+            error,
+            userEntityName: userId,
+            dangerouslyAllowSignInWithoutUserInCatalog: options?.dangerouslyAllowSignInWithoutUserInCatalog
+          });
+        }
       };
     }
   });
diff --git a/dist/resolvers.cjs.js.map b/dist/resolvers.cjs.js.map
index af75d66483cae2a7d2303d7204fc9805b52ff79e..bff848915eef1b132a1fb59d13988609ddcc9b11 100644
--- a/dist/resolvers.cjs.js.map
+++ b/dist/resolvers.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"resolvers.cjs.js","sources":["../src/resolvers.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createSignInResolverFactory,\n  SignInInfo,\n} from '@backstage/plugin-auth-node';\nimport { GcpIapResult } from './types';\n\n/**\n * Available sign-in resolvers for the Google auth provider.\n *\n * @public\n */\nexport namespace gcpIapSignInResolvers {\n  /**\n   * Looks up the user by matching their email to the `google.com/email` annotation.\n   */\n  export const emailMatchingUserEntityAnnotation = createSignInResolverFactory({\n    create() {\n      return async (info: SignInInfo<GcpIapResult>, ctx) => {\n        const email = info.result.iapToken.email;\n\n        if (!email) {\n          throw new Error('Google IAP sign-in result is missing email');\n        }\n\n        return ctx.signInWithCatalogUser({\n          annotations: {\n            'google.com/email': email,\n          },\n        });\n      };\n    },\n  });\n\n  /**\n   * Looks up the user by matching their user ID to the `google.com/user-id` annotation.\n   */\n  export const idMatchingUserEntityAnnotation = createSignInResolverFactory({\n    create() {\n      return async (info: SignInInfo<GcpIapResult>, ctx) => {\n        const userId = info.result.iapToken.sub.split(':')[1];\n\n        return ctx.signInWithCatalogUser({\n          annotations: {\n            'google.com/user-id': userId,\n          },\n        });\n      };\n    },\n  });\n}\n"],"names":["gcpIapSignInResolvers","createSignInResolverFactory"],"mappings":";;;;AA2BiBA;AAAA,CAAV,CAAUA,sBAAV,KAAA;AAIE,EAAMA,sBAAAA,CAAA,oCAAoCC,0CAA4B,CAAA;AAAA,IAC3E,MAAS,GAAA;AACP,MAAO,OAAA,OAAO,MAAgC,GAAQ,KAAA;AACpD,QAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,MAAA,CAAO,QAAS,CAAA,KAAA;AAEnC,QAAA,IAAI,CAAC,KAAO,EAAA;AACV,UAAM,MAAA,IAAI,MAAM,4CAA4C,CAAA;AAAA;AAG9D,QAAA,OAAO,IAAI,qBAAsB,CAAA;AAAA,UAC/B,WAAa,EAAA;AAAA,YACX,kBAAoB,EAAA;AAAA;AACtB,SACD,CAAA;AAAA,OACH;AAAA;AACF,GACD,CAAA;AAKM,EAAMD,sBAAAA,CAAA,iCAAiCC,0CAA4B,CAAA;AAAA,IACxE,MAAS,GAAA;AACP,MAAO,OAAA,OAAO,MAAgC,GAAQ,KAAA;AACpD,QAAM,MAAA,MAAA,GAAS,KAAK,MAAO,CAAA,QAAA,CAAS,IAAI,KAAM,CAAA,GAAG,EAAE,CAAC,CAAA;AAEpD,QAAA,OAAO,IAAI,qBAAsB,CAAA;AAAA,UAC/B,WAAa,EAAA;AAAA,YACX,oBAAsB,EAAA;AAAA;AACxB,SACD,CAAA;AAAA,OACH;AAAA;AACF,GACD,CAAA;AAAA,CArCc,EAAAD,6BAAA,KAAAA,6BAAA,GAAA,EAAA,CAAA,CAAA;;"}
\ No newline at end of file
+{"version":3,"file":"resolvers.cjs.js","sources":["../src/resolvers.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createSignInResolverFactory,\n  handleSignInUserNotFound,\n  SignInInfo,\n} from '@backstage/plugin-auth-node';\nimport { GcpIapResult } from './types';\nimport { z } from 'zod';\n\n/**\n * Available sign-in resolvers for the Google auth provider.\n *\n * @public\n */\nexport namespace gcpIapSignInResolvers {\n  /**\n   * Looks up the user by matching their email to the `google.com/email` annotation.\n   */\n  export const emailMatchingUserEntityAnnotation = createSignInResolverFactory({\n    optionsSchema: z\n      .object({\n        dangerouslyAllowSignInWithoutUserInCatalog: z.boolean().optional(),\n      })\n      .optional(),\n    create(options = {}) {\n      return async (info: SignInInfo<GcpIapResult>, ctx) => {\n        const email = info.result.iapToken.email;\n\n        if (!email) {\n          throw new Error('Google IAP sign-in result is missing email');\n        }\n\n        try {\n          return await ctx.signInWithCatalogUser({\n            annotations: {\n              'google.com/email': email,\n            },\n          });\n        } catch (error) {\n          return await handleSignInUserNotFound({\n            ctx,\n            error,\n            userEntityName: email,\n            dangerouslyAllowSignInWithoutUserInCatalog:\n              options?.dangerouslyAllowSignInWithoutUserInCatalog,\n          });\n        }\n      };\n    },\n  });\n\n  /**\n   * Looks up the user by matching their user ID to the `google.com/user-id` annotation.\n   */\n  export const idMatchingUserEntityAnnotation = createSignInResolverFactory({\n    optionsSchema: z\n      .object({\n        dangerouslyAllowSignInWithoutUserInCatalog: z.boolean().optional(),\n      })\n      .optional(),\n    create(options = {}) {\n      return async (info: SignInInfo<GcpIapResult>, ctx) => {\n        const userId = info.result.iapToken.sub.split(':')[1];\n        try {\n          return await ctx.signInWithCatalogUser({\n            annotations: {\n              'google.com/user-id': userId,\n            },\n          });\n        } catch (error) {\n          return await handleSignInUserNotFound({\n            ctx,\n            error,\n            userEntityName: userId,\n            dangerouslyAllowSignInWithoutUserInCatalog:\n              options?.dangerouslyAllowSignInWithoutUserInCatalog,\n          });\n        }\n      };\n    },\n  });\n}\n"],"names":["gcpIapSignInResolvers","createSignInResolverFactory","z","handleSignInUserNotFound"],"mappings":";;;;;AA6BiBA;AAAA,CAAV,CAAUA,sBAAV,KAAA;AAIE,EAAMA,sBAAAA,CAAA,oCAAoCC,0CAA4B,CAAA;AAAA,IAC3E,aAAA,EAAeC,MACZ,MAAO,CAAA;AAAA,MACN,0CAA4C,EAAAA,KAAA,CAAE,OAAQ,EAAA,CAAE,QAAS;AAAA,KAClE,EACA,QAAS,EAAA;AAAA,IACZ,MAAA,CAAO,OAAU,GAAA,EAAI,EAAA;AACnB,MAAO,OAAA,OAAO,MAAgC,GAAQ,KAAA;AACpD,QAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,MAAA,CAAO,QAAS,CAAA,KAAA;AAEnC,QAAA,IAAI,CAAC,KAAO,EAAA;AACV,UAAM,MAAA,IAAI,MAAM,4CAA4C,CAAA;AAAA;AAG9D,QAAI,IAAA;AACF,UAAO,OAAA,MAAM,IAAI,qBAAsB,CAAA;AAAA,YACrC,WAAa,EAAA;AAAA,cACX,kBAAoB,EAAA;AAAA;AACtB,WACD,CAAA;AAAA,iBACM,KAAO,EAAA;AACd,UAAA,OAAO,MAAMC,uCAAyB,CAAA;AAAA,YACpC,GAAA;AAAA,YACA,KAAA;AAAA,YACA,cAAgB,EAAA,KAAA;AAAA,YAChB,4CACE,OAAS,EAAA;AAAA,WACZ,CAAA;AAAA;AACH,OACF;AAAA;AACF,GACD,CAAA;AAKM,EAAMH,sBAAAA,CAAA,iCAAiCC,0CAA4B,CAAA;AAAA,IACxE,aAAA,EAAeC,MACZ,MAAO,CAAA;AAAA,MACN,0CAA4C,EAAAA,KAAA,CAAE,OAAQ,EAAA,CAAE,QAAS;AAAA,KAClE,EACA,QAAS,EAAA;AAAA,IACZ,MAAA,CAAO,OAAU,GAAA,EAAI,EAAA;AACnB,MAAO,OAAA,OAAO,MAAgC,GAAQ,KAAA;AACpD,QAAM,MAAA,MAAA,GAAS,KAAK,MAAO,CAAA,QAAA,CAAS,IAAI,KAAM,CAAA,GAAG,EAAE,CAAC,CAAA;AACpD,QAAI,IAAA;AACF,UAAO,OAAA,MAAM,IAAI,qBAAsB,CAAA;AAAA,YACrC,WAAa,EAAA;AAAA,cACX,oBAAsB,EAAA;AAAA;AACxB,WACD,CAAA;AAAA,iBACM,KAAO,EAAA;AACd,UAAA,OAAO,MAAMC,uCAAyB,CAAA;AAAA,YACpC,GAAA;AAAA,YACA,KAAA;AAAA,YACA,cAAgB,EAAA,MAAA;AAAA,YAChB,4CACE,OAAS,EAAA;AAAA,WACZ,CAAA;AAAA;AACH,OACF;AAAA;AACF,GACD,CAAA;AAAA,CAlEc,EAAAH,6BAAA,KAAAA,6BAAA,GAAA,EAAA,CAAA,CAAA;;"}
\ No newline at end of file
