diff --git a/dist/index.d.ts b/dist/index.d.ts
index 5fc17b0bb45ec47821b090997423f854d372c9c4..920ce03ea5a0999c39d951c8a1d3a03aa253b685 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -20,7 +20,9 @@ declare namespace bitbucketServerSignInResolvers {
     /**
      * Looks up the user by matching their email to the entity email.
      */
-    const emailMatchingUserEntityProfileEmail: _backstage_plugin_auth_node.SignInResolverFactory<OAuthAuthenticatorResult<PassportProfile>, unknown>;
+    const emailMatchingUserEntityProfileEmail: _backstage_plugin_auth_node.SignInResolverFactory<OAuthAuthenticatorResult<PassportProfile>, {
+        dangerouslyAllowSignInWithoutUserInCatalog?: boolean | undefined;
+    } | undefined>;
 }
 
 export { bitbucketServerAuthenticator, bitbucketServerSignInResolvers, authModuleBitbucketServerProvider as default };
diff --git a/dist/resolvers.cjs.js b/dist/resolvers.cjs.js
index 950dbabacad06428289e22c73e29a04d23400f06..2672251657733cf6cf659119d506c318492d442b 100644
--- a/dist/resolvers.cjs.js
+++ b/dist/resolvers.cjs.js
@@ -1,11 +1,15 @@
 'use strict';
 
 var pluginAuthNode = require('@backstage/plugin-auth-node');
+var zod = require('zod');
 
 exports.bitbucketServerSignInResolvers = void 0;
 ((bitbucketServerSignInResolvers2) => {
   bitbucketServerSignInResolvers2.emailMatchingUserEntityProfileEmail = pluginAuthNode.createSignInResolverFactory({
-    create() {
+    optionsSchema: zod.z.object({
+      dangerouslyAllowSignInWithoutUserInCatalog: zod.z.boolean().optional()
+    }).optional(),
+    create(options = {}) {
       return async (info, ctx) => {
         const { profile } = info;
         if (!profile.email) {
@@ -13,11 +17,20 @@ exports.bitbucketServerSignInResolvers = void 0;
             "Login failed, user profile does not contain an email"
           );
         }
-        return ctx.signInWithCatalogUser({
-          filter: {
-            "spec.profile.email": profile.email
-          }
-        });
+        try {
+          return await ctx.signInWithCatalogUser({
+            filter: {
+              "spec.profile.email": profile.email
+            }
+          });
+        } catch (error) {
+          return await pluginAuthNode.handleSignInUserNotFound({
+            ctx,
+            error,
+            userEntityName: profile.email,
+            dangerouslyAllowSignInWithoutUserInCatalog: options?.dangerouslyAllowSignInWithoutUserInCatalog
+          });
+        }
       };
     }
   });
diff --git a/dist/resolvers.cjs.js.map b/dist/resolvers.cjs.js.map
index 4945d0bfad9b042714c95c9a76d63b07c3b298f3..abe983745935c92904c2d6982e4d0784fdd8051b 100644
--- a/dist/resolvers.cjs.js.map
+++ b/dist/resolvers.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"resolvers.cjs.js","sources":["../src/resolvers.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  createSignInResolverFactory,\n  OAuthAuthenticatorResult,\n  PassportProfile,\n  SignInInfo,\n} from '@backstage/plugin-auth-node';\n\n/**\n * Available sign-in resolvers for the Bitbucket Server auth provider.\n *\n * @public\n */\nexport namespace bitbucketServerSignInResolvers {\n  /**\n   * Looks up the user by matching their email to the entity email.\n   */\n  export const emailMatchingUserEntityProfileEmail =\n    createSignInResolverFactory({\n      create() {\n        return async (\n          info: SignInInfo<OAuthAuthenticatorResult<PassportProfile>>,\n          ctx,\n        ) => {\n          const { profile } = info;\n\n          if (!profile.email) {\n            throw new Error(\n              'Login failed, user profile does not contain an email',\n            );\n          }\n\n          return ctx.signInWithCatalogUser({\n            filter: {\n              'spec.profile.email': profile.email,\n            },\n          });\n        };\n      },\n    });\n}\n"],"names":["bitbucketServerSignInResolvers","createSignInResolverFactory"],"mappings":";;;;AA2BiBA;AAAA,CAAV,CAAUA,+BAAV,KAAA;AAIE,EAAMA,+BAAAA,CAAA,sCACXC,0CAA4B,CAAA;AAAA,IAC1B,MAAS,GAAA;AACP,MAAO,OAAA,OACL,MACA,GACG,KAAA;AACH,QAAM,MAAA,EAAE,SAAY,GAAA,IAAA;AAEpB,QAAI,IAAA,CAAC,QAAQ,KAAO,EAAA;AAClB,UAAA,MAAM,IAAI,KAAA;AAAA,YACR;AAAA,WACF;AAAA;AAGF,QAAA,OAAO,IAAI,qBAAsB,CAAA;AAAA,UAC/B,MAAQ,EAAA;AAAA,YACN,sBAAsB,OAAQ,CAAA;AAAA;AAChC,SACD,CAAA;AAAA,OACH;AAAA;AACF,GACD,CAAA;AAAA,CA1BY,EAAAD,sCAAA,KAAAA,sCAAA,GAAA,EAAA,CAAA,CAAA;;"}
\ No newline at end of file
+{"version":3,"file":"resolvers.cjs.js","sources":["../src/resolvers.ts"],"sourcesContent":["/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  createSignInResolverFactory,\n  handleSignInUserNotFound,\n  OAuthAuthenticatorResult,\n  PassportProfile,\n  SignInInfo,\n} from '@backstage/plugin-auth-node';\nimport { z } from 'zod';\n\n/**\n * Available sign-in resolvers for the Bitbucket Server auth provider.\n *\n * @public\n */\nexport namespace bitbucketServerSignInResolvers {\n  /**\n   * Looks up the user by matching their email to the entity email.\n   */\n  export const emailMatchingUserEntityProfileEmail =\n    createSignInResolverFactory({\n      optionsSchema: z\n        .object({\n          dangerouslyAllowSignInWithoutUserInCatalog: z.boolean().optional(),\n        })\n        .optional(),\n      create(options = {}) {\n        return async (\n          info: SignInInfo<OAuthAuthenticatorResult<PassportProfile>>,\n          ctx,\n        ) => {\n          const { profile } = info;\n\n          if (!profile.email) {\n            throw new Error(\n              'Login failed, user profile does not contain an email',\n            );\n          }\n\n          try {\n            return await ctx.signInWithCatalogUser({\n              filter: {\n                'spec.profile.email': profile.email,\n              },\n            });\n          } catch (error) {\n            return await handleSignInUserNotFound({\n              ctx,\n              error,\n              userEntityName: profile.email,\n              dangerouslyAllowSignInWithoutUserInCatalog:\n                options?.dangerouslyAllowSignInWithoutUserInCatalog,\n            });\n          }\n        };\n      },\n    });\n}\n"],"names":["bitbucketServerSignInResolvers","createSignInResolverFactory","z","handleSignInUserNotFound"],"mappings":";;;;;AA6BiBA;AAAA,CAAV,CAAUA,+BAAV,KAAA;AAIE,EAAMA,+BAAAA,CAAA,sCACXC,0CAA4B,CAAA;AAAA,IAC1B,aAAA,EAAeC,MACZ,MAAO,CAAA;AAAA,MACN,0CAA4C,EAAAA,KAAA,CAAE,OAAQ,EAAA,CAAE,QAAS;AAAA,KAClE,EACA,QAAS,EAAA;AAAA,IACZ,MAAA,CAAO,OAAU,GAAA,EAAI,EAAA;AACnB,MAAO,OAAA,OACL,MACA,GACG,KAAA;AACH,QAAM,MAAA,EAAE,SAAY,GAAA,IAAA;AAEpB,QAAI,IAAA,CAAC,QAAQ,KAAO,EAAA;AAClB,UAAA,MAAM,IAAI,KAAA;AAAA,YACR;AAAA,WACF;AAAA;AAGF,QAAI,IAAA;AACF,UAAO,OAAA,MAAM,IAAI,qBAAsB,CAAA;AAAA,YACrC,MAAQ,EAAA;AAAA,cACN,sBAAsB,OAAQ,CAAA;AAAA;AAChC,WACD,CAAA;AAAA,iBACM,KAAO,EAAA;AACd,UAAA,OAAO,MAAMC,uCAAyB,CAAA;AAAA,YACpC,GAAA;AAAA,YACA,KAAA;AAAA,YACA,gBAAgB,OAAQ,CAAA,KAAA;AAAA,YACxB,4CACE,OAAS,EAAA;AAAA,WACZ,CAAA;AAAA;AACH,OACF;AAAA;AACF,GACD,CAAA;AAAA,CAzCY,EAAAH,sCAAA,KAAAA,sCAAA,GAAA,EAAA,CAAA,CAAA;;"}
\ No newline at end of file
