diff --git a/dist/index.d.ts b/dist/index.d.ts
index ff0521a12ae6a15ebf1df629f5971dca68257dfa..dbcb8ad1d6de2958fed9a33d7a678c3473b9007d 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -23,6 +23,7 @@ import * as _backstage_plugin_scaffolder_common from '@backstage/plugin-scaffold
 import { TaskSpec, TaskRecovery, TemplateEntityStepV1beta3, TemplateParametersV1beta3 } from '@backstage/plugin-scaffolder-common';
 import { Logger } from 'winston';
 import { WorkspaceProvider, AutocompleteHandler } from '@backstage/plugin-scaffolder-node/alpha';
+import { AuditLogger } from '@janus-idp/backstage-plugin-audit-log-node';
 import { PermissionEvaluator, PermissionRuleParams } from '@backstage/plugin-permission-common';
 import { RESOURCE_TYPE_SCAFFOLDER_TEMPLATE, RESOURCE_TYPE_SCAFFOLDER_ACTION } from '@backstage/plugin-scaffolder-common/alpha';
 import express from 'express';
@@ -378,7 +379,7 @@ declare const createPublishGitlabMergeRequestAction: (options: {
     sourcePath?: string | undefined;
     targetPath?: string | undefined;
     token?: string | undefined;
-    commitAction?: "auto" | "update" | "delete" | "create" | "skip" | undefined;
+    commitAction?: "create" | "update" | "delete" | "skip" | "auto" | undefined;
     projectid?: string | undefined;
     removeSourceBranch?: boolean | undefined;
     assignee?: string | undefined;
@@ -711,11 +712,13 @@ declare class TaskManager implements TaskContext$1 {
     private readonly signal;
     private readonly logger;
     private readonly workspaceService;
+    private readonly auditLogger;
     private readonly auth?;
     private isDone;
     private heartbeatTimeoutId?;
-    static create(task: CurrentClaimedTask, storage: TaskStore, abortSignal: AbortSignal, logger: Logger, auth?: AuthService, config?: Config, additionalWorkspaceProviders?: Record<string, WorkspaceProvider>): TaskManager;
+    static create(task: CurrentClaimedTask, storage: TaskStore, abortSignal: AbortSignal, logger: Logger, auditLogger: AuditLogger, auth?: AuthService, config?: Config, additionalWorkspaceProviders?: Record<string, WorkspaceProvider>): TaskManager;
     private constructor();
+    get taskId(): string;
     get spec(): _backstage_plugin_scaffolder_common.TaskSpecV1beta3;
     get cancelSignal(): AbortSignal;
     get secrets(): TaskSecrets$1 | undefined;
@@ -790,6 +793,7 @@ type CreateWorkerOptions = {
     integrations: ScmIntegrations;
     workingDirectory: string;
     logger: Logger;
+    auditLogger: AuditLogger;
     additionalTemplateFilters?: Record<string, TemplateFilter$1>;
     /**
      * The number of tasks that can be executed at the same time by the worker
@@ -817,6 +821,7 @@ declare class TaskWorker {
     private taskQueue;
     private logger;
     private stopWorkers;
+    private auditLogger;
     private constructor();
     static create(options: CreateWorkerOptions): Promise<TaskWorker>;
     recoverTasks(): Promise<void>;
diff --git a/dist/scaffolder/dryrun/createDryRunner.cjs.js b/dist/scaffolder/dryrun/createDryRunner.cjs.js
index b62685bf4f732cfd5a59448e4806d0886f0f1871..95b283f30d842b47adeeb0f5e0de3635367bd128 100644
--- a/dist/scaffolder/dryrun/createDryRunner.cjs.js
+++ b/dist/scaffolder/dryrun/createDryRunner.cjs.js
@@ -39,6 +39,7 @@ function createDryRunner(options) {
       await pluginScaffolderNode.deserializeDirectoryContents(contentsPath, input.directoryContents);
       const abortSignal = new AbortController().signal;
       const result = await workflowRunner.execute({
+        taskId: dryRunId,
         spec: {
           ...input.spec,
           steps: [
diff --git a/dist/scaffolder/dryrun/createDryRunner.cjs.js.map b/dist/scaffolder/dryrun/createDryRunner.cjs.js.map
index 961ae8d0ca5d4be82c4b52e109b6aa79d59a0467..6d02340804373b8c08d6f7198e8e71c016b1ac79 100644
--- a/dist/scaffolder/dryrun/createDryRunner.cjs.js.map
+++ b/dist/scaffolder/dryrun/createDryRunner.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"createDryRunner.cjs.js","sources":["../../../src/scaffolder/dryrun/createDryRunner.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ScmIntegrations } from '@backstage/integration';\nimport { TaskSpec } from '@backstage/plugin-scaffolder-common';\nimport { JsonObject } from '@backstage/types';\nimport { v4 as uuid } from 'uuid';\nimport { pathToFileURL } from 'url';\nimport { Logger } from 'winston';\nimport {\n  createTemplateAction,\n  TaskSecrets,\n  TemplateFilter,\n  TemplateGlobal,\n  deserializeDirectoryContents,\n  SerializedFile,\n  serializeDirectoryContents,\n} from '@backstage/plugin-scaffolder-node';\nimport { TemplateActionRegistry } from '../actions';\nimport { NunjucksWorkflowRunner } from '../tasks/NunjucksWorkflowRunner';\nimport { DecoratedActionsRegistry } from './DecoratedActionsRegistry';\nimport fs from 'fs-extra';\nimport { PermissionEvaluator } from '@backstage/plugin-permission-common';\nimport {\n  BackstageCredentials,\n  resolveSafeChildPath,\n} from '@backstage/backend-plugin-api';\nimport type { UserEntity } from '@backstage/catalog-model';\n\ninterface DryRunInput {\n  spec: TaskSpec;\n  secrets?: TaskSecrets;\n  directoryContents: SerializedFile[];\n  credentials: BackstageCredentials;\n  user?: {\n    entity?: UserEntity;\n    ref?: string;\n  };\n}\n\ninterface DryRunResult {\n  log: Array<{ body: JsonObject }>;\n  directoryContents: SerializedFile[];\n  output: JsonObject;\n}\n\n/** @internal */\nexport type TemplateTesterCreateOptions = {\n  logger: Logger;\n  integrations: ScmIntegrations;\n  actionRegistry: TemplateActionRegistry;\n  workingDirectory: string;\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n  additionalTemplateGlobals?: Record<string, TemplateGlobal>;\n  permissions?: PermissionEvaluator;\n};\n\n/**\n * Executes a dry-run of the provided template.\n *\n * The provided content will be extracted into a temporary directory\n * which is then use as the base for any relative file fetch paths.\n *\n * @internal\n */\nexport function createDryRunner(options: TemplateTesterCreateOptions) {\n  return async function dryRun(input: DryRunInput): Promise<DryRunResult> {\n    let contentPromise;\n\n    const workflowRunner = new NunjucksWorkflowRunner({\n      ...options,\n      actionRegistry: new DecoratedActionsRegistry(options.actionRegistry, [\n        createTemplateAction({\n          id: 'dry-run:extract',\n          supportsDryRun: true,\n          async handler(ctx) {\n            contentPromise = serializeDirectoryContents(ctx.workspacePath);\n            await contentPromise.catch(() => {});\n          },\n        }),\n      ]),\n    });\n\n    const dryRunId = uuid();\n    const log = new Array<{ body: JsonObject }>();\n    const contentsPath = resolveSafeChildPath(\n      options.workingDirectory,\n      `dry-run-content-${dryRunId}`,\n    );\n\n    try {\n      await deserializeDirectoryContents(contentsPath, input.directoryContents);\n\n      const abortSignal = new AbortController().signal;\n\n      const result = await workflowRunner.execute({\n        spec: {\n          ...input.spec,\n          steps: [\n            ...input.spec.steps,\n            {\n              id: dryRunId,\n              name: 'dry-run:extract',\n              action: 'dry-run:extract',\n            },\n          ],\n          templateInfo: {\n            entityRef: 'template:default/dry-run',\n            baseUrl: pathToFileURL(\n              resolveSafeChildPath(contentsPath, 'template.yaml'),\n            ).toString(),\n          },\n        },\n        secrets: input.secrets,\n        getInitiatorCredentials: () => Promise.resolve(input.credentials),\n        // No need to update this at the end of the run, so just hard-code it\n        done: false,\n        isDryRun: true,\n        getWorkspaceName: async () => `dry-run-${dryRunId}`,\n        cancelSignal: abortSignal,\n        async emitLog(message: string, logMetadata?: JsonObject) {\n          if (logMetadata?.stepId === dryRunId) {\n            return;\n          }\n          log.push({\n            body: {\n              ...logMetadata,\n              message,\n            },\n          });\n        },\n        complete: async () => {\n          throw new Error('Not implemented');\n        },\n      });\n\n      if (!contentPromise) {\n        throw new Error('Content extraction step was skipped');\n      }\n      const directoryContents = await contentPromise;\n\n      return {\n        log,\n        directoryContents,\n        output: result.output,\n      };\n    } finally {\n      await fs.remove(contentsPath);\n    }\n  };\n}\n"],"names":["NunjucksWorkflowRunner","DecoratedActionsRegistry","createTemplateAction","serializeDirectoryContents","uuid","resolveSafeChildPath","deserializeDirectoryContents","pathToFileURL","fs"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"createDryRunner.cjs.js","sources":["../../../src/scaffolder/dryrun/createDryRunner.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ScmIntegrations } from '@backstage/integration';\nimport { TaskSpec } from '@backstage/plugin-scaffolder-common';\nimport { JsonObject } from '@backstage/types';\nimport { v4 as uuid } from 'uuid';\nimport { pathToFileURL } from 'url';\nimport { Logger } from 'winston';\nimport {\n  createTemplateAction,\n  TaskSecrets,\n  TemplateFilter,\n  TemplateGlobal,\n  deserializeDirectoryContents,\n  SerializedFile,\n  serializeDirectoryContents,\n} from '@backstage/plugin-scaffolder-node';\nimport { TemplateActionRegistry } from '../actions';\nimport { NunjucksWorkflowRunner } from '../tasks/NunjucksWorkflowRunner';\nimport { DecoratedActionsRegistry } from './DecoratedActionsRegistry';\nimport fs from 'fs-extra';\nimport { PermissionEvaluator } from '@backstage/plugin-permission-common';\nimport {\n  BackstageCredentials,\n  resolveSafeChildPath,\n} from '@backstage/backend-plugin-api';\nimport type { UserEntity } from '@backstage/catalog-model';\nimport { AuditLogger } from '@janus-idp/backstage-plugin-audit-log-node';\n\ninterface DryRunInput {\n  spec: TaskSpec;\n  secrets?: TaskSecrets;\n  directoryContents: SerializedFile[];\n  credentials: BackstageCredentials;\n  user?: {\n    entity?: UserEntity;\n    ref?: string;\n  };\n}\n\ninterface DryRunResult {\n  log: Array<{ body: JsonObject }>;\n  directoryContents: SerializedFile[];\n  output: JsonObject;\n}\n\n/** @internal */\nexport type TemplateTesterCreateOptions = {\n  logger: Logger;\n  auditLogger: AuditLogger;\n  integrations: ScmIntegrations;\n  actionRegistry: TemplateActionRegistry;\n  workingDirectory: string;\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n  additionalTemplateGlobals?: Record<string, TemplateGlobal>;\n  permissions?: PermissionEvaluator;\n};\n\n/**\n * Executes a dry-run of the provided template.\n *\n * The provided content will be extracted into a temporary directory\n * which is then use as the base for any relative file fetch paths.\n *\n * @internal\n */\nexport function createDryRunner(options: TemplateTesterCreateOptions) {\n  return async function dryRun(input: DryRunInput): Promise<DryRunResult> {\n    let contentPromise;\n\n    const workflowRunner = new NunjucksWorkflowRunner({\n      ...options,\n      actionRegistry: new DecoratedActionsRegistry(options.actionRegistry, [\n        createTemplateAction({\n          id: 'dry-run:extract',\n          supportsDryRun: true,\n          async handler(ctx) {\n            contentPromise = serializeDirectoryContents(ctx.workspacePath);\n            await contentPromise.catch(() => {});\n          },\n        }),\n      ]),\n    });\n\n    const dryRunId = uuid();\n    const log = new Array<{ body: JsonObject }>();\n    const contentsPath = resolveSafeChildPath(\n      options.workingDirectory,\n      `dry-run-content-${dryRunId}`,\n    );\n\n    try {\n      await deserializeDirectoryContents(contentsPath, input.directoryContents);\n\n      const abortSignal = new AbortController().signal;\n\n      const result = await workflowRunner.execute({\n        taskId: dryRunId,\n        spec: {\n          ...input.spec,\n          steps: [\n            ...input.spec.steps,\n            {\n              id: dryRunId,\n              name: 'dry-run:extract',\n              action: 'dry-run:extract',\n            },\n          ],\n          templateInfo: {\n            entityRef: 'template:default/dry-run',\n            baseUrl: pathToFileURL(\n              resolveSafeChildPath(contentsPath, 'template.yaml'),\n            ).toString(),\n          },\n        },\n        secrets: input.secrets,\n        getInitiatorCredentials: () => Promise.resolve(input.credentials),\n        // No need to update this at the end of the run, so just hard-code it\n        done: false,\n        isDryRun: true,\n        getWorkspaceName: async () => `dry-run-${dryRunId}`,\n        cancelSignal: abortSignal,\n        async emitLog(message: string, logMetadata?: JsonObject) {\n          if (logMetadata?.stepId === dryRunId) {\n            return;\n          }\n          log.push({\n            body: {\n              ...logMetadata,\n              message,\n            },\n          });\n        },\n        complete: async () => {\n          throw new Error('Not implemented');\n        },\n      });\n\n      if (!contentPromise) {\n        throw new Error('Content extraction step was skipped');\n      }\n      const directoryContents = await contentPromise;\n\n      return {\n        log,\n        directoryContents,\n        output: result.output,\n      };\n    } finally {\n      await fs.remove(contentsPath);\n    }\n  };\n}\n"],"names":["NunjucksWorkflowRunner","DecoratedActionsRegistry","createTemplateAction","serializeDirectoryContents","uuid","resolveSafeChildPath","deserializeDirectoryContents","pathToFileURL","fs"],"mappings":";;;;;;;;;;;;;;AAgFO,SAAS,gBAAgB,OAAsC,EAAA;AACpE,EAAO,OAAA,eAAe,OAAO,KAA2C,EAAA;AACtE,IAAI,IAAA,cAAA,CAAA;AAEJ,IAAM,MAAA,cAAA,GAAiB,IAAIA,6CAAuB,CAAA;AAAA,MAChD,GAAG,OAAA;AAAA,MACH,cAAgB,EAAA,IAAIC,iDAAyB,CAAA,OAAA,CAAQ,cAAgB,EAAA;AAAA,QACnEC,yCAAqB,CAAA;AAAA,UACnB,EAAI,EAAA,iBAAA;AAAA,UACJ,cAAgB,EAAA,IAAA;AAAA,UAChB,MAAM,QAAQ,GAAK,EAAA;AACjB,YAAiB,cAAA,GAAAC,+CAAA,CAA2B,IAAI,aAAa,CAAA,CAAA;AAC7D,YAAM,MAAA,cAAA,CAAe,MAAM,MAAM;AAAA,aAAE,CAAA,CAAA;AAAA,WACrC;AAAA,SACD,CAAA;AAAA,OACF,CAAA;AAAA,KACF,CAAA,CAAA;AAED,IAAA,MAAM,WAAWC,OAAK,EAAA,CAAA;AACtB,IAAM,MAAA,GAAA,GAAM,IAAI,KAA4B,EAAA,CAAA;AAC5C,IAAA,MAAM,YAAe,GAAAC,qCAAA;AAAA,MACnB,OAAQ,CAAA,gBAAA;AAAA,MACR,mBAAmB,QAAQ,CAAA,CAAA;AAAA,KAC7B,CAAA;AAEA,IAAI,IAAA;AACF,MAAM,MAAAC,iDAAA,CAA6B,YAAc,EAAA,KAAA,CAAM,iBAAiB,CAAA,CAAA;AAExE,MAAM,MAAA,WAAA,GAAc,IAAI,eAAA,EAAkB,CAAA,MAAA,CAAA;AAE1C,MAAM,MAAA,MAAA,GAAS,MAAM,cAAA,CAAe,OAAQ,CAAA;AAAA,QAC1C,MAAQ,EAAA,QAAA;AAAA,QACR,IAAM,EAAA;AAAA,UACJ,GAAG,KAAM,CAAA,IAAA;AAAA,UACT,KAAO,EAAA;AAAA,YACL,GAAG,MAAM,IAAK,CAAA,KAAA;AAAA,YACd;AAAA,cACE,EAAI,EAAA,QAAA;AAAA,cACJ,IAAM,EAAA,iBAAA;AAAA,cACN,MAAQ,EAAA,iBAAA;AAAA,aACV;AAAA,WACF;AAAA,UACA,YAAc,EAAA;AAAA,YACZ,SAAW,EAAA,0BAAA;AAAA,YACX,OAAS,EAAAC,iBAAA;AAAA,cACPF,qCAAA,CAAqB,cAAc,eAAe,CAAA;AAAA,cAClD,QAAS,EAAA;AAAA,WACb;AAAA,SACF;AAAA,QACA,SAAS,KAAM,CAAA,OAAA;AAAA,QACf,uBAAyB,EAAA,MAAM,OAAQ,CAAA,OAAA,CAAQ,MAAM,WAAW,CAAA;AAAA;AAAA,QAEhE,IAAM,EAAA,KAAA;AAAA,QACN,QAAU,EAAA,IAAA;AAAA,QACV,gBAAA,EAAkB,YAAY,CAAA,QAAA,EAAW,QAAQ,CAAA,CAAA;AAAA,QACjD,YAAc,EAAA,WAAA;AAAA,QACd,MAAM,OAAQ,CAAA,OAAA,EAAiB,WAA0B,EAAA;AACvD,UAAI,IAAA,WAAA,EAAa,WAAW,QAAU,EAAA;AACpC,YAAA,OAAA;AAAA,WACF;AACA,UAAA,GAAA,CAAI,IAAK,CAAA;AAAA,YACP,IAAM,EAAA;AAAA,cACJ,GAAG,WAAA;AAAA,cACH,OAAA;AAAA,aACF;AAAA,WACD,CAAA,CAAA;AAAA,SACH;AAAA,QACA,UAAU,YAAY;AACpB,UAAM,MAAA,IAAI,MAAM,iBAAiB,CAAA,CAAA;AAAA,SACnC;AAAA,OACD,CAAA,CAAA;AAED,MAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,QAAM,MAAA,IAAI,MAAM,qCAAqC,CAAA,CAAA;AAAA,OACvD;AACA,MAAA,MAAM,oBAAoB,MAAM,cAAA,CAAA;AAEhC,MAAO,OAAA;AAAA,QACL,GAAA;AAAA,QACA,iBAAA;AAAA,QACA,QAAQ,MAAO,CAAA,MAAA;AAAA,OACjB,CAAA;AAAA,KACA,SAAA;AACA,MAAM,MAAAG,mBAAA,CAAG,OAAO,YAAY,CAAA,CAAA;AAAA,KAC9B;AAAA,GACF,CAAA;AACF;;;;"}
\ No newline at end of file
diff --git a/dist/scaffolder/tasks/NunjucksWorkflowRunner.cjs.js b/dist/scaffolder/tasks/NunjucksWorkflowRunner.cjs.js
index eed6830ca6e3f3dd18cd0bad3dcaf1b3f36bd1ac..0b3eca651b23f6de6384412d62d57c4929fb0166 100644
--- a/dist/scaffolder/tasks/NunjucksWorkflowRunner.cjs.js
+++ b/dist/scaffolder/tasks/NunjucksWorkflowRunner.cjs.js
@@ -79,9 +79,10 @@ class NunjucksWorkflowRunner {
     this.defaultTemplateFilters = filters.createDefaultFilters({
       integrations: this.options.integrations
     });
+    this.tracker = scaffoldingTracker(this.options.auditLogger);
   }
   defaultTemplateFilters;
-  tracker = scaffoldingTracker();
+  tracker;
   isSingleTemplateString(input) {
     const { parser, nodes } = nunjucks__default.default;
     const parsed = parser.parse(
@@ -133,34 +134,63 @@ class NunjucksWorkflowRunner {
   async executeStep(task, step, context, renderTemplate, taskTrack, workspacePath, decision) {
     const stepTrack = await this.tracker.stepStart(task, step);
     if (task.cancelSignal.aborted) {
-      throw new Error(`Step ${step.name} has been cancelled.`);
+      throw new Error(
+        `Step ${step.id} (${step.name}) of task ${task.taskId} has been cancelled.`
+      );
     }
     try {
-      if (step.if === false || typeof step.if === "string" && !helper.isTruthy(this.render(step.if, context, renderTemplate))) {
-        await stepTrack.skipFalsy();
-        return;
-      }
       const action = this.options.actionRegistry.get(step.action);
       const { taskLogger, streamLogger } = createStepLogger({
         task,
         step,
         rootLogger: this.options.logger
       });
+      const redactedSecrets = Object.fromEntries(
+        Object.entries(task.secrets ?? {}).map((secret) => [secret[0], "***"])
+      );
+      const stepInputs = (step.input && this.render(
+        step.input,
+        {
+          ...context,
+          secrets: redactedSecrets
+        },
+        renderTemplate
+      )) ?? {};
+      const commonStepAuditMetadata = {
+        templateRef: task.spec.templateInfo?.entityRef || "",
+        taskId: task.taskId,
+        stepId: step.id,
+        stepName: step.name,
+        stepAction: step.action,
+        stepInputs,
+        stepConditional: step.if,
+        stepEach: step.each,
+        isDryRun: task.isDryRun || false
+      };
+      if (step.if === false || typeof step.if === "string" && !helper.isTruthy(this.render(step.if, context, renderTemplate))) {
+        await stepTrack.skipFalsy();
+        await this.options.auditLogger.auditLog({
+          eventName: "ScaffolderTaskStepSkip",
+          actorId: "scaffolder-backend",
+          stage: "completion",
+          status: "succeeded",
+          metadata: commonStepAuditMetadata,
+          message: `Skipped step ${step.name} (id: ${step.id}) of task ${task.taskId}`
+        });
+        return;
+      }
+      await this.options.auditLogger.auditLog({
+        actorId: "scaffolder-backend",
+        eventName: "ScaffolderTaskStepExecution",
+        stage: "initiation",
+        status: "succeeded",
+        metadata: commonStepAuditMetadata,
+        message: `Started ${step.name} (id: ${step.id}) of task ${task.taskId} triggering the ${step.action} action`
+      });
       if (task.isDryRun) {
-        const redactedSecrets = Object.fromEntries(
-          Object.entries(task.secrets ?? {}).map((secret) => [secret[0], "***"])
-        );
-        const debugInput = (step.input && this.render(
-          step.input,
-          {
-            ...context,
-            secrets: redactedSecrets
-          },
-          renderTemplate
-        )) ?? {};
         taskLogger.info(
           `Running ${action.id} in dry-run mode with inputs (secrets redacted): ${JSON.stringify(
-            debugInput,
+            stepInputs,
             void 0,
             2
           )}`
@@ -221,6 +251,7 @@ class NunjucksWorkflowRunner {
       const tmpDirs = new Array();
       const stepOutput = {};
       const prevTaskState = await task.getTaskState?.();
+      let iterationCount = 0;
       for (const iteration of iterations) {
         if (iteration.each) {
           taskLogger.info(
@@ -230,6 +261,22 @@ class NunjucksWorkflowRunner {
               0
             )}`
           );
+          await this.options.auditLogger.auditLog({
+            actorId: "scaffolder-backend",
+            eventName: "ScaffolderTaskStepIteration",
+            stage: "initiation",
+            status: "succeeded",
+            metadata: {
+              ...commonStepAuditMetadata,
+              stepInputs: void 0,
+              stepAction: `${step.action}[${iteration.each.key}]`,
+              stepIterationInputs: iteration.input,
+              stepIterationCount: ++iterationCount,
+              stepIterationValue: iteration.each.value,
+              totalIterations: iterations.length
+            },
+            message: `Iteration ${iterationCount}/${iterations.length} of action ${step.action} of step ${step.name} (id: ${step.id}) of task ${task.taskId} started`
+          });
         }
         await action.handler({
           input: iteration.input,
@@ -289,18 +336,38 @@ class NunjucksWorkflowRunner {
           signal: task.cancelSignal,
           getInitiatorCredentials: () => task.getInitiatorCredentials()
         });
+        if (iteration.each) {
+          await this.options.auditLogger.auditLog({
+            actorId: "scaffolder-backend",
+            eventName: "ScaffolderTaskStepIteration",
+            stage: "completion",
+            status: "succeeded",
+            metadata: {
+              ...commonStepAuditMetadata,
+              stepInputs: void 0,
+              stepAction: `${step.action}[${iteration.each.key}]`,
+              stepIterationCount: iterationCount,
+              stepIterationValue: iteration.each.value,
+              stepIterationInputs: iteration.input,
+              totalIterations: iterations.length
+            },
+            message: `Iteration ${iterationCount}/${iterations.length} of action ${step.action} of step ${step.name} (id: ${step.id}) of task ${task.taskId} succeeded`
+          });
+        }
       }
       for (const tmpDir of tmpDirs) {
         await fs__default.default.remove(tmpDir);
       }
       context.steps[step.id] = { output: stepOutput };
       if (task.cancelSignal.aborted) {
-        throw new Error(`Step ${step.name} has been cancelled.`);
+        throw new Error(
+          `Step ${step.id} (${step.name}) of task ${task.taskId} has been cancelled.`
+        );
       }
       await stepTrack.markSuccessful();
     } catch (err) {
       await taskTrack.markFailed(step, err);
-      await stepTrack.markFailed();
+      await stepTrack.markFailed(err);
       throw err;
     } finally {
       await task.serializeWorkspace?.({ path: workspacePath });
@@ -357,7 +424,7 @@ class NunjucksWorkflowRunner {
     }
   }
 }
-function scaffoldingTracker() {
+function scaffoldingTracker(auditLogger) {
   const promTaskCount = metrics.createCounterMetric({
     name: "scaffolder_task_count",
     help: "Count of task runs",
@@ -492,6 +559,21 @@ function scaffoldingTracker() {
       stepDuration.record(endTime(), {
         result: "ok"
       });
+      await auditLogger.auditLog({
+        actorId: "scaffolder-backend",
+        eventName: "ScaffolderTaskStepExecution",
+        stage: "completion",
+        status: "succeeded",
+        metadata: {
+          templateRef: template,
+          taskId: task.taskId,
+          stepId: step.id,
+          stepName: step.name,
+          stepAction: step.action,
+          isDryRun: task.isDryRun || false
+        },
+        message: `Step ${step.name} (id: ${step.id}) of task ${task.taskId} succeeded`
+      });
     }
     async function markCancelled() {
       promtStepCount.inc({
@@ -505,7 +587,7 @@ function scaffoldingTracker() {
         result: "cancelled"
       });
     }
-    async function markFailed() {
+    async function markFailed(err) {
       promtStepCount.inc({
         template,
         step: step.name,
@@ -516,6 +598,29 @@ function scaffoldingTracker() {
       stepDuration.record(endTime(), {
         result: "failed"
       });
+      await auditLogger.auditLog({
+        actorId: "scaffolder-backend",
+        eventName: "ScaffolderTaskStepExecution",
+        stage: "completion",
+        status: "failed",
+        level: "error",
+        metadata: {
+          templateRef: template,
+          taskId: task.taskId,
+          stepId: step.id,
+          stepName: step.name,
+          stepAction: step.action,
+          isDryRun: task.isDryRun || false
+        },
+        errors: [
+          {
+            name: err.name,
+            message: err.message,
+            stack: err.stack
+          }
+        ],
+        message: `Step ${step.name} (id: ${step.id}) of task ${task.taskId} failed`
+      });
     }
     async function skipFalsy() {
       await task.emitLog(
diff --git a/dist/scaffolder/tasks/NunjucksWorkflowRunner.cjs.js.map b/dist/scaffolder/tasks/NunjucksWorkflowRunner.cjs.js.map
index 427b1b440f43e0f5773f93dc44358838162b34f0..ba4def6722d29e51ad274a03a8725fb53f22f33b 100644
--- a/dist/scaffolder/tasks/NunjucksWorkflowRunner.cjs.js.map
+++ b/dist/scaffolder/tasks/NunjucksWorkflowRunner.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"NunjucksWorkflowRunner.cjs.js","sources":["../../../src/scaffolder/tasks/NunjucksWorkflowRunner.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ScmIntegrations } from '@backstage/integration';\nimport { TaskTrackType, WorkflowResponse, WorkflowRunner } from './types';\nimport * as winston from 'winston';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport nunjucks from 'nunjucks';\nimport { JsonArray, JsonObject, JsonValue } from '@backstage/types';\nimport { InputError, NotAllowedError, stringifyError } from '@backstage/errors';\nimport { PassThrough } from 'stream';\nimport { generateExampleOutput, isTruthy } from './helper';\nimport { validate as validateJsonSchema } from 'jsonschema';\nimport { TemplateActionRegistry } from '../actions';\nimport { metrics } from '@opentelemetry/api';\nimport {\n  SecureTemplater,\n  SecureTemplateRenderer,\n} from '../../lib/templating/SecureTemplater';\nimport {\n  TaskRecovery,\n  TaskSpec,\n  TaskSpecV1beta3,\n  TaskStep,\n} from '@backstage/plugin-scaffolder-common';\n\nimport {\n  TemplateAction,\n  TemplateFilter,\n  TemplateGlobal,\n  TaskContext,\n} from '@backstage/plugin-scaffolder-node';\nimport { createConditionAuthorizer } from '@backstage/plugin-permission-node';\nimport { UserEntity } from '@backstage/catalog-model';\nimport { createCounterMetric, createHistogramMetric } from '../../util/metrics';\nimport { createDefaultFilters } from '../../lib/templating/filters';\nimport {\n  AuthorizeResult,\n  PolicyDecision,\n} from '@backstage/plugin-permission-common';\nimport { scaffolderActionRules } from '../../service/rules';\nimport { actionExecutePermission } from '@backstage/plugin-scaffolder-common/alpha';\nimport { PermissionsService } from '@backstage/backend-plugin-api';\nimport { loggerToWinstonLogger } from '@backstage/backend-common';\nimport { BackstageLoggerTransport, WinstonLogger } from './logger';\n\ntype NunjucksWorkflowRunnerOptions = {\n  workingDirectory: string;\n  actionRegistry: TemplateActionRegistry;\n  integrations: ScmIntegrations;\n  logger: winston.Logger;\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n  additionalTemplateGlobals?: Record<string, TemplateGlobal>;\n  permissions?: PermissionsService;\n};\n\ntype TemplateContext = {\n  parameters: JsonObject;\n  EXPERIMENTAL_recovery?: TaskRecovery;\n  steps: {\n    [stepName: string]: { output: { [outputName: string]: JsonValue } };\n  };\n  secrets?: Record<string, string>;\n  user?: {\n    entity?: UserEntity;\n    ref?: string;\n  };\n  each?: JsonValue;\n};\n\ntype CheckpointState =\n  | {\n      status: 'failed';\n      reason: string;\n    }\n  | {\n      status: 'success';\n      value: JsonValue;\n    };\n\nconst isValidTaskSpec = (taskSpec: TaskSpec): taskSpec is TaskSpecV1beta3 => {\n  return taskSpec.apiVersion === 'scaffolder.backstage.io/v1beta3';\n};\n\nconst createStepLogger = ({\n  task,\n  step,\n  rootLogger,\n}: {\n  task: TaskContext;\n  step: TaskStep;\n  rootLogger: winston.Logger;\n}) => {\n  const taskLogger = WinstonLogger.create({\n    level: process.env.LOG_LEVEL || 'info',\n    format: winston.format.combine(\n      winston.format.colorize(),\n      winston.format.simple(),\n    ),\n    transports: [new BackstageLoggerTransport(rootLogger, task, step.id)],\n  });\n\n  taskLogger.addRedactions(Object.values(task.secrets ?? {}));\n\n  // This stream logger should be deprecated. We're going to replace it with\n  // just using the logger directly, as all those logs get written to step logs\n  // using the stepLogStream above.\n  // Initially this stream used to be the only way to write to the client logs, but that\n  // has changed over time, there's not really a need for this anymore.\n  // You can just create a simple wrapper like the below in your action to write to the main logger.\n  // This way we also get recactions for free.\n  const streamLogger = new PassThrough();\n  streamLogger.on('data', async data => {\n    const message = data.toString().trim();\n    if (message?.length > 1) {\n      taskLogger.info(message);\n    }\n  });\n\n  return { taskLogger, streamLogger };\n};\n\nconst isActionAuthorized = createConditionAuthorizer(\n  Object.values(scaffolderActionRules),\n);\n\nexport class NunjucksWorkflowRunner implements WorkflowRunner {\n  private readonly defaultTemplateFilters: Record<string, TemplateFilter>;\n\n  constructor(private readonly options: NunjucksWorkflowRunnerOptions) {\n    this.defaultTemplateFilters = createDefaultFilters({\n      integrations: this.options.integrations,\n    });\n  }\n\n  private readonly tracker = scaffoldingTracker();\n\n  private isSingleTemplateString(input: string) {\n    const { parser, nodes } = nunjucks as unknown as {\n      parser: {\n        parse(\n          template: string,\n          ctx: object,\n          options: nunjucks.ConfigureOptions,\n        ): { children: { children?: unknown[] }[] };\n      };\n      nodes: { TemplateData: Function };\n    };\n\n    const parsed = parser.parse(\n      input,\n      {},\n      {\n        autoescape: false,\n        tags: {\n          variableStart: '${{',\n          variableEnd: '}}',\n        },\n      },\n    );\n\n    return (\n      parsed.children.length === 1 &&\n      !(parsed.children[0]?.children?.[0] instanceof nodes.TemplateData)\n    );\n  }\n\n  private render<T>(\n    input: T,\n    context: TemplateContext,\n    renderTemplate: SecureTemplateRenderer,\n  ): T {\n    return JSON.parse(JSON.stringify(input), (_key, value) => {\n      try {\n        if (typeof value === 'string') {\n          try {\n            if (this.isSingleTemplateString(value)) {\n              // Lets convert ${{ parameters.bob }} to ${{ (parameters.bob) | dump }} so we can keep the input type\n              const wrappedDumped = value.replace(\n                /\\${{(.+)}}/g,\n                '${{ ( $1 ) | dump }}',\n              );\n\n              // Run the templating\n              const templated = renderTemplate(wrappedDumped, context);\n\n              // If there's an empty string returned, then it's undefined\n              if (templated === '') {\n                return undefined;\n              }\n\n              // Reparse the dumped string\n              return JSON.parse(templated);\n            }\n          } catch (ex) {\n            this.options.logger.error(\n              `Failed to parse template string: ${value} with error ${ex.message}`,\n            );\n          }\n\n          // Fallback to default behaviour\n          const templated = renderTemplate(value, context);\n\n          if (templated === '') {\n            return undefined;\n          }\n\n          return templated;\n        }\n      } catch {\n        return value;\n      }\n      return value;\n    });\n  }\n\n  async executeStep(\n    task: TaskContext,\n    step: TaskStep,\n    context: TemplateContext,\n    renderTemplate: (template: string, values: unknown) => string,\n    taskTrack: TaskTrackType,\n    workspacePath: string,\n    decision: PolicyDecision,\n  ) {\n    const stepTrack = await this.tracker.stepStart(task, step);\n\n    if (task.cancelSignal.aborted) {\n      throw new Error(`Step ${step.name} has been cancelled.`);\n    }\n\n    try {\n      if (\n        step.if === false ||\n        (typeof step.if === 'string' &&\n          !isTruthy(this.render(step.if, context, renderTemplate)))\n      ) {\n        await stepTrack.skipFalsy();\n        return;\n      }\n      const action: TemplateAction<JsonObject> =\n        this.options.actionRegistry.get(step.action);\n      const { taskLogger, streamLogger } = createStepLogger({\n        task,\n        step,\n        rootLogger: this.options.logger,\n      });\n\n      if (task.isDryRun) {\n        const redactedSecrets = Object.fromEntries(\n          Object.entries(task.secrets ?? {}).map(secret => [secret[0], '***']),\n        );\n        const debugInput =\n          (step.input &&\n            this.render(\n              step.input,\n              {\n                ...context,\n                secrets: redactedSecrets,\n              },\n              renderTemplate,\n            )) ??\n          {};\n        taskLogger.info(\n          `Running ${\n            action.id\n          } in dry-run mode with inputs (secrets redacted): ${JSON.stringify(\n            debugInput,\n            undefined,\n            2,\n          )}`,\n        );\n        if (!action.supportsDryRun) {\n          await taskTrack.skipDryRun(step, action);\n          const outputSchema = action.schema?.output;\n          if (outputSchema) {\n            context.steps[step.id] = {\n              output: generateExampleOutput(outputSchema) as {\n                [name in string]: JsonValue;\n              },\n            };\n          } else {\n            context.steps[step.id] = { output: {} };\n          }\n          return;\n        }\n      }\n      const iterations = (\n        step.each\n          ? Object.entries(this.render(step.each, context, renderTemplate)).map(\n              ([key, value]) => ({\n                each: { key, value },\n              }),\n            )\n          : [{}]\n      ).map(i => ({\n        ...i,\n        // Secrets are only passed when templating the input to actions for security reasons\n        input: step.input\n          ? this.render(\n              step.input,\n              { ...context, secrets: task.secrets ?? {}, ...i },\n              renderTemplate,\n            )\n          : {},\n      }));\n      for (const iteration of iterations) {\n        const actionId = `${action.id}${\n          iteration.each ? `[${iteration.each.key}]` : ''\n        }`;\n\n        if (action.schema?.input) {\n          const validateResult = validateJsonSchema(\n            iteration.input,\n            action.schema.input,\n          );\n          if (!validateResult.valid) {\n            const errors = validateResult.errors.join(', ');\n            throw new InputError(\n              `Invalid input passed to action ${actionId}, ${errors}`,\n            );\n          }\n        }\n        if (\n          !isActionAuthorized(decision, {\n            action: action.id,\n            input: iteration.input,\n          })\n        ) {\n          throw new NotAllowedError(\n            `Unauthorized action: ${actionId}. The action is not allowed. Input: ${JSON.stringify(\n              iteration.input,\n              null,\n              2,\n            )}`,\n          );\n        }\n      }\n      const tmpDirs = new Array<string>();\n      const stepOutput: { [outputName: string]: JsonValue } = {};\n      const prevTaskState = await task.getTaskState?.();\n\n      for (const iteration of iterations) {\n        if (iteration.each) {\n          taskLogger.info(\n            `Running step each: ${JSON.stringify(\n              iteration.each,\n              (k, v) => (k ? v.toString() : v),\n              0,\n            )}`,\n          );\n        }\n        await action.handler({\n          input: iteration.input,\n          secrets: task.secrets ?? {},\n          // TODO(blam): move to LoggerService and away from Winston\n          logger: loggerToWinstonLogger(taskLogger),\n          logStream: streamLogger,\n          workspacePath,\n          async checkpoint<U extends JsonValue>(\n            keySuffix: string,\n            fn: () => Promise<U>,\n          ) {\n            const key = `v1.task.checkpoint.${step.id}.${keySuffix}`;\n            try {\n              let prevValue: U | undefined;\n              if (prevTaskState) {\n                const prevState = (\n                  prevTaskState.state?.checkpoints as {\n                    [key: string]: CheckpointState;\n                  }\n                )?.[key];\n                if (prevState && prevState.status === 'success') {\n                  prevValue = prevState.value as U;\n                }\n              }\n\n              const value = prevValue ? prevValue : await fn();\n\n              if (!prevValue) {\n                task.updateCheckpoint?.({\n                  key,\n                  status: 'success',\n                  value,\n                });\n              }\n              return value;\n            } catch (err) {\n              task.updateCheckpoint?.({\n                key,\n                status: 'failed',\n                reason: stringifyError(err),\n              });\n              throw err;\n            } finally {\n              await task.serializeWorkspace?.({ path: workspacePath });\n            }\n          },\n          createTemporaryDirectory: async () => {\n            const tmpDir = await fs.mkdtemp(\n              `${workspacePath}_step-${step.id}-`,\n            );\n            tmpDirs.push(tmpDir);\n            return tmpDir;\n          },\n          output(name: string, value: JsonValue) {\n            if (step.each) {\n              stepOutput[name] = stepOutput[name] || [];\n              (stepOutput[name] as JsonArray).push(value);\n            } else {\n              stepOutput[name] = value;\n            }\n          },\n          templateInfo: task.spec.templateInfo,\n          user: task.spec.user,\n          isDryRun: task.isDryRun,\n          signal: task.cancelSignal,\n          getInitiatorCredentials: () => task.getInitiatorCredentials(),\n        });\n      }\n\n      // Remove all temporary directories that were created when executing the action\n      for (const tmpDir of tmpDirs) {\n        await fs.remove(tmpDir);\n      }\n\n      context.steps[step.id] = { output: stepOutput };\n\n      if (task.cancelSignal.aborted) {\n        throw new Error(`Step ${step.name} has been cancelled.`);\n      }\n\n      await stepTrack.markSuccessful();\n    } catch (err) {\n      await taskTrack.markFailed(step, err);\n      await stepTrack.markFailed();\n      throw err;\n    } finally {\n      await task.serializeWorkspace?.({ path: workspacePath });\n    }\n  }\n\n  async execute(task: TaskContext): Promise<WorkflowResponse> {\n    if (!isValidTaskSpec(task.spec)) {\n      throw new InputError(\n        'Wrong template version executed with the workflow engine',\n      );\n    }\n    const taskId = await task.getWorkspaceName();\n\n    const workspacePath = path.join(this.options.workingDirectory, taskId);\n\n    const { additionalTemplateFilters, additionalTemplateGlobals } =\n      this.options;\n\n    const renderTemplate = await SecureTemplater.loadRenderer({\n      templateFilters: {\n        ...this.defaultTemplateFilters,\n        ...additionalTemplateFilters,\n      },\n      templateGlobals: additionalTemplateGlobals,\n    });\n\n    try {\n      await task.rehydrateWorkspace?.({ taskId, targetPath: workspacePath });\n\n      const taskTrack = await this.tracker.taskStart(task);\n      await fs.ensureDir(workspacePath);\n\n      const context: TemplateContext = {\n        parameters: task.spec.parameters,\n        steps: {},\n        user: task.spec.user,\n      };\n\n      const [decision]: PolicyDecision[] =\n        this.options.permissions && task.spec.steps.length\n          ? await this.options.permissions.authorizeConditional(\n              [{ permission: actionExecutePermission }],\n              { credentials: await task.getInitiatorCredentials() },\n            )\n          : [{ result: AuthorizeResult.ALLOW }];\n\n      for (const step of task.spec.steps) {\n        await this.executeStep(\n          task,\n          step,\n          context,\n          renderTemplate,\n          taskTrack,\n          workspacePath,\n          decision,\n        );\n      }\n\n      const output = this.render(task.spec.output, context, renderTemplate);\n      await taskTrack.markSuccessful();\n      await task.cleanWorkspace?.();\n\n      return { output };\n    } finally {\n      if (workspacePath) {\n        await fs.remove(workspacePath);\n      }\n    }\n  }\n}\n\nfunction scaffoldingTracker() {\n  // prom-client metrics are deprecated in favour of OpenTelemetry metrics.\n  const promTaskCount = createCounterMetric({\n    name: 'scaffolder_task_count',\n    help: 'Count of task runs',\n    labelNames: ['template', 'user', 'result'],\n  });\n  const promTaskDuration = createHistogramMetric({\n    name: 'scaffolder_task_duration',\n    help: 'Duration of a task run',\n    labelNames: ['template', 'result'],\n  });\n  const promtStepCount = createCounterMetric({\n    name: 'scaffolder_step_count',\n    help: 'Count of step runs',\n    labelNames: ['template', 'step', 'result'],\n  });\n  const promStepDuration = createHistogramMetric({\n    name: 'scaffolder_step_duration',\n    help: 'Duration of a step runs',\n    labelNames: ['template', 'step', 'result'],\n  });\n\n  const meter = metrics.getMeter('default');\n  const taskCount = meter.createCounter('scaffolder.task.count', {\n    description: 'Count of task runs',\n  });\n\n  const taskDuration = meter.createHistogram('scaffolder.task.duration', {\n    description: 'Duration of a task run',\n    unit: 'seconds',\n  });\n\n  const stepCount = meter.createCounter('scaffolder.step.count', {\n    description: 'Count of step runs',\n  });\n\n  const stepDuration = meter.createHistogram('scaffolder.step.duration', {\n    description: 'Duration of a step runs',\n    unit: 'seconds',\n  });\n\n  async function taskStart(task: TaskContext) {\n    await task.emitLog(`Starting up task with ${task.spec.steps.length} steps`);\n    const template = task.spec.templateInfo?.entityRef || '';\n    const user = task.spec.user?.ref || '';\n\n    const startTime = process.hrtime();\n    const taskTimer = promTaskDuration.startTimer({\n      template,\n    });\n\n    function endTime() {\n      const delta = process.hrtime(startTime);\n      return delta[0] + delta[1] / 1e9;\n    }\n\n    async function skipDryRun(\n      step: TaskStep,\n      action: TemplateAction<JsonObject>,\n    ) {\n      task.emitLog(`Skipping because ${action.id} does not support dry-run`, {\n        stepId: step.id,\n        status: 'skipped',\n      });\n    }\n\n    async function markSuccessful() {\n      promTaskCount.inc({\n        template,\n        user,\n        result: 'ok',\n      });\n      taskTimer({ result: 'ok' });\n\n      taskCount.add(1, { template, user, result: 'ok' });\n      taskDuration.record(endTime(), {\n        result: 'ok',\n      });\n    }\n\n    async function markFailed(step: TaskStep, err: Error) {\n      await task.emitLog(String(err.stack), {\n        stepId: step.id,\n        status: 'failed',\n      });\n      promTaskCount.inc({\n        template,\n        user,\n        result: 'failed',\n      });\n      taskTimer({ result: 'failed' });\n\n      taskCount.add(1, { template, user, result: 'failed' });\n      taskDuration.record(endTime(), {\n        result: 'failed',\n      });\n    }\n\n    async function markCancelled(step: TaskStep) {\n      await task.emitLog(`Step ${step.id} has been cancelled.`, {\n        stepId: step.id,\n        status: 'cancelled',\n      });\n      promTaskCount.inc({\n        template,\n        user,\n        result: 'cancelled',\n      });\n      taskTimer({ result: 'cancelled' });\n\n      taskCount.add(1, { template, user, result: 'cancelled' });\n      taskDuration.record(endTime(), {\n        result: 'cancelled',\n      });\n    }\n\n    return {\n      skipDryRun,\n      markCancelled,\n      markSuccessful,\n      markFailed,\n    };\n  }\n\n  async function stepStart(task: TaskContext, step: TaskStep) {\n    await task.emitLog(`Beginning step ${step.name}`, {\n      stepId: step.id,\n      status: 'processing',\n    });\n    const template = task.spec.templateInfo?.entityRef || '';\n\n    const startTime = process.hrtime();\n    const stepTimer = promStepDuration.startTimer({\n      template,\n      step: step.name,\n    });\n\n    function endTime() {\n      const delta = process.hrtime(startTime);\n      return delta[0] + delta[1] / 1e9;\n    }\n\n    async function markSuccessful() {\n      await task.emitLog(`Finished step ${step.name}`, {\n        stepId: step.id,\n        status: 'completed',\n      });\n      promtStepCount.inc({\n        template,\n        step: step.name,\n        result: 'ok',\n      });\n      stepTimer({ result: 'ok' });\n\n      stepCount.add(1, { template, step: step.name, result: 'ok' });\n      stepDuration.record(endTime(), {\n        result: 'ok',\n      });\n    }\n\n    async function markCancelled() {\n      promtStepCount.inc({\n        template,\n        step: step.name,\n        result: 'cancelled',\n      });\n      stepTimer({ result: 'cancelled' });\n\n      stepCount.add(1, { template, step: step.name, result: 'cancelled' });\n      stepDuration.record(endTime(), {\n        result: 'cancelled',\n      });\n    }\n\n    async function markFailed() {\n      promtStepCount.inc({\n        template,\n        step: step.name,\n        result: 'failed',\n      });\n      stepTimer({ result: 'failed' });\n\n      stepCount.add(1, { template, step: step.name, result: 'failed' });\n      stepDuration.record(endTime(), {\n        result: 'failed',\n      });\n    }\n\n    async function skipFalsy() {\n      await task.emitLog(\n        `Skipping step ${step.id} because its if condition was false`,\n        { stepId: step.id, status: 'skipped' },\n      );\n      stepTimer({ result: 'skipped' });\n\n      stepCount.add(1, { template, step: step.name, result: 'skipped' });\n      stepDuration.record(endTime(), {\n        result: 'skipped',\n      });\n    }\n\n    return {\n      markCancelled,\n      markFailed,\n      markSuccessful,\n      skipFalsy,\n    };\n  }\n\n  return {\n    taskStart,\n    stepStart,\n  };\n}\n"],"names":["WinstonLogger","winston","BackstageLoggerTransport","PassThrough","createConditionAuthorizer","scaffolderActionRules","createDefaultFilters","nunjucks","templated","isTruthy","generateExampleOutput","validateJsonSchema","errors","InputError","NotAllowedError","loggerToWinstonLogger","stringifyError","fs","path","SecureTemplater","actionExecutePermission","AuthorizeResult","createCounterMetric","createHistogramMetric","metrics"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8FA,MAAM,eAAA,GAAkB,CAAC,QAAoD,KAAA;AAC3E,EAAA,OAAO,SAAS,UAAe,KAAA,iCAAA,CAAA;AACjC,CAAA,CAAA;AAEA,MAAM,mBAAmB,CAAC;AAAA,EACxB,IAAA;AAAA,EACA,IAAA;AAAA,EACA,UAAA;AACF,CAIM,KAAA;AACJ,EAAM,MAAA,UAAA,GAAaA,qBAAc,MAAO,CAAA;AAAA,IACtC,KAAA,EAAO,OAAQ,CAAA,GAAA,CAAI,SAAa,IAAA,MAAA;AAAA,IAChC,MAAA,EAAQC,mBAAQ,MAAO,CAAA,OAAA;AAAA,MACrBA,kBAAA,CAAQ,OAAO,QAAS,EAAA;AAAA,MACxBA,kBAAA,CAAQ,OAAO,MAAO,EAAA;AAAA,KACxB;AAAA,IACA,UAAA,EAAY,CAAC,IAAIC,+BAAA,CAAyB,YAAY,IAAM,EAAA,IAAA,CAAK,EAAE,CAAC,CAAA;AAAA,GACrE,CAAA,CAAA;AAED,EAAA,UAAA,CAAW,cAAc,MAAO,CAAA,MAAA,CAAO,KAAK,OAAW,IAAA,EAAE,CAAC,CAAA,CAAA;AAS1D,EAAM,MAAA,YAAA,GAAe,IAAIC,kBAAY,EAAA,CAAA;AACrC,EAAa,YAAA,CAAA,EAAA,CAAG,MAAQ,EAAA,OAAM,IAAQ,KAAA;AACpC,IAAA,MAAM,OAAU,GAAA,IAAA,CAAK,QAAS,EAAA,CAAE,IAAK,EAAA,CAAA;AACrC,IAAI,IAAA,OAAA,EAAS,SAAS,CAAG,EAAA;AACvB,MAAA,UAAA,CAAW,KAAK,OAAO,CAAA,CAAA;AAAA,KACzB;AAAA,GACD,CAAA,CAAA;AAED,EAAO,OAAA,EAAE,YAAY,YAAa,EAAA,CAAA;AACpC,CAAA,CAAA;AAEA,MAAM,kBAAqB,GAAAC,8CAAA;AAAA,EACzB,MAAA,CAAO,OAAOC,2BAAqB,CAAA;AACrC,CAAA,CAAA;AAEO,MAAM,sBAAiD,CAAA;AAAA,EAG5D,YAA6B,OAAwC,EAAA;AAAxC,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;AAC3B,IAAA,IAAA,CAAK,yBAAyBC,4BAAqB,CAAA;AAAA,MACjD,YAAA,EAAc,KAAK,OAAQ,CAAA,YAAA;AAAA,KAC5B,CAAA,CAAA;AAAA,GACH;AAAA,EANiB,sBAAA,CAAA;AAAA,EAQA,UAAU,kBAAmB,EAAA,CAAA;AAAA,EAEtC,uBAAuB,KAAe,EAAA;AAC5C,IAAM,MAAA,EAAE,MAAQ,EAAA,KAAA,EAAU,GAAAC,yBAAA,CAAA;AAW1B,IAAA,MAAM,SAAS,MAAO,CAAA,KAAA;AAAA,MACpB,KAAA;AAAA,MACA,EAAC;AAAA,MACD;AAAA,QACE,UAAY,EAAA,KAAA;AAAA,QACZ,IAAM,EAAA;AAAA,UACJ,aAAe,EAAA,KAAA;AAAA,UACf,WAAa,EAAA,IAAA;AAAA,SACf;AAAA,OACF;AAAA,KACF,CAAA;AAEA,IAAA,OACE,MAAO,CAAA,QAAA,CAAS,MAAW,KAAA,CAAA,IAC3B,EAAE,MAAA,CAAO,QAAS,CAAA,CAAC,CAAG,EAAA,QAAA,GAAW,CAAC,CAAA,YAAa,KAAM,CAAA,YAAA,CAAA,CAAA;AAAA,GAEzD;AAAA,EAEQ,MAAA,CACN,KACA,EAAA,OAAA,EACA,cACG,EAAA;AACH,IAAO,OAAA,IAAA,CAAK,MAAM,IAAK,CAAA,SAAA,CAAU,KAAK,CAAG,EAAA,CAAC,MAAM,KAAU,KAAA;AACxD,MAAI,IAAA;AACF,QAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,UAAI,IAAA;AACF,YAAI,IAAA,IAAA,CAAK,sBAAuB,CAAA,KAAK,CAAG,EAAA;AAEtC,cAAA,MAAM,gBAAgB,KAAM,CAAA,OAAA;AAAA,gBAC1B,aAAA;AAAA,gBACA,sBAAA;AAAA,eACF,CAAA;AAGA,cAAMC,MAAAA,UAAAA,GAAY,cAAe,CAAA,aAAA,EAAe,OAAO,CAAA,CAAA;AAGvD,cAAA,IAAIA,eAAc,EAAI,EAAA;AACpB,gBAAO,OAAA,KAAA,CAAA,CAAA;AAAA,eACT;AAGA,cAAO,OAAA,IAAA,CAAK,MAAMA,UAAS,CAAA,CAAA;AAAA,aAC7B;AAAA,mBACO,EAAI,EAAA;AACX,YAAA,IAAA,CAAK,QAAQ,MAAO,CAAA,KAAA;AAAA,cAClB,CAAoC,iCAAA,EAAA,KAAK,CAAe,YAAA,EAAA,EAAA,CAAG,OAAO,CAAA,CAAA;AAAA,aACpE,CAAA;AAAA,WACF;AAGA,UAAM,MAAA,SAAA,GAAY,cAAe,CAAA,KAAA,EAAO,OAAO,CAAA,CAAA;AAE/C,UAAA,IAAI,cAAc,EAAI,EAAA;AACpB,YAAO,OAAA,KAAA,CAAA,CAAA;AAAA,WACT;AAEA,UAAO,OAAA,SAAA,CAAA;AAAA,SACT;AAAA,OACM,CAAA,MAAA;AACN,QAAO,OAAA,KAAA,CAAA;AAAA,OACT;AACA,MAAO,OAAA,KAAA,CAAA;AAAA,KACR,CAAA,CAAA;AAAA,GACH;AAAA,EAEA,MAAM,YACJ,IACA,EAAA,IAAA,EACA,SACA,cACA,EAAA,SAAA,EACA,eACA,QACA,EAAA;AACA,IAAA,MAAM,YAAY,MAAM,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAU,MAAM,IAAI,CAAA,CAAA;AAEzD,IAAI,IAAA,IAAA,CAAK,aAAa,OAAS,EAAA;AAC7B,MAAA,MAAM,IAAI,KAAA,CAAM,CAAQ,KAAA,EAAA,IAAA,CAAK,IAAI,CAAsB,oBAAA,CAAA,CAAA,CAAA;AAAA,KACzD;AAEA,IAAI,IAAA;AACF,MAAA,IACE,KAAK,EAAO,KAAA,KAAA,IACX,OAAO,IAAA,CAAK,OAAO,QAClB,IAAA,CAACC,eAAS,CAAA,IAAA,CAAK,OAAO,IAAK,CAAA,EAAA,EAAI,OAAS,EAAA,cAAc,CAAC,CACzD,EAAA;AACA,QAAA,MAAM,UAAU,SAAU,EAAA,CAAA;AAC1B,QAAA,OAAA;AAAA,OACF;AACA,MAAA,MAAM,SACJ,IAAK,CAAA,OAAA,CAAQ,cAAe,CAAA,GAAA,CAAI,KAAK,MAAM,CAAA,CAAA;AAC7C,MAAA,MAAM,EAAE,UAAA,EAAY,YAAa,EAAA,GAAI,gBAAiB,CAAA;AAAA,QACpD,IAAA;AAAA,QACA,IAAA;AAAA,QACA,UAAA,EAAY,KAAK,OAAQ,CAAA,MAAA;AAAA,OAC1B,CAAA,CAAA;AAED,MAAA,IAAI,KAAK,QAAU,EAAA;AACjB,QAAA,MAAM,kBAAkB,MAAO,CAAA,WAAA;AAAA,UAC7B,MAAO,CAAA,OAAA,CAAQ,IAAK,CAAA,OAAA,IAAW,EAAE,CAAA,CAAE,GAAI,CAAA,CAAA,MAAA,KAAU,CAAC,MAAA,CAAO,CAAC,CAAA,EAAG,KAAK,CAAC,CAAA;AAAA,SACrE,CAAA;AACA,QAAM,MAAA,UAAA,GAAA,CACH,IAAK,CAAA,KAAA,IACJ,IAAK,CAAA,MAAA;AAAA,UACH,IAAK,CAAA,KAAA;AAAA,UACL;AAAA,YACE,GAAG,OAAA;AAAA,YACH,OAAS,EAAA,eAAA;AAAA,WACX;AAAA,UACA,cAAA;AAAA,cAEJ,EAAC,CAAA;AACH,QAAW,UAAA,CAAA,IAAA;AAAA,UACT,CACE,QAAA,EAAA,MAAA,CAAO,EACT,CAAA,iDAAA,EAAoD,IAAK,CAAA,SAAA;AAAA,YACvD,UAAA;AAAA,YACA,KAAA,CAAA;AAAA,YACA,CAAA;AAAA,WACD,CAAA,CAAA;AAAA,SACH,CAAA;AACA,QAAI,IAAA,CAAC,OAAO,cAAgB,EAAA;AAC1B,UAAM,MAAA,SAAA,CAAU,UAAW,CAAA,IAAA,EAAM,MAAM,CAAA,CAAA;AACvC,UAAM,MAAA,YAAA,GAAe,OAAO,MAAQ,EAAA,MAAA,CAAA;AACpC,UAAA,IAAI,YAAc,EAAA;AAChB,YAAQ,OAAA,CAAA,KAAA,CAAM,IAAK,CAAA,EAAE,CAAI,GAAA;AAAA,cACvB,MAAA,EAAQC,6BAAsB,YAAY,CAAA;AAAA,aAG5C,CAAA;AAAA,WACK,MAAA;AACL,YAAA,OAAA,CAAQ,MAAM,IAAK,CAAA,EAAE,IAAI,EAAE,MAAA,EAAQ,EAAG,EAAA,CAAA;AAAA,WACxC;AACA,UAAA,OAAA;AAAA,SACF;AAAA,OACF;AACA,MAAA,MAAM,UACJ,GAAA,CAAA,IAAA,CAAK,IACD,GAAA,MAAA,CAAO,OAAQ,CAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,IAAM,EAAA,OAAA,EAAS,cAAc,CAAC,CAAE,CAAA,GAAA;AAAA,QAC9D,CAAC,CAAC,GAAK,EAAA,KAAK,CAAO,MAAA;AAAA,UACjB,IAAA,EAAM,EAAE,GAAA,EAAK,KAAM,EAAA;AAAA,SACrB,CAAA;AAAA,UAEF,CAAC,EAAE,CAAA,EACP,IAAI,CAAM,CAAA,MAAA;AAAA,QACV,GAAG,CAAA;AAAA;AAAA,QAEH,KAAA,EAAO,IAAK,CAAA,KAAA,GACR,IAAK,CAAA,MAAA;AAAA,UACH,IAAK,CAAA,KAAA;AAAA,UACL,EAAE,GAAG,OAAS,EAAA,OAAA,EAAS,KAAK,OAAW,IAAA,EAAI,EAAA,GAAG,CAAE,EAAA;AAAA,UAChD,cAAA;AAAA,YAEF,EAAC;AAAA,OACL,CAAA,CAAA,CAAA;AACF,MAAA,KAAA,MAAW,aAAa,UAAY,EAAA;AAClC,QAAA,MAAM,QAAW,GAAA,CAAA,EAAG,MAAO,CAAA,EAAE,CAC3B,EAAA,SAAA,CAAU,IAAO,GAAA,CAAA,CAAA,EAAI,SAAU,CAAA,IAAA,CAAK,GAAG,CAAA,CAAA,CAAA,GAAM,EAC/C,CAAA,CAAA,CAAA;AAEA,QAAI,IAAA,MAAA,CAAO,QAAQ,KAAO,EAAA;AACxB,UAAA,MAAM,cAAiB,GAAAC,mBAAA;AAAA,YACrB,SAAU,CAAA,KAAA;AAAA,YACV,OAAO,MAAO,CAAA,KAAA;AAAA,WAChB,CAAA;AACA,UAAI,IAAA,CAAC,eAAe,KAAO,EAAA;AACzB,YAAA,MAAMC,QAAS,GAAA,cAAA,CAAe,MAAO,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAC9C,YAAA,MAAM,IAAIC,iBAAA;AAAA,cACR,CAAA,+BAAA,EAAkC,QAAQ,CAAA,EAAA,EAAKD,QAAM,CAAA,CAAA;AAAA,aACvD,CAAA;AAAA,WACF;AAAA,SACF;AACA,QACE,IAAA,CAAC,mBAAmB,QAAU,EAAA;AAAA,UAC5B,QAAQ,MAAO,CAAA,EAAA;AAAA,UACf,OAAO,SAAU,CAAA,KAAA;AAAA,SAClB,CACD,EAAA;AACA,UAAA,MAAM,IAAIE,sBAAA;AAAA,YACR,CAAA,qBAAA,EAAwB,QAAQ,CAAA,oCAAA,EAAuC,IAAK,CAAA,SAAA;AAAA,cAC1E,SAAU,CAAA,KAAA;AAAA,cACV,IAAA;AAAA,cACA,CAAA;AAAA,aACD,CAAA,CAAA;AAAA,WACH,CAAA;AAAA,SACF;AAAA,OACF;AACA,MAAM,MAAA,OAAA,GAAU,IAAI,KAAc,EAAA,CAAA;AAClC,MAAA,MAAM,aAAkD,EAAC,CAAA;AACzD,MAAM,MAAA,aAAA,GAAgB,MAAM,IAAA,CAAK,YAAe,IAAA,CAAA;AAEhD,MAAA,KAAA,MAAW,aAAa,UAAY,EAAA;AAClC,QAAA,IAAI,UAAU,IAAM,EAAA;AAClB,UAAW,UAAA,CAAA,IAAA;AAAA,YACT,sBAAsB,IAAK,CAAA,SAAA;AAAA,cACzB,SAAU,CAAA,IAAA;AAAA,cACV,CAAC,CAAG,EAAA,CAAA,KAAO,CAAI,GAAA,CAAA,CAAE,UAAa,GAAA,CAAA;AAAA,cAC9B,CAAA;AAAA,aACD,CAAA,CAAA;AAAA,WACH,CAAA;AAAA,SACF;AACA,QAAA,MAAM,OAAO,OAAQ,CAAA;AAAA,UACnB,OAAO,SAAU,CAAA,KAAA;AAAA,UACjB,OAAA,EAAS,IAAK,CAAA,OAAA,IAAW,EAAC;AAAA;AAAA,UAE1B,MAAA,EAAQC,oCAAsB,UAAU,CAAA;AAAA,UACxC,SAAW,EAAA,YAAA;AAAA,UACX,aAAA;AAAA,UACA,MAAM,UACJ,CAAA,SAAA,EACA,EACA,EAAA;AACA,YAAA,MAAM,GAAM,GAAA,CAAA,mBAAA,EAAsB,IAAK,CAAA,EAAE,IAAI,SAAS,CAAA,CAAA,CAAA;AACtD,YAAI,IAAA;AACF,cAAI,IAAA,SAAA,CAAA;AACJ,cAAA,IAAI,aAAe,EAAA;AACjB,gBAAA,MAAM,SACJ,GAAA,aAAA,CAAc,KAAO,EAAA,WAAA,GAGnB,GAAG,CAAA,CAAA;AACP,gBAAI,IAAA,SAAA,IAAa,SAAU,CAAA,MAAA,KAAW,SAAW,EAAA;AAC/C,kBAAA,SAAA,GAAY,SAAU,CAAA,KAAA,CAAA;AAAA,iBACxB;AAAA,eACF;AAEA,cAAA,MAAM,KAAQ,GAAA,SAAA,GAAY,SAAY,GAAA,MAAM,EAAG,EAAA,CAAA;AAE/C,cAAA,IAAI,CAAC,SAAW,EAAA;AACd,gBAAA,IAAA,CAAK,gBAAmB,GAAA;AAAA,kBACtB,GAAA;AAAA,kBACA,MAAQ,EAAA,SAAA;AAAA,kBACR,KAAA;AAAA,iBACD,CAAA,CAAA;AAAA,eACH;AACA,cAAO,OAAA,KAAA,CAAA;AAAA,qBACA,GAAK,EAAA;AACZ,cAAA,IAAA,CAAK,gBAAmB,GAAA;AAAA,gBACtB,GAAA;AAAA,gBACA,MAAQ,EAAA,QAAA;AAAA,gBACR,MAAA,EAAQC,sBAAe,GAAG,CAAA;AAAA,eAC3B,CAAA,CAAA;AACD,cAAM,MAAA,GAAA,CAAA;AAAA,aACN,SAAA;AACA,cAAA,MAAM,IAAK,CAAA,kBAAA,GAAqB,EAAE,IAAA,EAAM,eAAe,CAAA,CAAA;AAAA,aACzD;AAAA,WACF;AAAA,UACA,0BAA0B,YAAY;AACpC,YAAM,MAAA,MAAA,GAAS,MAAMC,mBAAG,CAAA,OAAA;AAAA,cACtB,CAAG,EAAA,aAAa,CAAS,MAAA,EAAA,IAAA,CAAK,EAAE,CAAA,CAAA,CAAA;AAAA,aAClC,CAAA;AACA,YAAA,OAAA,CAAQ,KAAK,MAAM,CAAA,CAAA;AACnB,YAAO,OAAA,MAAA,CAAA;AAAA,WACT;AAAA,UACA,MAAA,CAAO,MAAc,KAAkB,EAAA;AACrC,YAAA,IAAI,KAAK,IAAM,EAAA;AACb,cAAA,UAAA,CAAW,IAAI,CAAA,GAAI,UAAW,CAAA,IAAI,KAAK,EAAC,CAAA;AACxC,cAAC,UAAW,CAAA,IAAI,CAAgB,CAAA,IAAA,CAAK,KAAK,CAAA,CAAA;AAAA,aACrC,MAAA;AACL,cAAA,UAAA,CAAW,IAAI,CAAI,GAAA,KAAA,CAAA;AAAA,aACrB;AAAA,WACF;AAAA,UACA,YAAA,EAAc,KAAK,IAAK,CAAA,YAAA;AAAA,UACxB,IAAA,EAAM,KAAK,IAAK,CAAA,IAAA;AAAA,UAChB,UAAU,IAAK,CAAA,QAAA;AAAA,UACf,QAAQ,IAAK,CAAA,YAAA;AAAA,UACb,uBAAA,EAAyB,MAAM,IAAA,CAAK,uBAAwB,EAAA;AAAA,SAC7D,CAAA,CAAA;AAAA,OACH;AAGA,MAAA,KAAA,MAAW,UAAU,OAAS,EAAA;AAC5B,QAAM,MAAAA,mBAAA,CAAG,OAAO,MAAM,CAAA,CAAA;AAAA,OACxB;AAEA,MAAA,OAAA,CAAQ,MAAM,IAAK,CAAA,EAAE,CAAI,GAAA,EAAE,QAAQ,UAAW,EAAA,CAAA;AAE9C,MAAI,IAAA,IAAA,CAAK,aAAa,OAAS,EAAA;AAC7B,QAAA,MAAM,IAAI,KAAA,CAAM,CAAQ,KAAA,EAAA,IAAA,CAAK,IAAI,CAAsB,oBAAA,CAAA,CAAA,CAAA;AAAA,OACzD;AAEA,MAAA,MAAM,UAAU,cAAe,EAAA,CAAA;AAAA,aACxB,GAAK,EAAA;AACZ,MAAM,MAAA,SAAA,CAAU,UAAW,CAAA,IAAA,EAAM,GAAG,CAAA,CAAA;AACpC,MAAA,MAAM,UAAU,UAAW,EAAA,CAAA;AAC3B,MAAM,MAAA,GAAA,CAAA;AAAA,KACN,SAAA;AACA,MAAA,MAAM,IAAK,CAAA,kBAAA,GAAqB,EAAE,IAAA,EAAM,eAAe,CAAA,CAAA;AAAA,KACzD;AAAA,GACF;AAAA,EAEA,MAAM,QAAQ,IAA8C,EAAA;AAC1D,IAAA,IAAI,CAAC,eAAA,CAAgB,IAAK,CAAA,IAAI,CAAG,EAAA;AAC/B,MAAA,MAAM,IAAIJ,iBAAA;AAAA,QACR,0DAAA;AAAA,OACF,CAAA;AAAA,KACF;AACA,IAAM,MAAA,MAAA,GAAS,MAAM,IAAA,CAAK,gBAAiB,EAAA,CAAA;AAE3C,IAAA,MAAM,gBAAgBK,qBAAK,CAAA,IAAA,CAAK,IAAK,CAAA,OAAA,CAAQ,kBAAkB,MAAM,CAAA,CAAA;AAErE,IAAA,MAAM,EAAE,yBAAA,EAA2B,yBAA0B,EAAA,GAC3D,IAAK,CAAA,OAAA,CAAA;AAEP,IAAM,MAAA,cAAA,GAAiB,MAAMC,+BAAA,CAAgB,YAAa,CAAA;AAAA,MACxD,eAAiB,EAAA;AAAA,QACf,GAAG,IAAK,CAAA,sBAAA;AAAA,QACR,GAAG,yBAAA;AAAA,OACL;AAAA,MACA,eAAiB,EAAA,yBAAA;AAAA,KAClB,CAAA,CAAA;AAED,IAAI,IAAA;AACF,MAAA,MAAM,KAAK,kBAAqB,GAAA,EAAE,MAAQ,EAAA,UAAA,EAAY,eAAe,CAAA,CAAA;AAErE,MAAA,MAAM,SAAY,GAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,UAAU,IAAI,CAAA,CAAA;AACnD,MAAM,MAAAF,mBAAA,CAAG,UAAU,aAAa,CAAA,CAAA;AAEhC,MAAA,MAAM,OAA2B,GAAA;AAAA,QAC/B,UAAA,EAAY,KAAK,IAAK,CAAA,UAAA;AAAA,QACtB,OAAO,EAAC;AAAA,QACR,IAAA,EAAM,KAAK,IAAK,CAAA,IAAA;AAAA,OAClB,CAAA;AAEA,MAAA,MAAM,CAAC,QAAQ,CACb,GAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,IAAK,CAAA,IAAA,CAAK,KAAM,CAAA,MAAA,GACxC,MAAM,IAAA,CAAK,QAAQ,WAAY,CAAA,oBAAA;AAAA,QAC7B,CAAC,EAAE,UAAY,EAAAG,6BAAA,EAAyB,CAAA;AAAA,QACxC,EAAE,WAAA,EAAa,MAAM,IAAA,CAAK,yBAA0B,EAAA;AAAA,UAEtD,CAAC,EAAE,MAAQ,EAAAC,sCAAA,CAAgB,OAAO,CAAA,CAAA;AAExC,MAAW,KAAA,MAAA,IAAA,IAAQ,IAAK,CAAA,IAAA,CAAK,KAAO,EAAA;AAClC,QAAA,MAAM,IAAK,CAAA,WAAA;AAAA,UACT,IAAA;AAAA,UACA,IAAA;AAAA,UACA,OAAA;AAAA,UACA,cAAA;AAAA,UACA,SAAA;AAAA,UACA,aAAA;AAAA,UACA,QAAA;AAAA,SACF,CAAA;AAAA,OACF;AAEA,MAAA,MAAM,SAAS,IAAK,CAAA,MAAA,CAAO,KAAK,IAAK,CAAA,MAAA,EAAQ,SAAS,cAAc,CAAA,CAAA;AACpE,MAAA,MAAM,UAAU,cAAe,EAAA,CAAA;AAC/B,MAAA,MAAM,KAAK,cAAiB,IAAA,CAAA;AAE5B,MAAA,OAAO,EAAE,MAAO,EAAA,CAAA;AAAA,KAChB,SAAA;AACA,MAAA,IAAI,aAAe,EAAA;AACjB,QAAM,MAAAJ,mBAAA,CAAG,OAAO,aAAa,CAAA,CAAA;AAAA,OAC/B;AAAA,KACF;AAAA,GACF;AACF,CAAA;AAEA,SAAS,kBAAqB,GAAA;AAE5B,EAAA,MAAM,gBAAgBK,2BAAoB,CAAA;AAAA,IACxC,IAAM,EAAA,uBAAA;AAAA,IACN,IAAM,EAAA,oBAAA;AAAA,IACN,UAAY,EAAA,CAAC,UAAY,EAAA,MAAA,EAAQ,QAAQ,CAAA;AAAA,GAC1C,CAAA,CAAA;AACD,EAAA,MAAM,mBAAmBC,6BAAsB,CAAA;AAAA,IAC7C,IAAM,EAAA,0BAAA;AAAA,IACN,IAAM,EAAA,wBAAA;AAAA,IACN,UAAA,EAAY,CAAC,UAAA,EAAY,QAAQ,CAAA;AAAA,GAClC,CAAA,CAAA;AACD,EAAA,MAAM,iBAAiBD,2BAAoB,CAAA;AAAA,IACzC,IAAM,EAAA,uBAAA;AAAA,IACN,IAAM,EAAA,oBAAA;AAAA,IACN,UAAY,EAAA,CAAC,UAAY,EAAA,MAAA,EAAQ,QAAQ,CAAA;AAAA,GAC1C,CAAA,CAAA;AACD,EAAA,MAAM,mBAAmBC,6BAAsB,CAAA;AAAA,IAC7C,IAAM,EAAA,0BAAA;AAAA,IACN,IAAM,EAAA,yBAAA;AAAA,IACN,UAAY,EAAA,CAAC,UAAY,EAAA,MAAA,EAAQ,QAAQ,CAAA;AAAA,GAC1C,CAAA,CAAA;AAED,EAAM,MAAA,KAAA,GAAQC,WAAQ,CAAA,QAAA,CAAS,SAAS,CAAA,CAAA;AACxC,EAAM,MAAA,SAAA,GAAY,KAAM,CAAA,aAAA,CAAc,uBAAyB,EAAA;AAAA,IAC7D,WAAa,EAAA,oBAAA;AAAA,GACd,CAAA,CAAA;AAED,EAAM,MAAA,YAAA,GAAe,KAAM,CAAA,eAAA,CAAgB,0BAA4B,EAAA;AAAA,IACrE,WAAa,EAAA,wBAAA;AAAA,IACb,IAAM,EAAA,SAAA;AAAA,GACP,CAAA,CAAA;AAED,EAAM,MAAA,SAAA,GAAY,KAAM,CAAA,aAAA,CAAc,uBAAyB,EAAA;AAAA,IAC7D,WAAa,EAAA,oBAAA;AAAA,GACd,CAAA,CAAA;AAED,EAAM,MAAA,YAAA,GAAe,KAAM,CAAA,eAAA,CAAgB,0BAA4B,EAAA;AAAA,IACrE,WAAa,EAAA,yBAAA;AAAA,IACb,IAAM,EAAA,SAAA;AAAA,GACP,CAAA,CAAA;AAED,EAAA,eAAe,UAAU,IAAmB,EAAA;AAC1C,IAAA,MAAM,KAAK,OAAQ,CAAA,CAAA,sBAAA,EAAyB,KAAK,IAAK,CAAA,KAAA,CAAM,MAAM,CAAQ,MAAA,CAAA,CAAA,CAAA;AAC1E,IAAA,MAAM,QAAW,GAAA,IAAA,CAAK,IAAK,CAAA,YAAA,EAAc,SAAa,IAAA,EAAA,CAAA;AACtD,IAAA,MAAM,IAAO,GAAA,IAAA,CAAK,IAAK,CAAA,IAAA,EAAM,GAAO,IAAA,EAAA,CAAA;AAEpC,IAAM,MAAA,SAAA,GAAY,QAAQ,MAAO,EAAA,CAAA;AACjC,IAAM,MAAA,SAAA,GAAY,iBAAiB,UAAW,CAAA;AAAA,MAC5C,QAAA;AAAA,KACD,CAAA,CAAA;AAED,IAAA,SAAS,OAAU,GAAA;AACjB,MAAM,MAAA,KAAA,GAAQ,OAAQ,CAAA,MAAA,CAAO,SAAS,CAAA,CAAA;AACtC,MAAA,OAAO,KAAM,CAAA,CAAC,CAAI,GAAA,KAAA,CAAM,CAAC,CAAI,GAAA,GAAA,CAAA;AAAA,KAC/B;AAEA,IAAe,eAAA,UAAA,CACb,MACA,MACA,EAAA;AACA,MAAA,IAAA,CAAK,OAAQ,CAAA,CAAA,iBAAA,EAAoB,MAAO,CAAA,EAAE,CAA6B,yBAAA,CAAA,EAAA;AAAA,QACrE,QAAQ,IAAK,CAAA,EAAA;AAAA,QACb,MAAQ,EAAA,SAAA;AAAA,OACT,CAAA,CAAA;AAAA,KACH;AAEA,IAAA,eAAe,cAAiB,GAAA;AAC9B,MAAA,aAAA,CAAc,GAAI,CAAA;AAAA,QAChB,QAAA;AAAA,QACA,IAAA;AAAA,QACA,MAAQ,EAAA,IAAA;AAAA,OACT,CAAA,CAAA;AACD,MAAU,SAAA,CAAA,EAAE,MAAQ,EAAA,IAAA,EAAM,CAAA,CAAA;AAE1B,MAAA,SAAA,CAAU,IAAI,CAAG,EAAA,EAAE,UAAU,IAAM,EAAA,MAAA,EAAQ,MAAM,CAAA,CAAA;AACjD,MAAa,YAAA,CAAA,MAAA,CAAO,SAAW,EAAA;AAAA,QAC7B,MAAQ,EAAA,IAAA;AAAA,OACT,CAAA,CAAA;AAAA,KACH;AAEA,IAAe,eAAA,UAAA,CAAW,MAAgB,GAAY,EAAA;AACpD,MAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,MAAO,CAAA,GAAA,CAAI,KAAK,CAAG,EAAA;AAAA,QACpC,QAAQ,IAAK,CAAA,EAAA;AAAA,QACb,MAAQ,EAAA,QAAA;AAAA,OACT,CAAA,CAAA;AACD,MAAA,aAAA,CAAc,GAAI,CAAA;AAAA,QAChB,QAAA;AAAA,QACA,IAAA;AAAA,QACA,MAAQ,EAAA,QAAA;AAAA,OACT,CAAA,CAAA;AACD,MAAU,SAAA,CAAA,EAAE,MAAQ,EAAA,QAAA,EAAU,CAAA,CAAA;AAE9B,MAAA,SAAA,CAAU,IAAI,CAAG,EAAA,EAAE,UAAU,IAAM,EAAA,MAAA,EAAQ,UAAU,CAAA,CAAA;AACrD,MAAa,YAAA,CAAA,MAAA,CAAO,SAAW,EAAA;AAAA,QAC7B,MAAQ,EAAA,QAAA;AAAA,OACT,CAAA,CAAA;AAAA,KACH;AAEA,IAAA,eAAe,cAAc,IAAgB,EAAA;AAC3C,MAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,CAAQ,KAAA,EAAA,IAAA,CAAK,EAAE,CAAwB,oBAAA,CAAA,EAAA;AAAA,QACxD,QAAQ,IAAK,CAAA,EAAA;AAAA,QACb,MAAQ,EAAA,WAAA;AAAA,OACT,CAAA,CAAA;AACD,MAAA,aAAA,CAAc,GAAI,CAAA;AAAA,QAChB,QAAA;AAAA,QACA,IAAA;AAAA,QACA,MAAQ,EAAA,WAAA;AAAA,OACT,CAAA,CAAA;AACD,MAAU,SAAA,CAAA,EAAE,MAAQ,EAAA,WAAA,EAAa,CAAA,CAAA;AAEjC,MAAA,SAAA,CAAU,IAAI,CAAG,EAAA,EAAE,UAAU,IAAM,EAAA,MAAA,EAAQ,aAAa,CAAA,CAAA;AACxD,MAAa,YAAA,CAAA,MAAA,CAAO,SAAW,EAAA;AAAA,QAC7B,MAAQ,EAAA,WAAA;AAAA,OACT,CAAA,CAAA;AAAA,KACH;AAEA,IAAO,OAAA;AAAA,MACL,UAAA;AAAA,MACA,aAAA;AAAA,MACA,cAAA;AAAA,MACA,UAAA;AAAA,KACF,CAAA;AAAA,GACF;AAEA,EAAe,eAAA,SAAA,CAAU,MAAmB,IAAgB,EAAA;AAC1D,IAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,CAAkB,eAAA,EAAA,IAAA,CAAK,IAAI,CAAI,CAAA,EAAA;AAAA,MAChD,QAAQ,IAAK,CAAA,EAAA;AAAA,MACb,MAAQ,EAAA,YAAA;AAAA,KACT,CAAA,CAAA;AACD,IAAA,MAAM,QAAW,GAAA,IAAA,CAAK,IAAK,CAAA,YAAA,EAAc,SAAa,IAAA,EAAA,CAAA;AAEtD,IAAM,MAAA,SAAA,GAAY,QAAQ,MAAO,EAAA,CAAA;AACjC,IAAM,MAAA,SAAA,GAAY,iBAAiB,UAAW,CAAA;AAAA,MAC5C,QAAA;AAAA,MACA,MAAM,IAAK,CAAA,IAAA;AAAA,KACZ,CAAA,CAAA;AAED,IAAA,SAAS,OAAU,GAAA;AACjB,MAAM,MAAA,KAAA,GAAQ,OAAQ,CAAA,MAAA,CAAO,SAAS,CAAA,CAAA;AACtC,MAAA,OAAO,KAAM,CAAA,CAAC,CAAI,GAAA,KAAA,CAAM,CAAC,CAAI,GAAA,GAAA,CAAA;AAAA,KAC/B;AAEA,IAAA,eAAe,cAAiB,GAAA;AAC9B,MAAA,MAAM,IAAK,CAAA,OAAA,CAAQ,CAAiB,cAAA,EAAA,IAAA,CAAK,IAAI,CAAI,CAAA,EAAA;AAAA,QAC/C,QAAQ,IAAK,CAAA,EAAA;AAAA,QACb,MAAQ,EAAA,WAAA;AAAA,OACT,CAAA,CAAA;AACD,MAAA,cAAA,CAAe,GAAI,CAAA;AAAA,QACjB,QAAA;AAAA,QACA,MAAM,IAAK,CAAA,IAAA;AAAA,QACX,MAAQ,EAAA,IAAA;AAAA,OACT,CAAA,CAAA;AACD,MAAU,SAAA,CAAA,EAAE,MAAQ,EAAA,IAAA,EAAM,CAAA,CAAA;AAE1B,MAAU,SAAA,CAAA,GAAA,CAAI,GAAG,EAAE,QAAA,EAAU,MAAM,IAAK,CAAA,IAAA,EAAM,MAAQ,EAAA,IAAA,EAAM,CAAA,CAAA;AAC5D,MAAa,YAAA,CAAA,MAAA,CAAO,SAAW,EAAA;AAAA,QAC7B,MAAQ,EAAA,IAAA;AAAA,OACT,CAAA,CAAA;AAAA,KACH;AAEA,IAAA,eAAe,aAAgB,GAAA;AAC7B,MAAA,cAAA,CAAe,GAAI,CAAA;AAAA,QACjB,QAAA;AAAA,QACA,MAAM,IAAK,CAAA,IAAA;AAAA,QACX,MAAQ,EAAA,WAAA;AAAA,OACT,CAAA,CAAA;AACD,MAAU,SAAA,CAAA,EAAE,MAAQ,EAAA,WAAA,EAAa,CAAA,CAAA;AAEjC,MAAU,SAAA,CAAA,GAAA,CAAI,GAAG,EAAE,QAAA,EAAU,MAAM,IAAK,CAAA,IAAA,EAAM,MAAQ,EAAA,WAAA,EAAa,CAAA,CAAA;AACnE,MAAa,YAAA,CAAA,MAAA,CAAO,SAAW,EAAA;AAAA,QAC7B,MAAQ,EAAA,WAAA;AAAA,OACT,CAAA,CAAA;AAAA,KACH;AAEA,IAAA,eAAe,UAAa,GAAA;AAC1B,MAAA,cAAA,CAAe,GAAI,CAAA;AAAA,QACjB,QAAA;AAAA,QACA,MAAM,IAAK,CAAA,IAAA;AAAA,QACX,MAAQ,EAAA,QAAA;AAAA,OACT,CAAA,CAAA;AACD,MAAU,SAAA,CAAA,EAAE,MAAQ,EAAA,QAAA,EAAU,CAAA,CAAA;AAE9B,MAAU,SAAA,CAAA,GAAA,CAAI,GAAG,EAAE,QAAA,EAAU,MAAM,IAAK,CAAA,IAAA,EAAM,MAAQ,EAAA,QAAA,EAAU,CAAA,CAAA;AAChE,MAAa,YAAA,CAAA,MAAA,CAAO,SAAW,EAAA;AAAA,QAC7B,MAAQ,EAAA,QAAA;AAAA,OACT,CAAA,CAAA;AAAA,KACH;AAEA,IAAA,eAAe,SAAY,GAAA;AACzB,MAAA,MAAM,IAAK,CAAA,OAAA;AAAA,QACT,CAAA,cAAA,EAAiB,KAAK,EAAE,CAAA,mCAAA,CAAA;AAAA,QACxB,EAAE,MAAA,EAAQ,IAAK,CAAA,EAAA,EAAI,QAAQ,SAAU,EAAA;AAAA,OACvC,CAAA;AACA,MAAU,SAAA,CAAA,EAAE,MAAQ,EAAA,SAAA,EAAW,CAAA,CAAA;AAE/B,MAAU,SAAA,CAAA,GAAA,CAAI,GAAG,EAAE,QAAA,EAAU,MAAM,IAAK,CAAA,IAAA,EAAM,MAAQ,EAAA,SAAA,EAAW,CAAA,CAAA;AACjE,MAAa,YAAA,CAAA,MAAA,CAAO,SAAW,EAAA;AAAA,QAC7B,MAAQ,EAAA,SAAA;AAAA,OACT,CAAA,CAAA;AAAA,KACH;AAEA,IAAO,OAAA;AAAA,MACL,aAAA;AAAA,MACA,UAAA;AAAA,MACA,cAAA;AAAA,MACA,SAAA;AAAA,KACF,CAAA;AAAA,GACF;AAEA,EAAO,OAAA;AAAA,IACL,SAAA;AAAA,IACA,SAAA;AAAA,GACF,CAAA;AACF;;;;"}
\ No newline at end of file
+{"version":3,"file":"NunjucksWorkflowRunner.cjs.js","sources":["../../../src/scaffolder/tasks/NunjucksWorkflowRunner.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ScmIntegrations } from '@backstage/integration';\nimport { TaskTrackType, WorkflowResponse, WorkflowRunner } from './types';\nimport * as winston from 'winston';\nimport fs from 'fs-extra';\nimport path from 'path';\nimport nunjucks from 'nunjucks';\nimport { JsonArray, JsonObject, JsonValue } from '@backstage/types';\nimport { InputError, NotAllowedError, stringifyError } from '@backstage/errors';\nimport { PassThrough } from 'stream';\nimport { generateExampleOutput, isTruthy } from './helper';\nimport { validate as validateJsonSchema } from 'jsonschema';\nimport { TemplateActionRegistry } from '../actions';\nimport { metrics } from '@opentelemetry/api';\nimport {\n  SecureTemplater,\n  SecureTemplateRenderer,\n} from '../../lib/templating/SecureTemplater';\nimport {\n  TaskRecovery,\n  TaskSpec,\n  TaskSpecV1beta3,\n  TaskStep,\n} from '@backstage/plugin-scaffolder-common';\n\nimport {\n  TemplateAction,\n  TemplateFilter,\n  TemplateGlobal,\n  TaskContext,\n} from '@backstage/plugin-scaffolder-node';\nimport { createConditionAuthorizer } from '@backstage/plugin-permission-node';\nimport { UserEntity } from '@backstage/catalog-model';\nimport { createCounterMetric, createHistogramMetric } from '../../util/metrics';\nimport { createDefaultFilters } from '../../lib/templating/filters';\nimport {\n  AuthorizeResult,\n  PolicyDecision,\n} from '@backstage/plugin-permission-common';\nimport { scaffolderActionRules } from '../../service/rules';\nimport { actionExecutePermission } from '@backstage/plugin-scaffolder-common/alpha';\nimport { PermissionsService } from '@backstage/backend-plugin-api';\nimport { loggerToWinstonLogger } from '@backstage/backend-common';\nimport { BackstageLoggerTransport, WinstonLogger } from './logger';\n\nimport { AuditLogger } from '@janus-idp/backstage-plugin-audit-log-node';\n\ntype NunjucksWorkflowRunnerOptions = {\n  workingDirectory: string;\n  actionRegistry: TemplateActionRegistry;\n  integrations: ScmIntegrations;\n  logger: winston.Logger;\n  auditLogger: AuditLogger;\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n  additionalTemplateGlobals?: Record<string, TemplateGlobal>;\n  permissions?: PermissionsService;\n};\n\ntype TemplateContext = {\n  parameters: JsonObject;\n  EXPERIMENTAL_recovery?: TaskRecovery;\n  steps: {\n    [stepName: string]: { output: { [outputName: string]: JsonValue } };\n  };\n  secrets?: Record<string, string>;\n  user?: {\n    entity?: UserEntity;\n    ref?: string;\n  };\n  each?: JsonValue;\n};\n\ntype CheckpointState =\n  | {\n      status: 'failed';\n      reason: string;\n    }\n  | {\n      status: 'success';\n      value: JsonValue;\n    };\n\nconst isValidTaskSpec = (taskSpec: TaskSpec): taskSpec is TaskSpecV1beta3 => {\n  return taskSpec.apiVersion === 'scaffolder.backstage.io/v1beta3';\n};\n\nconst createStepLogger = ({\n  task,\n  step,\n  rootLogger,\n}: {\n  task: TaskContext;\n  step: TaskStep;\n  rootLogger: winston.Logger;\n}) => {\n  const taskLogger = WinstonLogger.create({\n    level: process.env.LOG_LEVEL || 'info',\n    format: winston.format.combine(\n      winston.format.colorize(),\n      winston.format.simple(),\n    ),\n    transports: [new BackstageLoggerTransport(rootLogger, task, step.id)],\n  });\n\n  taskLogger.addRedactions(Object.values(task.secrets ?? {}));\n\n  // This stream logger should be deprecated. We're going to replace it with\n  // just using the logger directly, as all those logs get written to step logs\n  // using the stepLogStream above.\n  // Initially this stream used to be the only way to write to the client logs, but that\n  // has changed over time, there's not really a need for this anymore.\n  // You can just create a simple wrapper like the below in your action to write to the main logger.\n  // This way we also get redactions for free.\n  const streamLogger = new PassThrough();\n  streamLogger.on('data', async data => {\n    const message = data.toString().trim();\n    if (message?.length > 1) {\n      taskLogger.info(message);\n    }\n  });\n\n  return { taskLogger, streamLogger };\n};\n\nconst isActionAuthorized = createConditionAuthorizer(\n  Object.values(scaffolderActionRules),\n);\n\nexport class NunjucksWorkflowRunner implements WorkflowRunner {\n  private readonly defaultTemplateFilters: Record<string, TemplateFilter>;\n  private readonly tracker;\n\n  constructor(private readonly options: NunjucksWorkflowRunnerOptions) {\n    this.defaultTemplateFilters = createDefaultFilters({\n      integrations: this.options.integrations,\n    });\n    this.tracker = scaffoldingTracker(this.options.auditLogger);\n  }\n\n  private isSingleTemplateString(input: string) {\n    const { parser, nodes } = nunjucks as unknown as {\n      parser: {\n        parse(\n          template: string,\n          ctx: object,\n          options: nunjucks.ConfigureOptions,\n        ): { children: { children?: unknown[] }[] };\n      };\n      nodes: { TemplateData: Function };\n    };\n\n    const parsed = parser.parse(\n      input,\n      {},\n      {\n        autoescape: false,\n        tags: {\n          variableStart: '${{',\n          variableEnd: '}}',\n        },\n      },\n    );\n\n    return (\n      parsed.children.length === 1 &&\n      !(parsed.children[0]?.children?.[0] instanceof nodes.TemplateData)\n    );\n  }\n\n  private render<T>(\n    input: T,\n    context: TemplateContext,\n    renderTemplate: SecureTemplateRenderer,\n  ): T {\n    return JSON.parse(JSON.stringify(input), (_key, value) => {\n      try {\n        if (typeof value === 'string') {\n          try {\n            if (this.isSingleTemplateString(value)) {\n              // Lets convert ${{ parameters.bob }} to ${{ (parameters.bob) | dump }} so we can keep the input type\n              const wrappedDumped = value.replace(\n                /\\${{(.+)}}/g,\n                '${{ ( $1 ) | dump }}',\n              );\n\n              // Run the templating\n              const templated = renderTemplate(wrappedDumped, context);\n\n              // If there's an empty string returned, then it's undefined\n              if (templated === '') {\n                return undefined;\n              }\n\n              // Reparse the dumped string\n              return JSON.parse(templated);\n            }\n          } catch (ex) {\n            this.options.logger.error(\n              `Failed to parse template string: ${value} with error ${ex.message}`,\n            );\n          }\n\n          // Fallback to default behaviour\n          const templated = renderTemplate(value, context);\n\n          if (templated === '') {\n            return undefined;\n          }\n\n          return templated;\n        }\n      } catch {\n        return value;\n      }\n      return value;\n    });\n  }\n\n  async executeStep(\n    task: TaskContext,\n    step: TaskStep,\n    context: TemplateContext,\n    renderTemplate: (template: string, values: unknown) => string,\n    taskTrack: TaskTrackType,\n    workspacePath: string,\n    decision: PolicyDecision,\n  ) {\n    const stepTrack = await this.tracker.stepStart(task, step);\n\n    if (task.cancelSignal.aborted) {\n      throw new Error(\n        `Step ${step.id} (${step.name}) of task ${task.taskId} has been cancelled.`,\n      );\n    }\n\n    try {\n      const action: TemplateAction<JsonObject> =\n        this.options.actionRegistry.get(step.action);\n      const { taskLogger, streamLogger } = createStepLogger({\n        task,\n        step,\n        rootLogger: this.options.logger,\n      });\n\n      const redactedSecrets = Object.fromEntries(\n        Object.entries(task.secrets ?? {}).map(secret => [secret[0], '***']),\n      );\n      const stepInputs =\n        (step.input &&\n          this.render(\n            step.input,\n            {\n              ...context,\n              secrets: redactedSecrets,\n            },\n            renderTemplate,\n          )) ??\n        {};\n      const commonStepAuditMetadata = {\n        templateRef: task.spec.templateInfo?.entityRef || '',\n        taskId: task.taskId,\n        stepId: step.id,\n        stepName: step.name,\n        stepAction: step.action,\n        stepInputs: stepInputs,\n        stepConditional: step.if,\n        stepEach: step.each,\n        isDryRun: task.isDryRun || false,\n      };\n      if (\n        step.if === false ||\n        (typeof step.if === 'string' &&\n          !isTruthy(this.render(step.if, context, renderTemplate)))\n      ) {\n        await stepTrack.skipFalsy();\n        await this.options.auditLogger.auditLog({\n          eventName: 'ScaffolderTaskStepSkip',\n          actorId: 'scaffolder-backend',\n          stage: 'completion',\n          status: 'succeeded',\n          metadata: commonStepAuditMetadata,\n          message: `Skipped step ${step.name} (id: ${step.id}) of task ${task.taskId}`,\n        });\n        return;\n      }\n\n      await this.options.auditLogger.auditLog({\n        actorId: 'scaffolder-backend',\n        eventName: 'ScaffolderTaskStepExecution',\n        stage: 'initiation',\n        status: 'succeeded',\n        metadata: commonStepAuditMetadata,\n        message: `Started ${step.name} (id: ${step.id}) of task ${task.taskId} triggering the ${step.action} action`,\n      });\n\n      if (task.isDryRun) {\n        taskLogger.info(\n          `Running ${\n            action.id\n          } in dry-run mode with inputs (secrets redacted): ${JSON.stringify(\n            stepInputs,\n            undefined,\n            2,\n          )}`,\n        );\n        if (!action.supportsDryRun) {\n          await taskTrack.skipDryRun(step, action);\n          const outputSchema = action.schema?.output;\n          if (outputSchema) {\n            context.steps[step.id] = {\n              output: generateExampleOutput(outputSchema) as {\n                [name in string]: JsonValue;\n              },\n            };\n          } else {\n            context.steps[step.id] = { output: {} };\n          }\n          return;\n        }\n      }\n      const iterations = (\n        step.each\n          ? Object.entries(this.render(step.each, context, renderTemplate)).map(\n              ([key, value]) => ({\n                each: { key, value },\n              }),\n            )\n          : [{}]\n      ).map(i => ({\n        ...i,\n        // Secrets are only passed when templating the input to actions for security reasons\n        input: step.input\n          ? this.render(\n              step.input,\n              { ...context, secrets: task.secrets ?? {}, ...i },\n              renderTemplate,\n            )\n          : {},\n      }));\n      for (const iteration of iterations) {\n        const actionId = `${action.id}${\n          iteration.each ? `[${iteration.each.key}]` : ''\n        }`;\n\n        if (action.schema?.input) {\n          const validateResult = validateJsonSchema(\n            iteration.input,\n            action.schema.input,\n          );\n          if (!validateResult.valid) {\n            const errors = validateResult.errors.join(', ');\n            throw new InputError(\n              `Invalid input passed to action ${actionId}, ${errors}`,\n            );\n          }\n        }\n        if (\n          !isActionAuthorized(decision, {\n            action: action.id,\n            input: iteration.input,\n          })\n        ) {\n          throw new NotAllowedError(\n            `Unauthorized action: ${actionId}. The action is not allowed. Input: ${JSON.stringify(\n              iteration.input,\n              null,\n              2,\n            )}`,\n          );\n        }\n      }\n      const tmpDirs = new Array<string>();\n      const stepOutput: { [outputName: string]: JsonValue } = {};\n      const prevTaskState = await task.getTaskState?.();\n      let iterationCount: number = 0;\n      for (const iteration of iterations) {\n        if (iteration.each) {\n          taskLogger.info(\n            `Running step each: ${JSON.stringify(\n              iteration.each,\n              (k, v) => (k ? v.toString() : v),\n              0,\n            )}`,\n          );\n\n          await this.options.auditLogger.auditLog({\n            actorId: 'scaffolder-backend',\n            eventName: 'ScaffolderTaskStepIteration',\n            stage: 'initiation',\n            status: 'succeeded',\n            metadata: {\n              ...commonStepAuditMetadata,\n              stepInputs: undefined,\n              stepAction: `${step.action}[${iteration.each.key}]`,\n              stepIterationInputs: iteration.input,\n              stepIterationCount: ++iterationCount,\n              stepIterationValue: iteration.each.value,\n              totalIterations: iterations.length,\n            },\n            message: `Iteration ${iterationCount}/${iterations.length} of action ${step.action} of step ${step.name} (id: ${step.id}) of task ${task.taskId} started`,\n          });\n        }\n\n        await action.handler({\n          input: iteration.input,\n          secrets: task.secrets ?? {},\n          // TODO(blam): move to LoggerService and away from Winston\n          logger: loggerToWinstonLogger(taskLogger),\n          logStream: streamLogger,\n          workspacePath,\n          async checkpoint<U extends JsonValue>(\n            keySuffix: string,\n            fn: () => Promise<U>,\n          ) {\n            const key = `v1.task.checkpoint.${step.id}.${keySuffix}`;\n            try {\n              let prevValue: U | undefined;\n              if (prevTaskState) {\n                const prevState = (\n                  prevTaskState.state?.checkpoints as {\n                    [key: string]: CheckpointState;\n                  }\n                )?.[key];\n                if (prevState && prevState.status === 'success') {\n                  prevValue = prevState.value as U;\n                }\n              }\n\n              const value = prevValue ? prevValue : await fn();\n\n              if (!prevValue) {\n                task.updateCheckpoint?.({\n                  key,\n                  status: 'success',\n                  value,\n                });\n              }\n              return value;\n            } catch (err) {\n              task.updateCheckpoint?.({\n                key,\n                status: 'failed',\n                reason: stringifyError(err),\n              });\n              throw err;\n            } finally {\n              await task.serializeWorkspace?.({ path: workspacePath });\n            }\n          },\n          createTemporaryDirectory: async () => {\n            const tmpDir = await fs.mkdtemp(\n              `${workspacePath}_step-${step.id}-`,\n            );\n            tmpDirs.push(tmpDir);\n            return tmpDir;\n          },\n          output(name: string, value: JsonValue) {\n            if (step.each) {\n              stepOutput[name] = stepOutput[name] || [];\n              (stepOutput[name] as JsonArray).push(value);\n            } else {\n              stepOutput[name] = value;\n            }\n          },\n          templateInfo: task.spec.templateInfo,\n          user: task.spec.user,\n          isDryRun: task.isDryRun,\n          signal: task.cancelSignal,\n          getInitiatorCredentials: () => task.getInitiatorCredentials(),\n        });\n        if (iteration.each) {\n          await this.options.auditLogger.auditLog({\n            actorId: 'scaffolder-backend',\n            eventName: 'ScaffolderTaskStepIteration',\n            stage: 'completion',\n            status: 'succeeded',\n            metadata: {\n              ...commonStepAuditMetadata,\n              stepInputs: undefined,\n              stepAction: `${step.action}[${iteration.each.key}]`,\n              stepIterationCount: iterationCount,\n              stepIterationValue: iteration.each.value,\n              stepIterationInputs: iteration.input,\n              totalIterations: iterations.length,\n            },\n            message: `Iteration ${iterationCount}/${iterations.length} of action ${step.action} of step ${step.name} (id: ${step.id}) of task ${task.taskId} succeeded`,\n          });\n        }\n      }\n\n      // Remove all temporary directories that were created when executing the action\n      for (const tmpDir of tmpDirs) {\n        await fs.remove(tmpDir);\n      }\n\n      context.steps[step.id] = { output: stepOutput };\n\n      if (task.cancelSignal.aborted) {\n        throw new Error(\n          `Step ${step.id} (${step.name}) of task ${task.taskId} has been cancelled.`,\n        );\n      }\n\n      await stepTrack.markSuccessful();\n    } catch (err) {\n      await taskTrack.markFailed(step, err);\n      await stepTrack.markFailed(err);\n      throw err;\n    } finally {\n      await task.serializeWorkspace?.({ path: workspacePath });\n    }\n  }\n\n  async execute(task: TaskContext): Promise<WorkflowResponse> {\n    if (!isValidTaskSpec(task.spec)) {\n      throw new InputError(\n        'Wrong template version executed with the workflow engine',\n      );\n    }\n    const taskId = await task.getWorkspaceName();\n\n    const workspacePath = path.join(this.options.workingDirectory, taskId);\n\n    const { additionalTemplateFilters, additionalTemplateGlobals } =\n      this.options;\n\n    const renderTemplate = await SecureTemplater.loadRenderer({\n      templateFilters: {\n        ...this.defaultTemplateFilters,\n        ...additionalTemplateFilters,\n      },\n      templateGlobals: additionalTemplateGlobals,\n    });\n\n    try {\n      await task.rehydrateWorkspace?.({ taskId, targetPath: workspacePath });\n\n      const taskTrack = await this.tracker.taskStart(task);\n      await fs.ensureDir(workspacePath);\n\n      const context: TemplateContext = {\n        parameters: task.spec.parameters,\n        steps: {},\n        user: task.spec.user,\n      };\n\n      const [decision]: PolicyDecision[] =\n        this.options.permissions && task.spec.steps.length\n          ? await this.options.permissions.authorizeConditional(\n              [{ permission: actionExecutePermission }],\n              { credentials: await task.getInitiatorCredentials() },\n            )\n          : [{ result: AuthorizeResult.ALLOW }];\n\n      for (const step of task.spec.steps) {\n        await this.executeStep(\n          task,\n          step,\n          context,\n          renderTemplate,\n          taskTrack,\n          workspacePath,\n          decision,\n        );\n      }\n\n      const output = this.render(task.spec.output, context, renderTemplate);\n      await taskTrack.markSuccessful();\n      await task.cleanWorkspace?.();\n\n      return { output };\n    } finally {\n      if (workspacePath) {\n        await fs.remove(workspacePath);\n      }\n    }\n  }\n}\n\nfunction scaffoldingTracker(auditLogger: AuditLogger) {\n  // prom-client metrics are deprecated in favour of OpenTelemetry metrics.\n  const promTaskCount = createCounterMetric({\n    name: 'scaffolder_task_count',\n    help: 'Count of task runs',\n    labelNames: ['template', 'user', 'result'],\n  });\n  const promTaskDuration = createHistogramMetric({\n    name: 'scaffolder_task_duration',\n    help: 'Duration of a task run',\n    labelNames: ['template', 'result'],\n  });\n  const promtStepCount = createCounterMetric({\n    name: 'scaffolder_step_count',\n    help: 'Count of step runs',\n    labelNames: ['template', 'step', 'result'],\n  });\n  const promStepDuration = createHistogramMetric({\n    name: 'scaffolder_step_duration',\n    help: 'Duration of a step runs',\n    labelNames: ['template', 'step', 'result'],\n  });\n\n  const meter = metrics.getMeter('default');\n  const taskCount = meter.createCounter('scaffolder.task.count', {\n    description: 'Count of task runs',\n  });\n\n  const taskDuration = meter.createHistogram('scaffolder.task.duration', {\n    description: 'Duration of a task run',\n    unit: 'seconds',\n  });\n\n  const stepCount = meter.createCounter('scaffolder.step.count', {\n    description: 'Count of step runs',\n  });\n\n  const stepDuration = meter.createHistogram('scaffolder.step.duration', {\n    description: 'Duration of a step runs',\n    unit: 'seconds',\n  });\n\n  async function taskStart(task: TaskContext) {\n    await task.emitLog(`Starting up task with ${task.spec.steps.length} steps`);\n    const template = task.spec.templateInfo?.entityRef || '';\n    const user = task.spec.user?.ref || '';\n\n    const startTime = process.hrtime();\n    const taskTimer = promTaskDuration.startTimer({\n      template,\n    });\n\n    function endTime() {\n      const delta = process.hrtime(startTime);\n      return delta[0] + delta[1] / 1e9;\n    }\n\n    async function skipDryRun(\n      step: TaskStep,\n      action: TemplateAction<JsonObject>,\n    ) {\n      task.emitLog(`Skipping because ${action.id} does not support dry-run`, {\n        stepId: step.id,\n        status: 'skipped',\n      });\n    }\n\n    async function markSuccessful() {\n      promTaskCount.inc({\n        template,\n        user,\n        result: 'ok',\n      });\n      taskTimer({ result: 'ok' });\n\n      taskCount.add(1, { template, user, result: 'ok' });\n      taskDuration.record(endTime(), {\n        result: 'ok',\n      });\n    }\n\n    async function markFailed(step: TaskStep, err: Error) {\n      await task.emitLog(String(err.stack), {\n        stepId: step.id,\n        status: 'failed',\n      });\n      promTaskCount.inc({\n        template,\n        user,\n        result: 'failed',\n      });\n      taskTimer({ result: 'failed' });\n\n      taskCount.add(1, { template, user, result: 'failed' });\n      taskDuration.record(endTime(), {\n        result: 'failed',\n      });\n    }\n\n    async function markCancelled(step: TaskStep) {\n      await task.emitLog(`Step ${step.id} has been cancelled.`, {\n        stepId: step.id,\n        status: 'cancelled',\n      });\n      promTaskCount.inc({\n        template,\n        user,\n        result: 'cancelled',\n      });\n      taskTimer({ result: 'cancelled' });\n\n      taskCount.add(1, { template, user, result: 'cancelled' });\n      taskDuration.record(endTime(), {\n        result: 'cancelled',\n      });\n    }\n\n    return {\n      skipDryRun,\n      markCancelled,\n      markSuccessful,\n      markFailed,\n    };\n  }\n\n  async function stepStart(task: TaskContext, step: TaskStep) {\n    await task.emitLog(`Beginning step ${step.name}`, {\n      stepId: step.id,\n      status: 'processing',\n    });\n    const template = task.spec.templateInfo?.entityRef || '';\n\n    const startTime = process.hrtime();\n    const stepTimer = promStepDuration.startTimer({\n      template,\n      step: step.name,\n    });\n\n    function endTime() {\n      const delta = process.hrtime(startTime);\n      return delta[0] + delta[1] / 1e9;\n    }\n\n    async function markSuccessful() {\n      await task.emitLog(`Finished step ${step.name}`, {\n        stepId: step.id,\n        status: 'completed',\n      });\n      promtStepCount.inc({\n        template,\n        step: step.name,\n        result: 'ok',\n      });\n      stepTimer({ result: 'ok' });\n\n      stepCount.add(1, { template, step: step.name, result: 'ok' });\n      stepDuration.record(endTime(), {\n        result: 'ok',\n      });\n      await auditLogger.auditLog({\n        actorId: 'scaffolder-backend',\n        eventName: 'ScaffolderTaskStepExecution',\n        stage: 'completion',\n        status: 'succeeded',\n        metadata: {\n          templateRef: template,\n          taskId: task.taskId,\n          stepId: step.id,\n          stepName: step.name,\n          stepAction: step.action,\n          isDryRun: task.isDryRun || false,\n        },\n        message: `Step ${step.name} (id: ${step.id}) of task ${task.taskId} succeeded`,\n      });\n    }\n\n    async function markCancelled() {\n      promtStepCount.inc({\n        template,\n        step: step.name,\n        result: 'cancelled',\n      });\n      stepTimer({ result: 'cancelled' });\n\n      stepCount.add(1, { template, step: step.name, result: 'cancelled' });\n      stepDuration.record(endTime(), {\n        result: 'cancelled',\n      });\n    }\n\n    async function markFailed(err: Error) {\n      promtStepCount.inc({\n        template,\n        step: step.name,\n        result: 'failed',\n      });\n      stepTimer({ result: 'failed' });\n\n      stepCount.add(1, { template, step: step.name, result: 'failed' });\n      stepDuration.record(endTime(), {\n        result: 'failed',\n      });\n\n      await auditLogger.auditLog({\n        actorId: 'scaffolder-backend',\n        eventName: 'ScaffolderTaskStepExecution',\n        stage: 'completion',\n        status: 'failed',\n        level: 'error',\n        metadata: {\n          templateRef: template,\n          taskId: task.taskId,\n          stepId: step.id,\n          stepName: step.name,\n          stepAction: step.action,\n          isDryRun: task.isDryRun || false,\n        },\n        errors: [\n          {\n            name: err.name,\n            message: err.message,\n            stack: err.stack,\n          },\n        ],\n        message: `Step ${step.name} (id: ${step.id}) of task ${task.taskId} failed`,\n      });\n    }\n\n    async function skipFalsy() {\n      await task.emitLog(\n        `Skipping step ${step.id} because its if condition was false`,\n        { stepId: step.id, status: 'skipped' },\n      );\n      stepTimer({ result: 'skipped' });\n\n      stepCount.add(1, { template, step: step.name, result: 'skipped' });\n      stepDuration.record(endTime(), {\n        result: 'skipped',\n      });\n    }\n\n    return {\n      markCancelled,\n      markFailed,\n      markSuccessful,\n      skipFalsy,\n    };\n  }\n\n  return {\n    taskStart,\n    stepStart,\n  };\n}\n"],"names":["WinstonLogger","winston","BackstageLoggerTransport","PassThrough","createConditionAuthorizer","scaffolderActionRules","createDefaultFilters","nunjucks","templated","isTruthy","generateExampleOutput","validateJsonSchema","errors","InputError","NotAllowedError","loggerToWinstonLogger","stringifyError","fs","path","SecureTemplater","actionExecutePermission","AuthorizeResult","createCounterMetric","createHistogramMetric","metrics"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/scaffolder/tasks/StorageTaskBroker.cjs.js b/dist/scaffolder/tasks/StorageTaskBroker.cjs.js
index 7de5b00ad9e1fb519397d91f1989451eb3f89709..c70a5dd1be2443c7dd1ab62c67c1ebde98a20c1b 100644
--- a/dist/scaffolder/tasks/StorageTaskBroker.cjs.js
+++ b/dist/scaffolder/tasks/StorageTaskBroker.cjs.js
@@ -10,17 +10,18 @@ var ObservableImpl__default = /*#__PURE__*/_interopDefaultCompat(ObservableImpl)
 
 class TaskManager {
   // Runs heartbeat internally
-  constructor(task, storage, signal, logger, workspaceService, auth) {
+  constructor(task, storage, signal, logger, workspaceService, auditLogger, auth) {
     this.task = task;
     this.storage = storage;
     this.signal = signal;
     this.logger = logger;
     this.workspaceService = workspaceService;
+    this.auditLogger = auditLogger;
     this.auth = auth;
   }
   isDone = false;
   heartbeatTimeoutId;
-  static create(task, storage, abortSignal, logger, auth, config, additionalWorkspaceProviders) {
+  static create(task, storage, abortSignal, logger, auditLogger, auth, config, additionalWorkspaceProviders) {
     const workspaceService = WorkspaceService.DefaultWorkspaceService.create(
       task,
       storage,
@@ -33,11 +34,15 @@ class TaskManager {
       abortSignal,
       logger,
       workspaceService,
+      auditLogger,
       auth
     );
     agent.startTimeout();
     return agent;
   }
+  get taskId() {
+    return this.task.taskId;
+  }
   get spec() {
     return this.task.spec;
   }
@@ -99,6 +104,34 @@ class TaskManager {
     if (this.heartbeatTimeoutId) {
       clearTimeout(this.heartbeatTimeoutId);
     }
+    const commonAuditFields = {
+      eventName: "ScaffolderTaskExecution",
+      actorId: "scaffolder-backend",
+      stage: "completion",
+      metadata: {
+        taskId: this.task.taskId,
+        taskParameters: this.task.spec.parameters
+      }
+    };
+    if (result === "failed") {
+      await this.auditLogger?.auditLog({
+        ...commonAuditFields,
+        status: "failed",
+        level: "error",
+        errors: [metadata?.error],
+        message: `Scaffolding task with taskId: ${this.task.taskId} failed`
+      });
+    } else {
+      await this.auditLogger?.auditLog({
+        ...commonAuditFields,
+        status: "succeeded",
+        metadata: {
+          ...commonAuditFields.metadata,
+          ...metadata
+        },
+        message: `Scaffolding task with taskId: ${this.task.taskId} completed successfully`
+      });
+    }
   }
   startTimeout() {
     this.heartbeatTimeoutId = setTimeout(async () => {
@@ -136,9 +169,10 @@ function defer() {
   return { promise, resolve };
 }
 class StorageTaskBroker {
-  constructor(storage, logger, config, auth, additionalWorkspaceProviders) {
+  constructor(storage, logger, auditLogger, config, auth, additionalWorkspaceProviders) {
     this.storage = storage;
     this.logger = logger;
+    this.auditLogger = auditLogger;
     this.config = config;
     this.auth = auth;
     this.additionalWorkspaceProviders = additionalWorkspaceProviders;
@@ -175,9 +209,7 @@ class StorageTaskBroker {
     });
   }
   async recoverTasks() {
-    const enabled = (this.config && this.config.getOptionalBoolean(
-      "scaffolder.EXPERIMENTAL_recoverTasks"
-    )) ?? false;
+    const enabled = this.config?.getOptionalBoolean("scaffolder.EXPERIMENTAL_recoverTasks") ?? false;
     if (enabled) {
       const defaultTimeout = { seconds: 30 };
       const timeout = helper.readDuration(
@@ -213,6 +245,7 @@ class StorageTaskBroker {
           this.storage,
           abortController.signal,
           this.logger,
+          this.auditLogger,
           this.auth,
           this.config,
           this.additionalWorkspaceProviders
@@ -275,6 +308,16 @@ class StorageTaskBroker {
     await Promise.all(
       tasks.map(async (task) => {
         try {
+          this.auditLogger.auditLog({
+            actorId: "scaffolder-backend",
+            eventName: "ScaffolderStaleTaskCancellation",
+            stage: "initiation",
+            status: "succeeded",
+            metadata: {
+              taskId: task.taskId
+            },
+            message: `Attempting to cancel Stale scaffolding task ${task.taskId} because the task worker lost connection to the task broker`
+          });
           await this.storage.completeTask({
             taskId: task.taskId,
             status: "failed",
@@ -282,8 +325,35 @@ class StorageTaskBroker {
               message: "The task was cancelled because the task worker lost connection to the task broker"
             }
           });
+          this.auditLogger.auditLog({
+            actorId: "scaffolder-backend",
+            eventName: "ScaffolderStaleTaskCancellation",
+            stage: "completion",
+            status: "succeeded",
+            metadata: {
+              taskId: task.taskId
+            },
+            message: `Stale scaffolding task ${task.taskId} successfully cancelled`
+          });
         } catch (error) {
-          this.logger.warn(`Failed to cancel task '${task.taskId}', ${error}`);
+          this.auditLogger.auditLog({
+            actorId: "scaffolder-backend",
+            eventName: "ScaffolderStaleTaskCancellation",
+            stage: "completion",
+            status: "failed",
+            level: "error",
+            metadata: {
+              taskId: task.taskId
+            },
+            errors: [
+              {
+                name: error.name,
+                message: error.message,
+                stack: error.stack
+              }
+            ],
+            message: `Failed to cancel stale scaffolding task ${task.taskId}`
+          });
         }
       })
     );
diff --git a/dist/scaffolder/tasks/StorageTaskBroker.cjs.js.map b/dist/scaffolder/tasks/StorageTaskBroker.cjs.js.map
index 2d5bdf995e048b0274465b48cb2e3e4e2bc99980..f43c5fa2454b31f16e0d0ec936739d20c570ee15 100644
--- a/dist/scaffolder/tasks/StorageTaskBroker.cjs.js.map
+++ b/dist/scaffolder/tasks/StorageTaskBroker.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"StorageTaskBroker.cjs.js","sources":["../../../src/scaffolder/tasks/StorageTaskBroker.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { TaskSpec } from '@backstage/plugin-scaffolder-common';\nimport { JsonObject, JsonValue, Observable } from '@backstage/types';\nimport { Logger } from 'winston';\nimport ObservableImpl from 'zen-observable';\nimport {\n  SerializedTask,\n  SerializedTaskEvent,\n  TaskBroker,\n  TaskBrokerDispatchOptions,\n  TaskCompletionState,\n  TaskContext,\n  TaskSecrets,\n  TaskStatus,\n} from '@backstage/plugin-scaffolder-node';\nimport { InternalTaskSecrets, TaskStore } from './types';\nimport { readDuration } from './helper';\nimport {\n  AuthService,\n  BackstageCredentials,\n} from '@backstage/backend-plugin-api';\nimport { DefaultWorkspaceService, WorkspaceService } from './WorkspaceService';\nimport { WorkspaceProvider } from '@backstage/plugin-scaffolder-node/alpha';\n\ntype TaskState = {\n  checkpoints: {\n    [key: string]:\n      | {\n          status: 'failed';\n          reason: string;\n        }\n      | {\n          status: 'success';\n          value: JsonValue;\n        };\n  };\n};\n/**\n * TaskManager\n *\n * @public\n */\nexport class TaskManager implements TaskContext {\n  private isDone = false;\n\n  private heartbeatTimeoutId?: ReturnType<typeof setInterval>;\n\n  static create(\n    task: CurrentClaimedTask,\n    storage: TaskStore,\n    abortSignal: AbortSignal,\n    logger: Logger,\n    auth?: AuthService,\n    config?: Config,\n    additionalWorkspaceProviders?: Record<string, WorkspaceProvider>,\n  ) {\n    const workspaceService = DefaultWorkspaceService.create(\n      task,\n      storage,\n      additionalWorkspaceProviders,\n      config,\n    );\n\n    const agent = new TaskManager(\n      task,\n      storage,\n      abortSignal,\n      logger,\n      workspaceService,\n      auth,\n    );\n    agent.startTimeout();\n    return agent;\n  }\n\n  // Runs heartbeat internally\n  private constructor(\n    private readonly task: CurrentClaimedTask,\n    private readonly storage: TaskStore,\n    private readonly signal: AbortSignal,\n    private readonly logger: Logger,\n    private readonly workspaceService: WorkspaceService,\n    private readonly auth?: AuthService,\n  ) {}\n\n  get spec() {\n    return this.task.spec;\n  }\n\n  get cancelSignal() {\n    return this.signal;\n  }\n\n  get secrets() {\n    return this.task.secrets;\n  }\n\n  get createdBy() {\n    return this.task.createdBy;\n  }\n\n  async getWorkspaceName() {\n    return this.task.taskId;\n  }\n\n  async rehydrateWorkspace?(options: {\n    taskId: string;\n    targetPath: string;\n  }): Promise<void> {\n    await this.workspaceService.rehydrateWorkspace(options);\n  }\n\n  get done() {\n    return this.isDone;\n  }\n\n  async emitLog(message: string, logMetadata?: JsonObject): Promise<void> {\n    await this.storage.emitLogEvent({\n      taskId: this.task.taskId,\n      body: { message, ...logMetadata },\n    });\n  }\n\n  async getTaskState?(): Promise<\n    | {\n        state?: JsonObject;\n      }\n    | undefined\n  > {\n    return this.storage.getTaskState?.({ taskId: this.task.taskId });\n  }\n\n  async updateCheckpoint?(\n    options:\n      | {\n          key: string;\n          status: 'success';\n          value: JsonValue;\n        }\n      | {\n          key: string;\n          status: 'failed';\n          reason: string;\n        },\n  ): Promise<void> {\n    const { key, ...value } = options;\n    if (this.task.state) {\n      (this.task.state as TaskState).checkpoints[key] = value;\n    } else {\n      this.task.state = { checkpoints: { [key]: value } };\n    }\n    await this.storage.saveTaskState?.({\n      taskId: this.task.taskId,\n      state: this.task.state,\n    });\n  }\n\n  async serializeWorkspace?(options: { path: string }): Promise<void> {\n    await this.workspaceService.serializeWorkspace(options);\n  }\n\n  async cleanWorkspace?(): Promise<void> {\n    await this.workspaceService.cleanWorkspace();\n  }\n\n  async complete(\n    result: TaskCompletionState,\n    metadata?: JsonObject,\n  ): Promise<void> {\n    await this.storage.completeTask({\n      taskId: this.task.taskId,\n      status: result === 'failed' ? 'failed' : 'completed',\n      eventBody: {\n        message: `Run completed with status: ${result}`,\n        ...metadata,\n      },\n    });\n    this.isDone = true;\n    if (this.heartbeatTimeoutId) {\n      clearTimeout(this.heartbeatTimeoutId);\n    }\n  }\n\n  private startTimeout() {\n    this.heartbeatTimeoutId = setTimeout(async () => {\n      try {\n        await this.storage.heartbeatTask(this.task.taskId);\n        this.startTimeout();\n      } catch (error) {\n        this.isDone = true;\n\n        this.logger.error(\n          `Heartbeat for task ${this.task.taskId} failed`,\n          error,\n        );\n      }\n    }, 1000);\n  }\n\n  async getInitiatorCredentials(): Promise<BackstageCredentials> {\n    const secrets = this.task.secrets as InternalTaskSecrets;\n\n    if (secrets && secrets.__initiatorCredentials) {\n      return JSON.parse(secrets.__initiatorCredentials);\n    }\n    if (!this.auth) {\n      throw new Error(\n        'Failed to create none credentials in scaffolder task. The TaskManager has not been initialized with an auth service implementation',\n      );\n    }\n    return this.auth.getNoneCredentials();\n  }\n}\n\n/**\n * Stores the state of the current claimed task passed to the TaskContext\n *\n * @public\n */\nexport interface CurrentClaimedTask {\n  /**\n   * The TaskSpec of the current claimed task.\n   */\n  spec: TaskSpec;\n  /**\n   * The uuid of the current claimed task.\n   */\n  taskId: string;\n  /**\n   * The secrets that are stored with the task.\n   */\n  secrets?: TaskSecrets;\n  /**\n   * The state of checkpoints of the task.\n   */\n  state?: JsonObject;\n  /**\n   * The creator of the task.\n   */\n  createdBy?: string;\n  /**\n   * The workspace of the task.\n   */\n  workspace?: Promise<Buffer>;\n}\n\nfunction defer() {\n  let resolve = () => {};\n  const promise = new Promise<void>(_resolve => {\n    resolve = _resolve;\n  });\n  return { promise, resolve };\n}\n\nexport class StorageTaskBroker implements TaskBroker {\n  constructor(\n    private readonly storage: TaskStore,\n    private readonly logger: Logger,\n    private readonly config?: Config,\n    private readonly auth?: AuthService,\n    private readonly additionalWorkspaceProviders?: Record<\n      string,\n      WorkspaceProvider\n    >,\n  ) {}\n\n  async list(options?: {\n    createdBy?: string;\n    status?: TaskStatus;\n    filters?: {\n      createdBy?: string | string[];\n      status?: TaskStatus | TaskStatus[];\n    };\n    pagination?: {\n      limit?: number;\n      offset?: number;\n    };\n    order?: { order: 'asc' | 'desc'; field: string }[];\n  }): Promise<{ tasks: SerializedTask[]; totalTasks?: number }> {\n    if (!this.storage.list) {\n      throw new Error(\n        'TaskStore does not implement the list method. Please implement the list method to be able to list tasks',\n      );\n    }\n    return await this.storage.list(options ?? {});\n  }\n\n  private deferredDispatch = defer();\n\n  private async registerCancellable(\n    taskId: string,\n    abortController: AbortController,\n  ) {\n    let shouldUnsubscribe = false;\n    const subscription = this.event$({ taskId, after: undefined }).subscribe({\n      error: _ => {\n        subscription.unsubscribe();\n      },\n      next: ({ events }) => {\n        for (const event of events) {\n          if (event.type === 'cancelled') {\n            abortController.abort();\n            shouldUnsubscribe = true;\n          }\n\n          if (event.type === 'completion' && !event.isTaskRecoverable) {\n            shouldUnsubscribe = true;\n          }\n        }\n        if (shouldUnsubscribe) {\n          subscription.unsubscribe();\n        }\n      },\n    });\n  }\n\n  public async recoverTasks(): Promise<void> {\n    const enabled =\n      (this.config &&\n        this.config.getOptionalBoolean(\n          'scaffolder.EXPERIMENTAL_recoverTasks',\n        )) ??\n      false;\n\n    if (enabled) {\n      const defaultTimeout = { seconds: 30 };\n      const timeout = readDuration(\n        this.config,\n        'scaffolder.EXPERIMENTAL_recoverTasksTimeout',\n        defaultTimeout,\n      );\n      const { ids: recoveredTaskIds } = (await this.storage.recoverTasks?.({\n        timeout,\n      })) ?? { ids: [] };\n      if (recoveredTaskIds.length > 0) {\n        this.signalDispatch();\n      }\n    }\n  }\n\n  /**\n   * {@inheritdoc TaskBroker.claim}\n   */\n  async claim(): Promise<TaskContext> {\n    for (;;) {\n      const pendingTask = await this.storage.claimTask();\n      if (pendingTask) {\n        const abortController = new AbortController();\n        await this.registerCancellable(pendingTask.id, abortController);\n        return TaskManager.create(\n          {\n            taskId: pendingTask.id,\n            spec: pendingTask.spec,\n            secrets: pendingTask.secrets,\n            createdBy: pendingTask.createdBy,\n            state: pendingTask.state,\n          },\n          this.storage,\n          abortController.signal,\n          this.logger,\n          this.auth,\n          this.config,\n          this.additionalWorkspaceProviders,\n        );\n      }\n\n      await this.waitForDispatch();\n    }\n  }\n\n  /**\n   * {@inheritdoc TaskBroker.dispatch}\n   */\n  async dispatch(\n    options: TaskBrokerDispatchOptions,\n  ): Promise<{ taskId: string }> {\n    const taskRow = await this.storage.createTask(options);\n    this.signalDispatch();\n    return {\n      taskId: taskRow.taskId,\n    };\n  }\n\n  /**\n   * {@inheritdoc TaskBroker.get}\n   */\n  async get(taskId: string): Promise<SerializedTask> {\n    return this.storage.getTask(taskId);\n  }\n\n  /**\n   * {@inheritdoc TaskBroker.event$}\n   */\n  event$(options: {\n    taskId: string;\n    after?: number;\n  }): Observable<{ events: SerializedTaskEvent[] }> {\n    return new ObservableImpl(observer => {\n      const { taskId } = options;\n\n      let after = options.after;\n      let cancelled = false;\n\n      (async () => {\n        const task = await this.storage.getTask(taskId);\n        const isTaskRecoverable =\n          task.spec.EXPERIMENTAL_recovery?.EXPERIMENTAL_strategy ===\n          'startOver';\n\n        while (!cancelled) {\n          const result = await this.storage.listEvents({\n            isTaskRecoverable,\n            taskId,\n            after,\n          });\n          const { events } = result;\n          if (events.length) {\n            after = events[events.length - 1].id;\n            observer.next(result);\n          }\n\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n      })();\n\n      return () => {\n        cancelled = true;\n      };\n    });\n  }\n\n  /**\n   * {@inheritdoc TaskBroker.vacuumTasks}\n   */\n  async vacuumTasks(options: { timeoutS: number }): Promise<void> {\n    const { tasks } = await this.storage.listStaleTasks(options);\n    await Promise.all(\n      tasks.map(async task => {\n        try {\n          await this.storage.completeTask({\n            taskId: task.taskId,\n            status: 'failed',\n            eventBody: {\n              message:\n                'The task was cancelled because the task worker lost connection to the task broker',\n            },\n          });\n        } catch (error) {\n          this.logger.warn(`Failed to cancel task '${task.taskId}', ${error}`);\n        }\n      }),\n    );\n  }\n\n  private waitForDispatch() {\n    return this.deferredDispatch.promise;\n  }\n\n  private signalDispatch() {\n    this.deferredDispatch.resolve();\n    this.deferredDispatch = defer();\n  }\n\n  async cancel(taskId: string) {\n    const { events } = await this.storage.listEvents({ taskId });\n    const currentStepId =\n      events.length > 0\n        ? events\n            .filter(({ body }) => body?.stepId)\n            .reduce((prev, curr) => (prev.id > curr.id ? prev : curr)).body\n            .stepId\n        : 0;\n\n    await this.storage.cancelTask?.({\n      taskId,\n      body: {\n        message: `Step ${currentStepId} has been cancelled.`,\n        stepId: currentStepId,\n        status: 'cancelled',\n      },\n    });\n  }\n\n  async retry?(taskId: string): Promise<void> {\n    await this.storage.retryTask?.({ taskId });\n    this.signalDispatch();\n  }\n}\n"],"names":["DefaultWorkspaceService","readDuration","ObservableImpl"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"StorageTaskBroker.cjs.js","sources":["../../../src/scaffolder/tasks/StorageTaskBroker.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { TaskSpec } from '@backstage/plugin-scaffolder-common';\nimport { JsonObject, JsonValue, Observable } from '@backstage/types';\nimport { Logger } from 'winston';\nimport ObservableImpl from 'zen-observable';\nimport {\n  SerializedTask,\n  SerializedTaskEvent,\n  TaskBroker,\n  TaskBrokerDispatchOptions,\n  TaskCompletionState,\n  TaskContext,\n  TaskSecrets,\n  TaskStatus,\n} from '@backstage/plugin-scaffolder-node';\nimport { InternalTaskSecrets, TaskStore } from './types';\nimport { readDuration } from './helper';\nimport {\n  AuthService,\n  BackstageCredentials,\n} from '@backstage/backend-plugin-api';\nimport { DefaultWorkspaceService, WorkspaceService } from './WorkspaceService';\nimport { WorkspaceProvider } from '@backstage/plugin-scaffolder-node/alpha';\n\nimport { AuditLogger } from '@janus-idp/backstage-plugin-audit-log-node';\n\ntype TaskState = {\n  checkpoints: {\n    [key: string]:\n      | {\n          status: 'failed';\n          reason: string;\n        }\n      | {\n          status: 'success';\n          value: JsonValue;\n        };\n  };\n};\n/**\n * TaskManager\n *\n * @public\n */\nexport class TaskManager implements TaskContext {\n  private isDone = false;\n\n  private heartbeatTimeoutId?: ReturnType<typeof setInterval>;\n\n  static create(\n    task: CurrentClaimedTask,\n    storage: TaskStore,\n    abortSignal: AbortSignal,\n    logger: Logger,\n    auditLogger: AuditLogger,\n    auth?: AuthService,\n    config?: Config,\n    additionalWorkspaceProviders?: Record<string, WorkspaceProvider>,\n  ) {\n    const workspaceService = DefaultWorkspaceService.create(\n      task,\n      storage,\n      additionalWorkspaceProviders,\n      config,\n    );\n\n    const agent = new TaskManager(\n      task,\n      storage,\n      abortSignal,\n      logger,\n      workspaceService,\n      auditLogger,\n      auth,\n    );\n    agent.startTimeout();\n    return agent;\n  }\n\n  // Runs heartbeat internally\n  private constructor(\n    private readonly task: CurrentClaimedTask,\n    private readonly storage: TaskStore,\n    private readonly signal: AbortSignal,\n    private readonly logger: Logger,\n    private readonly workspaceService: WorkspaceService,\n    private readonly auditLogger: AuditLogger,\n    private readonly auth?: AuthService,\n  ) {}\n\n  get taskId() {\n    return this.task.taskId;\n  }\n\n  get spec() {\n    return this.task.spec;\n  }\n\n  get cancelSignal() {\n    return this.signal;\n  }\n\n  get secrets() {\n    return this.task.secrets;\n  }\n\n  get createdBy() {\n    return this.task.createdBy;\n  }\n\n  async getWorkspaceName() {\n    return this.task.taskId;\n  }\n\n  async rehydrateWorkspace?(options: {\n    taskId: string;\n    targetPath: string;\n  }): Promise<void> {\n    await this.workspaceService.rehydrateWorkspace(options);\n  }\n\n  get done() {\n    return this.isDone;\n  }\n\n  async emitLog(message: string, logMetadata?: JsonObject): Promise<void> {\n    await this.storage.emitLogEvent({\n      taskId: this.task.taskId,\n      body: { message, ...logMetadata },\n    });\n  }\n\n  async getTaskState?(): Promise<\n    | {\n        state?: JsonObject;\n      }\n    | undefined\n  > {\n    return this.storage.getTaskState?.({ taskId: this.task.taskId });\n  }\n\n  async updateCheckpoint?(\n    options:\n      | {\n          key: string;\n          status: 'success';\n          value: JsonValue;\n        }\n      | {\n          key: string;\n          status: 'failed';\n          reason: string;\n        },\n  ): Promise<void> {\n    const { key, ...value } = options;\n    if (this.task.state) {\n      (this.task.state as TaskState).checkpoints[key] = value;\n    } else {\n      this.task.state = { checkpoints: { [key]: value } };\n    }\n    await this.storage.saveTaskState?.({\n      taskId: this.task.taskId,\n      state: this.task.state,\n    });\n  }\n\n  async serializeWorkspace?(options: { path: string }): Promise<void> {\n    await this.workspaceService.serializeWorkspace(options);\n  }\n\n  async cleanWorkspace?(): Promise<void> {\n    await this.workspaceService.cleanWorkspace();\n  }\n\n  async complete(\n    result: TaskCompletionState,\n    metadata?: JsonObject,\n  ): Promise<void> {\n    await this.storage.completeTask({\n      taskId: this.task.taskId,\n      status: result === 'failed' ? 'failed' : 'completed',\n      eventBody: {\n        message: `Run completed with status: ${result}`,\n        ...metadata,\n      },\n    });\n    this.isDone = true;\n    if (this.heartbeatTimeoutId) {\n      clearTimeout(this.heartbeatTimeoutId);\n    }\n    const commonAuditFields = {\n      eventName: 'ScaffolderTaskExecution',\n      actorId: 'scaffolder-backend',\n      stage: 'completion',\n      metadata: {\n        taskId: this.task.taskId,\n        taskParameters: this.task.spec.parameters,\n      },\n    };\n    if (result === 'failed') {\n      await this.auditLogger?.auditLog({\n        ...commonAuditFields,\n        status: 'failed',\n        level: 'error',\n        errors: [metadata?.error],\n        message: `Scaffolding task with taskId: ${this.task.taskId} failed`,\n      });\n    } else {\n      await this.auditLogger?.auditLog({\n        ...commonAuditFields,\n        status: 'succeeded',\n        metadata: {\n          ...commonAuditFields.metadata,\n          ...metadata,\n        },\n        message: `Scaffolding task with taskId: ${this.task.taskId} completed successfully`,\n      });\n    }\n  }\n\n  private startTimeout() {\n    this.heartbeatTimeoutId = setTimeout(async () => {\n      try {\n        await this.storage.heartbeatTask(this.task.taskId);\n        this.startTimeout();\n      } catch (error) {\n        this.isDone = true;\n\n        this.logger.error(\n          `Heartbeat for task ${this.task.taskId} failed`,\n          error,\n        );\n      }\n    }, 1000);\n  }\n\n  async getInitiatorCredentials(): Promise<BackstageCredentials> {\n    const secrets = this.task.secrets as InternalTaskSecrets;\n\n    if (secrets && secrets.__initiatorCredentials) {\n      return JSON.parse(secrets.__initiatorCredentials);\n    }\n    if (!this.auth) {\n      throw new Error(\n        'Failed to create none credentials in scaffolder task. The TaskManager has not been initialized with an auth service implementation',\n      );\n    }\n    return this.auth.getNoneCredentials();\n  }\n}\n\n/**\n * Stores the state of the current claimed task passed to the TaskContext\n *\n * @public\n */\nexport interface CurrentClaimedTask {\n  /**\n   * The TaskSpec of the current claimed task.\n   */\n  spec: TaskSpec;\n  /**\n   * The uuid of the current claimed task.\n   */\n  taskId: string;\n  /**\n   * The secrets that are stored with the task.\n   */\n  secrets?: TaskSecrets;\n  /**\n   * The state of checkpoints of the task.\n   */\n  state?: JsonObject;\n  /**\n   * The creator of the task.\n   */\n  createdBy?: string;\n  /**\n   * The workspace of the task.\n   */\n  workspace?: Promise<Buffer>;\n}\n\nfunction defer() {\n  let resolve = () => {};\n  const promise = new Promise<void>(_resolve => {\n    resolve = _resolve;\n  });\n  return { promise, resolve };\n}\n\nexport class StorageTaskBroker implements TaskBroker {\n  constructor(\n    private readonly storage: TaskStore,\n    private readonly logger: Logger,\n    private readonly auditLogger: AuditLogger,\n    private readonly config?: Config,\n    private readonly auth?: AuthService,\n    private readonly additionalWorkspaceProviders?: Record<\n      string,\n      WorkspaceProvider\n    >,\n  ) {}\n\n  async list(options?: {\n    createdBy?: string;\n    status?: TaskStatus;\n    filters?: {\n      createdBy?: string | string[];\n      status?: TaskStatus | TaskStatus[];\n    };\n    pagination?: {\n      limit?: number;\n      offset?: number;\n    };\n    order?: { order: 'asc' | 'desc'; field: string }[];\n  }): Promise<{ tasks: SerializedTask[]; totalTasks?: number }> {\n    if (!this.storage.list) {\n      throw new Error(\n        'TaskStore does not implement the list method. Please implement the list method to be able to list tasks',\n      );\n    }\n    return await this.storage.list(options ?? {});\n  }\n\n  private deferredDispatch = defer();\n\n  private async registerCancellable(\n    taskId: string,\n    abortController: AbortController,\n  ) {\n    let shouldUnsubscribe = false;\n    const subscription = this.event$({ taskId, after: undefined }).subscribe({\n      error: _ => {\n        subscription.unsubscribe();\n      },\n      next: ({ events }) => {\n        for (const event of events) {\n          if (event.type === 'cancelled') {\n            abortController.abort();\n            shouldUnsubscribe = true;\n          }\n\n          if (event.type === 'completion' && !event.isTaskRecoverable) {\n            shouldUnsubscribe = true;\n          }\n        }\n        if (shouldUnsubscribe) {\n          subscription.unsubscribe();\n        }\n      },\n    });\n  }\n\n  public async recoverTasks(): Promise<void> {\n    const enabled =\n      this.config?.getOptionalBoolean('scaffolder.EXPERIMENTAL_recoverTasks') ??\n      false;\n\n    if (enabled) {\n      const defaultTimeout = { seconds: 30 };\n      const timeout = readDuration(\n        this.config,\n        'scaffolder.EXPERIMENTAL_recoverTasksTimeout',\n        defaultTimeout,\n      );\n      const { ids: recoveredTaskIds } = (await this.storage.recoverTasks?.({\n        timeout,\n      })) ?? { ids: [] };\n      if (recoveredTaskIds.length > 0) {\n        this.signalDispatch();\n      }\n    }\n  }\n\n  /**\n   * {@inheritdoc TaskBroker.claim}\n   */\n  async claim(): Promise<TaskContext> {\n    for (;;) {\n      const pendingTask = await this.storage.claimTask();\n      if (pendingTask) {\n        const abortController = new AbortController();\n        await this.registerCancellable(pendingTask.id, abortController);\n        return TaskManager.create(\n          {\n            taskId: pendingTask.id,\n            spec: pendingTask.spec,\n            secrets: pendingTask.secrets,\n            createdBy: pendingTask.createdBy,\n            state: pendingTask.state,\n          },\n          this.storage,\n          abortController.signal,\n          this.logger,\n          this.auditLogger,\n          this.auth,\n          this.config,\n          this.additionalWorkspaceProviders,\n        );\n      }\n\n      await this.waitForDispatch();\n    }\n  }\n\n  /**\n   * {@inheritdoc TaskBroker.dispatch}\n   */\n  async dispatch(\n    options: TaskBrokerDispatchOptions,\n  ): Promise<{ taskId: string }> {\n    const taskRow = await this.storage.createTask(options);\n    this.signalDispatch();\n    return {\n      taskId: taskRow.taskId,\n    };\n  }\n\n  /**\n   * {@inheritdoc TaskBroker.get}\n   */\n  async get(taskId: string): Promise<SerializedTask> {\n    return this.storage.getTask(taskId);\n  }\n\n  /**\n   * {@inheritdoc TaskBroker.event$}\n   */\n  event$(options: {\n    taskId: string;\n    after?: number;\n  }): Observable<{ events: SerializedTaskEvent[] }> {\n    return new ObservableImpl(observer => {\n      const { taskId } = options;\n\n      let after = options.after;\n      let cancelled = false;\n\n      (async () => {\n        const task = await this.storage.getTask(taskId);\n        const isTaskRecoverable =\n          task.spec.EXPERIMENTAL_recovery?.EXPERIMENTAL_strategy ===\n          'startOver';\n\n        while (!cancelled) {\n          const result = await this.storage.listEvents({\n            isTaskRecoverable,\n            taskId,\n            after,\n          });\n          const { events } = result;\n          if (events.length) {\n            after = events[events.length - 1].id;\n            observer.next(result);\n          }\n\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n      })();\n\n      return () => {\n        cancelled = true;\n      };\n    });\n  }\n\n  /**\n   * {@inheritdoc TaskBroker.vacuumTasks}\n   */\n  async vacuumTasks(options: { timeoutS: number }): Promise<void> {\n    const { tasks } = await this.storage.listStaleTasks(options);\n    await Promise.all(\n      tasks.map(async task => {\n        try {\n          this.auditLogger.auditLog({\n            actorId: 'scaffolder-backend',\n            eventName: 'ScaffolderStaleTaskCancellation',\n            stage: 'initiation',\n            status: 'succeeded',\n            metadata: {\n              taskId: task.taskId,\n            },\n            message: `Attempting to cancel Stale scaffolding task ${task.taskId} because the task worker lost connection to the task broker`,\n          });\n          await this.storage.completeTask({\n            taskId: task.taskId,\n            status: 'failed',\n            eventBody: {\n              message:\n                'The task was cancelled because the task worker lost connection to the task broker',\n            },\n          });\n          this.auditLogger.auditLog({\n            actorId: 'scaffolder-backend',\n            eventName: 'ScaffolderStaleTaskCancellation',\n            stage: 'completion',\n            status: 'succeeded',\n            metadata: {\n              taskId: task.taskId,\n            },\n            message: `Stale scaffolding task ${task.taskId} successfully cancelled`,\n          });\n        } catch (error) {\n          this.auditLogger.auditLog({\n            actorId: 'scaffolder-backend',\n            eventName: 'ScaffolderStaleTaskCancellation',\n            stage: 'completion',\n            status: 'failed',\n            level: 'error',\n            metadata: {\n              taskId: task.taskId,\n            },\n            errors: [\n              {\n                name: error.name,\n                message: error.message,\n                stack: error.stack,\n              },\n            ],\n            message: `Failed to cancel stale scaffolding task ${task.taskId}`,\n          });\n        }\n      }),\n    );\n  }\n\n  private waitForDispatch() {\n    return this.deferredDispatch.promise;\n  }\n\n  private signalDispatch() {\n    this.deferredDispatch.resolve();\n    this.deferredDispatch = defer();\n  }\n\n  async cancel(taskId: string) {\n    const { events } = await this.storage.listEvents({ taskId });\n    const currentStepId =\n      events.length > 0\n        ? events\n            .filter(({ body }) => body?.stepId)\n            .reduce((prev, curr) => (prev.id > curr.id ? prev : curr)).body\n            .stepId\n        : 0;\n\n    await this.storage.cancelTask?.({\n      taskId,\n      body: {\n        message: `Step ${currentStepId} has been cancelled.`,\n        stepId: currentStepId,\n        status: 'cancelled',\n      },\n    });\n  }\n\n  async retry?(taskId: string): Promise<void> {\n    await this.storage.retryTask?.({ taskId });\n    this.signalDispatch();\n  }\n}\n"],"names":["DefaultWorkspaceService","readDuration","ObservableImpl"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/scaffolder/tasks/TaskWorker.cjs.js b/dist/scaffolder/tasks/TaskWorker.cjs.js
index 3c432ad8854984e61df2265a4a044cb6ed4307c2..f959924862b85f14074962c6f0b0302b0a5dec20 100644
--- a/dist/scaffolder/tasks/TaskWorker.cjs.js
+++ b/dist/scaffolder/tasks/TaskWorker.cjs.js
@@ -13,6 +13,7 @@ class TaskWorker {
     this.options = options;
     this.stopWorkers = false;
     this.logger = options.logger;
+    this.auditLogger = options.auditLogger;
     this.taskQueue = new PQueue__default.default({
       concurrency: options.concurrentTasksLimit
     });
@@ -20,6 +21,7 @@ class TaskWorker {
   taskQueue;
   logger;
   stopWorkers;
+  auditLogger;
   static async create(options) {
     const {
       taskBroker,
@@ -31,12 +33,14 @@ class TaskWorker {
       concurrentTasksLimit = 10,
       // from 1 to Infinity
       additionalTemplateGlobals,
-      permissions
+      permissions,
+      auditLogger
     } = options;
     const workflowRunner = new NunjucksWorkflowRunner.NunjucksWorkflowRunner({
       actionRegistry,
       integrations,
       logger,
+      auditLogger,
       workingDirectory,
       additionalTemplateFilters,
       additionalTemplateGlobals,
@@ -46,7 +50,8 @@ class TaskWorker {
       taskBroker,
       runners: { workflowRunner },
       concurrentTasksLimit,
-      permissions
+      permissions,
+      auditLogger
     });
   }
   async recoverTasks() {
@@ -88,6 +93,18 @@ class TaskWorker {
   }
   async runOneTask(task) {
     try {
+      await this.auditLogger?.auditLog({
+        eventName: "ScaffolderTaskExecution",
+        actorId: "scaffolder-backend",
+        stage: "initiation",
+        status: "succeeded",
+        metadata: {
+          taskId: task.taskId,
+          taskParameters: task.spec.parameters,
+          templateRef: task.spec.templateInfo?.entityRef
+        },
+        message: `Scaffolding task with taskId: ${task.taskId} initiated`
+      });
       if (task.spec.apiVersion !== "scaffolder.backstage.io/v1beta3") {
         throw new Error(
           `Unsupported Template apiVersion ${task.spec.apiVersion}`
diff --git a/dist/scaffolder/tasks/TaskWorker.cjs.js.map b/dist/scaffolder/tasks/TaskWorker.cjs.js.map
index f34e0d282f02ad2291a23fd71f864d4740678c2a..20ee2a529cd976e163ad3845eda8785bb90f35fe 100644
--- a/dist/scaffolder/tasks/TaskWorker.cjs.js.map
+++ b/dist/scaffolder/tasks/TaskWorker.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"TaskWorker.cjs.js","sources":["../../../src/scaffolder/tasks/TaskWorker.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WorkflowRunner } from './types';\nimport {\n  TaskContext,\n  TaskBroker,\n  TemplateFilter,\n  TemplateGlobal,\n} from '@backstage/plugin-scaffolder-node';\nimport PQueue from 'p-queue';\nimport { NunjucksWorkflowRunner } from './NunjucksWorkflowRunner';\nimport { Logger } from 'winston';\nimport { TemplateActionRegistry } from '../actions';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { assertError, stringifyError } from '@backstage/errors';\nimport { PermissionEvaluator } from '@backstage/plugin-permission-common';\n\n/**\n * TaskWorkerOptions\n *\n * @public\n */\nexport type TaskWorkerOptions = {\n  taskBroker: TaskBroker;\n  runners: {\n    workflowRunner: WorkflowRunner;\n  };\n  concurrentTasksLimit: number;\n  permissions?: PermissionEvaluator;\n  logger?: Logger;\n};\n\n/**\n * CreateWorkerOptions\n *\n * @public\n */\nexport type CreateWorkerOptions = {\n  taskBroker: TaskBroker;\n  actionRegistry: TemplateActionRegistry;\n  integrations: ScmIntegrations;\n  workingDirectory: string;\n  logger: Logger;\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n  /**\n   * The number of tasks that can be executed at the same time by the worker\n   * @defaultValue 10\n   * @example\n   * ```\n   * {\n   *   concurrentTasksLimit: 1,\n   *   // OR\n   *   concurrentTasksLimit: Infinity\n   * }\n   * ```\n   */\n  concurrentTasksLimit?: number;\n  additionalTemplateGlobals?: Record<string, TemplateGlobal>;\n  permissions?: PermissionEvaluator;\n};\n\n/**\n * TaskWorker\n *\n * @public\n */\nexport class TaskWorker {\n  private taskQueue: PQueue;\n  private logger: Logger | undefined;\n  private stopWorkers: boolean;\n\n  private constructor(private readonly options: TaskWorkerOptions) {\n    this.stopWorkers = false;\n    this.logger = options.logger;\n    this.taskQueue = new PQueue({\n      concurrency: options.concurrentTasksLimit,\n    });\n  }\n\n  static async create(options: CreateWorkerOptions): Promise<TaskWorker> {\n    const {\n      taskBroker,\n      logger,\n      actionRegistry,\n      integrations,\n      workingDirectory,\n      additionalTemplateFilters,\n      concurrentTasksLimit = 10, // from 1 to Infinity\n      additionalTemplateGlobals,\n      permissions,\n    } = options;\n\n    const workflowRunner = new NunjucksWorkflowRunner({\n      actionRegistry,\n      integrations,\n      logger,\n      workingDirectory,\n      additionalTemplateFilters,\n      additionalTemplateGlobals,\n      permissions,\n    });\n\n    return new TaskWorker({\n      taskBroker: taskBroker,\n      runners: { workflowRunner },\n      concurrentTasksLimit,\n      permissions,\n    });\n  }\n\n  async recoverTasks() {\n    try {\n      await this.options.taskBroker.recoverTasks?.();\n    } catch (err) {\n      this.logger?.error(stringifyError(err));\n    }\n  }\n\n  start() {\n    (async () => {\n      while (!this.stopWorkers) {\n        await new Promise(resolve => setTimeout(resolve, 10000));\n        await this.recoverTasks();\n      }\n    })();\n    (async () => {\n      while (!this.stopWorkers) {\n        await this.onReadyToClaimTask();\n        if (!this.stopWorkers) {\n          const task = await this.options.taskBroker.claim();\n          void this.taskQueue.add(() => this.runOneTask(task));\n        }\n      }\n    })();\n  }\n\n  stop() {\n    this.stopWorkers = true;\n  }\n\n  protected onReadyToClaimTask(): Promise<void> {\n    if (this.taskQueue.pending < this.options.concurrentTasksLimit) {\n      return Promise.resolve();\n    }\n    return new Promise(resolve => {\n      // \"next\" event emits when a task completes\n      // https://github.com/sindresorhus/p-queue#next\n      this.taskQueue.once('next', () => {\n        resolve();\n      });\n    });\n  }\n\n  async runOneTask(task: TaskContext) {\n    try {\n      if (task.spec.apiVersion !== 'scaffolder.backstage.io/v1beta3') {\n        throw new Error(\n          `Unsupported Template apiVersion ${task.spec.apiVersion}`,\n        );\n      }\n\n      const { output } = await this.options.runners.workflowRunner.execute(\n        task,\n      );\n\n      await task.complete('completed', { output });\n    } catch (error) {\n      assertError(error);\n      await task.complete('failed', {\n        error: { name: error.name, message: error.message },\n      });\n    }\n  }\n}\n"],"names":["PQueue","NunjucksWorkflowRunner","stringifyError","assertError"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"TaskWorker.cjs.js","sources":["../../../src/scaffolder/tasks/TaskWorker.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WorkflowRunner } from './types';\nimport {\n  TaskContext,\n  TaskBroker,\n  TemplateFilter,\n  TemplateGlobal,\n} from '@backstage/plugin-scaffolder-node';\nimport PQueue from 'p-queue';\nimport { NunjucksWorkflowRunner } from './NunjucksWorkflowRunner';\nimport { Logger } from 'winston';\nimport { TemplateActionRegistry } from '../actions';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { assertError, stringifyError } from '@backstage/errors';\nimport { PermissionEvaluator } from '@backstage/plugin-permission-common';\n\nimport { AuditLogger } from '@janus-idp/backstage-plugin-audit-log-node';\n\n/**\n * TaskWorkerOptions\n *\n * @public\n */\nexport type TaskWorkerOptions = {\n  taskBroker: TaskBroker;\n  runners: {\n    workflowRunner: WorkflowRunner;\n  };\n  concurrentTasksLimit: number;\n  permissions?: PermissionEvaluator;\n  logger?: Logger;\n  auditLogger?: AuditLogger;\n};\n\n/**\n * CreateWorkerOptions\n *\n * @public\n */\nexport type CreateWorkerOptions = {\n  taskBroker: TaskBroker;\n  actionRegistry: TemplateActionRegistry;\n  integrations: ScmIntegrations;\n  workingDirectory: string;\n  logger: Logger;\n  auditLogger: AuditLogger;\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n  /**\n   * The number of tasks that can be executed at the same time by the worker\n   * @defaultValue 10\n   * @example\n   * ```\n   * {\n   *   concurrentTasksLimit: 1,\n   *   // OR\n   *   concurrentTasksLimit: Infinity\n   * }\n   * ```\n   */\n  concurrentTasksLimit?: number;\n  additionalTemplateGlobals?: Record<string, TemplateGlobal>;\n  permissions?: PermissionEvaluator;\n};\n\n/**\n * TaskWorker\n *\n * @public\n */\nexport class TaskWorker {\n  private taskQueue: PQueue;\n  private logger: Logger | undefined;\n  private stopWorkers: boolean;\n  private auditLogger: AuditLogger | undefined;\n\n  private constructor(private readonly options: TaskWorkerOptions) {\n    this.stopWorkers = false;\n    this.logger = options.logger;\n    this.auditLogger = options.auditLogger;\n    this.taskQueue = new PQueue({\n      concurrency: options.concurrentTasksLimit,\n    });\n  }\n\n  static async create(options: CreateWorkerOptions): Promise<TaskWorker> {\n    const {\n      taskBroker,\n      logger,\n      actionRegistry,\n      integrations,\n      workingDirectory,\n      additionalTemplateFilters,\n      concurrentTasksLimit = 10, // from 1 to Infinity\n      additionalTemplateGlobals,\n      permissions,\n      auditLogger,\n    } = options;\n\n    const workflowRunner = new NunjucksWorkflowRunner({\n      actionRegistry,\n      integrations,\n      logger,\n      auditLogger,\n      workingDirectory,\n      additionalTemplateFilters,\n      additionalTemplateGlobals,\n      permissions,\n    });\n\n    return new TaskWorker({\n      taskBroker: taskBroker,\n      runners: { workflowRunner },\n      concurrentTasksLimit,\n      permissions,\n      auditLogger,\n    });\n  }\n\n  async recoverTasks() {\n    try {\n      await this.options.taskBroker.recoverTasks?.();\n    } catch (err) {\n      this.logger?.error(stringifyError(err));\n    }\n  }\n\n  start() {\n    (async () => {\n      while (!this.stopWorkers) {\n        await new Promise(resolve => setTimeout(resolve, 10000));\n        await this.recoverTasks();\n      }\n    })();\n    (async () => {\n      while (!this.stopWorkers) {\n        await this.onReadyToClaimTask();\n        if (!this.stopWorkers) {\n          const task = await this.options.taskBroker.claim();\n          void this.taskQueue.add(() => this.runOneTask(task));\n        }\n      }\n    })();\n  }\n\n  stop() {\n    this.stopWorkers = true;\n  }\n\n  protected onReadyToClaimTask(): Promise<void> {\n    if (this.taskQueue.pending < this.options.concurrentTasksLimit) {\n      return Promise.resolve();\n    }\n    return new Promise(resolve => {\n      // \"next\" event emits when a task completes\n      // https://github.com/sindresorhus/p-queue#next\n      this.taskQueue.once('next', () => {\n        resolve();\n      });\n    });\n  }\n\n  async runOneTask(task: TaskContext) {\n    try {\n      await this.auditLogger?.auditLog({\n        eventName: 'ScaffolderTaskExecution',\n        actorId: 'scaffolder-backend',\n        stage: 'initiation',\n        status: 'succeeded',\n        metadata: {\n          taskId: task.taskId,\n          taskParameters: task.spec.parameters,\n          templateRef: task.spec.templateInfo?.entityRef,\n        },\n        message: `Scaffolding task with taskId: ${task.taskId} initiated`,\n      });\n      if (task.spec.apiVersion !== 'scaffolder.backstage.io/v1beta3') {\n        throw new Error(\n          `Unsupported Template apiVersion ${task.spec.apiVersion}`,\n        );\n      }\n      const { output } = await this.options.runners.workflowRunner.execute(\n        task,\n      );\n      await task.complete('completed', { output });\n    } catch (error) {\n      assertError(error);\n      await task.complete('failed', {\n        error: { name: error.name, message: error.message },\n      });\n    }\n  }\n}\n"],"names":["PQueue","NunjucksWorkflowRunner","stringifyError","assertError"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/service/router.cjs.js b/dist/service/router.cjs.js
index 7ecf2b0d18bbbd9f2fc5a571af6d999c0068d37b..6c0a2ecfa0f896b44b3bb7681b680aafba60cdc3 100644
--- a/dist/service/router.cjs.js
+++ b/dist/service/router.cjs.js
@@ -50,6 +50,8 @@ var helpers = require('./helpers.cjs.js');
 var pluginPermissionNode = require('@backstage/plugin-permission-node');
 var rules = require('./rules.cjs.js');
 var checkPermissions = require('../util/checkPermissions.cjs.js');
+var lodash = require('lodash');
+var backstagePluginAuditLogNode = require('@janus-idp/backstage-plugin-audit-log-node');
 
 function _interopDefaultCompat (e) { return e && typeof e === 'object' && 'default' in e ? e : { default: e }; }
 
@@ -142,6 +144,11 @@ async function createRouter(options) {
   });
   const concurrentTasksLimit = options.concurrentTasksLimit ?? options.config.getOptionalNumber("scaffolder.concurrentTasksLimit");
   const logger = parentLogger.child({ plugin: "scaffolder" });
+  const auditLogger = new backstagePluginAuditLogNode.DefaultAuditLogger({
+    logger,
+    authService: auth,
+    httpAuthService: httpAuth
+  });
   const workingDirectory = await helpers.getWorkingDirectory(config, logger);
   const integrations = integration.ScmIntegrations.fromConfig(config);
   let taskBroker;
@@ -150,6 +157,7 @@ async function createRouter(options) {
     taskBroker = new StorageTaskBroker.StorageTaskBroker(
       databaseTaskStore,
       logger,
+      auditLogger,
       config,
       auth,
       additionalWorkspaceProviders
@@ -196,7 +204,8 @@ async function createRouter(options) {
         additionalTemplateFilters,
         additionalTemplateGlobals,
         concurrentTasksLimit,
-        permissions
+        permissions,
+        auditLogger
       });
       workers.push(worker);
     }
@@ -225,6 +234,7 @@ async function createRouter(options) {
     actionRegistry,
     integrations,
     logger,
+    auditLogger,
     workingDirectory,
     additionalTemplateFilters,
     additionalTemplateGlobals,
@@ -262,40 +272,134 @@ async function createRouter(options) {
   router.get(
     "/v2/templates/:namespace/:kind/:name/parameter-schema",
     async (req, res) => {
-      const credentials = await httpAuth.credentials(req);
-      const { token } = await auth.getPluginRequestToken({
-        onBehalfOf: credentials,
-        targetPluginId: "catalog"
+      const requestedTemplateRef = `${req.params.kind}:${req.params.namespace}/${req.params.name}`;
+      const actorId = await auditLogger.getActorId(req);
+      try {
+        const credentials = await httpAuth.credentials(req);
+        const { token } = await auth.getPluginRequestToken({
+          onBehalfOf: credentials,
+          targetPluginId: "catalog"
+        });
+        await auditLogger.auditLog({
+          eventName: "ScaffolderParameterSchemaFetch",
+          actorId,
+          stage: "initiation",
+          status: "succeeded",
+          metadata: {
+            templateRef: requestedTemplateRef
+          },
+          request: req,
+          message: `${actorId} requested the parameter schema for ${requestedTemplateRef}`
+        });
+        const template = await authorizeTemplate(
+          req.params,
+          token,
+          credentials
+        );
+        const parameters = [template.spec.parameters ?? []].flat();
+        const presentation = template.spec.presentation;
+        const templateRef = `${template.kind}:${template.metadata.namespace || "default"}/${template.metadata.name}`;
+        const responseBody = {
+          title: template.metadata.title ?? template.metadata.name,
+          ...presentation ? { presentation } : {},
+          description: template.metadata.description,
+          "ui:options": template.metadata["ui:options"],
+          steps: parameters.map((schema) => ({
+            title: schema.title ?? "Please enter the following information",
+            description: schema.description,
+            schema
+          }))
+        };
+        await auditLogger.auditLog({
+          eventName: "ScaffolderParameterSchemaFetch",
+          actorId,
+          stage: "completion",
+          status: "succeeded",
+          metadata: {
+            templateRef
+          },
+          request: req,
+          response: {
+            status: 200,
+            body: responseBody
+          },
+          message: `${actorId} successfully requested the parameter schema for ${templateRef}`
+        });
+        res.json(responseBody);
+      } catch (err) {
+        await auditLogger.auditLog({
+          eventName: "ScaffolderParameterSchemaFetch",
+          actorId,
+          stage: "completion",
+          status: "failed",
+          level: "error",
+          request: req,
+          metadata: {
+            templateRef: requestedTemplateRef
+          },
+          errors: [
+            {
+              name: err.name,
+              message: err.message,
+              stack: err.stack
+            }
+          ],
+          message: `${actorId} failed to request the parameter schema for ${requestedTemplateRef}`
+        });
+        throw err;
+      }
+    }
+  ).get("/v2/actions", async (req, res) => {
+    const actorId = await auditLogger.getActorId(req);
+    try {
+      await auditLogger.auditLog({
+        eventName: "ScaffolderInstalledActionsFetch",
+        actorId,
+        stage: "initiation",
+        status: "succeeded",
+        request: req,
+        message: `${actorId} requested the list of installed actions`
       });
-      const template = await authorizeTemplate(
-        req.params,
-        token,
-        credentials
-      );
-      const parameters = [template.spec.parameters ?? []].flat();
-      const presentation = template.spec.presentation;
-      res.json({
-        title: template.metadata.title ?? template.metadata.name,
-        ...presentation ? { presentation } : {},
-        description: template.metadata.description,
-        "ui:options": template.metadata["ui:options"],
-        steps: parameters.map((schema) => ({
-          title: schema.title ?? "Please enter the following information",
-          description: schema.description,
-          schema
-        }))
+      const actionsList = actionRegistry.list().map((action) => {
+        return {
+          id: action.id,
+          description: action.description,
+          examples: action.examples,
+          schema: action.schema
+        };
+      });
+      await auditLogger.auditLog({
+        eventName: "ScaffolderInstalledActionsFetch",
+        actorId,
+        stage: "completion",
+        status: "succeeded",
+        request: req,
+        response: {
+          status: 200,
+          body: actionsList
+        },
+        message: `${actorId} successfully requested the list of installed actions`
       });
+      res.json(actionsList);
+    } catch (err) {
+      await auditLogger.auditLog({
+        eventName: "ScaffolderInstalledActionsFetch",
+        actorId,
+        stage: "completion",
+        status: "failed",
+        level: "error",
+        request: req,
+        errors: [
+          {
+            name: err.name,
+            message: err.message,
+            stack: err.stack
+          }
+        ],
+        message: `${actorId} failed to request for the list of installed actions`
+      });
+      throw err;
     }
-  ).get("/v2/actions", async (_req, res) => {
-    const actionsList = actionRegistry.list().map((action) => {
-      return {
-        id: action.id,
-        description: action.description,
-        examples: action.examples,
-        schema: action.schema
-      };
-    });
-    res.json(actionsList);
   }).post("/v2/tasks", async (req, res) => {
     const templateRef = req.body.templateRef;
     const { kind, namespace, name } = catalogModel.parseEntityRef(templateRef, {
@@ -313,280 +417,762 @@ async function createRouter(options) {
     });
     const userEntityRef = auth.isPrincipal(credentials, "user") ? credentials.principal.userEntityRef : void 0;
     const userEntity = userEntityRef ? await catalogClient.getEntityByRef(userEntityRef, { token }) : void 0;
-    let auditLog = `Scaffolding task for ${templateRef}`;
-    if (userEntityRef) {
-      auditLog += ` created by ${userEntityRef}`;
-    }
-    logger.info(auditLog);
     const values = req.body.values;
-    const template = await authorizeTemplate(
-      { kind, namespace, name },
-      token,
-      credentials
-    );
-    for (const parameters of [template.spec.parameters ?? []].flat()) {
-      const result2 = jsonschema.validate(values, parameters);
-      if (!result2.valid) {
-        res.status(400).json({ errors: result2.errors });
-        return;
+    const redactedRequest = lodash.cloneDeep(req);
+    Object.defineProperty(redactedRequest, "ip", {
+      get: () => {
+        return req.ip;
       }
+    });
+    if (req.body.secrets) {
+      const redactedBody = {
+        ...req.body,
+        secrets: Object.keys(req.body.secrets).reduce((acc, key) => {
+          return {
+            ...acc,
+            [key]: "***"
+          };
+        }, {})
+      };
+      redactedRequest.body = redactedBody;
     }
-    const baseUrl = helpers.getEntityBaseUrl(template);
-    const taskSpec = {
-      apiVersion: template.apiVersion,
-      steps: template.spec.steps.map((step, index) => ({
-        ...step,
-        id: step.id ?? `step-${index + 1}`,
-        name: step.name ?? step.action
-      })),
-      EXPERIMENTAL_recovery: template.spec.EXPERIMENTAL_recovery,
-      output: template.spec.output ?? {},
-      parameters: values,
-      user: {
-        entity: userEntity,
-        ref: userEntityRef
-      },
-      templateInfo: {
-        entityRef: catalogModel.stringifyEntityRef({ kind, name, namespace }),
-        baseUrl,
-        entity: {
-          metadata: template.metadata
+    try {
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskCreation",
+        stage: "initiation",
+        status: "succeeded",
+        actorId: userEntityRef,
+        request: redactedRequest,
+        metadata: {
+          templateRef
+        },
+        message: `Scaffolding task for ${templateRef} creation attempt by ${userEntityRef} initiated`
+      });
+      await checkPermissions.checkPermission({
+        credentials,
+        permissions: [alpha.taskCreatePermission],
+        permissionService: permissions
+      });
+      const template = await authorizeTemplate(
+        { kind, namespace, name },
+        token,
+        credentials
+      );
+      for (const parameters of [template.spec.parameters ?? []].flat()) {
+        const result2 = jsonschema.validate(values, parameters);
+        if (!result2.valid) {
+          await auditLogger.auditLog({
+            eventName: "ScaffolderTaskCreation",
+            stage: "completion",
+            status: "failed",
+            level: "error",
+            actorId: userEntityRef,
+            request: redactedRequest,
+            metadata: {
+              templateRef
+            },
+            response: {
+              status: 400,
+              body: { errors: result2.errors }
+            },
+            errors: result2.errors,
+            message: `Scaffolding task for ${templateRef} creation attempt by ${userEntityRef} failed`
+          });
+          return res.status(400).json({ errors: result2.errors });
         }
       }
-    };
-    const secrets = {
-      ...req.body.secrets,
-      backstageToken: token,
-      __initiatorCredentials: JSON.stringify({
-        ...credentials,
-        // credentials.token is nonenumerable and will not be serialized, so we need to add it explicitly
-        token: credentials.token
-      })
-    };
-    const result = await taskBroker.dispatch({
-      spec: taskSpec,
-      createdBy: userEntityRef,
-      secrets
-    });
-    res.status(201).json({ id: result.taskId });
-  }).get("/v2/tasks", async (req, res) => {
-    const credentials = await httpAuth.credentials(req);
-    await checkPermissions.checkPermission({
-      credentials,
-      permissions: [alpha.taskReadPermission],
-      permissionService: permissions
-    });
-    if (!taskBroker.list) {
-      throw new Error(
-        "TaskBroker does not support listing tasks, please implement the list method on the TaskBroker."
-      );
+      const baseUrl = helpers.getEntityBaseUrl(template);
+      const taskSpec = {
+        apiVersion: template.apiVersion,
+        steps: template.spec.steps.map((step, index) => ({
+          ...step,
+          id: step.id ?? `step-${index + 1}`,
+          name: step.name ?? step.action
+        })),
+        EXPERIMENTAL_recovery: template.spec.EXPERIMENTAL_recovery,
+        output: template.spec.output ?? {},
+        parameters: values,
+        user: {
+          entity: userEntity,
+          ref: userEntityRef
+        },
+        templateInfo: {
+          entityRef: catalogModel.stringifyEntityRef({ kind, name, namespace }),
+          baseUrl,
+          entity: {
+            metadata: template.metadata
+          }
+        }
+      };
+      const secrets = {
+        ...req.body.secrets,
+        backstageToken: token,
+        __initiatorCredentials: JSON.stringify({
+          ...credentials,
+          // credentials.token is nonenumerable and will not be serialized, so we need to add it explicitly
+          token: credentials.token
+        })
+      };
+      const result = await taskBroker.dispatch({
+        spec: taskSpec,
+        createdBy: userEntityRef,
+        secrets
+      });
+      let auditLog = `Scaffolding task for ${templateRef}`;
+      if (userEntityRef) {
+        auditLog += ` created by ${userEntityRef}`;
+      }
+      logger.info(auditLog);
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskCreation",
+        stage: "completion",
+        status: "succeeded",
+        actorId: userEntityRef,
+        request: redactedRequest,
+        metadata: {
+          taskId: result.taskId,
+          templateRef
+        },
+        response: {
+          status: 201,
+          body: { id: result.taskId }
+        },
+        message: `Scaffolding task for ${templateRef} with taskId: ${result.taskId} successfully created by ${userEntityRef}`
+      });
+      return res.status(201).json({ id: result.taskId });
+    } catch (err) {
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskCreation",
+        stage: "completion",
+        status: "failed",
+        level: "error",
+        actorId: userEntityRef,
+        request: redactedRequest,
+        metadata: {
+          templateRef
+        },
+        errors: [
+          {
+            name: err.name,
+            message: err.message,
+            stack: err.stack
+          }
+        ],
+        message: `Scaffolding task for ${templateRef} creation attempt by ${userEntityRef} failed`
+      });
+      throw err;
     }
-    const createdBy = helpers.parseStringsParam(req.query.createdBy, "createdBy");
-    const status = helpers.parseStringsParam(req.query.status, "status");
-    const order = helpers.parseStringsParam(req.query.order, "order")?.map((item) => {
-      const match = item.match(/^(asc|desc):(.+)$/);
-      if (!match) {
-        throw new errors.InputError(
-          `Invalid order parameter "${item}", expected "<asc or desc>:<field name>"`
+  }).get("/v2/tasks", async (req, res) => {
+    const actorId = await auditLogger.getActorId(req);
+    try {
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskListFetch",
+        actorId,
+        stage: "initiation",
+        status: "succeeded",
+        request: req,
+        message: `${actorId} requested for the list of scaffolder tasks`
+      });
+      const credentials = await httpAuth.credentials(req);
+      await checkPermissions.checkPermission({
+        credentials,
+        permissions: [alpha.taskReadPermission],
+        permissionService: permissions
+      });
+      if (!taskBroker.list) {
+        throw new Error(
+          "TaskBroker does not support listing tasks, please implement the list method on the TaskBroker."
         );
       }
-      return {
-        order: match[1],
-        field: match[2]
-      };
-    });
-    const limit = helpers.parseNumberParam(req.query.limit, "limit");
-    const offset = helpers.parseNumberParam(req.query.offset, "offset");
-    const tasks = await taskBroker.list({
-      filters: {
-        createdBy,
-        status: status ? status : void 0
-      },
-      order,
-      pagination: {
-        limit: limit ? limit[0] : void 0,
-        offset: offset ? offset[0] : void 0
-      }
-    });
-    res.status(200).json(tasks);
+      const createdBy = helpers.parseStringsParam(req.query.createdBy, "createdBy");
+      const status = helpers.parseStringsParam(req.query.status, "status");
+      const order = helpers.parseStringsParam(req.query.order, "order")?.map((item) => {
+        const match = item.match(/^(asc|desc):(.+)$/);
+        if (!match) {
+          throw new errors.InputError(
+            `Invalid order parameter "${item}", expected "<asc or desc>:<field name>"`
+          );
+        }
+        return {
+          order: match[1],
+          field: match[2]
+        };
+      });
+      const limit = helpers.parseNumberParam(req.query.limit, "limit");
+      const offset = helpers.parseNumberParam(req.query.offset, "offset");
+      const tasks = await taskBroker.list({
+        filters: {
+          createdBy,
+          status: status ? status : void 0
+        },
+        order,
+        pagination: {
+          limit: limit ? limit[0] : void 0,
+          offset: offset ? offset[0] : void 0
+        }
+      });
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskListFetch",
+        actorId,
+        stage: "completion",
+        status: "succeeded",
+        request: req,
+        response: {
+          status: 200,
+          body: tasks
+        },
+        message: `${actorId} successfully requested for the list of scaffolder tasks`
+      });
+      res.status(200).json(tasks);
+    } catch (err) {
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskListFetch",
+        actorId,
+        stage: "completion",
+        status: "failed",
+        level: "error",
+        request: req,
+        errors: [
+          {
+            name: err.name,
+            message: err.message,
+            stack: err.stack
+          }
+        ],
+        message: `${actorId} request for the list of scaffolder tasks failed`
+      });
+      throw err;
+    }
   }).get("/v2/tasks/:taskId", async (req, res) => {
-    const credentials = await httpAuth.credentials(req);
-    await checkPermissions.checkPermission({
-      credentials,
-      permissions: [alpha.taskReadPermission],
-      permissionService: permissions
-    });
     const { taskId } = req.params;
-    const task = await taskBroker.get(taskId);
-    if (!task) {
-      throw new errors.NotFoundError(`Task with id ${taskId} does not exist`);
+    const actorId = await auditLogger.getActorId(req);
+    try {
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskFetch",
+        actorId,
+        stage: "initiation",
+        status: "succeeded",
+        metadata: {
+          taskId
+        },
+        request: req,
+        message: `${actorId} requested for scaffolder task ${taskId}`
+      });
+      const credentials = await httpAuth.credentials(req);
+      await checkPermissions.checkPermission({
+        credentials,
+        permissions: [alpha.taskReadPermission],
+        permissionService: permissions
+      });
+      const task = await taskBroker.get(taskId);
+      if (!task) {
+        throw new errors.NotFoundError(`Task with id ${taskId} does not exist`);
+      }
+      delete task.secrets;
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskFetch",
+        actorId,
+        stage: "completion",
+        status: "succeeded",
+        request: req,
+        response: {
+          status: 200,
+          body: task
+        },
+        message: `${actorId} successfully requested for scaffolder tasks ${taskId}`
+      });
+      res.status(200).json(task);
+    } catch (err) {
+      let status = 500;
+      if (err.name === "NotFoundError") {
+        status = 404;
+      }
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskFetch",
+        actorId,
+        stage: "completion",
+        status: "failed",
+        level: "error",
+        request: req,
+        response: {
+          status
+        },
+        errors: [
+          {
+            name: err.name,
+            message: err.message,
+            stack: err.stack
+          }
+        ],
+        message: `${actorId} request for scaffolder tasks ${taskId} failed`
+      });
+      throw err;
     }
-    delete task.secrets;
-    res.status(200).json(task);
   }).post("/v2/tasks/:taskId/cancel", async (req, res) => {
-    const credentials = await httpAuth.credentials(req);
-    await checkPermissions.checkPermission({
-      credentials,
-      permissions: [alpha.taskCancelPermission, alpha.taskReadPermission],
-      permissionService: permissions
-    });
     const { taskId } = req.params;
-    await taskBroker.cancel?.(taskId);
-    res.status(200).json({ status: "cancelled" });
+    const actorId = await auditLogger.getActorId(req);
+    try {
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskCancellation",
+        actorId,
+        stage: "initiation",
+        status: "succeeded",
+        metadata: {
+          taskId
+        },
+        request: req,
+        message: `Cancellation request for Scaffolding task with taskId: ${taskId} from ${actorId} received`
+      });
+      const credentials = await httpAuth.credentials(req);
+      await checkPermissions.checkPermission({
+        credentials,
+        permissions: [alpha.taskCancelPermission],
+        permissionService: permissions
+      });
+      await taskBroker.cancel?.(taskId);
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskCancellation",
+        actorId,
+        stage: "completion",
+        status: "succeeded",
+        metadata: {
+          taskId
+        },
+        request: req,
+        response: {
+          status: 200,
+          body: { status: "cancelled" }
+        },
+        message: `Scaffolding task with taskId: ${taskId} successfully cancelled by ${actorId}`
+      });
+      res.status(200).json({ status: "cancelled" });
+    } catch (err) {
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskCancellation",
+        actorId,
+        stage: "completion",
+        status: "failed",
+        level: "error",
+        request: req,
+        errors: [
+          {
+            name: err.name,
+            message: err.message,
+            stack: err.stack
+          }
+        ],
+        message: `${actorId}'s cancel request for task ${taskId} failed`
+      });
+      throw err;
+    }
   }).post("/v2/tasks/:taskId/retry", async (req, res) => {
-    const credentials = await httpAuth.credentials(req);
-    await checkPermissions.checkPermission({
-      credentials,
-      permissions: [alpha.taskCreatePermission, alpha.taskReadPermission],
-      permissionService: permissions
-    });
     const { taskId } = req.params;
-    await taskBroker.retry?.(taskId);
-    res.status(201).json({ id: taskId });
+    const actorId = await auditLogger.getActorId(req);
+    try {
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskRetry",
+        actorId,
+        stage: "initiation",
+        status: "succeeded",
+        metadata: {
+          taskId
+        },
+        request: req,
+        message: `Retry request for Scaffolding task with taskId: ${taskId} from ${actorId} received`
+      });
+      const credentials = await httpAuth.credentials(req);
+      await checkPermissions.checkPermission({
+        credentials,
+        permissions: [alpha.taskCreatePermission, alpha.taskReadPermission],
+        permissionService: permissions
+      });
+      await taskBroker.retry?.(taskId);
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskRetry",
+        actorId,
+        stage: "completion",
+        status: "succeeded",
+        metadata: {
+          taskId
+        },
+        request: req,
+        response: {
+          status: 201,
+          body: { id: taskId }
+        },
+        message: `Scaffolding task with taskId: ${taskId} successfully retried by ${actorId}`
+      });
+      res.status(201).json({ id: taskId });
+    } catch (err) {
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskRetry",
+        actorId,
+        stage: "completion",
+        status: "failed",
+        level: "error",
+        request: req,
+        errors: [
+          {
+            name: err.name,
+            message: err.message,
+            stack: err.stack
+          }
+        ],
+        message: `${actorId}'s retry request for task ${taskId} failed`
+      });
+      throw err;
+    }
   }).get("/v2/tasks/:taskId/eventstream", async (req, res) => {
-    const credentials = await httpAuth.credentials(req);
-    await checkPermissions.checkPermission({
-      credentials,
-      permissions: [alpha.taskReadPermission],
-      permissionService: permissions
-    });
     const { taskId } = req.params;
-    const after = req.query.after !== void 0 ? Number(req.query.after) : void 0;
-    logger.debug(`Event stream observing taskId '${taskId}' opened`);
-    res.writeHead(200, {
-      Connection: "keep-alive",
-      "Cache-Control": "no-cache",
-      "Content-Type": "text/event-stream"
-    });
-    const subscription = taskBroker.event$({ taskId, after }).subscribe({
-      error: (error) => {
-        logger.error(
-          `Received error from event stream when observing taskId '${taskId}', ${error}`
-        );
-        res.end();
-      },
-      next: ({ events }) => {
-        let shouldUnsubscribe = false;
-        for (const event of events) {
-          res.write(
-            `event: ${event.type}
+    const actorId = await auditLogger.getActorId(req);
+    try {
+      const after = req.query.after !== void 0 ? Number(req.query.after) : void 0;
+      logger.debug(`Event stream observing taskId '${taskId}' opened`);
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskStream",
+        actorId,
+        stage: "initiation",
+        status: "succeeded",
+        metadata: {
+          taskId
+        },
+        request: req,
+        message: `Event stream for scaffolding task with taskId: ${taskId} was opened by ${actorId}`
+      });
+      const credentials = await httpAuth.credentials(req);
+      await checkPermissions.checkPermission({
+        credentials,
+        permissions: [alpha.taskReadPermission],
+        permissionService: permissions
+      });
+      res.writeHead(200, {
+        Connection: "keep-alive",
+        "Cache-Control": "no-cache",
+        "Content-Type": "text/event-stream"
+      });
+      const subscription = taskBroker.event$({ taskId, after }).subscribe({
+        error: async (error) => {
+          logger.error(
+            `Received error from event stream when observing taskId '${taskId}', ${error}`
+          );
+          await auditLogger.auditLog({
+            eventName: "ScaffolderTaskStream",
+            actorId,
+            stage: "completion",
+            status: "failed",
+            level: "error",
+            metadata: {
+              taskId
+            },
+            request: req,
+            errors: [
+              {
+                name: error.name,
+                message: error.message,
+                stack: error.stack,
+                cause: error.cause
+              }
+            ],
+            message: `Received error from event stream observing scaffolding task with taskId: ${taskId} requested by ${actorId}`
+          });
+          res.end();
+        },
+        next: ({ events }) => {
+          let shouldUnsubscribe = false;
+          for (const event of events) {
+            res.write(
+              `event: ${event.type}
 data: ${JSON.stringify(event)}
 
 `
-          );
-          if (event.type === "completion" && !event.isTaskRecoverable) {
-            shouldUnsubscribe = true;
+            );
+            if (event.type === "completion") {
+              shouldUnsubscribe = true;
+            }
+          }
+          res.flush?.();
+          if (shouldUnsubscribe) {
+            subscription.unsubscribe();
+            res.end();
           }
         }
-        res.flush?.();
-        if (shouldUnsubscribe) {
-          subscription.unsubscribe();
-          res.end();
-        }
-      }
-    });
-    req.on("close", () => {
-      subscription.unsubscribe();
-      logger.debug(`Event stream observing taskId '${taskId}' closed`);
-    });
+      });
+      req.on("close", async () => {
+        subscription.unsubscribe();
+        logger.debug(`Event stream observing taskId '${taskId}' closed`);
+        await auditLogger.auditLog({
+          eventName: "ScaffolderTaskStream",
+          actorId,
+          stage: "completion",
+          status: "succeeded",
+          metadata: {
+            taskId
+          },
+          request: req,
+          message: `Event stream observing scaffolding task with taskId: ${taskId} was closed by ${actorId}`
+        });
+      });
+    } catch (err) {
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskStream",
+        actorId,
+        stage: "completion",
+        status: "failed",
+        level: "error",
+        metadata: {
+          taskId
+        },
+        request: req,
+        errors: [
+          {
+            name: err.name,
+            message: err.message,
+            stack: err.stack
+          }
+        ],
+        message: `Received error from event stream observing scaffolding task with taskId: ${taskId} requested by ${actorId}`
+      });
+      throw err;
+    }
   }).get("/v2/tasks/:taskId/events", async (req, res) => {
-    const credentials = await httpAuth.credentials(req);
-    await checkPermissions.checkPermission({
-      credentials,
-      permissions: [alpha.taskReadPermission],
-      permissionService: permissions
-    });
     const { taskId } = req.params;
-    const after = Number(req.query.after) || void 0;
-    const timeout = setTimeout(() => {
-      res.json([]);
-    }, 3e4);
-    const subscription = taskBroker.event$({ taskId, after }).subscribe({
-      error: (error) => {
-        logger.error(
-          `Received error from event stream when observing taskId '${taskId}', ${error}`
-        );
-      },
-      next: ({ events }) => {
-        clearTimeout(timeout);
+    const actorId = await auditLogger.getActorId(req);
+    try {
+      const after = Number(req.query.after) || void 0;
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskEventFetch",
+        actorId,
+        stage: "initiation",
+        status: "succeeded",
+        metadata: {
+          taskId
+        },
+        request: req,
+        message: `Task events fetch attempt for scaffolding task with taskId: ${taskId} initiated by ${actorId}`
+      });
+      const credentials = await httpAuth.credentials(req);
+      await checkPermissions.checkPermission({
+        credentials,
+        permissions: [alpha.taskReadPermission],
+        permissionService: permissions
+      });
+      const timeout = setTimeout(() => {
+        res.json([]);
+      }, 3e4);
+      const subscription = taskBroker.event$({ taskId, after }).subscribe({
+        error: async (error) => {
+          logger.error(
+            `Received error from event stream when observing taskId '${taskId}', ${error}`
+          );
+          await auditLogger.auditLog({
+            eventName: "ScaffolderTaskEventFetch",
+            actorId,
+            stage: "completion",
+            status: "failed",
+            level: "error",
+            metadata: {
+              taskId
+            },
+            request: req,
+            errors: [
+              {
+                name: error.name,
+                message: error.message,
+                stack: error.stack
+              }
+            ],
+            message: `Task events fetch attempt for scaffolding task with taskId: ${taskId} requested by ${actorId} failed`
+          });
+        },
+        next: async ({ events }) => {
+          clearTimeout(timeout);
+          subscription.unsubscribe();
+          await auditLogger.auditLog({
+            eventName: "ScaffolderTaskEventFetch",
+            actorId,
+            stage: "completion",
+            status: "succeeded",
+            metadata: {
+              taskId
+            },
+            request: req,
+            response: {
+              status: 200,
+              body: events
+            },
+            message: `Task events fetch attempt for scaffolding task with taskId: ${taskId} by ${actorId} succeeded`
+          });
+          res.json(events);
+        }
+      });
+      req.on("close", () => {
         subscription.unsubscribe();
-        res.json(events);
-      }
-    });
-    req.on("close", () => {
-      subscription.unsubscribe();
-      clearTimeout(timeout);
-    });
-  }).post("/v2/dry-run", async (req, res) => {
-    const credentials = await httpAuth.credentials(req);
-    await checkPermissions.checkPermission({
-      credentials,
-      permissions: [alpha.taskCreatePermission],
-      permissionService: permissions
-    });
-    const bodySchema = zod.z.object({
-      template: zod.z.unknown(),
-      values: zod.z.record(zod.z.unknown()),
-      secrets: zod.z.record(zod.z.string()).optional(),
-      directoryContents: zod.z.array(
-        zod.z.object({ path: zod.z.string(), base64Content: zod.z.string() })
-      )
-    });
-    const body = await bodySchema.parseAsync(req.body).catch((e) => {
-      throw new errors.InputError(`Malformed request: ${e}`);
-    });
-    const template = body.template;
-    if (!await pluginScaffolderCommon.templateEntityV1beta3Validator.check(template)) {
-      throw new errors.InputError("Input template is not a template");
+        clearTimeout(timeout);
+      });
+    } catch (err) {
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskEventFetch",
+        actorId,
+        stage: "completion",
+        status: "failed",
+        level: "error",
+        metadata: {
+          taskId
+        },
+        request: req,
+        errors: [
+          {
+            name: err.name,
+            message: err.message,
+            stack: err.stack
+          }
+        ],
+        message: `Task events fetch attempt for scaffolding task with taskId: ${taskId} requested by ${actorId} failed`
+      });
+      throw err;
     }
-    const { token } = await auth.getPluginRequestToken({
-      onBehalfOf: credentials,
-      targetPluginId: "catalog"
-    });
-    const userEntityRef = auth.isPrincipal(credentials, "user") ? credentials.principal.userEntityRef : void 0;
-    const userEntity = userEntityRef ? await catalogClient.getEntityByRef(userEntityRef, { token }) : void 0;
-    for (const parameters of [template.spec.parameters ?? []].flat()) {
-      const result2 = jsonschema.validate(body.values, parameters);
-      if (!result2.valid) {
-        res.status(400).json({ errors: result2.errors });
-        return;
+  }).post("/v2/dry-run", async (req, res) => {
+    const actorId = await auditLogger.getActorId(req);
+    try {
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskDryRun",
+        actorId,
+        stage: "initiation",
+        status: "succeeded",
+        metadata: {
+          isDryRun: true
+        },
+        request: req,
+        message: `Dry Run scaffolder task initiated by ${actorId}`
+      });
+      const credentials = await httpAuth.credentials(req);
+      await checkPermissions.checkPermission({
+        credentials,
+        permissions: [alpha.taskCreatePermission],
+        permissionService: permissions
+      });
+      const bodySchema = zod.z.object({
+        template: zod.z.unknown(),
+        values: zod.z.record(zod.z.unknown()),
+        secrets: zod.z.record(zod.z.string()).optional(),
+        directoryContents: zod.z.array(
+          zod.z.object({ path: zod.z.string(), base64Content: zod.z.string() })
+        )
+      });
+      const body = await bodySchema.parseAsync(req.body).catch((e) => {
+        throw new errors.InputError(`Malformed request: ${e}`);
+      });
+      const template = body.template;
+      if (!await pluginScaffolderCommon.templateEntityV1beta3Validator.check(template)) {
+        throw new errors.InputError("Input template is not a template");
       }
-    }
-    const steps = template.spec.steps.map((step, index) => ({
-      ...step,
-      id: step.id ?? `step-${index + 1}`,
-      name: step.name ?? step.action
-    }));
-    const result = await dryRunner({
-      spec: {
-        apiVersion: template.apiVersion,
-        steps,
-        output: template.spec.output ?? {},
-        parameters: body.values,
-        user: {
-          entity: userEntity,
-          ref: userEntityRef
+      const templateRef = `${template.kind}:${template.metadata.namespace || "default"}/${template.metadata.name}`;
+      const { token } = await auth.getPluginRequestToken({
+        onBehalfOf: credentials,
+        targetPluginId: "catalog"
+      });
+      const userEntityRef = auth.isPrincipal(credentials, "user") ? credentials.principal.userEntityRef : void 0;
+      const userEntity = userEntityRef ? await catalogClient.getEntityByRef(userEntityRef, { token }) : void 0;
+      for (const parameters of [template.spec.parameters ?? []].flat()) {
+        const result2 = jsonschema.validate(body.values, parameters);
+        if (!result2.valid) {
+          await auditLogger.auditLog({
+            eventName: "ScaffolderTaskDryRun",
+            actorId,
+            stage: "completion",
+            status: "failed",
+            level: "error",
+            metadata: {
+              templateRef,
+              parameters: template.spec.parameters,
+              isDryRun: true
+            },
+            errors: result2.errors,
+            request: req,
+            response: {
+              status: 400,
+              body: { errors: result2.errors }
+            },
+            message: `Dry Run scaffolder task for ${templateRef} initiated by ${actorId} failed`
+          });
+          return res.status(400).json({ errors: result2.errors });
         }
-      },
-      directoryContents: (body.directoryContents ?? []).map((file) => ({
-        path: file.path,
-        content: Buffer.from(file.base64Content, "base64")
-      })),
-      secrets: {
-        ...body.secrets,
-        ...token && { backstageToken: token }
-      },
-      credentials
-    });
-    res.status(200).json({
-      ...result,
-      steps,
-      directoryContents: result.directoryContents.map((file) => ({
-        path: file.path,
-        executable: file.executable,
-        base64Content: file.content.toString("base64")
-      }))
-    });
+      }
+      const steps = template.spec.steps.map((step, index) => ({
+        ...step,
+        id: step.id ?? `step-${index + 1}`,
+        name: step.name ?? step.action
+      }));
+      const result = await dryRunner({
+        spec: {
+          apiVersion: template.apiVersion,
+          steps,
+          output: template.spec.output ?? {},
+          parameters: body.values,
+          user: {
+            entity: userEntity,
+            ref: userEntityRef
+          }
+        },
+        directoryContents: (body.directoryContents ?? []).map((file) => ({
+          path: file.path,
+          content: Buffer.from(file.base64Content, "base64")
+        })),
+        secrets: {
+          ...body.secrets,
+          ...token && { backstageToken: token }
+        },
+        credentials
+      });
+      const dryRunResults = {
+        ...result,
+        steps,
+        directoryContents: result.directoryContents.map((file) => ({
+          path: file.path,
+          executable: file.executable,
+          base64Content: file.content.toString("base64")
+        }))
+      };
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskDryRun",
+        actorId,
+        stage: "completion",
+        status: "succeeded",
+        metadata: {
+          templateRef,
+          parameters: template.spec.parameters,
+          isDryRun: true
+        },
+        request: req,
+        response: {
+          status: 200,
+          body: dryRunResults
+        },
+        message: `Dry Run scaffolder task for ${templateRef} initiated by ${actorId} completed successfully`
+      });
+      return res.status(200).json(dryRunResults);
+    } catch (err) {
+      await auditLogger.auditLog({
+        eventName: "ScaffolderTaskDryRun",
+        actorId,
+        stage: "completion",
+        status: "failed",
+        level: "error",
+        request: req,
+        metadata: {
+          isDryRun: true
+        },
+        errors: [
+          {
+            name: err.name,
+            message: err.message,
+            stack: err.stack
+          }
+        ],
+        message: `Scaffolder Task Dry Run requested by ${actorId} failed`
+      });
+      throw err;
+    }
   }).post("/v2/autocomplete/:provider/:resource", async (req, res) => {
     const { token, context } = req.body;
     const { provider, resource } = req.params;
diff --git a/dist/service/router.cjs.js.map b/dist/service/router.cjs.js.map
index f564bdd67f041c9fe90e04ed0b30018b070559e8..8f096c5e96512a6bf05d86c15fc8a4cd7da95cdc 100644
--- a/dist/service/router.cjs.js.map
+++ b/dist/service/router.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"router.cjs.js","sources":["../../src/service/router.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createLegacyAuthAdapters,\n  HostDiscovery,\n} from '@backstage/backend-common';\nimport { CatalogApi } from '@backstage/catalog-client';\nimport {\n  CompoundEntityRef,\n  Entity,\n  parseEntityRef,\n  stringifyEntityRef,\n  UserEntity,\n} from '@backstage/catalog-model';\nimport { Config, readDurationFromConfig } from '@backstage/config';\nimport { InputError, NotFoundError, stringifyError } from '@backstage/errors';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { HumanDuration, JsonObject, JsonValue } from '@backstage/types';\nimport {\n  TaskSpec,\n  TemplateEntityStepV1beta3,\n  TemplateEntityV1beta3,\n  templateEntityV1beta3Validator,\n  TemplateParametersV1beta3,\n} from '@backstage/plugin-scaffolder-common';\nimport {\n  RESOURCE_TYPE_SCAFFOLDER_ACTION,\n  RESOURCE_TYPE_SCAFFOLDER_TEMPLATE,\n  scaffolderActionPermissions,\n  scaffolderTaskPermissions,\n  scaffolderTemplatePermissions,\n  taskCancelPermission,\n  taskCreatePermission,\n  taskReadPermission,\n  templateParameterReadPermission,\n  templateStepReadPermission,\n} from '@backstage/plugin-scaffolder-common/alpha';\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport { validate } from 'jsonschema';\nimport { Logger } from 'winston';\nimport { z } from 'zod';\nimport {\n  TaskBroker,\n  TaskStatus,\n  TemplateAction,\n  TemplateFilter,\n  TemplateGlobal,\n} from '@backstage/plugin-scaffolder-node';\nimport {\n  createBuiltinActions,\n  DatabaseTaskStore,\n  TaskWorker,\n  TemplateActionRegistry,\n} from '../scaffolder';\nimport { createDryRunner } from '../scaffolder/dryrun';\nimport { StorageTaskBroker } from '../scaffolder/tasks/StorageTaskBroker';\nimport {\n  findTemplate,\n  getEntityBaseUrl,\n  getWorkingDirectory,\n  parseNumberParam,\n  parseStringsParam,\n} from './helpers';\nimport { PermissionRuleParams } from '@backstage/plugin-permission-common';\nimport {\n  createConditionAuthorizer,\n  createPermissionIntegrationRouter,\n  PermissionRule,\n} from '@backstage/plugin-permission-node';\nimport { scaffolderActionRules, scaffolderTemplateRules } from './rules';\nimport { Duration } from 'luxon';\nimport {\n  AuthService,\n  BackstageCredentials,\n  DatabaseService,\n  DiscoveryService,\n  HttpAuthService,\n  LifecycleService,\n  PermissionsService,\n  SchedulerService,\n  UrlReaderService,\n} from '@backstage/backend-plugin-api';\nimport {\n  IdentityApi,\n  IdentityApiGetIdentityRequest,\n} from '@backstage/plugin-auth-node';\nimport { InternalTaskSecrets } from '../scaffolder/tasks/types';\nimport { checkPermission } from '../util/checkPermissions';\nimport {\n  AutocompleteHandler,\n  WorkspaceProvider,\n} from '@backstage/plugin-scaffolder-node/alpha';\n\n/**\n *\n * @public\n */\nexport type TemplatePermissionRuleInput<\n  TParams extends PermissionRuleParams = PermissionRuleParams,\n> = PermissionRule<\n  TemplateEntityStepV1beta3 | TemplateParametersV1beta3,\n  {},\n  typeof RESOURCE_TYPE_SCAFFOLDER_TEMPLATE,\n  TParams\n>;\nfunction isTemplatePermissionRuleInput(\n  permissionRule: TemplatePermissionRuleInput | ActionPermissionRuleInput,\n): permissionRule is TemplatePermissionRuleInput {\n  return permissionRule.resourceType === RESOURCE_TYPE_SCAFFOLDER_TEMPLATE;\n}\n\n/**\n *\n * @public\n */\nexport type ActionPermissionRuleInput<\n  TParams extends PermissionRuleParams = PermissionRuleParams,\n> = PermissionRule<\n  TemplateEntityStepV1beta3 | TemplateParametersV1beta3,\n  {},\n  typeof RESOURCE_TYPE_SCAFFOLDER_ACTION,\n  TParams\n>;\nfunction isActionPermissionRuleInput(\n  permissionRule: TemplatePermissionRuleInput | ActionPermissionRuleInput,\n): permissionRule is ActionPermissionRuleInput {\n  return permissionRule.resourceType === RESOURCE_TYPE_SCAFFOLDER_ACTION;\n}\n\n/**\n * RouterOptions\n *\n * @public\n * @deprecated Please migrate to the new backend system as this will be removed in the future.\n */\nexport interface RouterOptions {\n  logger: Logger;\n  config: Config;\n  reader: UrlReaderService;\n  lifecycle?: LifecycleService;\n  database: DatabaseService;\n  catalogClient: CatalogApi;\n  scheduler?: SchedulerService;\n  actions?: TemplateAction<any, any>[];\n  /**\n   * @deprecated taskWorkers is deprecated in favor of concurrentTasksLimit option with a single TaskWorker\n   * @defaultValue 1\n   */\n  taskWorkers?: number;\n  /**\n   * Sets the number of concurrent tasks that can be run at any given time on the TaskWorker\n   * @defaultValue 10\n   */\n  concurrentTasksLimit?: number;\n  taskBroker?: TaskBroker;\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n  additionalTemplateGlobals?: Record<string, TemplateGlobal>;\n  additionalWorkspaceProviders?: Record<string, WorkspaceProvider>;\n  permissions?: PermissionsService;\n  permissionRules?: Array<\n    TemplatePermissionRuleInput | ActionPermissionRuleInput\n  >;\n  auth?: AuthService;\n  httpAuth?: HttpAuthService;\n  identity?: IdentityApi;\n  discovery?: DiscoveryService;\n\n  autocompleteHandlers?: Record<string, AutocompleteHandler>;\n}\n\nfunction isSupportedTemplate(entity: TemplateEntityV1beta3) {\n  return entity.apiVersion === 'scaffolder.backstage.io/v1beta3';\n}\n\n/*\n * @deprecated This function remains as the DefaultIdentityClient behaves slightly differently to the pre-existing\n * scaffolder behaviour. Specifically if the token fails to parse, the DefaultIdentityClient will raise an error.\n * The scaffolder did not raise an error in this case. As such we chose to allow it to behave as it did previously\n * until someone explicitly passes an IdentityApi. When we have reasonable confidence that most backstage deployments\n * are using the IdentityApi, we can remove this function.\n */\nfunction buildDefaultIdentityClient(options: RouterOptions): IdentityApi {\n  return {\n    getIdentity: async ({ request }: IdentityApiGetIdentityRequest) => {\n      const header = request.headers.authorization;\n      const { logger } = options;\n\n      if (!header) {\n        return undefined;\n      }\n\n      try {\n        const token = header.match(/^Bearer\\s(\\S+\\.\\S+\\.\\S+)$/i)?.[1];\n        if (!token) {\n          throw new TypeError('Expected Bearer with JWT');\n        }\n\n        const [_header, rawPayload, _signature] = token.split('.');\n        const payload: JsonValue = JSON.parse(\n          Buffer.from(rawPayload, 'base64').toString(),\n        );\n\n        if (\n          typeof payload !== 'object' ||\n          payload === null ||\n          Array.isArray(payload)\n        ) {\n          throw new TypeError('Malformed JWT payload');\n        }\n\n        const sub = payload.sub;\n        if (typeof sub !== 'string') {\n          throw new TypeError('Expected string sub claim');\n        }\n\n        if (sub === 'backstage-server') {\n          return undefined;\n        }\n\n        // Check that it's a valid ref, otherwise this will throw.\n        parseEntityRef(sub);\n\n        return {\n          identity: {\n            userEntityRef: sub,\n            ownershipEntityRefs: [],\n            type: 'user',\n          },\n          token,\n        };\n      } catch (e) {\n        logger.error(`Invalid authorization header: ${stringifyError(e)}`);\n        return undefined;\n      }\n    },\n  };\n}\n\nconst readDuration = (\n  config: Config,\n  key: string,\n  defaultValue: HumanDuration,\n) => {\n  if (config.has(key)) {\n    return readDurationFromConfig(config, { key });\n  }\n  return defaultValue;\n};\n\n/**\n * A method to create a router for the scaffolder backend plugin.\n * @public\n * @deprecated Please migrate to the new backend system as this will be removed in the future.\n */\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const router = Router();\n  // Be generous in upload size to support a wide range of templates in dry-run mode.\n  router.use(express.json({ limit: '10MB' }));\n\n  const {\n    logger: parentLogger,\n    config,\n    reader,\n    database,\n    catalogClient,\n    actions,\n    taskWorkers,\n    scheduler,\n    additionalTemplateFilters,\n    additionalTemplateGlobals,\n    additionalWorkspaceProviders,\n    permissions,\n    permissionRules,\n    discovery = HostDiscovery.fromConfig(config),\n    identity = buildDefaultIdentityClient(options),\n    autocompleteHandlers = {},\n  } = options;\n\n  const { auth, httpAuth } = createLegacyAuthAdapters({\n    ...options,\n    identity,\n    discovery,\n  });\n\n  const concurrentTasksLimit =\n    options.concurrentTasksLimit ??\n    options.config.getOptionalNumber('scaffolder.concurrentTasksLimit');\n\n  const logger = parentLogger.child({ plugin: 'scaffolder' });\n\n  const workingDirectory = await getWorkingDirectory(config, logger);\n  const integrations = ScmIntegrations.fromConfig(config);\n\n  let taskBroker: TaskBroker;\n  if (!options.taskBroker) {\n    const databaseTaskStore = await DatabaseTaskStore.create({ database });\n    taskBroker = new StorageTaskBroker(\n      databaseTaskStore,\n      logger,\n      config,\n      auth,\n      additionalWorkspaceProviders,\n    );\n\n    if (scheduler && databaseTaskStore.listStaleTasks) {\n      await scheduler.scheduleTask({\n        id: 'close_stale_tasks',\n        frequency: readDuration(\n          config,\n          'scaffolder.taskTimeoutJanitorFrequency',\n          {\n            minutes: 5,\n          },\n        ),\n        timeout: { minutes: 15 },\n        fn: async () => {\n          const { tasks } = await databaseTaskStore.listStaleTasks({\n            timeoutS: Duration.fromObject(\n              readDuration(config, 'scaffolder.taskTimeout', {\n                hours: 24,\n              }),\n            ).as('seconds'),\n          });\n\n          for (const task of tasks) {\n            await databaseTaskStore.shutdownTask(task);\n            logger.info(`Successfully closed stale task ${task.taskId}`);\n          }\n        },\n      });\n    }\n  } else {\n    taskBroker = options.taskBroker;\n  }\n\n  const actionRegistry = new TemplateActionRegistry();\n\n  const workers: TaskWorker[] = [];\n  if (concurrentTasksLimit !== 0) {\n    for (let i = 0; i < (taskWorkers || 1); i++) {\n      const worker = await TaskWorker.create({\n        taskBroker,\n        actionRegistry,\n        integrations,\n        logger,\n        workingDirectory,\n        additionalTemplateFilters,\n        additionalTemplateGlobals,\n        concurrentTasksLimit,\n        permissions,\n      });\n      workers.push(worker);\n    }\n  }\n\n  const actionsToRegister = Array.isArray(actions)\n    ? actions\n    : createBuiltinActions({\n        integrations,\n        catalogClient,\n        reader,\n        config,\n        additionalTemplateFilters,\n        additionalTemplateGlobals,\n        auth,\n      });\n\n  actionsToRegister.forEach(action => actionRegistry.register(action));\n\n  const launchWorkers = () => workers.forEach(worker => worker.start());\n\n  const shutdownWorkers = () => {\n    workers.forEach(worker => worker.stop());\n  };\n\n  if (options.lifecycle) {\n    options.lifecycle.addStartupHook(launchWorkers);\n    options.lifecycle.addShutdownHook(shutdownWorkers);\n  } else {\n    launchWorkers();\n  }\n\n  const dryRunner = createDryRunner({\n    actionRegistry,\n    integrations,\n    logger,\n    workingDirectory,\n    additionalTemplateFilters,\n    additionalTemplateGlobals,\n    permissions,\n  });\n\n  const templateRules: TemplatePermissionRuleInput[] = Object.values(\n    scaffolderTemplateRules,\n  );\n  const actionRules: ActionPermissionRuleInput[] = Object.values(\n    scaffolderActionRules,\n  );\n\n  if (permissionRules) {\n    templateRules.push(\n      ...permissionRules.filter(isTemplatePermissionRuleInput),\n    );\n    actionRules.push(...permissionRules.filter(isActionPermissionRuleInput));\n  }\n\n  const isAuthorized = createConditionAuthorizer(Object.values(templateRules));\n\n  const permissionIntegrationRouter = createPermissionIntegrationRouter({\n    resources: [\n      {\n        resourceType: RESOURCE_TYPE_SCAFFOLDER_TEMPLATE,\n        permissions: scaffolderTemplatePermissions,\n        rules: templateRules,\n      },\n      {\n        resourceType: RESOURCE_TYPE_SCAFFOLDER_ACTION,\n        permissions: scaffolderActionPermissions,\n        rules: actionRules,\n      },\n    ],\n    permissions: scaffolderTaskPermissions,\n  });\n\n  router.use(permissionIntegrationRouter);\n\n  router\n    .get(\n      '/v2/templates/:namespace/:kind/:name/parameter-schema',\n      async (req, res) => {\n        const credentials = await httpAuth.credentials(req);\n\n        const { token } = await auth.getPluginRequestToken({\n          onBehalfOf: credentials,\n          targetPluginId: 'catalog',\n        });\n\n        const template = await authorizeTemplate(\n          req.params,\n          token,\n          credentials,\n        );\n\n        const parameters = [template.spec.parameters ?? []].flat();\n\n        const presentation = template.spec.presentation;\n\n        res.json({\n          title: template.metadata.title ?? template.metadata.name,\n          ...(presentation ? { presentation } : {}),\n          description: template.metadata.description,\n          'ui:options': template.metadata['ui:options'],\n          steps: parameters.map(schema => ({\n            title: schema.title ?? 'Please enter the following information',\n            description: schema.description,\n            schema,\n          })),\n        });\n      },\n    )\n    .get('/v2/actions', async (_req, res) => {\n      const actionsList = actionRegistry.list().map(action => {\n        return {\n          id: action.id,\n          description: action.description,\n          examples: action.examples,\n          schema: action.schema,\n        };\n      });\n      res.json(actionsList);\n    })\n    .post('/v2/tasks', async (req, res) => {\n      const templateRef: string = req.body.templateRef;\n      const { kind, namespace, name } = parseEntityRef(templateRef, {\n        defaultKind: 'template',\n      });\n\n      const credentials = await httpAuth.credentials(req);\n\n      await checkPermission({\n        credentials,\n        permissions: [taskCreatePermission],\n        permissionService: permissions,\n      });\n\n      const { token } = await auth.getPluginRequestToken({\n        onBehalfOf: credentials,\n        targetPluginId: 'catalog',\n      });\n\n      const userEntityRef = auth.isPrincipal(credentials, 'user')\n        ? credentials.principal.userEntityRef\n        : undefined;\n\n      const userEntity = userEntityRef\n        ? await catalogClient.getEntityByRef(userEntityRef, { token })\n        : undefined;\n\n      let auditLog = `Scaffolding task for ${templateRef}`;\n      if (userEntityRef) {\n        auditLog += ` created by ${userEntityRef}`;\n      }\n      logger.info(auditLog);\n\n      const values = req.body.values;\n\n      const template = await authorizeTemplate(\n        { kind, namespace, name },\n        token,\n        credentials,\n      );\n\n      for (const parameters of [template.spec.parameters ?? []].flat()) {\n        const result = validate(values, parameters);\n\n        if (!result.valid) {\n          res.status(400).json({ errors: result.errors });\n          return;\n        }\n      }\n\n      const baseUrl = getEntityBaseUrl(template);\n\n      const taskSpec: TaskSpec = {\n        apiVersion: template.apiVersion,\n        steps: template.spec.steps.map((step, index) => ({\n          ...step,\n          id: step.id ?? `step-${index + 1}`,\n          name: step.name ?? step.action,\n        })),\n        EXPERIMENTAL_recovery: template.spec.EXPERIMENTAL_recovery,\n        output: template.spec.output ?? {},\n        parameters: values,\n        user: {\n          entity: userEntity as UserEntity,\n          ref: userEntityRef,\n        },\n        templateInfo: {\n          entityRef: stringifyEntityRef({ kind, name, namespace }),\n          baseUrl,\n          entity: {\n            metadata: template.metadata,\n          },\n        },\n      };\n\n      const secrets: InternalTaskSecrets = {\n        ...req.body.secrets,\n        backstageToken: token,\n        __initiatorCredentials: JSON.stringify({\n          ...credentials,\n          // credentials.token is nonenumerable and will not be serialized, so we need to add it explicitly\n          token: (credentials as any).token,\n        }),\n      };\n\n      const result = await taskBroker.dispatch({\n        spec: taskSpec,\n        createdBy: userEntityRef,\n        secrets,\n      });\n\n      res.status(201).json({ id: result.taskId });\n    })\n    .get('/v2/tasks', async (req, res) => {\n      const credentials = await httpAuth.credentials(req);\n      await checkPermission({\n        credentials,\n        permissions: [taskReadPermission],\n        permissionService: permissions,\n      });\n\n      if (!taskBroker.list) {\n        throw new Error(\n          'TaskBroker does not support listing tasks, please implement the list method on the TaskBroker.',\n        );\n      }\n\n      const createdBy = parseStringsParam(req.query.createdBy, 'createdBy');\n      const status = parseStringsParam(req.query.status, 'status');\n\n      const order = parseStringsParam(req.query.order, 'order')?.map(item => {\n        const match = item.match(/^(asc|desc):(.+)$/);\n        if (!match) {\n          throw new InputError(\n            `Invalid order parameter \"${item}\", expected \"<asc or desc>:<field name>\"`,\n          );\n        }\n\n        return {\n          order: match[1] as 'asc' | 'desc',\n          field: match[2],\n        };\n      });\n\n      const limit = parseNumberParam(req.query.limit, 'limit');\n      const offset = parseNumberParam(req.query.offset, 'offset');\n\n      const tasks = await taskBroker.list({\n        filters: {\n          createdBy,\n          status: status ? (status as TaskStatus[]) : undefined,\n        },\n        order,\n        pagination: {\n          limit: limit ? limit[0] : undefined,\n          offset: offset ? offset[0] : undefined,\n        },\n      });\n\n      res.status(200).json(tasks);\n    })\n    .get('/v2/tasks/:taskId', async (req, res) => {\n      const credentials = await httpAuth.credentials(req);\n      await checkPermission({\n        credentials,\n        permissions: [taskReadPermission],\n        permissionService: permissions,\n      });\n\n      const { taskId } = req.params;\n      const task = await taskBroker.get(taskId);\n      if (!task) {\n        throw new NotFoundError(`Task with id ${taskId} does not exist`);\n      }\n      // Do not disclose secrets\n      delete task.secrets;\n      res.status(200).json(task);\n    })\n    .post('/v2/tasks/:taskId/cancel', async (req, res) => {\n      const credentials = await httpAuth.credentials(req);\n      // Requires both read and cancel permissions\n      await checkPermission({\n        credentials,\n        permissions: [taskCancelPermission, taskReadPermission],\n        permissionService: permissions,\n      });\n\n      const { taskId } = req.params;\n      await taskBroker.cancel?.(taskId);\n      res.status(200).json({ status: 'cancelled' });\n    })\n    .post('/v2/tasks/:taskId/retry', async (req, res) => {\n      const credentials = await httpAuth.credentials(req);\n      // Requires both read and cancel permissions\n      await checkPermission({\n        credentials,\n        permissions: [taskCreatePermission, taskReadPermission],\n        permissionService: permissions,\n      });\n\n      const { taskId } = req.params;\n      await taskBroker.retry?.(taskId);\n      res.status(201).json({ id: taskId });\n    })\n    .get('/v2/tasks/:taskId/eventstream', async (req, res) => {\n      const credentials = await httpAuth.credentials(req);\n      await checkPermission({\n        credentials,\n        permissions: [taskReadPermission],\n        permissionService: permissions,\n      });\n\n      const { taskId } = req.params;\n      const after =\n        req.query.after !== undefined ? Number(req.query.after) : undefined;\n\n      logger.debug(`Event stream observing taskId '${taskId}' opened`);\n\n      // Mandatory headers and http status to keep connection open\n      res.writeHead(200, {\n        Connection: 'keep-alive',\n        'Cache-Control': 'no-cache',\n        'Content-Type': 'text/event-stream',\n      });\n\n      // After client opens connection send all events as string\n      const subscription = taskBroker.event$({ taskId, after }).subscribe({\n        error: error => {\n          logger.error(\n            `Received error from event stream when observing taskId '${taskId}', ${error}`,\n          );\n          res.end();\n        },\n        next: ({ events }) => {\n          let shouldUnsubscribe = false;\n          for (const event of events) {\n            res.write(\n              `event: ${event.type}\\ndata: ${JSON.stringify(event)}\\n\\n`,\n            );\n            if (event.type === 'completion' && !event.isTaskRecoverable) {\n              shouldUnsubscribe = true;\n            }\n          }\n          // res.flush() is only available with the compression middleware\n          res.flush?.();\n          if (shouldUnsubscribe) {\n            subscription.unsubscribe();\n            res.end();\n          }\n        },\n      });\n\n      // When client closes connection we update the clients list\n      // avoiding the disconnected one\n      req.on('close', () => {\n        subscription.unsubscribe();\n        logger.debug(`Event stream observing taskId '${taskId}' closed`);\n      });\n    })\n    .get('/v2/tasks/:taskId/events', async (req, res) => {\n      const credentials = await httpAuth.credentials(req);\n      await checkPermission({\n        credentials,\n        permissions: [taskReadPermission],\n        permissionService: permissions,\n      });\n\n      const { taskId } = req.params;\n      const after = Number(req.query.after) || undefined;\n\n      // cancel the request after 30 seconds. this aligns with the recommendations of RFC 6202.\n      const timeout = setTimeout(() => {\n        res.json([]);\n      }, 30_000);\n\n      // Get all known events after an id (always includes the completion event) and return the first callback\n      const subscription = taskBroker.event$({ taskId, after }).subscribe({\n        error: error => {\n          logger.error(\n            `Received error from event stream when observing taskId '${taskId}', ${error}`,\n          );\n        },\n        next: ({ events }) => {\n          clearTimeout(timeout);\n          subscription.unsubscribe();\n          res.json(events);\n        },\n      });\n\n      // When client closes connection we update the clients list\n      // avoiding the disconnected one\n      req.on('close', () => {\n        subscription.unsubscribe();\n        clearTimeout(timeout);\n      });\n    })\n    .post('/v2/dry-run', async (req, res) => {\n      const credentials = await httpAuth.credentials(req);\n      await checkPermission({\n        credentials,\n        permissions: [taskCreatePermission],\n        permissionService: permissions,\n      });\n\n      const bodySchema = z.object({\n        template: z.unknown(),\n        values: z.record(z.unknown()),\n        secrets: z.record(z.string()).optional(),\n        directoryContents: z.array(\n          z.object({ path: z.string(), base64Content: z.string() }),\n        ),\n      });\n      const body = await bodySchema.parseAsync(req.body).catch(e => {\n        throw new InputError(`Malformed request: ${e}`);\n      });\n\n      const template = body.template as TemplateEntityV1beta3;\n      if (!(await templateEntityV1beta3Validator.check(template))) {\n        throw new InputError('Input template is not a template');\n      }\n\n      const { token } = await auth.getPluginRequestToken({\n        onBehalfOf: credentials,\n        targetPluginId: 'catalog',\n      });\n\n      const userEntityRef = auth.isPrincipal(credentials, 'user')\n        ? credentials.principal.userEntityRef\n        : undefined;\n\n      const userEntity = userEntityRef\n        ? await catalogClient.getEntityByRef(userEntityRef, { token })\n        : undefined;\n\n      for (const parameters of [template.spec.parameters ?? []].flat()) {\n        const result = validate(body.values, parameters);\n        if (!result.valid) {\n          res.status(400).json({ errors: result.errors });\n          return;\n        }\n      }\n\n      const steps = template.spec.steps.map((step, index) => ({\n        ...step,\n        id: step.id ?? `step-${index + 1}`,\n        name: step.name ?? step.action,\n      }));\n\n      const result = await dryRunner({\n        spec: {\n          apiVersion: template.apiVersion,\n          steps,\n          output: template.spec.output ?? {},\n          parameters: body.values as JsonObject,\n          user: {\n            entity: userEntity as UserEntity,\n            ref: userEntityRef,\n          },\n        },\n        directoryContents: (body.directoryContents ?? []).map(file => ({\n          path: file.path,\n          content: Buffer.from(file.base64Content, 'base64'),\n        })),\n        secrets: {\n          ...body.secrets,\n          ...(token && { backstageToken: token }),\n        },\n        credentials,\n      });\n\n      res.status(200).json({\n        ...result,\n        steps,\n        directoryContents: result.directoryContents.map(file => ({\n          path: file.path,\n          executable: file.executable,\n          base64Content: file.content.toString('base64'),\n        })),\n      });\n    })\n    .post('/v2/autocomplete/:provider/:resource', async (req, res) => {\n      const { token, context } = req.body;\n      const { provider, resource } = req.params;\n\n      if (!token) throw new InputError('Missing token query parameter');\n\n      if (!autocompleteHandlers[provider]) {\n        throw new InputError(`Unsupported provider: ${provider}`);\n      }\n\n      const { results } = await autocompleteHandlers[provider]({\n        resource,\n        token,\n        context,\n      });\n\n      res.status(200).json({ results });\n    });\n\n  const app = express();\n  app.set('logger', logger);\n  app.use('/', router);\n\n  async function authorizeTemplate(\n    entityRef: CompoundEntityRef,\n    token: string | undefined,\n    credentials: BackstageCredentials,\n  ) {\n    const template = await findTemplate({\n      catalogApi: catalogClient,\n      entityRef,\n      token,\n    });\n\n    if (!isSupportedTemplate(template)) {\n      throw new InputError(\n        `Unsupported apiVersion field in schema entity, ${\n          (template as Entity).apiVersion\n        }`,\n      );\n    }\n\n    if (!permissions) {\n      return template;\n    }\n\n    const [parameterDecision, stepDecision] =\n      await permissions.authorizeConditional(\n        [\n          { permission: templateParameterReadPermission },\n          { permission: templateStepReadPermission },\n        ],\n        { credentials },\n      );\n\n    // Authorize parameters\n    if (Array.isArray(template.spec.parameters)) {\n      template.spec.parameters = template.spec.parameters.filter(step =>\n        isAuthorized(parameterDecision, step),\n      );\n    } else if (\n      template.spec.parameters &&\n      !isAuthorized(parameterDecision, template.spec.parameters)\n    ) {\n      template.spec.parameters = undefined;\n    }\n\n    // Authorize steps\n    template.spec.steps = template.spec.steps.filter(step =>\n      isAuthorized(stepDecision, step),\n    );\n\n    return template;\n  }\n\n  return app;\n}\n"],"names":["RESOURCE_TYPE_SCAFFOLDER_TEMPLATE","RESOURCE_TYPE_SCAFFOLDER_ACTION","parseEntityRef","stringifyError","config","readDurationFromConfig","Router","express","HostDiscovery","createLegacyAuthAdapters","getWorkingDirectory","ScmIntegrations","DatabaseTaskStore","StorageTaskBroker","Duration","TemplateActionRegistry","TaskWorker","createBuiltinActions","createDryRunner","scaffolderTemplateRules","scaffolderActionRules","createConditionAuthorizer","createPermissionIntegrationRouter","scaffolderTemplatePermissions","scaffolderActionPermissions","scaffolderTaskPermissions","checkPermission","taskCreatePermission","result","validate","getEntityBaseUrl","stringifyEntityRef","taskReadPermission","parseStringsParam","InputError","parseNumberParam","NotFoundError","taskCancelPermission","z","templateEntityV1beta3Validator","findTemplate","templateParameterReadPermission","templateStepReadPermission"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"router.cjs.js","sources":["../../src/service/router.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createLegacyAuthAdapters,\n  HostDiscovery,\n} from '@backstage/backend-common';\nimport { CatalogApi } from '@backstage/catalog-client';\nimport {\n  CompoundEntityRef,\n  Entity,\n  parseEntityRef,\n  stringifyEntityRef,\n  UserEntity,\n} from '@backstage/catalog-model';\nimport { Config, readDurationFromConfig } from '@backstage/config';\nimport { InputError, NotFoundError, stringifyError } from '@backstage/errors';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { HumanDuration, JsonObject, JsonValue } from '@backstage/types';\nimport {\n  TaskSpec,\n  TemplateEntityStepV1beta3,\n  TemplateEntityV1beta3,\n  templateEntityV1beta3Validator,\n  TemplateParametersV1beta3,\n} from '@backstage/plugin-scaffolder-common';\nimport {\n  RESOURCE_TYPE_SCAFFOLDER_ACTION,\n  RESOURCE_TYPE_SCAFFOLDER_TEMPLATE,\n  scaffolderActionPermissions,\n  scaffolderTaskPermissions,\n  scaffolderTemplatePermissions,\n  taskCancelPermission,\n  taskCreatePermission,\n  taskReadPermission,\n  templateParameterReadPermission,\n  templateStepReadPermission,\n} from '@backstage/plugin-scaffolder-common/alpha';\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport { validate } from 'jsonschema';\nimport { Logger } from 'winston';\nimport { z } from 'zod';\nimport {\n  TaskBroker,\n  TaskStatus,\n  TemplateAction,\n  TaskSecrets,\n  TemplateFilter,\n  TemplateGlobal,\n} from '@backstage/plugin-scaffolder-node';\nimport {\n  createBuiltinActions,\n  DatabaseTaskStore,\n  TaskWorker,\n  TemplateActionRegistry,\n} from '../scaffolder';\nimport { createDryRunner } from '../scaffolder/dryrun';\nimport { StorageTaskBroker } from '../scaffolder/tasks/StorageTaskBroker';\nimport {\n  findTemplate,\n  getEntityBaseUrl,\n  getWorkingDirectory,\n  parseNumberParam,\n  parseStringsParam,\n} from './helpers';\nimport { PermissionRuleParams } from '@backstage/plugin-permission-common';\nimport {\n  createConditionAuthorizer,\n  createPermissionIntegrationRouter,\n  PermissionRule,\n} from '@backstage/plugin-permission-node';\nimport { scaffolderActionRules, scaffolderTemplateRules } from './rules';\nimport { Duration } from 'luxon';\nimport {\n  AuthService,\n  BackstageCredentials,\n  DatabaseService,\n  DiscoveryService,\n  HttpAuthService,\n  LifecycleService,\n  PermissionsService,\n  SchedulerService,\n  UrlReaderService,\n} from '@backstage/backend-plugin-api';\nimport {\n  IdentityApi,\n  IdentityApiGetIdentityRequest,\n} from '@backstage/plugin-auth-node';\nimport { InternalTaskSecrets } from '../scaffolder/tasks/types';\nimport { checkPermission } from '../util/checkPermissions';\nimport {\n  AutocompleteHandler,\n  WorkspaceProvider,\n} from '@backstage/plugin-scaffolder-node/alpha';\nimport { cloneDeep } from 'lodash';\n\nimport { DefaultAuditLogger } from '@janus-idp/backstage-plugin-audit-log-node';\n\n/**\n *\n * @public\n */\nexport type TemplatePermissionRuleInput<\n  TParams extends PermissionRuleParams = PermissionRuleParams,\n> = PermissionRule<\n  TemplateEntityStepV1beta3 | TemplateParametersV1beta3,\n  {},\n  typeof RESOURCE_TYPE_SCAFFOLDER_TEMPLATE,\n  TParams\n>;\nfunction isTemplatePermissionRuleInput(\n  permissionRule: TemplatePermissionRuleInput | ActionPermissionRuleInput,\n): permissionRule is TemplatePermissionRuleInput {\n  return permissionRule.resourceType === RESOURCE_TYPE_SCAFFOLDER_TEMPLATE;\n}\n\n/**\n *\n * @public\n */\nexport type ActionPermissionRuleInput<\n  TParams extends PermissionRuleParams = PermissionRuleParams,\n> = PermissionRule<\n  TemplateEntityStepV1beta3 | TemplateParametersV1beta3,\n  {},\n  typeof RESOURCE_TYPE_SCAFFOLDER_ACTION,\n  TParams\n>;\nfunction isActionPermissionRuleInput(\n  permissionRule: TemplatePermissionRuleInput | ActionPermissionRuleInput,\n): permissionRule is ActionPermissionRuleInput {\n  return permissionRule.resourceType === RESOURCE_TYPE_SCAFFOLDER_ACTION;\n}\n\n/**\n * RouterOptions\n *\n * @public\n * @deprecated Please migrate to the new backend system as this will be removed in the future.\n */\nexport interface RouterOptions {\n  logger: Logger;\n  config: Config;\n  reader: UrlReaderService;\n  lifecycle?: LifecycleService;\n  database: DatabaseService;\n  catalogClient: CatalogApi;\n  scheduler?: SchedulerService;\n  actions?: TemplateAction<any, any>[];\n  /**\n   * @deprecated taskWorkers is deprecated in favor of concurrentTasksLimit option with a single TaskWorker\n   * @defaultValue 1\n   */\n  taskWorkers?: number;\n  /**\n   * Sets the number of concurrent tasks that can be run at any given time on the TaskWorker\n   * @defaultValue 10\n   */\n  concurrentTasksLimit?: number;\n  taskBroker?: TaskBroker;\n  additionalTemplateFilters?: Record<string, TemplateFilter>;\n  additionalTemplateGlobals?: Record<string, TemplateGlobal>;\n  additionalWorkspaceProviders?: Record<string, WorkspaceProvider>;\n  permissions?: PermissionsService;\n  permissionRules?: Array<\n    TemplatePermissionRuleInput | ActionPermissionRuleInput\n  >;\n  auth?: AuthService;\n  httpAuth?: HttpAuthService;\n  identity?: IdentityApi;\n  discovery?: DiscoveryService;\n\n  autocompleteHandlers?: Record<string, AutocompleteHandler>;\n}\n\nfunction isSupportedTemplate(entity: TemplateEntityV1beta3) {\n  return entity.apiVersion === 'scaffolder.backstage.io/v1beta3';\n}\n\n/*\n * @deprecated This function remains as the DefaultIdentityClient behaves slightly differently to the pre-existing\n * scaffolder behaviour. Specifically if the token fails to parse, the DefaultIdentityClient will raise an error.\n * The scaffolder did not raise an error in this case. As such we chose to allow it to behave as it did previously\n * until someone explicitly passes an IdentityApi. When we have reasonable confidence that most backstage deployments\n * are using the IdentityApi, we can remove this function.\n */\nfunction buildDefaultIdentityClient(options: RouterOptions): IdentityApi {\n  return {\n    getIdentity: async ({ request }: IdentityApiGetIdentityRequest) => {\n      const header = request.headers.authorization;\n      const { logger } = options;\n\n      if (!header) {\n        return undefined;\n      }\n\n      try {\n        const token = header.match(/^Bearer\\s(\\S+\\.\\S+\\.\\S+)$/i)?.[1];\n        if (!token) {\n          throw new TypeError('Expected Bearer with JWT');\n        }\n\n        const [_header, rawPayload, _signature] = token.split('.');\n        const payload: JsonValue = JSON.parse(\n          Buffer.from(rawPayload, 'base64').toString(),\n        );\n\n        if (\n          typeof payload !== 'object' ||\n          payload === null ||\n          Array.isArray(payload)\n        ) {\n          throw new TypeError('Malformed JWT payload');\n        }\n\n        const sub = payload.sub;\n        if (typeof sub !== 'string') {\n          throw new TypeError('Expected string sub claim');\n        }\n\n        if (sub === 'backstage-server') {\n          return undefined;\n        }\n\n        // Check that it's a valid ref, otherwise this will throw.\n        parseEntityRef(sub);\n\n        return {\n          identity: {\n            userEntityRef: sub,\n            ownershipEntityRefs: [],\n            type: 'user',\n          },\n          token,\n        };\n      } catch (e) {\n        logger.error(`Invalid authorization header: ${stringifyError(e)}`);\n        return undefined;\n      }\n    },\n  };\n}\n\nconst readDuration = (\n  config: Config,\n  key: string,\n  defaultValue: HumanDuration,\n) => {\n  if (config.has(key)) {\n    return readDurationFromConfig(config, { key });\n  }\n  return defaultValue;\n};\n\n/**\n * A method to create a router for the scaffolder backend plugin.\n * @public\n * @deprecated Please migrate to the new backend system as this will be removed in the future.\n */\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const router = Router();\n  // Be generous in upload size to support a wide range of templates in dry-run mode.\n  router.use(express.json({ limit: '10MB' }));\n\n  const {\n    logger: parentLogger,\n    config,\n    reader,\n    database,\n    catalogClient,\n    actions,\n    taskWorkers,\n    scheduler,\n    additionalTemplateFilters,\n    additionalTemplateGlobals,\n    additionalWorkspaceProviders,\n    permissions,\n    permissionRules,\n    discovery = HostDiscovery.fromConfig(config),\n    identity = buildDefaultIdentityClient(options),\n    autocompleteHandlers = {},\n  } = options;\n\n  const { auth, httpAuth } = createLegacyAuthAdapters({\n    ...options,\n    identity,\n    discovery,\n  });\n\n  const concurrentTasksLimit =\n    options.concurrentTasksLimit ??\n    options.config.getOptionalNumber('scaffolder.concurrentTasksLimit');\n\n  const logger = parentLogger.child({ plugin: 'scaffolder' });\n  const auditLogger = new DefaultAuditLogger({\n    logger,\n    authService: auth,\n    httpAuthService: httpAuth,\n  });\n\n  const workingDirectory = await getWorkingDirectory(config, logger);\n  const integrations = ScmIntegrations.fromConfig(config);\n\n  let taskBroker: TaskBroker;\n  if (!options.taskBroker) {\n    const databaseTaskStore = await DatabaseTaskStore.create({ database });\n    taskBroker = new StorageTaskBroker(\n      databaseTaskStore,\n      logger,\n      auditLogger,\n      config,\n      auth,\n      additionalWorkspaceProviders,\n    );\n\n    if (scheduler && databaseTaskStore.listStaleTasks) {\n      await scheduler.scheduleTask({\n        id: 'close_stale_tasks',\n        frequency: readDuration(\n          config,\n          'scaffolder.taskTimeoutJanitorFrequency',\n          {\n            minutes: 5,\n          },\n        ),\n        timeout: { minutes: 15 },\n        fn: async () => {\n          const { tasks } = await databaseTaskStore.listStaleTasks({\n            timeoutS: Duration.fromObject(\n              readDuration(config, 'scaffolder.taskTimeout', {\n                hours: 24,\n              }),\n            ).as('seconds'),\n          });\n\n          for (const task of tasks) {\n            await databaseTaskStore.shutdownTask(task);\n            logger.info(`Successfully closed stale task ${task.taskId}`);\n          }\n        },\n      });\n    }\n  } else {\n    taskBroker = options.taskBroker;\n  }\n\n  const actionRegistry = new TemplateActionRegistry();\n\n  const workers: TaskWorker[] = [];\n  if (concurrentTasksLimit !== 0) {\n    for (let i = 0; i < (taskWorkers || 1); i++) {\n      const worker = await TaskWorker.create({\n        taskBroker,\n        actionRegistry,\n        integrations,\n        logger,\n        workingDirectory,\n        additionalTemplateFilters,\n        additionalTemplateGlobals,\n        concurrentTasksLimit,\n        permissions,\n        auditLogger,\n      });\n      workers.push(worker);\n    }\n  }\n\n  const actionsToRegister = Array.isArray(actions)\n    ? actions\n    : createBuiltinActions({\n        integrations,\n        catalogClient,\n        reader,\n        config,\n        additionalTemplateFilters,\n        additionalTemplateGlobals,\n        auth,\n      });\n\n  actionsToRegister.forEach(action => actionRegistry.register(action));\n\n  const launchWorkers = () => workers.forEach(worker => worker.start());\n\n  const shutdownWorkers = () => {\n    workers.forEach(worker => worker.stop());\n  };\n\n  if (options.lifecycle) {\n    options.lifecycle.addStartupHook(launchWorkers);\n    options.lifecycle.addShutdownHook(shutdownWorkers);\n  } else {\n    launchWorkers();\n  }\n\n  const dryRunner = createDryRunner({\n    actionRegistry,\n    integrations,\n    logger,\n    auditLogger,\n    workingDirectory,\n    additionalTemplateFilters,\n    additionalTemplateGlobals,\n    permissions,\n  });\n\n  const templateRules: TemplatePermissionRuleInput[] = Object.values(\n    scaffolderTemplateRules,\n  );\n  const actionRules: ActionPermissionRuleInput[] = Object.values(\n    scaffolderActionRules,\n  );\n\n  if (permissionRules) {\n    templateRules.push(\n      ...permissionRules.filter(isTemplatePermissionRuleInput),\n    );\n    actionRules.push(...permissionRules.filter(isActionPermissionRuleInput));\n  }\n\n  const isAuthorized = createConditionAuthorizer(Object.values(templateRules));\n\n  const permissionIntegrationRouter = createPermissionIntegrationRouter({\n    resources: [\n      {\n        resourceType: RESOURCE_TYPE_SCAFFOLDER_TEMPLATE,\n        permissions: scaffolderTemplatePermissions,\n        rules: templateRules,\n      },\n      {\n        resourceType: RESOURCE_TYPE_SCAFFOLDER_ACTION,\n        permissions: scaffolderActionPermissions,\n        rules: actionRules,\n      },\n    ],\n    permissions: scaffolderTaskPermissions,\n  });\n\n  router.use(permissionIntegrationRouter);\n\n  router\n    .get(\n      '/v2/templates/:namespace/:kind/:name/parameter-schema',\n      async (req, res) => {\n        const requestedTemplateRef = `${req.params.kind}:${req.params.namespace}/${req.params.name}`;\n        const actorId = await auditLogger.getActorId(req);\n        try {\n          const credentials = await httpAuth.credentials(req);\n\n          const { token } = await auth.getPluginRequestToken({\n            onBehalfOf: credentials,\n            targetPluginId: 'catalog',\n          });\n          await auditLogger.auditLog({\n            eventName: 'ScaffolderParameterSchemaFetch',\n            actorId,\n            stage: 'initiation',\n            status: 'succeeded',\n            metadata: {\n              templateRef: requestedTemplateRef,\n            },\n            request: req,\n            message: `${actorId} requested the parameter schema for ${requestedTemplateRef}`,\n          });\n          const template = await authorizeTemplate(\n            req.params,\n            token,\n            credentials,\n          );\n\n          const parameters = [template.spec.parameters ?? []].flat();\n\n          const presentation = template.spec.presentation;\n          const templateRef = `${template.kind}:${\n            template.metadata.namespace || 'default'\n          }/${template.metadata.name}`;\n\n          const responseBody = {\n            title: template.metadata.title ?? template.metadata.name,\n            ...(presentation ? { presentation } : {}),\n            description: template.metadata.description,\n            'ui:options': template.metadata['ui:options'],\n            steps: parameters.map(schema => ({\n              title: schema.title ?? 'Please enter the following information',\n              description: schema.description,\n              schema,\n            })),\n          };\n          await auditLogger.auditLog({\n            eventName: 'ScaffolderParameterSchemaFetch',\n            actorId,\n            stage: 'completion',\n            status: 'succeeded',\n            metadata: {\n              templateRef: templateRef,\n            },\n            request: req,\n            response: {\n              status: 200,\n              body: responseBody,\n            },\n            message: `${actorId} successfully requested the parameter schema for ${templateRef}`,\n          });\n\n          res.json(responseBody);\n        } catch (err) {\n          await auditLogger.auditLog({\n            eventName: 'ScaffolderParameterSchemaFetch',\n            actorId,\n            stage: 'completion',\n            status: 'failed',\n            level: 'error',\n            request: req,\n            metadata: {\n              templateRef: requestedTemplateRef,\n            },\n            errors: [\n              {\n                name: err.name,\n                message: err.message,\n                stack: err.stack,\n              },\n            ],\n            message: `${actorId} failed to request the parameter schema for ${requestedTemplateRef}`,\n          });\n          throw err;\n        }\n      },\n    )\n    .get('/v2/actions', async (req, res) => {\n      const actorId = await auditLogger.getActorId(req);\n      try {\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderInstalledActionsFetch',\n          actorId,\n          stage: 'initiation',\n          status: 'succeeded',\n          request: req,\n          message: `${actorId} requested the list of installed actions`,\n        });\n        const actionsList = actionRegistry.list().map(action => {\n          return {\n            id: action.id,\n            description: action.description,\n            examples: action.examples,\n            schema: action.schema,\n          };\n        });\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderInstalledActionsFetch',\n          actorId,\n          stage: 'completion',\n          status: 'succeeded',\n          request: req,\n          response: {\n            status: 200,\n            body: actionsList,\n          },\n          message: `${actorId} successfully requested the list of installed actions`,\n        });\n        res.json(actionsList);\n      } catch (err) {\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderInstalledActionsFetch',\n          actorId,\n          stage: 'completion',\n          status: 'failed',\n          level: 'error',\n          request: req,\n          errors: [\n            {\n              name: err.name,\n              message: err.message,\n              stack: err.stack,\n            },\n          ],\n          message: `${actorId} failed to request for the list of installed actions`,\n        });\n        throw err;\n      }\n    })\n    .post('/v2/tasks', async (req, res) => {\n      const templateRef: string = req.body.templateRef;\n      const { kind, namespace, name } = parseEntityRef(templateRef, {\n        defaultKind: 'template',\n      });\n      const credentials = await httpAuth.credentials(req);\n\n      await checkPermission({\n        credentials,\n        permissions: [taskCreatePermission],\n        permissionService: permissions,\n      });\n\n      const { token } = await auth.getPluginRequestToken({\n        onBehalfOf: credentials,\n        targetPluginId: 'catalog',\n      });\n      const userEntityRef = auth.isPrincipal(credentials, 'user')\n        ? credentials.principal.userEntityRef\n        : undefined;\n\n      const userEntity = userEntityRef\n        ? await catalogClient.getEntityByRef(userEntityRef, { token })\n        : undefined;\n      const values = req.body.values;\n      const redactedRequest = cloneDeep(req);\n\n      // Workaround ensure that redactedRequest.ip accesses the original req.ip with the correct context, preventing 'Illegal invocation' errors\n      Object.defineProperty(redactedRequest, 'ip', {\n        get: () => {\n          return req.ip;\n        },\n      });\n      if (req.body.secrets) {\n        const redactedBody = {\n          ...req.body,\n          secrets: Object.keys(req.body.secrets).reduce((acc, key) => {\n            return {\n              ...acc,\n              [key]: '***',\n            };\n          }, {} as TaskSecrets),\n        };\n        redactedRequest.body = redactedBody;\n      }\n      try {\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskCreation',\n          stage: 'initiation',\n          status: 'succeeded',\n          actorId: userEntityRef,\n          request: redactedRequest,\n          metadata: {\n            templateRef: templateRef,\n          },\n\n          message: `Scaffolding task for ${templateRef} creation attempt by ${userEntityRef} initiated`,\n        });\n        await checkPermission({\n          credentials,\n          permissions: [taskCreatePermission],\n          permissionService: permissions,\n        });\n        const template = await authorizeTemplate(\n          { kind, namespace, name },\n          token,\n          credentials,\n        );\n        for (const parameters of [template.spec.parameters ?? []].flat()) {\n          const result = validate(values, parameters);\n          if (!result.valid) {\n            await auditLogger.auditLog({\n              eventName: 'ScaffolderTaskCreation',\n              stage: 'completion',\n              status: 'failed',\n              level: 'error',\n              actorId: userEntityRef,\n              request: redactedRequest,\n              metadata: {\n                templateRef: templateRef,\n              },\n              response: {\n                status: 400,\n                body: { errors: result.errors },\n              },\n              errors: result.errors,\n              message: `Scaffolding task for ${templateRef} creation attempt by ${userEntityRef} failed`,\n            });\n            return res.status(400).json({ errors: result.errors });\n          }\n        }\n\n        const baseUrl = getEntityBaseUrl(template);\n\n        const taskSpec: TaskSpec = {\n          apiVersion: template.apiVersion,\n          steps: template.spec.steps.map((step, index) => ({\n            ...step,\n            id: step.id ?? `step-${index + 1}`,\n            name: step.name ?? step.action,\n          })),\n          EXPERIMENTAL_recovery: template.spec.EXPERIMENTAL_recovery,\n          output: template.spec.output ?? {},\n          parameters: values,\n          user: {\n            entity: userEntity as UserEntity,\n            ref: userEntityRef,\n          },\n          templateInfo: {\n            entityRef: stringifyEntityRef({ kind, name, namespace }),\n            baseUrl,\n            entity: {\n              metadata: template.metadata,\n            },\n          },\n        };\n\n        const secrets: InternalTaskSecrets = {\n          ...req.body.secrets,\n          backstageToken: token,\n          __initiatorCredentials: JSON.stringify({\n            ...credentials,\n            // credentials.token is nonenumerable and will not be serialized, so we need to add it explicitly\n            token: (credentials as any).token,\n          }),\n        };\n\n        const result = await taskBroker.dispatch({\n          spec: taskSpec,\n          createdBy: userEntityRef,\n          secrets,\n        });\n\n        let auditLog = `Scaffolding task for ${templateRef}`;\n        if (userEntityRef) {\n          auditLog += ` created by ${userEntityRef}`;\n        }\n\n        logger.info(auditLog);\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskCreation',\n          stage: 'completion',\n          status: 'succeeded',\n          actorId: userEntityRef,\n          request: redactedRequest,\n          metadata: {\n            taskId: result.taskId,\n            templateRef: templateRef,\n          },\n          response: {\n            status: 201,\n            body: { id: result.taskId },\n          },\n          message: `Scaffolding task for ${templateRef} with taskId: ${result.taskId} successfully created by ${userEntityRef}`,\n        });\n        return res.status(201).json({ id: result.taskId });\n      } catch (err) {\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskCreation',\n          stage: 'completion',\n          status: 'failed',\n          level: 'error',\n          actorId: userEntityRef,\n          request: redactedRequest,\n          metadata: {\n            templateRef: templateRef,\n          },\n          errors: [\n            {\n              name: err.name,\n              message: err.message,\n              stack: err.stack,\n            },\n          ],\n          message: `Scaffolding task for ${templateRef} creation attempt by ${userEntityRef} failed`,\n        });\n        throw err;\n      }\n    })\n    .get('/v2/tasks', async (req, res) => {\n      const actorId = await auditLogger.getActorId(req);\n\n      try {\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskListFetch',\n          actorId,\n          stage: 'initiation',\n          status: 'succeeded',\n          request: req,\n          message: `${actorId} requested for the list of scaffolder tasks`,\n        });\n        const credentials = await httpAuth.credentials(req);\n\n        await checkPermission({\n          credentials,\n          permissions: [taskReadPermission],\n          permissionService: permissions,\n        });\n\n        if (!taskBroker.list) {\n          throw new Error(\n            'TaskBroker does not support listing tasks, please implement the list method on the TaskBroker.',\n          );\n        }\n\n        const createdBy = parseStringsParam(req.query.createdBy, 'createdBy');\n        const status = parseStringsParam(req.query.status, 'status');\n\n        const order = parseStringsParam(req.query.order, 'order')?.map(item => {\n          const match = item.match(/^(asc|desc):(.+)$/);\n          if (!match) {\n            throw new InputError(\n              `Invalid order parameter \"${item}\", expected \"<asc or desc>:<field name>\"`,\n            );\n          }\n\n          return {\n            order: match[1] as 'asc' | 'desc',\n            field: match[2],\n          };\n        });\n\n        const limit = parseNumberParam(req.query.limit, 'limit');\n        const offset = parseNumberParam(req.query.offset, 'offset');\n\n        const tasks = await taskBroker.list({\n          filters: {\n            createdBy,\n            status: status ? (status as TaskStatus[]) : undefined,\n          },\n          order,\n          pagination: {\n            limit: limit ? limit[0] : undefined,\n            offset: offset ? offset[0] : undefined,\n          },\n        });\n\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskListFetch',\n          actorId,\n          stage: 'completion',\n          status: 'succeeded',\n          request: req,\n          response: {\n            status: 200,\n            body: tasks,\n          },\n          message: `${actorId} successfully requested for the list of scaffolder tasks`,\n        });\n        res.status(200).json(tasks);\n      } catch (err) {\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskListFetch',\n          actorId,\n          stage: 'completion',\n          status: 'failed',\n          level: 'error',\n          request: req,\n          errors: [\n            {\n              name: err.name,\n              message: err.message,\n              stack: err.stack,\n            },\n          ],\n          message: `${actorId} request for the list of scaffolder tasks failed`,\n        });\n        throw err;\n      }\n    })\n    .get('/v2/tasks/:taskId', async (req, res) => {\n      const { taskId } = req.params;\n      const actorId = await auditLogger.getActorId(req);\n      try {\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskFetch',\n          actorId,\n          stage: 'initiation',\n          status: 'succeeded',\n          metadata: {\n            taskId: taskId,\n          },\n          request: req,\n          message: `${actorId} requested for scaffolder task ${taskId}`,\n        });\n        const credentials = await httpAuth.credentials(req);\n        await checkPermission({\n          credentials,\n          permissions: [taskReadPermission],\n          permissionService: permissions,\n        });\n\n        const task = await taskBroker.get(taskId);\n        if (!task) {\n          throw new NotFoundError(`Task with id ${taskId} does not exist`);\n        }\n        // Do not disclose secrets\n        delete task.secrets;\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskFetch',\n          actorId,\n          stage: 'completion',\n          status: 'succeeded',\n          request: req,\n          response: {\n            status: 200,\n            body: task,\n          },\n          message: `${actorId} successfully requested for scaffolder tasks ${taskId}`,\n        });\n        res.status(200).json(task);\n      } catch (err) {\n        let status = 500;\n        if (err.name === 'NotFoundError') {\n          status = 404;\n        }\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskFetch',\n          actorId,\n          stage: 'completion',\n          status: 'failed',\n          level: 'error',\n          request: req,\n          response: {\n            status: status,\n          },\n          errors: [\n            {\n              name: err.name,\n              message: err.message,\n              stack: err.stack,\n            },\n          ],\n          message: `${actorId} request for scaffolder tasks ${taskId} failed`,\n        });\n        throw err;\n      }\n    })\n    .post('/v2/tasks/:taskId/cancel', async (req, res) => {\n      const { taskId } = req.params;\n      const actorId = await auditLogger.getActorId(req);\n      try {\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskCancellation',\n          actorId,\n          stage: 'initiation',\n          status: 'succeeded',\n          metadata: {\n            taskId,\n          },\n          request: req,\n          message: `Cancellation request for Scaffolding task with taskId: ${taskId} from ${actorId} received`,\n        });\n        const credentials = await httpAuth.credentials(req);\n        await checkPermission({\n          credentials,\n          permissions: [taskCancelPermission],\n          permissionService: permissions,\n        });\n        await taskBroker.cancel?.(taskId);\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskCancellation',\n          actorId,\n          stage: 'completion',\n          status: 'succeeded',\n          metadata: {\n            taskId,\n          },\n          request: req,\n          response: {\n            status: 200,\n            body: { status: 'cancelled' },\n          },\n          message: `Scaffolding task with taskId: ${taskId} successfully cancelled by ${actorId}`,\n        });\n        res.status(200).json({ status: 'cancelled' });\n      } catch (err) {\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskCancellation',\n          actorId,\n          stage: 'completion',\n          status: 'failed',\n          level: 'error',\n          request: req,\n          errors: [\n            {\n              name: err.name,\n              message: err.message,\n              stack: err.stack,\n            },\n          ],\n          message: `${actorId}'s cancel request for task ${taskId} failed`,\n        });\n        throw err;\n      }\n    })\n    .post('/v2/tasks/:taskId/retry', async (req, res) => {\n      const { taskId } = req.params;\n      const actorId = await auditLogger.getActorId(req);\n      try {\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskRetry',\n          actorId,\n          stage: 'initiation',\n          status: 'succeeded',\n          metadata: {\n            taskId,\n          },\n          request: req,\n          message: `Retry request for Scaffolding task with taskId: ${taskId} from ${actorId} received`,\n        });\n        const credentials = await httpAuth.credentials(req);\n        // Requires both read and cancel permissions\n        await checkPermission({\n          credentials,\n          permissions: [taskCreatePermission, taskReadPermission],\n          permissionService: permissions,\n        });\n        await taskBroker.retry?.(taskId);\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskRetry',\n          actorId,\n          stage: 'completion',\n          status: 'succeeded',\n          metadata: {\n            taskId,\n          },\n          request: req,\n          response: {\n            status: 201,\n            body: { id: taskId },\n          },\n          message: `Scaffolding task with taskId: ${taskId} successfully retried by ${actorId}`,\n        });\n        res.status(201).json({ id: taskId });\n      } catch (err) {\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskRetry',\n          actorId,\n          stage: 'completion',\n          status: 'failed',\n          level: 'error',\n          request: req,\n          errors: [\n            {\n              name: err.name,\n              message: err.message,\n              stack: err.stack,\n            },\n          ],\n          message: `${actorId}'s retry request for task ${taskId} failed`,\n        });\n        throw err;\n      }\n    })\n    .get('/v2/tasks/:taskId/eventstream', async (req, res) => {\n      const { taskId } = req.params;\n      const actorId = await auditLogger.getActorId(req);\n      try {\n        const after =\n          req.query.after !== undefined ? Number(req.query.after) : undefined;\n\n        logger.debug(`Event stream observing taskId '${taskId}' opened`);\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskStream',\n          actorId,\n          stage: 'initiation',\n          status: 'succeeded',\n          metadata: {\n            taskId,\n          },\n          request: req,\n          message: `Event stream for scaffolding task with taskId: ${taskId} was opened by ${actorId}`,\n        });\n        const credentials = await httpAuth.credentials(req);\n        await checkPermission({\n          credentials,\n          permissions: [taskReadPermission],\n          permissionService: permissions,\n        });\n\n        // Mandatory headers and http status to keep connection open\n        res.writeHead(200, {\n          Connection: 'keep-alive',\n          'Cache-Control': 'no-cache',\n          'Content-Type': 'text/event-stream',\n        });\n\n        // After client opens connection send all events as string\n        const subscription = taskBroker.event$({ taskId, after }).subscribe({\n          error: async error => {\n            logger.error(\n              `Received error from event stream when observing taskId '${taskId}', ${error}`,\n            );\n            await auditLogger.auditLog({\n              eventName: 'ScaffolderTaskStream',\n              actorId,\n              stage: 'completion',\n              status: 'failed',\n              level: 'error',\n              metadata: {\n                taskId,\n              },\n              request: req,\n              errors: [\n                {\n                  name: error.name,\n                  message: error.message,\n                  stack: error.stack,\n                  cause: error.cause,\n                },\n              ],\n              message: `Received error from event stream observing scaffolding task with taskId: ${taskId} requested by ${actorId}`,\n            });\n            res.end();\n          },\n          next: ({ events }) => {\n            let shouldUnsubscribe = false;\n            for (const event of events) {\n              res.write(\n                `event: ${event.type}\\ndata: ${JSON.stringify(event)}\\n\\n`,\n              );\n              if (event.type === 'completion') {\n                shouldUnsubscribe = true;\n              }\n            }\n            // res.flush() is only available with the compression middleware\n            res.flush?.();\n            if (shouldUnsubscribe) {\n              subscription.unsubscribe();\n              res.end();\n            }\n          },\n        });\n\n        // When client closes connection we update the clients list\n        // avoiding the disconnected one\n        req.on('close', async () => {\n          subscription.unsubscribe();\n          logger.debug(`Event stream observing taskId '${taskId}' closed`);\n          await auditLogger.auditLog({\n            eventName: 'ScaffolderTaskStream',\n            actorId,\n            stage: 'completion',\n            status: 'succeeded',\n            metadata: {\n              taskId,\n            },\n            request: req,\n            message: `Event stream observing scaffolding task with taskId: ${taskId} was closed by ${actorId}`,\n          });\n        });\n      } catch (err) {\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskStream',\n          actorId,\n          stage: 'completion',\n          status: 'failed',\n          level: 'error',\n          metadata: {\n            taskId,\n          },\n          request: req,\n          errors: [\n            {\n              name: err.name,\n              message: err.message,\n              stack: err.stack,\n            },\n          ],\n          message: `Received error from event stream observing scaffolding task with taskId: ${taskId} requested by ${actorId}`,\n        });\n        throw err;\n      }\n    })\n    .get('/v2/tasks/:taskId/events', async (req, res) => {\n      const { taskId } = req.params;\n      const actorId = await auditLogger.getActorId(req);\n      try {\n        const after = Number(req.query.after) || undefined;\n\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskEventFetch',\n          actorId,\n          stage: 'initiation',\n          status: 'succeeded',\n          metadata: {\n            taskId,\n          },\n          request: req,\n          message: `Task events fetch attempt for scaffolding task with taskId: ${taskId} initiated by ${actorId}`,\n        });\n        const credentials = await httpAuth.credentials(req);\n        await checkPermission({\n          credentials,\n          permissions: [taskReadPermission],\n          permissionService: permissions,\n        });\n\n        // cancel the request after 30 seconds. this aligns with the recommendations of RFC 6202.\n        const timeout = setTimeout(() => {\n          res.json([]);\n        }, 30_000);\n\n        // Get all known events after an id (always includes the completion event) and return the first callback\n        const subscription = taskBroker.event$({ taskId, after }).subscribe({\n          error: async error => {\n            logger.error(\n              `Received error from event stream when observing taskId '${taskId}', ${error}`,\n            );\n            await auditLogger.auditLog({\n              eventName: 'ScaffolderTaskEventFetch',\n              actorId,\n              stage: 'completion',\n              status: 'failed',\n              level: 'error',\n              metadata: {\n                taskId,\n              },\n              request: req,\n              errors: [\n                {\n                  name: error.name,\n                  message: error.message,\n                  stack: error.stack,\n                },\n              ],\n              message: `Task events fetch attempt for scaffolding task with taskId: ${taskId} requested by ${actorId} failed`,\n            });\n          },\n          next: async ({ events }) => {\n            clearTimeout(timeout);\n            subscription.unsubscribe();\n            await auditLogger.auditLog({\n              eventName: 'ScaffolderTaskEventFetch',\n              actorId,\n              stage: 'completion',\n              status: 'succeeded',\n              metadata: {\n                taskId,\n              },\n              request: req,\n              response: {\n                status: 200,\n                body: events,\n              },\n              message: `Task events fetch attempt for scaffolding task with taskId: ${taskId} by ${actorId} succeeded`,\n            });\n            res.json(events);\n          },\n        });\n\n        // When client closes connection we update the clients list\n        // avoiding the disconnected one\n        req.on('close', () => {\n          subscription.unsubscribe();\n          clearTimeout(timeout);\n        });\n      } catch (err) {\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskEventFetch',\n          actorId,\n          stage: 'completion',\n          status: 'failed',\n          level: 'error',\n          metadata: {\n            taskId,\n          },\n          request: req,\n          errors: [\n            {\n              name: err.name,\n              message: err.message,\n              stack: err.stack,\n            },\n          ],\n          message: `Task events fetch attempt for scaffolding task with taskId: ${taskId} requested by ${actorId} failed`,\n        });\n        throw err;\n      }\n    })\n    .post('/v2/dry-run', async (req, res) => {\n      const actorId = await auditLogger.getActorId(req);\n      try {\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskDryRun',\n          actorId,\n          stage: 'initiation',\n          status: 'succeeded',\n          metadata: {\n            isDryRun: true,\n          },\n          request: req,\n          message: `Dry Run scaffolder task initiated by ${actorId}`,\n        });\n        const credentials = await httpAuth.credentials(req);\n\n        await checkPermission({\n          credentials,\n          permissions: [taskCreatePermission],\n          permissionService: permissions,\n        });\n        const bodySchema = z.object({\n          template: z.unknown(),\n          values: z.record(z.unknown()),\n          secrets: z.record(z.string()).optional(),\n          directoryContents: z.array(\n            z.object({ path: z.string(), base64Content: z.string() }),\n          ),\n        });\n        const body = await bodySchema.parseAsync(req.body).catch(e => {\n          throw new InputError(`Malformed request: ${e}`);\n        });\n\n        const template = body.template as TemplateEntityV1beta3;\n        if (!(await templateEntityV1beta3Validator.check(template))) {\n          throw new InputError('Input template is not a template');\n        }\n        const templateRef: string = `${template.kind}:${\n          template.metadata.namespace || 'default'\n        }/${template.metadata.name}`;\n\n        const { token } = await auth.getPluginRequestToken({\n          onBehalfOf: credentials,\n          targetPluginId: 'catalog',\n        });\n\n        const userEntityRef = auth.isPrincipal(credentials, 'user')\n          ? credentials.principal.userEntityRef\n          : undefined;\n        const userEntity = userEntityRef\n          ? await catalogClient.getEntityByRef(userEntityRef, { token })\n          : undefined;\n        for (const parameters of [template.spec.parameters ?? []].flat()) {\n          const result = validate(body.values, parameters);\n          if (!result.valid) {\n            await auditLogger.auditLog({\n              eventName: 'ScaffolderTaskDryRun',\n              actorId,\n              stage: 'completion',\n              status: 'failed',\n              level: 'error',\n              metadata: {\n                templateRef: templateRef,\n                parameters: template.spec.parameters,\n                isDryRun: true,\n              },\n              errors: result.errors,\n              request: req,\n              response: {\n                status: 400,\n                body: { errors: result.errors },\n              },\n              message: `Dry Run scaffolder task for ${templateRef} initiated by ${actorId} failed`,\n            });\n            return res.status(400).json({ errors: result.errors });\n          }\n        }\n\n        const steps = template.spec.steps.map((step, index) => ({\n          ...step,\n          id: step.id ?? `step-${index + 1}`,\n          name: step.name ?? step.action,\n        }));\n\n        const result = await dryRunner({\n          spec: {\n            apiVersion: template.apiVersion,\n            steps,\n            output: template.spec.output ?? {},\n            parameters: body.values as JsonObject,\n            user: {\n              entity: userEntity as UserEntity,\n              ref: userEntityRef,\n            },\n          },\n          directoryContents: (body.directoryContents ?? []).map(file => ({\n            path: file.path,\n            content: Buffer.from(file.base64Content, 'base64'),\n          })),\n          secrets: {\n            ...body.secrets,\n            ...(token && { backstageToken: token }),\n          },\n          credentials,\n        });\n\n        const dryRunResults = {\n          ...result,\n          steps,\n          directoryContents: result.directoryContents.map(file => ({\n            path: file.path,\n            executable: file.executable,\n            base64Content: file.content.toString('base64'),\n          })),\n        };\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskDryRun',\n          actorId,\n          stage: 'completion',\n          status: 'succeeded',\n          metadata: {\n            templateRef: templateRef,\n            parameters: template.spec.parameters,\n            isDryRun: true,\n          },\n          request: req,\n          response: {\n            status: 200,\n            body: dryRunResults,\n          },\n          message: `Dry Run scaffolder task for ${templateRef} initiated by ${actorId} completed successfully`,\n        });\n        return res.status(200).json(dryRunResults);\n      } catch (err) {\n        await auditLogger.auditLog({\n          eventName: 'ScaffolderTaskDryRun',\n          actorId,\n          stage: 'completion',\n          status: 'failed',\n          level: 'error',\n          request: req,\n          metadata: {\n            isDryRun: true,\n          },\n          errors: [\n            {\n              name: err.name,\n              message: err.message,\n              stack: err.stack,\n            },\n          ],\n          message: `Scaffolder Task Dry Run requested by ${actorId} failed`,\n        });\n        throw err;\n      }\n    })\n    .post('/v2/autocomplete/:provider/:resource', async (req, res) => {\n      const { token, context } = req.body;\n      const { provider, resource } = req.params;\n\n      if (!token) throw new InputError('Missing token query parameter');\n\n      if (!autocompleteHandlers[provider]) {\n        throw new InputError(`Unsupported provider: ${provider}`);\n      }\n\n      const { results } = await autocompleteHandlers[provider]({\n        resource,\n        token,\n        context,\n      });\n\n      res.status(200).json({ results });\n    });\n\n  const app = express();\n  app.set('logger', logger);\n  app.use('/', router);\n\n  async function authorizeTemplate(\n    entityRef: CompoundEntityRef,\n    token: string | undefined,\n    credentials: BackstageCredentials,\n  ) {\n    const template = await findTemplate({\n      catalogApi: catalogClient,\n      entityRef,\n      token,\n    });\n\n    if (!isSupportedTemplate(template)) {\n      throw new InputError(\n        `Unsupported apiVersion field in schema entity, ${\n          (template as Entity).apiVersion\n        }`,\n      );\n    }\n\n    if (!permissions) {\n      return template;\n    }\n\n    const [parameterDecision, stepDecision] =\n      await permissions.authorizeConditional(\n        [\n          { permission: templateParameterReadPermission },\n          { permission: templateStepReadPermission },\n        ],\n        { credentials },\n      );\n\n    // Authorize parameters\n    if (Array.isArray(template.spec.parameters)) {\n      template.spec.parameters = template.spec.parameters.filter(step =>\n        isAuthorized(parameterDecision, step),\n      );\n    } else if (\n      template.spec.parameters &&\n      !isAuthorized(parameterDecision, template.spec.parameters)\n    ) {\n      template.spec.parameters = undefined;\n    }\n\n    // Authorize steps\n    template.spec.steps = template.spec.steps.filter(step =>\n      isAuthorized(stepDecision, step),\n    );\n\n    return template;\n  }\n\n  return app;\n}\n"],"names":["RESOURCE_TYPE_SCAFFOLDER_TEMPLATE","RESOURCE_TYPE_SCAFFOLDER_ACTION","parseEntityRef","stringifyError","config","readDurationFromConfig","Router","express","HostDiscovery","createLegacyAuthAdapters","DefaultAuditLogger","getWorkingDirectory","ScmIntegrations","DatabaseTaskStore","StorageTaskBroker","Duration","TemplateActionRegistry","TaskWorker","createBuiltinActions","createDryRunner","scaffolderTemplateRules","scaffolderActionRules","createConditionAuthorizer","createPermissionIntegrationRouter","scaffolderTemplatePermissions","scaffolderActionPermissions","scaffolderTaskPermissions","checkPermission","taskCreatePermission","cloneDeep","result","validate","getEntityBaseUrl","stringifyEntityRef","taskReadPermission","parseStringsParam","InputError","parseNumberParam","NotFoundError","taskCancelPermission","z","templateEntityV1beta3Validator","findTemplate","templateParameterReadPermission","templateStepReadPermission"],"mappings":"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"}
\ No newline at end of file
