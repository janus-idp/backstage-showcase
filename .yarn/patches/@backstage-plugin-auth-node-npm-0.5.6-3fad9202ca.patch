diff --git a/dist/index.cjs.js b/dist/index.cjs.js
index 403c906a43a15d5379ada40a6cdf3bfbe0919aab..d19621a4f9744c740f70ecb15192320a389c4d6c 100644
--- a/dist/index.cjs.js
+++ b/dist/index.cjs.js
@@ -19,6 +19,7 @@ var createProxyAuthProviderFactory = require('./proxy/createProxyAuthProviderFac
 var createProxyRouteHandlers = require('./proxy/createProxyRouteHandlers.cjs.js');
 var createSignInResolverFactory = require('./sign-in/createSignInResolverFactory.cjs.js');
 var readDeclarativeSignInResolver = require('./sign-in/readDeclarativeSignInResolver.cjs.js');
+var handleSignInUserNotFound = require('./sign-in/handleSignInUserNotFound.cjs.js');
 var commonSignInResolvers = require('./sign-in/commonSignInResolvers.cjs.js');
 var types = require('./types.cjs.js');
 
@@ -44,6 +45,7 @@ exports.createProxyAuthProviderFactory = createProxyAuthProviderFactory.createPr
 exports.createProxyAuthRouteHandlers = createProxyRouteHandlers.createProxyAuthRouteHandlers;
 exports.createSignInResolverFactory = createSignInResolverFactory.createSignInResolverFactory;
 exports.readDeclarativeSignInResolver = readDeclarativeSignInResolver.readDeclarativeSignInResolver;
+exports.handleSignInUserNotFound = handleSignInUserNotFound.handleSignInUserNotFound;
 Object.defineProperty(exports, "commonSignInResolvers", {
   enumerable: true,
   get: function () { return commonSignInResolvers.commonSignInResolvers; }
diff --git a/dist/index.cjs.js.map b/dist/index.cjs.js.map
index 84fa44a0ce28b4224816b4e0c1f0d249bff8c257..ecb7bdef8f37aceb5326aa9bf7cb888bbd93ae7e 100644
--- a/dist/index.cjs.js.map
+++ b/dist/index.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.cjs.js","sources":[],"sourcesContent":[],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
\ No newline at end of file
+{"version":3,"file":"index.cjs.js","sources":[],"sourcesContent":[],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}
\ No newline at end of file
diff --git a/dist/index.d.ts b/dist/index.d.ts
index 66028f84966309bf7f133740537d31ec62a53898..bf32f8cd05c27e30bc271f5f6fc28d4b9b806f84 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -758,6 +758,16 @@ interface ReadDeclarativeSignInResolverOptions<TAuthResult> {
 /** @public */
 declare function readDeclarativeSignInResolver<TAuthResult>(options: ReadDeclarativeSignInResolverOptions<TAuthResult>): SignInResolver<TAuthResult> | undefined;
 
+/** @public */
+interface HandleSignInUserNotFoundOptions {
+    ctx: AuthResolverContext;
+    error: any;
+    userEntityName: string;
+    dangerouslyAllowSignInWithoutUserInCatalog: boolean | undefined;
+}
+/** @public */
+declare function handleSignInUserNotFound(options: HandleSignInUserNotFoundOptions): Promise<BackstageSignInResult>;
+
 /**
  * A collection of common sign-in resolvers that work with any auth provider.
  *
@@ -768,12 +778,15 @@ declare namespace commonSignInResolvers {
      * A common sign-in resolver that looks up the user using their email address
      * as email of the entity.
      */
-    const emailMatchingUserEntityProfileEmail: SignInResolverFactory<unknown, unknown>;
+    const emailMatchingUserEntityProfileEmail: SignInResolverFactory<unknown, {
+        dangerouslyAllowSignInWithoutUserInCatalog?: boolean | undefined;
+    } | undefined>;
     /**
      * A common sign-in resolver that looks up the user using the local part of
      * their email address as the entity name.
      */
     const emailLocalPartMatchingUserEntityName: SignInResolverFactory<unknown, {
+        dangerouslyAllowSignInWithoutUserInCatalog?: boolean | undefined;
         allowedDomains?: string[] | undefined;
     } | undefined>;
 }
@@ -797,4 +810,4 @@ interface ProxyAuthRouteHandlersOptions<TResult> {
 /** @public */
 declare function createProxyAuthRouteHandlers<TResult>(options: ProxyAuthRouteHandlersOptions<TResult>): AuthProviderRouteHandlers;
 
-export { type AuthOwnershipResolutionExtensionPoint, type AuthOwnershipResolver, type AuthProviderConfig, type AuthProviderFactory, type AuthProviderRegistrationOptions, type AuthProviderRouteHandlers, type AuthProvidersExtensionPoint, type AuthResolverCatalogUserQuery, type AuthResolverContext, type BackstageIdentityResponse, type BackstageSignInResult, type BackstageUserIdentity, type ClientAuthResponse, type CookieConfigurer, DefaultIdentityClient, type IdentityApi, type IdentityApiGetIdentityRequest, IdentityClient, type IdentityClientOptions, type OAuthAuthenticator, type OAuthAuthenticatorAuthenticateInput, type OAuthAuthenticatorLogoutInput, type OAuthAuthenticatorRefreshInput, type OAuthAuthenticatorResult, type OAuthAuthenticatorScopeOptions, type OAuthAuthenticatorStartInput, OAuthEnvironmentHandler, type OAuthRouteHandlersOptions, type OAuthSession, type OAuthState, type OAuthStateTransform, type PassportDoneCallback, PassportHelpers, PassportOAuthAuthenticatorHelper, type PassportOAuthDoneCallback, type PassportOAuthPrivateInfo, type PassportOAuthResult, type PassportProfile, type ProfileInfo, type ProfileTransform, type ProxyAuthRouteHandlersOptions, type ProxyAuthenticator, type ReadDeclarativeSignInResolverOptions, type SignInInfo, type SignInResolver, type SignInResolverFactory, type SignInResolverFactoryOptions, type TokenParams, type WebMessageResponse, authOwnershipResolutionExtensionPoint, authProvidersExtensionPoint, commonSignInResolvers, createOAuthAuthenticator, createOAuthProviderFactory, createOAuthRouteHandlers, createProxyAuthProviderFactory, createProxyAuthRouteHandlers, createProxyAuthenticator, createSignInResolverFactory, decodeOAuthState, encodeOAuthState, getBearerTokenFromAuthorizationHeader, prepareBackstageIdentityResponse, readDeclarativeSignInResolver, sendWebMessageResponse, tokenTypes };
+export { type AuthOwnershipResolutionExtensionPoint, type AuthOwnershipResolver, type AuthProviderConfig, type AuthProviderFactory, type AuthProviderRegistrationOptions, type AuthProviderRouteHandlers, type AuthProvidersExtensionPoint, type AuthResolverCatalogUserQuery, type AuthResolverContext, type BackstageIdentityResponse, type BackstageSignInResult, type BackstageUserIdentity, type ClientAuthResponse, type CookieConfigurer, DefaultIdentityClient, type IdentityApi, type IdentityApiGetIdentityRequest, IdentityClient, type IdentityClientOptions, type OAuthAuthenticator, type OAuthAuthenticatorAuthenticateInput, type OAuthAuthenticatorLogoutInput, type OAuthAuthenticatorRefreshInput, type OAuthAuthenticatorResult, type OAuthAuthenticatorScopeOptions, type OAuthAuthenticatorStartInput, OAuthEnvironmentHandler, type OAuthRouteHandlersOptions, type OAuthSession, type OAuthState, type OAuthStateTransform, type PassportDoneCallback, PassportHelpers, PassportOAuthAuthenticatorHelper, type PassportOAuthDoneCallback, type PassportOAuthPrivateInfo, type PassportOAuthResult, type PassportProfile, type ProfileInfo, type ProfileTransform, type ProxyAuthRouteHandlersOptions, type ProxyAuthenticator, type ReadDeclarativeSignInResolverOptions, type SignInInfo, type SignInResolver, type SignInResolverFactory, type SignInResolverFactoryOptions, type TokenParams, type WebMessageResponse, authOwnershipResolutionExtensionPoint, authProvidersExtensionPoint, commonSignInResolvers, createOAuthAuthenticator, createOAuthProviderFactory, createOAuthRouteHandlers, createProxyAuthProviderFactory, createProxyAuthRouteHandlers, createProxyAuthenticator, createSignInResolverFactory, decodeOAuthState, encodeOAuthState, getBearerTokenFromAuthorizationHeader, handleSignInUserNotFound, prepareBackstageIdentityResponse, readDeclarativeSignInResolver, sendWebMessageResponse, tokenTypes };
diff --git a/dist/oauth/createOAuthProviderFactory.cjs.js b/dist/oauth/createOAuthProviderFactory.cjs.js
index a806d84848f3484401e0d72ec2c330defb0209d7..558c989b89db1bdba62bba5a81dee52f6f6909cf 100644
--- a/dist/oauth/createOAuthProviderFactory.cjs.js
+++ b/dist/oauth/createOAuthProviderFactory.cjs.js
@@ -4,6 +4,7 @@ require('zod-to-json-schema');
 require('zod-validation-error');
 require('@backstage/errors');
 var readDeclarativeSignInResolver = require('../sign-in/readDeclarativeSignInResolver.cjs.js');
+require('@backstage/catalog-model');
 require('../sign-in/commonSignInResolvers.cjs.js');
 var OAuthEnvironmentHandler = require('./OAuthEnvironmentHandler.cjs.js');
 var createOAuthRouteHandlers = require('./createOAuthRouteHandlers.cjs.js');
diff --git a/dist/oauth/createOAuthProviderFactory.cjs.js.map b/dist/oauth/createOAuthProviderFactory.cjs.js.map
index 2849b3cf35dd36c7f168a6be5c96775616aecf9c..5107015ff22cc011abbad052de1410eba3720195 100644
--- a/dist/oauth/createOAuthProviderFactory.cjs.js.map
+++ b/dist/oauth/createOAuthProviderFactory.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"createOAuthProviderFactory.cjs.js","sources":["../../src/oauth/createOAuthProviderFactory.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { readDeclarativeSignInResolver } from '../sign-in';\nimport {\n  AuthProviderFactory,\n  ProfileTransform,\n  SignInResolver,\n} from '../types';\nimport { OAuthEnvironmentHandler } from './OAuthEnvironmentHandler';\nimport { createOAuthRouteHandlers } from './createOAuthRouteHandlers';\nimport { OAuthStateTransform } from './state';\nimport { OAuthAuthenticator, OAuthAuthenticatorResult } from './types';\nimport { SignInResolverFactory } from '../sign-in/createSignInResolverFactory';\n\n/** @public */\nexport function createOAuthProviderFactory<TProfile>(options: {\n  authenticator: OAuthAuthenticator<unknown, TProfile>;\n  additionalScopes?: string[];\n  stateTransform?: OAuthStateTransform;\n  profileTransform?: ProfileTransform<OAuthAuthenticatorResult<TProfile>>;\n  signInResolver?: SignInResolver<OAuthAuthenticatorResult<TProfile>>;\n  signInResolverFactories?: {\n    [name in string]: SignInResolverFactory;\n  };\n}): AuthProviderFactory {\n  return ctx => {\n    return OAuthEnvironmentHandler.mapConfig(ctx.config, envConfig => {\n      const signInResolver =\n        readDeclarativeSignInResolver({\n          config: envConfig,\n          signInResolverFactories: options.signInResolverFactories ?? {},\n        }) ?? options.signInResolver;\n\n      return createOAuthRouteHandlers<TProfile>({\n        authenticator: options.authenticator,\n        appUrl: ctx.appUrl,\n        baseUrl: ctx.baseUrl,\n        config: envConfig,\n        isOriginAllowed: ctx.isOriginAllowed,\n        cookieConfigurer: ctx.cookieConfigurer,\n        providerId: ctx.providerId,\n        resolverContext: ctx.resolverContext,\n        additionalScopes: options.additionalScopes,\n        stateTransform: options.stateTransform,\n        profileTransform: options.profileTransform,\n        signInResolver,\n      });\n    });\n  };\n}\n"],"names":["OAuthEnvironmentHandler","readDeclarativeSignInResolver","createOAuthRouteHandlers"],"mappings":";;;;;;;;;;AA6BO,SAAS,2BAAqC,OAS7B,EAAA;AACtB,EAAA,OAAO,CAAO,GAAA,KAAA;AACZ,IAAA,OAAOA,+CAAwB,CAAA,SAAA,CAAU,GAAI,CAAA,MAAA,EAAQ,CAAa,SAAA,KAAA;AAChE,MAAA,MAAM,iBACJC,2DAA8B,CAAA;AAAA,QAC5B,MAAQ,EAAA,SAAA;AAAA,QACR,uBAAA,EAAyB,OAAQ,CAAA,uBAAA,IAA2B;AAAC,OAC9D,KAAK,OAAQ,CAAA,cAAA;AAEhB,MAAA,OAAOC,iDAAmC,CAAA;AAAA,QACxC,eAAe,OAAQ,CAAA,aAAA;AAAA,QACvB,QAAQ,GAAI,CAAA,MAAA;AAAA,QACZ,SAAS,GAAI,CAAA,OAAA;AAAA,QACb,MAAQ,EAAA,SAAA;AAAA,QACR,iBAAiB,GAAI,CAAA,eAAA;AAAA,QACrB,kBAAkB,GAAI,CAAA,gBAAA;AAAA,QACtB,YAAY,GAAI,CAAA,UAAA;AAAA,QAChB,iBAAiB,GAAI,CAAA,eAAA;AAAA,QACrB,kBAAkB,OAAQ,CAAA,gBAAA;AAAA,QAC1B,gBAAgB,OAAQ,CAAA,cAAA;AAAA,QACxB,kBAAkB,OAAQ,CAAA,gBAAA;AAAA,QAC1B;AAAA,OACD,CAAA;AAAA,KACF,CAAA;AAAA,GACH;AACF;;;;"}
\ No newline at end of file
+{"version":3,"file":"createOAuthProviderFactory.cjs.js","sources":["../../src/oauth/createOAuthProviderFactory.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { readDeclarativeSignInResolver } from '../sign-in';\nimport {\n  AuthProviderFactory,\n  ProfileTransform,\n  SignInResolver,\n} from '../types';\nimport { OAuthEnvironmentHandler } from './OAuthEnvironmentHandler';\nimport { createOAuthRouteHandlers } from './createOAuthRouteHandlers';\nimport { OAuthStateTransform } from './state';\nimport { OAuthAuthenticator, OAuthAuthenticatorResult } from './types';\nimport { SignInResolverFactory } from '../sign-in/createSignInResolverFactory';\n\n/** @public */\nexport function createOAuthProviderFactory<TProfile>(options: {\n  authenticator: OAuthAuthenticator<unknown, TProfile>;\n  additionalScopes?: string[];\n  stateTransform?: OAuthStateTransform;\n  profileTransform?: ProfileTransform<OAuthAuthenticatorResult<TProfile>>;\n  signInResolver?: SignInResolver<OAuthAuthenticatorResult<TProfile>>;\n  signInResolverFactories?: {\n    [name in string]: SignInResolverFactory;\n  };\n}): AuthProviderFactory {\n  return ctx => {\n    return OAuthEnvironmentHandler.mapConfig(ctx.config, envConfig => {\n      const signInResolver =\n        readDeclarativeSignInResolver({\n          config: envConfig,\n          signInResolverFactories: options.signInResolverFactories ?? {},\n        }) ?? options.signInResolver;\n\n      return createOAuthRouteHandlers<TProfile>({\n        authenticator: options.authenticator,\n        appUrl: ctx.appUrl,\n        baseUrl: ctx.baseUrl,\n        config: envConfig,\n        isOriginAllowed: ctx.isOriginAllowed,\n        cookieConfigurer: ctx.cookieConfigurer,\n        providerId: ctx.providerId,\n        resolverContext: ctx.resolverContext,\n        additionalScopes: options.additionalScopes,\n        stateTransform: options.stateTransform,\n        profileTransform: options.profileTransform,\n        signInResolver,\n      });\n    });\n  };\n}\n"],"names":["OAuthEnvironmentHandler","readDeclarativeSignInResolver","createOAuthRouteHandlers"],"mappings":";;;;;;;;;;;AA6BO,SAAS,2BAAqC,OAS7B,EAAA;AACtB,EAAA,OAAO,CAAO,GAAA,KAAA;AACZ,IAAA,OAAOA,+CAAwB,CAAA,SAAA,CAAU,GAAI,CAAA,MAAA,EAAQ,CAAa,SAAA,KAAA;AAChE,MAAA,MAAM,iBACJC,2DAA8B,CAAA;AAAA,QAC5B,MAAQ,EAAA,SAAA;AAAA,QACR,uBAAA,EAAyB,OAAQ,CAAA,uBAAA,IAA2B;AAAC,OAC9D,KAAK,OAAQ,CAAA,cAAA;AAEhB,MAAA,OAAOC,iDAAmC,CAAA;AAAA,QACxC,eAAe,OAAQ,CAAA,aAAA;AAAA,QACvB,QAAQ,GAAI,CAAA,MAAA;AAAA,QACZ,SAAS,GAAI,CAAA,OAAA;AAAA,QACb,MAAQ,EAAA,SAAA;AAAA,QACR,iBAAiB,GAAI,CAAA,eAAA;AAAA,QACrB,kBAAkB,GAAI,CAAA,gBAAA;AAAA,QACtB,YAAY,GAAI,CAAA,UAAA;AAAA,QAChB,iBAAiB,GAAI,CAAA,eAAA;AAAA,QACrB,kBAAkB,OAAQ,CAAA,gBAAA;AAAA,QAC1B,gBAAgB,OAAQ,CAAA,cAAA;AAAA,QACxB,kBAAkB,OAAQ,CAAA,gBAAA;AAAA,QAC1B;AAAA,OACD,CAAA;AAAA,KACF,CAAA;AAAA,GACH;AACF;;;;"}
\ No newline at end of file
diff --git a/dist/proxy/createProxyAuthProviderFactory.cjs.js b/dist/proxy/createProxyAuthProviderFactory.cjs.js
index 6cc5b252c7ade6aeca0536cc58712baa4679393d..5d0b4e58125795152515261a0eebe55f77e2cbbb 100644
--- a/dist/proxy/createProxyAuthProviderFactory.cjs.js
+++ b/dist/proxy/createProxyAuthProviderFactory.cjs.js
@@ -4,6 +4,7 @@ require('zod-to-json-schema');
 require('zod-validation-error');
 require('@backstage/errors');
 var readDeclarativeSignInResolver = require('../sign-in/readDeclarativeSignInResolver.cjs.js');
+require('@backstage/catalog-model');
 require('../sign-in/commonSignInResolvers.cjs.js');
 var createProxyRouteHandlers = require('./createProxyRouteHandlers.cjs.js');
 
diff --git a/dist/proxy/createProxyAuthProviderFactory.cjs.js.map b/dist/proxy/createProxyAuthProviderFactory.cjs.js.map
index b6e4777d16c85af046631b2b06af64067fc89f4c..d47319b89a782777c45429754ecc8cef38da7ae2 100644
--- a/dist/proxy/createProxyAuthProviderFactory.cjs.js.map
+++ b/dist/proxy/createProxyAuthProviderFactory.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"createProxyAuthProviderFactory.cjs.js","sources":["../../src/proxy/createProxyAuthProviderFactory.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  readDeclarativeSignInResolver,\n  SignInResolverFactory,\n} from '../sign-in';\nimport {\n  AuthProviderFactory,\n  ProfileTransform,\n  SignInResolver,\n} from '../types';\nimport { createProxyAuthRouteHandlers } from './createProxyRouteHandlers';\nimport { ProxyAuthenticator } from './types';\n\n/** @public */\nexport function createProxyAuthProviderFactory<TResult>(options: {\n  authenticator: ProxyAuthenticator<unknown, TResult, unknown>;\n  profileTransform?: ProfileTransform<TResult>;\n  signInResolver?: SignInResolver<TResult>;\n  signInResolverFactories?: Record<string, SignInResolverFactory>;\n}): AuthProviderFactory {\n  return ctx => {\n    const signInResolver =\n      options.signInResolver ??\n      readDeclarativeSignInResolver({\n        config: ctx.config,\n        signInResolverFactories: options.signInResolverFactories ?? {},\n      });\n\n    if (!signInResolver) {\n      throw new Error(\n        `No sign-in resolver configured for proxy auth provider '${ctx.providerId}'`,\n      );\n    }\n\n    return createProxyAuthRouteHandlers<TResult>({\n      signInResolver,\n      config: ctx.config,\n      authenticator: options.authenticator,\n      resolverContext: ctx.resolverContext,\n      profileTransform: options.profileTransform,\n    });\n  };\n}\n"],"names":["readDeclarativeSignInResolver","createProxyAuthRouteHandlers"],"mappings":";;;;;;;;;AA6BO,SAAS,+BAAwC,OAKhC,EAAA;AACtB,EAAA,OAAO,CAAO,GAAA,KAAA;AACZ,IAAM,MAAA,cAAA,GACJ,OAAQ,CAAA,cAAA,IACRA,2DAA8B,CAAA;AAAA,MAC5B,QAAQ,GAAI,CAAA,MAAA;AAAA,MACZ,uBAAA,EAAyB,OAAQ,CAAA,uBAAA,IAA2B;AAAC,KAC9D,CAAA;AAEH,IAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,wDAAA,EAA2D,IAAI,UAAU,CAAA,CAAA;AAAA,OAC3E;AAAA;AAGF,IAAA,OAAOC,qDAAsC,CAAA;AAAA,MAC3C,cAAA;AAAA,MACA,QAAQ,GAAI,CAAA,MAAA;AAAA,MACZ,eAAe,OAAQ,CAAA,aAAA;AAAA,MACvB,iBAAiB,GAAI,CAAA,eAAA;AAAA,MACrB,kBAAkB,OAAQ,CAAA;AAAA,KAC3B,CAAA;AAAA,GACH;AACF;;;;"}
\ No newline at end of file
+{"version":3,"file":"createProxyAuthProviderFactory.cjs.js","sources":["../../src/proxy/createProxyAuthProviderFactory.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  readDeclarativeSignInResolver,\n  SignInResolverFactory,\n} from '../sign-in';\nimport {\n  AuthProviderFactory,\n  ProfileTransform,\n  SignInResolver,\n} from '../types';\nimport { createProxyAuthRouteHandlers } from './createProxyRouteHandlers';\nimport { ProxyAuthenticator } from './types';\n\n/** @public */\nexport function createProxyAuthProviderFactory<TResult>(options: {\n  authenticator: ProxyAuthenticator<unknown, TResult, unknown>;\n  profileTransform?: ProfileTransform<TResult>;\n  signInResolver?: SignInResolver<TResult>;\n  signInResolverFactories?: Record<string, SignInResolverFactory>;\n}): AuthProviderFactory {\n  return ctx => {\n    const signInResolver =\n      options.signInResolver ??\n      readDeclarativeSignInResolver({\n        config: ctx.config,\n        signInResolverFactories: options.signInResolverFactories ?? {},\n      });\n\n    if (!signInResolver) {\n      throw new Error(\n        `No sign-in resolver configured for proxy auth provider '${ctx.providerId}'`,\n      );\n    }\n\n    return createProxyAuthRouteHandlers<TResult>({\n      signInResolver,\n      config: ctx.config,\n      authenticator: options.authenticator,\n      resolverContext: ctx.resolverContext,\n      profileTransform: options.profileTransform,\n    });\n  };\n}\n"],"names":["readDeclarativeSignInResolver","createProxyAuthRouteHandlers"],"mappings":";;;;;;;;;;AA6BO,SAAS,+BAAwC,OAKhC,EAAA;AACtB,EAAA,OAAO,CAAO,GAAA,KAAA;AACZ,IAAM,MAAA,cAAA,GACJ,OAAQ,CAAA,cAAA,IACRA,2DAA8B,CAAA;AAAA,MAC5B,QAAQ,GAAI,CAAA,MAAA;AAAA,MACZ,uBAAA,EAAyB,OAAQ,CAAA,uBAAA,IAA2B;AAAC,KAC9D,CAAA;AAEH,IAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,wDAAA,EAA2D,IAAI,UAAU,CAAA,CAAA;AAAA,OAC3E;AAAA;AAGF,IAAA,OAAOC,qDAAsC,CAAA;AAAA,MAC3C,cAAA;AAAA,MACA,QAAQ,GAAI,CAAA,MAAA;AAAA,MACZ,eAAe,OAAQ,CAAA,aAAA;AAAA,MACvB,iBAAiB,GAAI,CAAA,eAAA;AAAA,MACrB,kBAAkB,OAAQ,CAAA;AAAA,KAC3B,CAAA;AAAA,GACH;AACF;;;;"}
\ No newline at end of file
diff --git a/dist/sign-in/commonSignInResolvers.cjs.js b/dist/sign-in/commonSignInResolvers.cjs.js
index 6ed45a5cfbbb2a7a3b4e1d0a72d7e5ac52e587e1..25b0549155051e7c8a322895f4fd202747c85c8b 100644
--- a/dist/sign-in/commonSignInResolvers.cjs.js
+++ b/dist/sign-in/commonSignInResolvers.cjs.js
@@ -3,12 +3,16 @@
 var zod = require('zod');
 var createSignInResolverFactory = require('./createSignInResolverFactory.cjs.js');
 var errors = require('@backstage/errors');
+var handleSignInUserNotFound = require('./handleSignInUserNotFound.cjs.js');
 
 const reEmail = /^([^@+]+)(\+[^@]+)?(@.*)$/;
 exports.commonSignInResolvers = void 0;
 ((commonSignInResolvers2) => {
   commonSignInResolvers2.emailMatchingUserEntityProfileEmail = createSignInResolverFactory.createSignInResolverFactory({
-    create() {
+    optionsSchema: zod.z.object({
+      dangerouslyAllowSignInWithoutUserInCatalog: zod.z.boolean().optional()
+    }).optional(),
+    create(options = {}) {
       return async (info, ctx) => {
         const { profile } = info;
         if (!profile.email) {
@@ -28,12 +32,27 @@ exports.commonSignInResolvers = void 0;
             if (m?.length === 4) {
               const [_, name, _plus, domain] = m;
               const noPlusEmail = `${name}${domain}`;
-              return ctx.signInWithCatalogUser({
-                filter: {
-                  "spec.profile.email": noPlusEmail
-                }
-              });
+              try {
+                return await ctx.signInWithCatalogUser({
+                  filter: {
+                    "spec.profile.email": noPlusEmail
+                  }
+                });
+              } catch {
+                return await handleSignInUserNotFound.handleSignInUserNotFound({
+                  ctx,
+                  error: err,
+                  userEntityName: noPlusEmail,
+                  dangerouslyAllowSignInWithoutUserInCatalog: options?.dangerouslyAllowSignInWithoutUserInCatalog
+                });
+              }
             }
+            return await handleSignInUserNotFound.handleSignInUserNotFound({
+              ctx,
+              error: err,
+              userEntityName: profile.email,
+              dangerouslyAllowSignInWithoutUserInCatalog: options?.dangerouslyAllowSignInWithoutUserInCatalog
+            });
           }
           throw err;
         }
@@ -42,7 +61,8 @@ exports.commonSignInResolvers = void 0;
   });
   commonSignInResolvers2.emailLocalPartMatchingUserEntityName = createSignInResolverFactory.createSignInResolverFactory({
     optionsSchema: zod.z.object({
-      allowedDomains: zod.z.array(zod.z.string()).optional()
+      allowedDomains: zod.z.array(zod.z.string()).optional(),
+      dangerouslyAllowSignInWithoutUserInCatalog: zod.z.boolean().optional()
     }).optional(),
     create(options = {}) {
       const { allowedDomains } = options;
@@ -60,9 +80,18 @@ exports.commonSignInResolvers = void 0;
             "Sign-in user email is not from an allowed domain"
           );
         }
-        return ctx.signInWithCatalogUser({
-          entityRef: { name: localPart }
-        });
+        try {
+          return await ctx.signInWithCatalogUser({
+            entityRef: { name: localPart }
+          });
+        } catch (error) {
+          return await handleSignInUserNotFound.handleSignInUserNotFound({
+            ctx,
+            error,
+            userEntityName: localPart,
+            dangerouslyAllowSignInWithoutUserInCatalog: options?.dangerouslyAllowSignInWithoutUserInCatalog
+          });
+        }
       };
     }
   });
diff --git a/dist/sign-in/commonSignInResolvers.cjs.js.map b/dist/sign-in/commonSignInResolvers.cjs.js.map
index b46a3deb872536cabc10680830ba3e4f67c6782d..b540a715b070fc0c2013b134dfe7018cec190a69 100644
--- a/dist/sign-in/commonSignInResolvers.cjs.js.map
+++ b/dist/sign-in/commonSignInResolvers.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"commonSignInResolvers.cjs.js","sources":["../../src/sign-in/commonSignInResolvers.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { z } from 'zod';\nimport { createSignInResolverFactory } from './createSignInResolverFactory';\nimport { NotAllowedError } from '@backstage/errors';\n\n// This splits an email \"joe+work@acme.com\" into [\"joe\", \"+work\", \"@acme.com\"]\n// so that we can remove the plus addressing. May output a shorter array:\n// [\"joe\", \"@acme.com\"], if no plus addressing was found.\nconst reEmail = /^([^@+]+)(\\+[^@]+)?(@.*)$/;\n\n/**\n * A collection of common sign-in resolvers that work with any auth provider.\n *\n * @public\n */\nexport namespace commonSignInResolvers {\n  /**\n   * A common sign-in resolver that looks up the user using their email address\n   * as email of the entity.\n   */\n  export const emailMatchingUserEntityProfileEmail =\n    createSignInResolverFactory({\n      create() {\n        return async (info, ctx) => {\n          const { profile } = info;\n\n          if (!profile.email) {\n            throw new Error(\n              'Login failed, user profile does not contain an email',\n            );\n          }\n\n          try {\n            return await ctx.signInWithCatalogUser({\n              filter: {\n                'spec.profile.email': profile.email,\n              },\n            });\n          } catch (err) {\n            if (err?.name === 'NotFoundError') {\n              // Try removing the plus addressing from the email address\n              const m = profile.email.match(reEmail);\n              if (m?.length === 4) {\n                const [_, name, _plus, domain] = m;\n                const noPlusEmail = `${name}${domain}`;\n\n                return ctx.signInWithCatalogUser({\n                  filter: {\n                    'spec.profile.email': noPlusEmail,\n                  },\n                });\n              }\n            }\n            // Email had no plus addressing or is missing in the catalog, forward failure\n            throw err;\n          }\n        };\n      },\n    });\n\n  /**\n   * A common sign-in resolver that looks up the user using the local part of\n   * their email address as the entity name.\n   */\n  export const emailLocalPartMatchingUserEntityName =\n    createSignInResolverFactory({\n      optionsSchema: z\n        .object({\n          allowedDomains: z.array(z.string()).optional(),\n        })\n        .optional(),\n      create(options = {}) {\n        const { allowedDomains } = options;\n        return async (info, ctx) => {\n          const { profile } = info;\n\n          if (!profile.email) {\n            throw new Error(\n              'Login failed, user profile does not contain an email',\n            );\n          }\n          const [localPart] = profile.email.split('@');\n          const domain = profile.email.slice(localPart.length + 1);\n\n          if (allowedDomains && !allowedDomains.includes(domain)) {\n            throw new NotAllowedError(\n              'Sign-in user email is not from an allowed domain',\n            );\n          }\n\n          return ctx.signInWithCatalogUser({\n            entityRef: { name: localPart },\n          });\n        };\n      },\n    });\n}\n"],"names":["commonSignInResolvers","createSignInResolverFactory","z","NotAllowedError"],"mappings":";;;;;;AAuBA,MAAM,OAAU,GAAA,2BAAA;AAOCA;AAAA,CAAV,CAAUA,sBAAV,KAAA;AAKE,EAAMA,sBAAAA,CAAA,sCACXC,uDAA4B,CAAA;AAAA,IAC1B,MAAS,GAAA;AACP,MAAO,OAAA,OAAO,MAAM,GAAQ,KAAA;AAC1B,QAAM,MAAA,EAAE,SAAY,GAAA,IAAA;AAEpB,QAAI,IAAA,CAAC,QAAQ,KAAO,EAAA;AAClB,UAAA,MAAM,IAAI,KAAA;AAAA,YACR;AAAA,WACF;AAAA;AAGF,QAAI,IAAA;AACF,UAAO,OAAA,MAAM,IAAI,qBAAsB,CAAA;AAAA,YACrC,MAAQ,EAAA;AAAA,cACN,sBAAsB,OAAQ,CAAA;AAAA;AAChC,WACD,CAAA;AAAA,iBACM,GAAK,EAAA;AACZ,UAAI,IAAA,GAAA,EAAK,SAAS,eAAiB,EAAA;AAEjC,YAAA,MAAM,CAAI,GAAA,OAAA,CAAQ,KAAM,CAAA,KAAA,CAAM,OAAO,CAAA;AACrC,YAAI,IAAA,CAAA,EAAG,WAAW,CAAG,EAAA;AACnB,cAAA,MAAM,CAAC,CAAA,EAAG,IAAM,EAAA,KAAA,EAAO,MAAM,CAAI,GAAA,CAAA;AACjC,cAAA,MAAM,WAAc,GAAA,CAAA,EAAG,IAAI,CAAA,EAAG,MAAM,CAAA,CAAA;AAEpC,cAAA,OAAO,IAAI,qBAAsB,CAAA;AAAA,gBAC/B,MAAQ,EAAA;AAAA,kBACN,oBAAsB,EAAA;AAAA;AACxB,eACD,CAAA;AAAA;AACH;AAGF,UAAM,MAAA,GAAA;AAAA;AACR,OACF;AAAA;AACF,GACD,CAAA;AAMI,EAAMD,sBAAAA,CAAA,uCACXC,uDAA4B,CAAA;AAAA,IAC1B,aAAA,EAAeC,MACZ,MAAO,CAAA;AAAA,MACN,gBAAgBA,KAAE,CAAA,KAAA,CAAMA,MAAE,MAAO,EAAC,EAAE,QAAS;AAAA,KAC9C,EACA,QAAS,EAAA;AAAA,IACZ,MAAA,CAAO,OAAU,GAAA,EAAI,EAAA;AACnB,MAAM,MAAA,EAAE,gBAAmB,GAAA,OAAA;AAC3B,MAAO,OAAA,OAAO,MAAM,GAAQ,KAAA;AAC1B,QAAM,MAAA,EAAE,SAAY,GAAA,IAAA;AAEpB,QAAI,IAAA,CAAC,QAAQ,KAAO,EAAA;AAClB,UAAA,MAAM,IAAI,KAAA;AAAA,YACR;AAAA,WACF;AAAA;AAEF,QAAA,MAAM,CAAC,SAAS,CAAA,GAAI,OAAQ,CAAA,KAAA,CAAM,MAAM,GAAG,CAAA;AAC3C,QAAA,MAAM,SAAS,OAAQ,CAAA,KAAA,CAAM,KAAM,CAAA,SAAA,CAAU,SAAS,CAAC,CAAA;AAEvD,QAAA,IAAI,cAAkB,IAAA,CAAC,cAAe,CAAA,QAAA,CAAS,MAAM,CAAG,EAAA;AACtD,UAAA,MAAM,IAAIC,sBAAA;AAAA,YACR;AAAA,WACF;AAAA;AAGF,QAAA,OAAO,IAAI,qBAAsB,CAAA;AAAA,UAC/B,SAAA,EAAW,EAAE,IAAA,EAAM,SAAU;AAAA,SAC9B,CAAA;AAAA,OACH;AAAA;AACF,GACD,CAAA;AAAA,CAhFY,EAAAH,6BAAA,KAAAA,6BAAA,GAAA,EAAA,CAAA,CAAA;;"}
\ No newline at end of file
+{"version":3,"file":"commonSignInResolvers.cjs.js","sources":["../../src/sign-in/commonSignInResolvers.ts"],"sourcesContent":["/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { z } from 'zod';\nimport { createSignInResolverFactory } from './createSignInResolverFactory';\nimport { NotAllowedError } from '@backstage/errors';\nimport { handleSignInUserNotFound } from './handleSignInUserNotFound';\n\n// This splits an email \"joe+work@acme.com\" into [\"joe\", \"+work\", \"@acme.com\"]\n// so that we can remove the plus addressing. May output a shorter array:\n// [\"joe\", \"@acme.com\"], if no plus addressing was found.\nconst reEmail = /^([^@+]+)(\\+[^@]+)?(@.*)$/;\n\n/**\n * A collection of common sign-in resolvers that work with any auth provider.\n *\n * @public\n */\nexport namespace commonSignInResolvers {\n  /**\n   * A common sign-in resolver that looks up the user using their email address\n   * as email of the entity.\n   */\n  export const emailMatchingUserEntityProfileEmail =\n    createSignInResolverFactory({\n      optionsSchema: z\n        .object({\n          dangerouslyAllowSignInWithoutUserInCatalog: z.boolean().optional(),\n        })\n        .optional(),\n      create(options = {}) {\n        return async (info, ctx) => {\n          const { profile } = info;\n\n          if (!profile.email) {\n            throw new Error(\n              'Login failed, user profile does not contain an email',\n            );\n          }\n\n          try {\n            return await ctx.signInWithCatalogUser({\n              filter: {\n                'spec.profile.email': profile.email,\n              },\n            });\n          } catch (err) {\n            if (err?.name === 'NotFoundError') {\n              // Try removing the plus addressing from the email address\n              const m = profile.email.match(reEmail);\n              if (m?.length === 4) {\n                const [_, name, _plus, domain] = m;\n                const noPlusEmail = `${name}${domain}`;\n\n                try {\n                  return await ctx.signInWithCatalogUser({\n                    filter: {\n                      'spec.profile.email': noPlusEmail,\n                    },\n                  });\n                } catch {\n                  // Email had no plus addressing or is missing in the catalog\n                  return await handleSignInUserNotFound({\n                    ctx,\n                    error: err,\n                    userEntityName: noPlusEmail,\n                    dangerouslyAllowSignInWithoutUserInCatalog: options?.dangerouslyAllowSignInWithoutUserInCatalog\n                  });\n                }\n              }\n              return await handleSignInUserNotFound({\n                ctx,\n                error: err,\n                userEntityName: profile.email,\n                dangerouslyAllowSignInWithoutUserInCatalog: options?.dangerouslyAllowSignInWithoutUserInCatalog\n              });\n            }\n            throw err;\n          }\n        };\n      },\n    });\n\n  /**\n   * A common sign-in resolver that looks up the user using the local part of\n   * their email address as the entity name.\n   */\n  export const emailLocalPartMatchingUserEntityName =\n    createSignInResolverFactory({\n      optionsSchema: z\n        .object({\n          allowedDomains: z.array(z.string()).optional(),\n          dangerouslyAllowSignInWithoutUserInCatalog: z.boolean().optional(),\n        })\n        .optional(),\n      create(options = {}) {\n        const { allowedDomains } = options;\n        return async (info, ctx) => {\n          const { profile } = info;\n\n          if (!profile.email) {\n            throw new Error(\n              'Login failed, user profile does not contain an email',\n            );\n          }\n          const [localPart] = profile.email.split('@');\n          const domain = profile.email.slice(localPart.length + 1);\n\n          if (allowedDomains && !allowedDomains.includes(domain)) {\n            throw new NotAllowedError(\n              'Sign-in user email is not from an allowed domain',\n            );\n          }\n          try {\n            return await ctx.signInWithCatalogUser({\n              entityRef: { name: localPart },\n            });\n          } catch (error) {\n            return await handleSignInUserNotFound({\n              ctx,\n              error,\n              userEntityName: localPart,\n              dangerouslyAllowSignInWithoutUserInCatalog: options?.dangerouslyAllowSignInWithoutUserInCatalog\n            });\n          }\n        };\n      },\n    });\n}\n"],"names":["commonSignInResolvers","createSignInResolverFactory","z","handleSignInUserNotFound","NotAllowedError"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/sign-in/handleSignInUserNotFound.cjs.js b/dist/sign-in/handleSignInUserNotFound.cjs.js
new file mode 100644
index 0000000000000000000000000000000000000000..8856a3424dd57721127615a937f59e6849edef89
--- /dev/null
+++ b/dist/sign-in/handleSignInUserNotFound.cjs.js
@@ -0,0 +1,28 @@
+'use strict';
+
+var catalogModel = require('@backstage/catalog-model');
+
+async function handleSignInUserNotFound(options) {
+  if (options.error?.name !== "NotFoundError") {
+    throw options.error;
+  }
+  if (!options.dangerouslyAllowSignInWithoutUserInCatalog) {
+    throw new Error(
+      "Failed to sign-in, unable to resolve user identity. Please verify that your catalog contains the expected User entities that would match your configured sign-in resolver. For non-production environments, manually provision the user or disable the user provisioning requirement by setting the `dangerouslyAllowSignInWithoutUserInCatalog` option."
+    );
+  }
+  const userEntityRef = catalogModel.stringifyEntityRef({
+    kind: "User",
+    name: options.userEntityName,
+    namespace: catalogModel.DEFAULT_NAMESPACE
+  });
+  return options.ctx.issueToken({
+    claims: {
+      sub: userEntityRef,
+      ent: [userEntityRef]
+    }
+  });
+}
+
+exports.handleSignInUserNotFound = handleSignInUserNotFound;
+//# sourceMappingURL=handleSignInUserNotFound.cjs.js.map
diff --git a/dist/sign-in/handleSignInUserNotFound.cjs.js.map b/dist/sign-in/handleSignInUserNotFound.cjs.js.map
new file mode 100644
index 0000000000000000000000000000000000000000..e18822a9960b7ebde9725eba9f26bb52305ae1f3
--- /dev/null
+++ b/dist/sign-in/handleSignInUserNotFound.cjs.js.map
@@ -0,0 +1 @@
+{"version":3,"file":"handleSignInUserNotFound.cjs.js","sources":["../../src/sign-in/handleSignInUserNotFound.ts"],"sourcesContent":["import {\n  DEFAULT_NAMESPACE,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\n\nimport { AuthResolverContext, BackstageSignInResult } from '../types';\n\n/** @public */\nexport interface HandleSignInUserNotFoundOptions {\n  ctx: AuthResolverContext;\n  error: any;\n  userEntityName: string;\n  dangerouslyAllowSignInWithoutUserInCatalog: boolean | undefined;\n}\n\n/** @public */\nexport async function handleSignInUserNotFound(\n  options: HandleSignInUserNotFoundOptions\n): Promise<BackstageSignInResult> {\n  if (options.error?.name !== 'NotFoundError') {\n    throw options.error;\n  }\n  if (!options.dangerouslyAllowSignInWithoutUserInCatalog) {\n    throw new Error(\n      'Failed to sign-in, unable to resolve user identity. Please verify that your catalog contains the expected User entities that would match your configured sign-in resolver. For non-production environments, manually provision the user or disable the user provisioning requirement by setting the `dangerouslyAllowSignInWithoutUserInCatalog` option.',\n    );\n  }\n\n  const userEntityRef = stringifyEntityRef({\n    kind: 'User',\n    name: options.userEntityName,\n    namespace: DEFAULT_NAMESPACE,\n  });\n\n  return options.ctx.issueToken({\n    claims: {\n      sub: userEntityRef,\n      ent: [userEntityRef],\n    },\n  });\n}"],"names":["stringifyEntityRef","DEFAULT_NAMESPACE"],"mappings":";;;;AAgBA,eAAsB,yBACpB,OACgC,EAAA;AAChC,EAAI,IAAA,OAAA,CAAQ,KAAO,EAAA,IAAA,KAAS,eAAiB,EAAA;AAC3C,IAAA,MAAM,OAAQ,CAAA,KAAA;AAAA;AAEhB,EAAI,IAAA,CAAC,QAAQ,0CAA4C,EAAA;AACvD,IAAA,MAAM,IAAI,KAAA;AAAA,MACR;AAAA,KACF;AAAA;AAGF,EAAA,MAAM,gBAAgBA,+BAAmB,CAAA;AAAA,IACvC,IAAM,EAAA,MAAA;AAAA,IACN,MAAM,OAAQ,CAAA,cAAA;AAAA,IACd,SAAW,EAAAC;AAAA,GACZ,CAAA;AAED,EAAO,OAAA,OAAA,CAAQ,IAAI,UAAW,CAAA;AAAA,IAC5B,MAAQ,EAAA;AAAA,MACN,GAAK,EAAA,aAAA;AAAA,MACL,GAAA,EAAK,CAAC,aAAa;AAAA;AACrB,GACD,CAAA;AACH;;;;"}
\ No newline at end of file
