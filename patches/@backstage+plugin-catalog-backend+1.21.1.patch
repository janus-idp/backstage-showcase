diff --git a/node_modules/@backstage/plugin-catalog-backend/dist/alpha.cjs.js b/node_modules/@backstage/plugin-catalog-backend/dist/alpha.cjs.js
index 5965c9c..85bd1ff 100644
--- a/node_modules/@backstage/plugin-catalog-backend/dist/alpha.cjs.js
+++ b/node_modules/@backstage/plugin-catalog-backend/dist/alpha.cjs.js
@@ -35,6 +35,7 @@ require('@backstage/types');
 require('@backstage/catalog-client');
 require('yn');
 require('@backstage/backend-openapi-utils');
+require('@janus-idp/backstage-plugin-audit-log-node');
 require('@backstage/plugin-permission-common');
 require('minimatch');
 require('@backstage/config');
diff --git a/node_modules/@backstage/plugin-catalog-backend/dist/alpha.cjs.js.map b/node_modules/@backstage/plugin-catalog-backend/dist/alpha.cjs.js.map
index b6e52e6..6145d7d 100644
--- a/node_modules/@backstage/plugin-catalog-backend/dist/alpha.cjs.js.map
+++ b/node_modules/@backstage/plugin-catalog-backend/dist/alpha.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"alpha.cjs.js","sources":["../src/permissions/conditionExports.ts","../src/service/CatalogPlugin.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RESOURCE_TYPE_CATALOG_ENTITY } from '@backstage/plugin-catalog-common/alpha';\nimport { createConditionExports } from '@backstage/plugin-permission-node';\nimport { permissionRules } from './rules';\n\nconst { conditions, createConditionalDecision } = createConditionExports({\n  pluginId: 'catalog',\n  resourceType: RESOURCE_TYPE_CATALOG_ENTITY,\n  rules: permissionRules,\n});\n\n/**\n * These conditions are used when creating conditional decisions for catalog\n * entities that are returned by authorization policies.\n *\n * @alpha\n */\nexport const catalogConditions = conditions;\n\n/**\n * `createCatalogConditionalDecision` can be used when authoring policies to\n * create conditional decisions. It requires a permission of type\n * `ResourcePermission<'catalog-entity'>` to be passed as the first parameter.\n * It's recommended that you use the provided `isResourcePermission` and\n * `isPermission` helper methods to narrow the type of the permission passed to\n * the handle method as shown below.\n *\n * ```\n * // MyAuthorizationPolicy.ts\n * ...\n * import { createCatalogPolicyDecision } from '@backstage/plugin-catalog-backend';\n * import { RESOURCE_TYPE_CATALOG_ENTITY } from '@backstage/plugin-catalog-common';\n *\n * class MyAuthorizationPolicy implements PermissionPolicy {\n *   async handle(request, user) {\n *     ...\n *\n *     if (isResourcePermission(request.permission, RESOURCE_TYPE_CATALOG_ENTITY)) {\n *       return createCatalogConditionalDecision(\n *         request.permission,\n *         { anyOf: [...insert conditions here...] }\n *       );\n *     }\n *\n *     ...\n * }\n * ```\n *\n * @alpha\n */\nexport const createCatalogConditionalDecision = createConditionalDecision;\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  coreServices,\n  createBackendPlugin,\n} from '@backstage/backend-plugin-api';\nimport { Entity, Validators } from '@backstage/catalog-model';\nimport { CatalogBuilder, CatalogPermissionRuleInput } from './CatalogBuilder';\nimport {\n  CatalogAnalysisExtensionPoint,\n  catalogAnalysisExtensionPoint,\n  CatalogModelExtensionPoint,\n  catalogModelExtensionPoint,\n  CatalogPermissionExtensionPoint,\n  catalogPermissionExtensionPoint,\n  CatalogProcessingExtensionPoint,\n  catalogProcessingExtensionPoint,\n} from '@backstage/plugin-catalog-node/alpha';\nimport {\n  CatalogProcessor,\n  CatalogProcessorParser,\n  EntityProvider,\n  PlaceholderResolver,\n  ScmLocationAnalyzer,\n} from '@backstage/plugin-catalog-node';\nimport { merge } from 'lodash';\nimport { Permission } from '@backstage/plugin-permission-common';\n\nclass CatalogProcessingExtensionPointImpl\n  implements CatalogProcessingExtensionPoint\n{\n  #processors = new Array<CatalogProcessor>();\n  #entityProviders = new Array<EntityProvider>();\n  #placeholderResolvers: Record<string, PlaceholderResolver> = {};\n  #onProcessingErrorHandler?: (event: {\n    unprocessedEntity: Entity;\n    errors: Error[];\n  }) => Promise<void> | void;\n\n  addProcessor(\n    ...processors: Array<CatalogProcessor | Array<CatalogProcessor>>\n  ): void {\n    this.#processors.push(...processors.flat());\n  }\n\n  addEntityProvider(\n    ...providers: Array<EntityProvider | Array<EntityProvider>>\n  ): void {\n    this.#entityProviders.push(...providers.flat());\n  }\n\n  addPlaceholderResolver(key: string, resolver: PlaceholderResolver) {\n    if (key in this.#placeholderResolvers)\n      throw new Error(\n        `A placeholder resolver for '${key}' has already been set up, please check your config.`,\n      );\n    this.#placeholderResolvers[key] = resolver;\n  }\n\n  setOnProcessingErrorHandler(\n    handler: (event: {\n      unprocessedEntity: Entity;\n      errors: Error[];\n    }) => Promise<void> | void,\n  ) {\n    this.#onProcessingErrorHandler = handler;\n  }\n\n  get processors() {\n    return this.#processors;\n  }\n\n  get entityProviders() {\n    return this.#entityProviders;\n  }\n\n  get placeholderResolvers() {\n    return this.#placeholderResolvers;\n  }\n\n  get onProcessingErrorHandler() {\n    return this.#onProcessingErrorHandler;\n  }\n}\n\nclass CatalogAnalysisExtensionPointImpl\n  implements CatalogAnalysisExtensionPoint\n{\n  #locationAnalyzers = new Array<ScmLocationAnalyzer>();\n\n  addLocationAnalyzer(analyzer: ScmLocationAnalyzer): void {\n    this.#locationAnalyzers.push(analyzer);\n  }\n\n  get locationAnalyzers() {\n    return this.#locationAnalyzers;\n  }\n}\n\nclass CatalogPermissionExtensionPointImpl\n  implements CatalogPermissionExtensionPoint\n{\n  #permissions = new Array<Permission>();\n  #permissionRules = new Array<CatalogPermissionRuleInput>();\n\n  addPermissions(...permission: Array<Permission | Array<Permission>>): void {\n    this.#permissions.push(...permission.flat());\n  }\n\n  addPermissionRules(\n    ...rules: Array<\n      CatalogPermissionRuleInput | Array<CatalogPermissionRuleInput>\n    >\n  ): void {\n    this.#permissionRules.push(...rules.flat());\n  }\n\n  get permissions() {\n    return this.#permissions;\n  }\n\n  get permissionRules() {\n    return this.#permissionRules;\n  }\n}\n\nclass CatalogModelExtensionPointImpl implements CatalogModelExtensionPoint {\n  #fieldValidators: Partial<Validators> = {};\n\n  setFieldValidators(validators: Partial<Validators>): void {\n    merge(this.#fieldValidators, validators);\n  }\n\n  get fieldValidators() {\n    return this.#fieldValidators;\n  }\n\n  #entityDataParser?: CatalogProcessorParser;\n\n  setEntityDataParser(parser: CatalogProcessorParser): void {\n    if (this.#entityDataParser) {\n      throw new Error(\n        'Attempted to install second EntityDataParser. Only one can be set.',\n      );\n    }\n    this.#entityDataParser = parser;\n  }\n\n  get entityDataParser() {\n    return this.#entityDataParser;\n  }\n}\n\n/**\n * Catalog plugin\n * @alpha\n */\nexport const catalogPlugin = createBackendPlugin({\n  pluginId: 'catalog',\n  register(env) {\n    const processingExtensions = new CatalogProcessingExtensionPointImpl();\n    // plugins depending on this API will be initialized before this plugins init method is executed.\n    env.registerExtensionPoint(\n      catalogProcessingExtensionPoint,\n      processingExtensions,\n    );\n\n    const analysisExtensions = new CatalogAnalysisExtensionPointImpl();\n    env.registerExtensionPoint(\n      catalogAnalysisExtensionPoint,\n      analysisExtensions,\n    );\n\n    const permissionExtensions = new CatalogPermissionExtensionPointImpl();\n    env.registerExtensionPoint(\n      catalogPermissionExtensionPoint,\n      permissionExtensions,\n    );\n\n    const modelExtensions = new CatalogModelExtensionPointImpl();\n    env.registerExtensionPoint(catalogModelExtensionPoint, modelExtensions);\n\n    env.registerInit({\n      deps: {\n        logger: coreServices.logger,\n        config: coreServices.rootConfig,\n        reader: coreServices.urlReader,\n        permissions: coreServices.permissions,\n        database: coreServices.database,\n        httpRouter: coreServices.httpRouter,\n        lifecycle: coreServices.lifecycle,\n        scheduler: coreServices.scheduler,\n        discovery: coreServices.discovery,\n        auth: coreServices.auth,\n        httpAuth: coreServices.httpAuth,\n      },\n      async init({\n        logger,\n        config,\n        reader,\n        database,\n        permissions,\n        httpRouter,\n        lifecycle,\n        scheduler,\n        discovery,\n        auth,\n        httpAuth,\n      }) {\n        const builder = await CatalogBuilder.create({\n          config,\n          reader,\n          permissions,\n          database,\n          scheduler,\n          logger,\n          discovery,\n          auth,\n          httpAuth,\n        });\n        if (processingExtensions.onProcessingErrorHandler) {\n          builder.subscribe({\n            onProcessingError: processingExtensions.onProcessingErrorHandler,\n          });\n        }\n        builder.addProcessor(...processingExtensions.processors);\n        builder.addEntityProvider(...processingExtensions.entityProviders);\n\n        if (modelExtensions.entityDataParser) {\n          builder.setEntityDataParser(modelExtensions.entityDataParser);\n        }\n\n        Object.entries(processingExtensions.placeholderResolvers).forEach(\n          ([key, resolver]) => builder.setPlaceholderResolver(key, resolver),\n        );\n        builder.addLocationAnalyzers(...analysisExtensions.locationAnalyzers);\n        builder.addPermissions(...permissionExtensions.permissions);\n        builder.addPermissionRules(...permissionExtensions.permissionRules);\n        builder.setFieldFormatValidators(modelExtensions.fieldValidators);\n\n        const { processingEngine, router } = await builder.build();\n\n        await processingEngine.start();\n        lifecycle.addShutdownHook(() => processingEngine.stop());\n        httpRouter.use(router);\n      },\n    });\n  },\n});\n"],"names":["createConditionExports","RESOURCE_TYPE_CATALOG_ENTITY","permissionRules","merge","createBackendPlugin","catalogProcessingExtensionPoint","catalogAnalysisExtensionPoint","catalogPermissionExtensionPoint","catalogModelExtensionPoint","coreServices","CatalogBuilder"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"alpha.cjs.js","sources":["../src/permissions/conditionExports.ts","../src/service/CatalogPlugin.ts"],"sourcesContent":["/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RESOURCE_TYPE_CATALOG_ENTITY } from '@backstage/plugin-catalog-common/alpha';\nimport { createConditionExports } from '@backstage/plugin-permission-node';\nimport { permissionRules } from './rules';\n\nconst { conditions, createConditionalDecision } = createConditionExports({\n  pluginId: 'catalog',\n  resourceType: RESOURCE_TYPE_CATALOG_ENTITY,\n  rules: permissionRules,\n});\n\n/**\n * These conditions are used when creating conditional decisions for catalog\n * entities that are returned by authorization policies.\n *\n * @alpha\n */\nexport const catalogConditions = conditions;\n\n/**\n * `createCatalogConditionalDecision` can be used when authoring policies to\n * create conditional decisions. It requires a permission of type\n * `ResourcePermission<'catalog-entity'>` to be passed as the first parameter.\n * It's recommended that you use the provided `isResourcePermission` and\n * `isPermission` helper methods to narrow the type of the permission passed to\n * the handle method as shown below.\n *\n * ```\n * // MyAuthorizationPolicy.ts\n * ...\n * import { createCatalogPolicyDecision } from '@backstage/plugin-catalog-backend';\n * import { RESOURCE_TYPE_CATALOG_ENTITY } from '@backstage/plugin-catalog-common';\n *\n * class MyAuthorizationPolicy implements PermissionPolicy {\n *   async handle(request, user) {\n *     ...\n *\n *     if (isResourcePermission(request.permission, RESOURCE_TYPE_CATALOG_ENTITY)) {\n *       return createCatalogConditionalDecision(\n *         request.permission,\n *         { anyOf: [...insert conditions here...] }\n *       );\n *     }\n *\n *     ...\n * }\n * ```\n *\n * @alpha\n */\nexport const createCatalogConditionalDecision = createConditionalDecision;\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport {\n  coreServices,\n  createBackendPlugin,\n} from '@backstage/backend-plugin-api';\nimport { Entity, Validators } from '@backstage/catalog-model';\nimport { CatalogBuilder, CatalogPermissionRuleInput } from './CatalogBuilder';\nimport {\n  CatalogAnalysisExtensionPoint,\n  catalogAnalysisExtensionPoint,\n  CatalogModelExtensionPoint,\n  catalogModelExtensionPoint,\n  CatalogPermissionExtensionPoint,\n  catalogPermissionExtensionPoint,\n  CatalogProcessingExtensionPoint,\n  catalogProcessingExtensionPoint,\n} from '@backstage/plugin-catalog-node/alpha';\nimport {\n  CatalogProcessor,\n  CatalogProcessorParser,\n  EntityProvider,\n  PlaceholderResolver,\n  ScmLocationAnalyzer,\n} from '@backstage/plugin-catalog-node';\nimport { merge } from 'lodash';\nimport { Permission } from '@backstage/plugin-permission-common';\n\nclass CatalogProcessingExtensionPointImpl\n  implements CatalogProcessingExtensionPoint\n{\n  #processors = new Array<CatalogProcessor>();\n  #entityProviders = new Array<EntityProvider>();\n  #placeholderResolvers: Record<string, PlaceholderResolver> = {};\n  #onProcessingErrorHandler?: (event: {\n    unprocessedEntity: Entity;\n    errors: Error[];\n  }) => Promise<void> | void;\n\n  addProcessor(\n    ...processors: Array<CatalogProcessor | Array<CatalogProcessor>>\n  ): void {\n    this.#processors.push(...processors.flat());\n  }\n\n  addEntityProvider(\n    ...providers: Array<EntityProvider | Array<EntityProvider>>\n  ): void {\n    this.#entityProviders.push(...providers.flat());\n  }\n\n  addPlaceholderResolver(key: string, resolver: PlaceholderResolver) {\n    if (key in this.#placeholderResolvers)\n      throw new Error(\n        `A placeholder resolver for '${key}' has already been set up, please check your config.`,\n      );\n    this.#placeholderResolvers[key] = resolver;\n  }\n\n  setOnProcessingErrorHandler(\n    handler: (event: {\n      unprocessedEntity: Entity;\n      errors: Error[];\n    }) => Promise<void> | void,\n  ) {\n    this.#onProcessingErrorHandler = handler;\n  }\n\n  get processors() {\n    return this.#processors;\n  }\n\n  get entityProviders() {\n    return this.#entityProviders;\n  }\n\n  get placeholderResolvers() {\n    return this.#placeholderResolvers;\n  }\n\n  get onProcessingErrorHandler() {\n    return this.#onProcessingErrorHandler;\n  }\n}\n\nclass CatalogAnalysisExtensionPointImpl\n  implements CatalogAnalysisExtensionPoint\n{\n  #locationAnalyzers = new Array<ScmLocationAnalyzer>();\n\n  addLocationAnalyzer(analyzer: ScmLocationAnalyzer): void {\n    this.#locationAnalyzers.push(analyzer);\n  }\n\n  get locationAnalyzers() {\n    return this.#locationAnalyzers;\n  }\n}\n\nclass CatalogPermissionExtensionPointImpl\n  implements CatalogPermissionExtensionPoint\n{\n  #permissions = new Array<Permission>();\n  #permissionRules = new Array<CatalogPermissionRuleInput>();\n\n  addPermissions(...permission: Array<Permission | Array<Permission>>): void {\n    this.#permissions.push(...permission.flat());\n  }\n\n  addPermissionRules(\n    ...rules: Array<\n      CatalogPermissionRuleInput | Array<CatalogPermissionRuleInput>\n    >\n  ): void {\n    this.#permissionRules.push(...rules.flat());\n  }\n\n  get permissions() {\n    return this.#permissions;\n  }\n\n  get permissionRules() {\n    return this.#permissionRules;\n  }\n}\n\nclass CatalogModelExtensionPointImpl implements CatalogModelExtensionPoint {\n  #fieldValidators: Partial<Validators> = {};\n\n  setFieldValidators(validators: Partial<Validators>): void {\n    merge(this.#fieldValidators, validators);\n  }\n\n  get fieldValidators() {\n    return this.#fieldValidators;\n  }\n\n  #entityDataParser?: CatalogProcessorParser;\n\n  setEntityDataParser(parser: CatalogProcessorParser): void {\n    if (this.#entityDataParser) {\n      throw new Error(\n        'Attempted to install second EntityDataParser. Only one can be set.',\n      );\n    }\n    this.#entityDataParser = parser;\n  }\n\n  get entityDataParser() {\n    return this.#entityDataParser;\n  }\n}\n\n/**\n * Catalog plugin\n * @alpha\n */\nexport const catalogPlugin = createBackendPlugin({\n  pluginId: 'catalog',\n  register(env) {\n    const processingExtensions = new CatalogProcessingExtensionPointImpl();\n    // plugins depending on this API will be initialized before this plugins init method is executed.\n    env.registerExtensionPoint(\n      catalogProcessingExtensionPoint,\n      processingExtensions,\n    );\n\n    const analysisExtensions = new CatalogAnalysisExtensionPointImpl();\n    env.registerExtensionPoint(\n      catalogAnalysisExtensionPoint,\n      analysisExtensions,\n    );\n\n    const permissionExtensions = new CatalogPermissionExtensionPointImpl();\n    env.registerExtensionPoint(\n      catalogPermissionExtensionPoint,\n      permissionExtensions,\n    );\n\n    const modelExtensions = new CatalogModelExtensionPointImpl();\n    env.registerExtensionPoint(catalogModelExtensionPoint, modelExtensions);\n\n    env.registerInit({\n      deps: {\n        logger: coreServices.logger,\n        config: coreServices.rootConfig,\n        reader: coreServices.urlReader,\n        permissions: coreServices.permissions,\n        database: coreServices.database,\n        httpRouter: coreServices.httpRouter,\n        lifecycle: coreServices.lifecycle,\n        scheduler: coreServices.scheduler,\n        discovery: coreServices.discovery,\n        auth: coreServices.auth,\n        httpAuth: coreServices.httpAuth,\n      },\n      async init({\n        logger,\n        config,\n        reader,\n        database,\n        permissions,\n        httpRouter,\n        lifecycle,\n        scheduler,\n        discovery,\n        auth,\n        httpAuth,\n      }) {\n        const builder = await CatalogBuilder.create({\n          config,\n          reader,\n          permissions,\n          database,\n          scheduler,\n          logger,\n          discovery,\n          auth,\n          httpAuth,\n        });\n        if (processingExtensions.onProcessingErrorHandler) {\n          builder.subscribe({\n            onProcessingError: processingExtensions.onProcessingErrorHandler,\n          });\n        }\n        builder.addProcessor(...processingExtensions.processors);\n        builder.addEntityProvider(...processingExtensions.entityProviders);\n\n        if (modelExtensions.entityDataParser) {\n          builder.setEntityDataParser(modelExtensions.entityDataParser);\n        }\n\n        Object.entries(processingExtensions.placeholderResolvers).forEach(\n          ([key, resolver]) => builder.setPlaceholderResolver(key, resolver),\n        );\n        builder.addLocationAnalyzers(...analysisExtensions.locationAnalyzers);\n        builder.addPermissions(...permissionExtensions.permissions);\n        builder.addPermissionRules(...permissionExtensions.permissionRules);\n        builder.setFieldFormatValidators(modelExtensions.fieldValidators);\n\n        const { processingEngine, router } = await builder.build();\n\n        await processingEngine.start();\n        lifecycle.addShutdownHook(() => processingEngine.stop());\n        httpRouter.use(router);\n      },\n    });\n  },\n});\n"],"names":["createConditionExports","RESOURCE_TYPE_CATALOG_ENTITY","permissionRules","merge","createBackendPlugin","catalogProcessingExtensionPoint","catalogAnalysisExtensionPoint","catalogPermissionExtensionPoint","catalogModelExtensionPoint","coreServices","CatalogBuilder"],"mappings":"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"}
\ No newline at end of file
diff --git a/node_modules/@backstage/plugin-catalog-backend/dist/cjs/CatalogBuilder-WfXI1o7H.cjs.js b/node_modules/@backstage/plugin-catalog-backend/dist/cjs/CatalogBuilder-WfXI1o7H.cjs.js
index b51f7f5..0ecb872 100644
--- a/node_modules/@backstage/plugin-catalog-backend/dist/cjs/CatalogBuilder-WfXI1o7H.cjs.js
+++ b/node_modules/@backstage/plugin-catalog-backend/dist/cjs/CatalogBuilder-WfXI1o7H.cjs.js
@@ -28,6 +28,7 @@ var types = require('@backstage/types');
 var catalogClient = require('@backstage/catalog-client');
 var yn = require('yn');
 var backendOpenapiUtils = require('@backstage/backend-openapi-utils');
+var backstagePluginAuditLogNode = require('@janus-idp/backstage-plugin-audit-log-node');
 var alpha = require('@backstage/plugin-catalog-common/alpha');
 var pluginPermissionCommon = require('@backstage/plugin-permission-common');
 var minimatch = require('minimatch');
@@ -5534,6 +5535,11 @@ async function createRouter(options) {
     auth,
     httpAuth
   } = options;
+  const auditLogger = new backstagePluginAuditLogNode.DefaultAuditLogger({
+    logger,
+    authService: auth,
+    httpAuthService: httpAuth
+  });
   const readonlyEnabled = config.getOptionalBoolean("catalog.readonly") || false;
   if (readonlyEnabled) {
     logger.info("Catalog is running in readonly mode");
@@ -5541,12 +5547,61 @@ async function createRouter(options) {
   if (refreshService) {
     router.post("/refresh", async (req, res) => {
       const { authorizationToken, ...restBody } = req.body;
-      const credentials = authorizationToken ? await auth.authenticate(authorizationToken) : await httpAuth.credentials(req);
-      await refreshService.refresh({
-        ...restBody,
-        credentials
-      });
-      res.status(200).end();
+      const actorId = await auditLogger.getActorId(req);
+      try {
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityRefresh",
+          actorId,
+          status: "succeeded",
+          stage: "initiation",
+          metadata: {
+            entityRef: restBody.entityRef
+          },
+          request: req,
+          message: `Refresh attempt for ${restBody.entityRef} initiated by ${actorId}`
+        });
+        const credentials = authorizationToken ? await auth.authenticate(authorizationToken) : await httpAuth.credentials(req);
+        await refreshService.refresh({
+          ...restBody,
+          credentials
+        });
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityRefresh",
+          actorId,
+          status: "succeeded",
+          stage: "completion",
+          metadata: {
+            entityRef: restBody.entityRef
+          },
+          response: {
+            status: 200
+          },
+          request: req,
+          message: `Refresh attempt for ${restBody.entityRef} triggered by ${actorId}`
+        });
+        res.status(200).end();
+      } catch (err) {
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityRefresh",
+          actorId,
+          status: "failed",
+          stage: "completion",
+          level: "error",
+          errors: [
+            {
+              name: err.name,
+              message: err.message,
+              stack: err.stack
+            }
+          ],
+          metadata: {
+            entityRef: restBody.entityRef
+          },
+          request: req,
+          message: `Refresh attempt for ${restBody.entityRef} by ${actorId} failed`
+        });
+        throw err;
+      }
     });
   }
   if (permissionIntegrationRouter) {
@@ -5554,204 +5609,937 @@ async function createRouter(options) {
   }
   if (entitiesCatalog) {
     router.get("/entities", async (req, res) => {
-      const { entities, pageInfo } = await entitiesCatalog.entities({
-        filter: parseEntityFilterParams(req.query),
-        fields: parseEntityTransformParams(req.query),
-        order: parseEntityOrderParams(req.query),
-        pagination: parseEntityPaginationParams(req.query),
-        credentials: await httpAuth.credentials(req)
-      });
-      if (pageInfo.hasNextPage) {
-        const url = new URL(`http://ignored${req.url}`);
-        url.searchParams.delete("offset");
-        url.searchParams.set("after", pageInfo.endCursor);
-        res.setHeader("link", `<${url.pathname}${url.search}>; rel="next"`);
+      const actorId = await auditLogger.getActorId(
+        req
+      );
+      try {
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityFetch",
+          actorId,
+          status: "succeeded",
+          stage: "initiation",
+          request: req,
+          message: `Entity fetch attempt initiated by ${actorId}`
+        });
+        const { entities, pageInfo } = await entitiesCatalog.entities({
+          filter: parseEntityFilterParams(req.query),
+          fields: parseEntityTransformParams(req.query),
+          order: parseEntityOrderParams(req.query),
+          pagination: parseEntityPaginationParams(req.query),
+          credentials: await httpAuth.credentials(req)
+        });
+        if (pageInfo.hasNextPage) {
+          const url = new URL(`http://ignored${req.url}`);
+          url.searchParams.delete("offset");
+          url.searchParams.set("after", pageInfo.endCursor);
+          res.setHeader("link", `<${url.pathname}${url.search}>; rel="next"`);
+        }
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityFetch",
+          actorId,
+          status: "succeeded",
+          stage: "completion",
+          request: req,
+          // Let's not log out the entities since this can make the log very big due to it not being paged?
+          response: {
+            status: 200
+          },
+          message: `Entity fetch attempt by ${actorId} succeeded`
+        });
+        res.json(entities);
+      } catch (err) {
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityFetch",
+          status: "failed",
+          stage: "completion",
+          level: "error",
+          request: req,
+          errors: [
+            {
+              name: err.name,
+              message: err.message,
+              stack: err.stack
+            }
+          ],
+          message: `Entity fetch attempt by ${actorId} failed`
+        });
+        throw err;
       }
-      res.json(entities);
     }).get("/entities/by-query", async (req, res) => {
-      const { items, pageInfo, totalItems } = await entitiesCatalog.queryEntities({
-        limit: req.query.limit,
-        ...parseQueryEntitiesParams(req.query),
-        credentials: await httpAuth.credentials(req)
-      });
-      res.json({
-        items,
-        totalItems,
-        pageInfo: {
-          ...pageInfo.nextCursor && {
-            nextCursor: encodeCursor(pageInfo.nextCursor)
-          },
-          ...pageInfo.prevCursor && {
-            prevCursor: encodeCursor(pageInfo.prevCursor)
+      const actorId = await auditLogger.getActorId(
+        req
+      );
+      try {
+        await auditLogger.auditLog({
+          eventName: "QueriedCatalogEntityFetch",
+          actorId,
+          status: "succeeded",
+          stage: "initiation",
+          request: req,
+          message: `Queried entity fetch attempt initiated by ${actorId}`
+        });
+        const { items, pageInfo, totalItems } = await entitiesCatalog.queryEntities({
+          limit: req.query.limit,
+          ...parseQueryEntitiesParams(req.query),
+          credentials: await httpAuth.credentials(req)
+        });
+        res.json({
+          items,
+          totalItems,
+          pageInfo: {
+            ...pageInfo.nextCursor && {
+              nextCursor: encodeCursor(pageInfo.nextCursor)
+            },
+            ...pageInfo.prevCursor && {
+              prevCursor: encodeCursor(pageInfo.prevCursor)
+            }
           }
-        }
-      });
+        });
+        await auditLogger.auditLog({
+          eventName: "QueriedCatalogEntityFetch",
+          actorId,
+          status: "succeeded",
+          stage: "completion",
+          request: req,
+          metadata: {
+            totalEntities: totalItems,
+            pageInfo: {
+              ...pageInfo.nextCursor && {
+                nextCursor: encodeCursor(pageInfo.nextCursor)
+              },
+              ...pageInfo.prevCursor && {
+                prevCursor: encodeCursor(pageInfo.prevCursor)
+              }
+            }
+          },
+          // Let's not log out the entities since this can make the log very big
+          response: {
+            status: 200
+          },
+          message: `Queried entity fetch attempt by ${actorId} succeeded`
+        });
+      } catch (err) {
+        await auditLogger.auditLog({
+          eventName: "QueriedCatalogEntityFetch",
+          actorId,
+          status: "failed",
+          stage: "completion",
+          level: "error",
+          request: req,
+          errors: [
+            {
+              name: err.name,
+              message: err.message,
+              stack: err.stack
+            }
+          ],
+          message: `Queried entity fetch attempt by ${actorId} failed`
+        });
+        throw err;
+      }
     }).get("/entities/by-uid/:uid", async (req, res) => {
       const { uid } = req.params;
-      const { entities } = await entitiesCatalog.entities({
-        filter: basicEntityFilter({ "metadata.uid": uid }),
-        credentials: await httpAuth.credentials(req)
-      });
-      if (!entities.length) {
-        throw new errors.NotFoundError(`No entity with uid ${uid}`);
+      const actorId = await auditLogger.getActorId(req);
+      try {
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityFetchByUid",
+          actorId,
+          status: "succeeded",
+          stage: "initiation",
+          request: req,
+          metadata: {
+            uid
+          },
+          message: `Fetch attempt for entity with uid ${uid} initiated by ${actorId}`
+        });
+        const { entities } = await entitiesCatalog.entities({
+          filter: basicEntityFilter({ "metadata.uid": uid }),
+          credentials: await httpAuth.credentials(req)
+        });
+        if (!entities.length) {
+          throw new errors.NotFoundError(`No entity with uid ${uid}`);
+        }
+        res.status(200).json(entities[0]);
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityFetchByUid",
+          actorId,
+          status: "succeeded",
+          stage: "completion",
+          request: req,
+          metadata: {
+            uid,
+            entityRef: catalogModel.stringifyEntityRef(entities[0])
+          },
+          response: {
+            status: 200
+          },
+          message: `Fetch attempt for entity with uid ${uid} by ${actorId} succeeded`
+        });
+      } catch (err) {
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityFetchByUid",
+          actorId,
+          status: "failed",
+          stage: "completion",
+          level: "error",
+          request: req,
+          metadata: {
+            uid
+          },
+          errors: [
+            {
+              name: err.name,
+              message: err.message,
+              stack: err.stack
+            }
+          ],
+          message: `Fetch attempt for entity with uid ${uid} by ${actorId} failed`
+        });
+        throw err;
       }
-      res.status(200).json(entities[0]);
     }).delete("/entities/by-uid/:uid", async (req, res) => {
       const { uid } = req.params;
-      await entitiesCatalog.removeEntityByUid(uid, {
-        credentials: await httpAuth.credentials(req)
-      });
-      res.status(204).end();
+      const actorId = await auditLogger.getActorId(req);
+      let entityRef;
+      try {
+        const { entities } = await entitiesCatalog.entities({
+          filter: basicEntityFilter({ "metadata.uid": uid }),
+          credentials: await httpAuth.credentials(req)
+        });
+        if (entities.length) {
+          entityRef = catalogModel.stringifyEntityRef(entities[0]);
+        }
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityDeletion",
+          actorId,
+          status: "succeeded",
+          stage: "initiation",
+          request: req,
+          metadata: {
+            uid,
+            entityRef
+          },
+          message: `Deletion attempt for entity with uid ${uid} initiated by ${actorId}`
+        });
+        await entitiesCatalog.removeEntityByUid(uid, {
+          credentials: await httpAuth.credentials(req)
+        });
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityDeletion",
+          actorId,
+          status: "succeeded",
+          stage: "completion",
+          request: req,
+          metadata: {
+            uid,
+            entityRef
+          },
+          response: {
+            status: 204
+          },
+          message: `Deletion attempt for entity with uid ${uid} by ${actorId} succeeded`
+        });
+        res.status(204).end();
+      } catch (err) {
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityDeletion",
+          actorId,
+          status: "failed",
+          stage: "completion",
+          level: "error",
+          request: req,
+          errors: [
+            {
+              name: err.name,
+              message: err.message,
+              stack: err.stack
+            }
+          ],
+          message: `Deletion attempt for entity with uid ${uid} by ${actorId} failed`
+        });
+        throw err;
+      }
     }).get("/entities/by-name/:kind/:namespace/:name", async (req, res) => {
       const { kind, namespace, name } = req.params;
-      const { entities } = await entitiesCatalog.entities({
-        filter: basicEntityFilter({
-          kind,
-          "metadata.namespace": namespace,
-          "metadata.name": name
-        }),
-        credentials: await httpAuth.credentials(req)
-      });
-      if (!entities.length) {
-        throw new errors.NotFoundError(
-          `No entity named '${name}' found, with kind '${kind}' in namespace '${namespace}'`
-        );
+      const entityRef = catalogModel.stringifyEntityRef({ kind, namespace, name });
+      const actorId = await auditLogger.getActorId(req);
+      try {
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityFetchByName",
+          actorId,
+          status: "succeeded",
+          stage: "initiation",
+          request: req,
+          metadata: {
+            entityRef
+          },
+          message: `Fetch attempt for entity with entityRef ${entityRef} initiated by ${actorId}`
+        });
+        const { entities } = await entitiesCatalog.entities({
+          filter: basicEntityFilter({
+            kind,
+            "metadata.namespace": namespace,
+            "metadata.name": name
+          }),
+          credentials: await httpAuth.credentials(req)
+        });
+        if (!entities.length) {
+          throw new errors.NotFoundError(
+            `No entity named '${name}' found, with kind '${kind}' in namespace '${namespace}'`
+          );
+        }
+        res.status(200).json(entities[0]);
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityFetchByName",
+          actorId,
+          status: "succeeded",
+          stage: "completion",
+          request: req,
+          metadata: {
+            entityRef
+          },
+          response: {
+            status: 200
+          },
+          message: `Fetch attempt for entity with entityRef ${entityRef} by ${actorId} succeeded`
+        });
+      } catch (err) {
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityFetchByName",
+          actorId,
+          status: "failed",
+          stage: "completion",
+          level: "error",
+          request: req,
+          metadata: {
+            entityRef
+          },
+          errors: [
+            {
+              name: err.name,
+              message: err.message,
+              stack: err.stack
+            }
+          ],
+          message: `Fetch attempt for entity with entityRef ${entityRef} by ${actorId} failed`
+        });
+        throw err;
       }
-      res.status(200).json(entities[0]);
     }).get(
       "/entities/by-name/:kind/:namespace/:name/ancestry",
       async (req, res) => {
         const { kind, namespace, name } = req.params;
         const entityRef = catalogModel.stringifyEntityRef({ kind, namespace, name });
-        const response = await entitiesCatalog.entityAncestry(entityRef, {
+        const actorId = await auditLogger.getActorId(req);
+        try {
+          await auditLogger.auditLog({
+            eventName: "CatalogEntityAncestryFetch",
+            actorId,
+            status: "succeeded",
+            stage: "initiation",
+            request: req,
+            metadata: {
+              entityRef
+            },
+            message: `Fetch attempt for entity ancestor of entity ${entityRef} initiated by ${actorId}`
+          });
+          const response = await entitiesCatalog.entityAncestry(entityRef, {
+            credentials: await httpAuth.credentials(req)
+          });
+          res.status(200).json(response);
+          await auditLogger.auditLog({
+            eventName: "CatalogEntityAncestryFetch",
+            actorId,
+            status: "succeeded",
+            stage: "completion",
+            request: req,
+            metadata: {
+              rootEntityRef: response.rootEntityRef,
+              ancestry: response.items.map((ancestryLink) => {
+                return {
+                  entityRef: catalogModel.stringifyEntityRef(ancestryLink.entity),
+                  parentEntityRefs: ancestryLink.parentEntityRefs
+                };
+              })
+            },
+            response: {
+              status: 200
+            },
+            message: `Fetch attempt for entity ancestor of entity ${entityRef} by ${actorId} succeeded`
+          });
+        } catch (err) {
+          await auditLogger.auditLog({
+            eventName: "CatalogEntityAncestryFetch",
+            actorId,
+            status: "failed",
+            stage: "completion",
+            level: "error",
+            request: req,
+            metadata: {
+              entityRef
+            },
+            errors: [
+              {
+                name: err.name,
+                message: err.message,
+                stack: err.stack
+              }
+            ],
+            message: `Fetch attempt for entity ancestor of entity ${entityRef} by ${actorId} failed`
+          });
+          throw err;
+        }
+      }
+    ).post("/entities/by-refs", async (req, res) => {
+      const actorId = await auditLogger.getActorId(req);
+      try {
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityBatchFetch",
+          actorId,
+          status: "succeeded",
+          stage: "initiation",
+          request: req,
+          message: `Batch entity fetch attempt initiated by ${actorId}`
+        });
+        const request = entitiesBatchRequest(req);
+        const response = await entitiesCatalog.entitiesBatch({
+          entityRefs: request.entityRefs,
+          filter: parseEntityFilterParams(req.query),
+          fields: parseEntityTransformParams(req.query, request.fields),
           credentials: await httpAuth.credentials(req)
         });
         res.status(200).json(response);
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityBatchFetch",
+          actorId,
+          status: "succeeded",
+          stage: "completion",
+          request: req,
+          metadata: {
+            ...request
+          },
+          response: {
+            status: 200
+          },
+          message: `Batch entity fetch attempt by ${actorId} succeeded`
+        });
+      } catch (err) {
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityBatchFetch",
+          actorId,
+          status: "failed",
+          stage: "completion",
+          level: "error",
+          request: req,
+          errors: [
+            {
+              name: err.name,
+              message: err.message,
+              stack: err.stack
+            }
+          ],
+          message: `Batch entity fetch attempt by ${actorId} failed`
+        });
+        throw err;
       }
-    ).post("/entities/by-refs", async (req, res) => {
-      const request = entitiesBatchRequest(req);
-      const response = await entitiesCatalog.entitiesBatch({
-        entityRefs: request.entityRefs,
-        filter: parseEntityFilterParams(req.query),
-        fields: parseEntityTransformParams(req.query, request.fields),
-        credentials: await httpAuth.credentials(req)
-      });
-      res.status(200).json(response);
     }).get("/entity-facets", async (req, res) => {
-      const response = await entitiesCatalog.facets({
-        filter: parseEntityFilterParams(req.query),
-        facets: parseEntityFacetParams(req.query),
-        credentials: await httpAuth.credentials(req)
-      });
-      res.status(200).json(response);
+      const actorId = await auditLogger.getActorId(req);
+      try {
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityFacetFetch",
+          actorId,
+          status: "succeeded",
+          stage: "initiation",
+          request: req,
+          message: `Entity facet fetch attempt initiated by ${actorId}`
+        });
+        const response = await entitiesCatalog.facets({
+          filter: parseEntityFilterParams(req.query),
+          facets: parseEntityFacetParams(req.query),
+          credentials: await httpAuth.credentials(req)
+        });
+        res.status(200).json(response);
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityFacetFetch",
+          actorId,
+          status: "succeeded",
+          stage: "completion",
+          request: req,
+          response: { status: 200 },
+          message: `Entity facet fetch attempt by ${actorId} succeeded`
+        });
+      } catch (err) {
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityFacetFetch",
+          actorId,
+          status: "failed",
+          stage: "completion",
+          request: req,
+          errors: [
+            {
+              name: err.name,
+              message: err.message,
+              stack: err.stack
+            }
+          ],
+          message: `Entity facet fetch attempt by ${actorId} failed`
+        });
+        throw err;
+      }
     });
   }
   if (locationService) {
     router.post("/locations", async (req, res) => {
+      const credentials = await httpAuth.credentials(req);
+      const actorId = await auditLogger.getActorId(req);
       const location = await validateRequestBody(req, locationInput);
       const dryRun = yn__default.default(req.query.dryRun, { default: false });
-      if (!dryRun) {
-        disallowReadonlyMode(readonlyEnabled);
+      try {
+        await auditLogger.auditLog({
+          eventName: "CatalogLocationCreation",
+          status: "succeeded",
+          stage: "initiation",
+          actorId,
+          metadata: {
+            location,
+            isDryRun: dryRun
+          },
+          request: req,
+          message: `Creation attempt of location entity for ${location.target} initiated by ${actorId}`
+        });
+        if (!dryRun) {
+          disallowReadonlyMode(readonlyEnabled);
+        }
+        const output = await locationService.createLocation(
+          location,
+          dryRun,
+          {
+            credentials
+          }
+        );
+        await auditLogger.auditLog({
+          eventName: "CatalogLocationCreation",
+          status: "succeeded",
+          stage: "completion",
+          actorId,
+          metadata: {
+            location: output.location,
+            isDryRun: dryRun
+          },
+          request: req,
+          response: {
+            status: 201
+          },
+          message: `Creation of location entity for ${location.target} initiated by ${actorId} succeeded`
+        });
+        res.status(201).json(output);
+      } catch (err) {
+        await auditLogger.auditLog({
+          eventName: "CatalogLocationCreation",
+          status: "failed",
+          stage: "completion",
+          level: "error",
+          actorId,
+          metadata: {
+            location,
+            isDryRun: dryRun
+          },
+          errors: [
+            {
+              name: err.name,
+              message: err.message,
+              stack: err.stack
+            }
+          ],
+          request: req,
+          message: `Creation of location entity for ${location.target} initiated by ${actorId} failed`
+        });
+        throw err;
       }
-      const output = await locationService.createLocation(location, dryRun, {
-        credentials: await httpAuth.credentials(req)
-      });
-      res.status(201).json(output);
     }).get("/locations", async (req, res) => {
-      const locations = await locationService.listLocations({
-        credentials: await httpAuth.credentials(req)
-      });
-      res.status(200).json(locations.map((l) => ({ data: l })));
+      const actorId = await auditLogger.getActorId(req);
+      try {
+        await auditLogger.auditLog({
+          eventName: "CatalogLocationFetch",
+          status: "succeeded",
+          stage: "initiation",
+          actorId,
+          request: req,
+          message: `Fetch attempt of locations initiated by ${actorId}`
+        });
+        const locations = await locationService.listLocations({
+          credentials: await httpAuth.credentials(req)
+        });
+        res.status(200).json(locations.map((l) => ({ data: l })));
+        await auditLogger.auditLog({
+          eventName: "CatalogLocationFetch",
+          status: "succeeded",
+          stage: "completion",
+          actorId,
+          request: req,
+          response: {
+            status: 200
+          },
+          message: `Fetch attempt of locations by ${actorId} succeeded`
+        });
+      } catch (err) {
+        await auditLogger.auditLog({
+          eventName: "CatalogLocationFetch",
+          status: "failed",
+          stage: "completion",
+          level: "error",
+          actorId,
+          request: req,
+          errors: [
+            {
+              name: err.name,
+              message: err.message,
+              stack: err.stack
+            }
+          ],
+          message: `Fetch attempt of locations by ${actorId} failed`
+        });
+        throw err;
+      }
     }).get("/locations/:id", async (req, res) => {
       const { id } = req.params;
-      const output = await locationService.getLocation(id, {
-        credentials: await httpAuth.credentials(req)
-      });
-      res.status(200).json(output);
+      const actorId = await auditLogger.getActorId(req);
+      try {
+        await auditLogger.auditLog({
+          eventName: "CatalogLocationFetchById",
+          status: "succeeded",
+          stage: "initiation",
+          actorId,
+          metadata: {
+            id
+          },
+          request: req,
+          message: `Fetch attempt of location with id: ${id} initiated by ${actorId}`
+        });
+        const output = await locationService.getLocation(id, {
+          credentials: await httpAuth.credentials(req)
+        });
+        res.status(200).json(output);
+        await auditLogger.auditLog({
+          eventName: "CatalogLocationFetchById",
+          status: "succeeded",
+          stage: "completion",
+          actorId,
+          metadata: {
+            id
+          },
+          response: {
+            status: 200,
+            body: output
+          },
+          request: req,
+          message: `Fetch attempt of location with id: ${id} by ${actorId} succeeded`
+        });
+      } catch (err) {
+        await auditLogger.auditLog({
+          eventName: "CatalogLocationFetchById",
+          status: "failed",
+          stage: "completion",
+          level: "error",
+          actorId,
+          metadata: {
+            id
+          },
+          errors: [
+            {
+              name: err.name,
+              message: err.message,
+              stack: err.stack
+            }
+          ],
+          request: req,
+          message: `Fetch attempt of location with id: ${id} by ${actorId} failed`
+        });
+        throw err;
+      }
     }).delete("/locations/:id", async (req, res) => {
-      disallowReadonlyMode(readonlyEnabled);
+      const actorId = await auditLogger.getActorId(req);
       const { id } = req.params;
-      await locationService.deleteLocation(id, {
-        credentials: await httpAuth.credentials(req)
-      });
-      res.status(204).end();
+      try {
+        await auditLogger.auditLog({
+          eventName: "CatalogLocationDeletion",
+          status: "succeeded",
+          stage: "initiation",
+          actorId,
+          metadata: {
+            id
+          },
+          request: req,
+          message: `Deletion attempt of location with id: ${id} initiated by ${actorId}`
+        });
+        disallowReadonlyMode(readonlyEnabled);
+        const location = await locationService.getLocation(id, {
+          credentials: await httpAuth.credentials(req)
+        });
+        await locationService.deleteLocation(id, {
+          credentials: await httpAuth.credentials(req)
+        });
+        await auditLogger.auditLog({
+          eventName: "CatalogLocationDeletion",
+          status: "succeeded",
+          stage: "completion",
+          actorId,
+          metadata: {
+            location
+          },
+          response: {
+            status: 204
+          },
+          request: req,
+          message: `Deletion attempt of location with id: ${id} by ${actorId} succeeded`
+        });
+        res.status(204).end();
+      } catch (err) {
+        await auditLogger.auditLog({
+          eventName: "CatalogLocationDeletion",
+          status: "failed",
+          stage: "completion",
+          level: "error",
+          actorId,
+          metadata: {
+            id
+          },
+          errors: [
+            {
+              name: err.name,
+              message: err.message,
+              stack: err.stack
+            }
+          ],
+          request: req,
+          message: `Deletion attempt of location with id: ${id} by ${actorId} failed`
+        });
+        throw err;
+      }
     }).get("/locations/by-entity/:kind/:namespace/:name", async (req, res) => {
       const { kind, namespace, name } = req.params;
-      const output = await locationService.getLocationByEntity(
-        { kind, namespace, name },
-        { credentials: await httpAuth.credentials(req) }
-      );
-      res.status(200).json(output);
+      const actorId = await auditLogger.getActorId(req);
+      const locationRef = `${kind}:${namespace}/${name}`;
+      try {
+        await auditLogger.auditLog({
+          eventName: "CatalogLocationFetchByEntityRef",
+          status: "succeeded",
+          stage: "initiation",
+          actorId,
+          metadata: {
+            locationRef
+          },
+          request: req,
+          message: `Fetch attempt for location ${locationRef} initiated by ${actorId}`
+        });
+        const output = await locationService.getLocationByEntity(
+          { kind, namespace, name },
+          { credentials: await httpAuth.credentials(req) }
+        );
+        res.status(200).json(output);
+        await auditLogger.auditLog({
+          eventName: "CatalogLocationFetchByEntityRef",
+          status: "succeeded",
+          stage: "completion",
+          actorId,
+          metadata: {
+            locationRef
+          },
+          response: {
+            status: 200,
+            body: output
+          },
+          request: req,
+          message: `Fetch attempt for location ${locationRef} by ${actorId} succeeded`
+        });
+      } catch (err) {
+        await auditLogger.auditLog({
+          eventName: "CatalogLocationFetchByEntityRef",
+          status: "failed",
+          stage: "completion",
+          level: "error",
+          actorId,
+          metadata: {
+            locationRef
+          },
+          errors: [
+            {
+              name: err.name,
+              message: err.message,
+              stack: err.stack
+            }
+          ],
+          request: req,
+          message: `Fetch attempt for location ${locationRef} by ${actorId} failed`
+        });
+        throw err;
+      }
     });
   }
   if (locationAnalyzer) {
     router.post("/analyze-location", async (req, res) => {
-      const body = await validateRequestBody(
-        req,
-        zod.z.object({
+      const actorId = await auditLogger.getActorId(req);
+      try {
+        await auditLogger.auditLog({
+          eventName: "CatalogLocationAnalyze",
+          status: "succeeded",
+          stage: "initiation",
+          actorId,
+          request: req,
+          message: `Analyze location for location initiated by ${actorId}`
+        });
+        const body = await validateRequestBody(
+          req,
+          zod.z.object({
+            location: locationInput,
+            catalogFilename: zod.z.string().optional()
+          })
+        );
+        const schema = zod.z.object({
           location: locationInput,
           catalogFilename: zod.z.string().optional()
-        })
-      );
-      const schema = zod.z.object({
-        location: locationInput,
-        catalogFilename: zod.z.string().optional()
-      });
-      const parsedBody = schema.parse(body);
-      try {
-        const output = await locationAnalyzer.analyzeLocation(parsedBody);
-        res.status(200).json(output);
-      } catch (err) {
-        if (
-          // Catch errors from parse-url library.
-          err.name === "Error" && "subject_url" in err
-        ) {
-          throw new errors.InputError("The given location.target is not a URL");
+        });
+        const parsedBody = schema.parse(body);
+        try {
+          const output = await locationAnalyzer.analyzeLocation(parsedBody);
+          res.status(200).json(output);
+          await auditLogger.auditLog({
+            eventName: "CatalogLocationAnalyze",
+            status: "succeeded",
+            stage: "completion",
+            actorId,
+            request: req,
+            response: {
+              status: 200,
+              body: output
+            },
+            message: `Analyze location for location by ${actorId} succeeded`
+          });
+        } catch (err) {
+          if (
+            // Catch errors from parse-url library.
+            err.name === "Error" && "subject_url" in err
+          ) {
+            throw new errors.InputError("The given location.target is not a URL");
+          }
+          throw err;
         }
+      } catch (err) {
+        await auditLogger.auditLog({
+          eventName: "CatalogLocationAnalyze",
+          status: "failed",
+          stage: "completion",
+          level: "error",
+          actorId,
+          errors: [
+            {
+              name: err.name,
+              message: err.message,
+              stack: err.stack
+            }
+          ],
+          request: req,
+          message: `Analyze location for location by ${actorId} failed`
+        });
         throw err;
       }
     });
   }
   if (orchestrator) {
     router.post("/validate-entity", async (req, res) => {
-      const bodySchema = zod.z.object({
-        entity: zod.z.unknown(),
-        location: zod.z.string()
-      });
-      let body;
-      let entity;
-      let location;
+      const actorId = await auditLogger.getActorId(req);
       try {
-        body = await validateRequestBody(req, bodySchema);
-        entity = validateEntityEnvelope(body.entity);
-        location = catalogModel.parseLocationRef(body.location);
-        if (location.type !== "url")
-          throw new TypeError(
-            `Invalid location ref ${body.location}, only 'url:<target>' is supported, e.g. url:https://host/path`
-          );
-      } catch (err) {
-        return res.status(400).json({
-          errors: [errors.serializeError(err)]
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityValidate",
+          status: "succeeded",
+          stage: "initiation",
+          actorId,
+          request: req,
+          message: `Entity validation for entity initiated by ${actorId}`
         });
-      }
-      const processingResult = await orchestrator.process({
-        entity: {
-          ...entity,
-          metadata: {
-            ...entity.metadata,
-            annotations: {
-              [catalogModel.ANNOTATION_LOCATION]: body.location,
-              [catalogModel.ANNOTATION_ORIGIN_LOCATION]: body.location,
-              ...entity.metadata.annotations
+        const bodySchema = zod.z.object({
+          entity: zod.z.unknown(),
+          location: zod.z.string()
+        });
+        let body;
+        let entity;
+        let location;
+        try {
+          body = await validateRequestBody(req, bodySchema);
+          entity = validateEntityEnvelope(body.entity);
+          location = catalogModel.parseLocationRef(body.location);
+          if (location.type !== "url")
+            throw new TypeError(
+              `Invalid location ref ${body.location}, only 'url:<target>' is supported, e.g. url:https://host/path`
+            );
+        } catch (err) {
+          return res.status(400).json({
+            errors: [errors.serializeError(err)]
+          });
+        }
+        const processingResult = await orchestrator.process({
+          entity: {
+            ...entity,
+            metadata: {
+              ...entity.metadata,
+              annotations: {
+                [catalogModel.ANNOTATION_LOCATION]: body.location,
+                [catalogModel.ANNOTATION_ORIGIN_LOCATION]: body.location,
+                ...entity.metadata.annotations
+              }
             }
           }
+        });
+        if (!processingResult.ok) {
+          const errors$1 = processingResult.errors.map((e) => errors.serializeError(e));
+          await auditLogger.auditLog({
+            eventName: "CatalogEntityValidate",
+            status: "failed",
+            stage: "completion",
+            level: "error",
+            errors: errors$1,
+            response: {
+              status: 400
+            },
+            actorId,
+            request: req,
+            message: `Entity validation for entity initiated by ${actorId} failed`
+          });
+          return res.status(400).json({
+            errors: errors$1
+          });
         }
-      });
-      if (!processingResult.ok)
-        res.status(400).json({
-          errors: processingResult.errors.map((e) => errors.serializeError(e))
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityValidate",
+          status: "succeeded",
+          stage: "completion",
+          actorId,
+          response: {
+            status: 200
+          },
+          request: req,
+          message: `Entity validation for entity by ${actorId} succeeded`
+        });
+        return res.status(200).end();
+      } catch (err) {
+        await auditLogger.auditLog({
+          eventName: "CatalogEntityValidate",
+          status: "failed",
+          stage: "completion",
+          level: "error",
+          errors: [
+            {
+              name: err.name,
+              message: err.message,
+              stack: err.stack
+            }
+          ],
+          actorId,
+          request: req,
+          message: `Entity validation for entity initiated by ${actorId} failed`
         });
-      return res.status(200).end();
+        throw err;
+      }
     });
   }
   router.use(backendCommon.errorHandler());
diff --git a/node_modules/@backstage/plugin-catalog-backend/dist/cjs/CatalogBuilder-WfXI1o7H.cjs.js.map b/node_modules/@backstage/plugin-catalog-backend/dist/cjs/CatalogBuilder-WfXI1o7H.cjs.js.map
index dc8d8ba..8f30c21 100644
--- a/node_modules/@backstage/plugin-catalog-backend/dist/cjs/CatalogBuilder-WfXI1o7H.cjs.js.map
+++ b/node_modules/@backstage/plugin-catalog-backend/dist/cjs/CatalogBuilder-WfXI1o7H.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"CatalogBuilder-WfXI1o7H.cjs.js","sources":["../../src/modules/codeowners/lib/resolve.ts","../../src/modules/codeowners/lib/scm.ts","../../src/modules/codeowners/lib/read.ts","../../src/modules/codeowners/CodeOwnersProcessor.ts","../../src/modules/core/AnnotateLocationEntityProcessor.ts","../../src/modules/core/BuiltinKindsEntityProcessor.ts","../../src/modules/core/FileReaderProcessor.ts","../../src/modules/core/PlaceholderProcessor.ts","../../src/modules/core/UrlReaderProcessor.ts","../../src/modules/util/parse.ts","../../src/processing/refresh.ts","../../src/processing/util.ts","../../src/util/conversion.ts","../../src/modules/core/ConfigLocationEntityProvider.ts","../../src/modules/core/DefaultLocationStore.ts","../../src/ingestion/LocationAnalyzer.ts","../../src/database/conversion.ts","../../src/util/metrics.ts","../../src/database/metrics.ts","../../src/database/operations/refreshState/checkLocationKeyConflict.ts","../../src/database/operations/refreshState/insertUnprocessedEntity.ts","../../src/database/operations/refreshState/updateUnprocessedEntity.ts","../../src/database/util.ts","../../src/constants.ts","../../src/database/DefaultProcessingDatabase.ts","../../src/database/migrations.ts","../../src/stitching/types.ts","../../src/util/opentelemetry.ts","../../src/processing/TaskPipeline.ts","../../src/database/operations/stitcher/markForStitching.ts","../../src/database/operations/util/deleteOrphanedEntities.ts","../../src/processing/DefaultCatalogProcessingEngine.ts","../../src/service/DefaultLocationService.ts","../../src/service/util.ts","../../src/service/DefaultEntitiesCatalog.ts","../../src/processing/ProcessorOutputCollector.ts","../../src/processing/ProcessorCacheManager.ts","../../src/processing/DefaultCatalogProcessingOrchestrator.ts","../../src/database/operations/stitcher/getDeferredStitchableEntities.ts","../../src/database/operations/stitcher/buildEntitySearch.ts","../../src/database/operations/stitcher/markDeferredStitchCompleted.ts","../../src/database/operations/stitcher/util.ts","../../src/database/operations/stitcher/performStitching.ts","../../src/stitching/progressTracker.ts","../../src/stitching/DefaultStitcher.ts","../../src/service/request/entitiesBatchRequest.ts","../../src/service/request/basicEntityFilter.ts","../../src/service/request/common.ts","../../src/service/request/parseEntityFilterParams.ts","../../src/service/request/parseEntityTransformParams.ts","../../src/service/request/parseEntityOrderFieldParams.ts","../../src/service/request/parseQueryEntitiesParams.ts","../../src/service/request/parseEntityFacetParams.ts","../../src/service/request/parseEntityOrderParams.ts","../../src/schema/openapi.generated.ts","../../src/service/request/parseEntityPaginationParams.ts","../../src/service/createRouter.ts","../../src/service/DefaultRefreshService.ts","../../src/service/AuthorizedRefreshService.ts","../../src/ingestion/CatalogRules.ts","../../src/processing/connectEntityProviders.ts","../../src/permissions/rules/util.ts","../../src/permissions/rules/hasAnnotation.ts","../../src/permissions/rules/isEntityKind.ts","../../src/permissions/rules/isEntityOwner.ts","../../src/permissions/rules/hasLabel.ts","../../src/permissions/rules/createPropertyRule.ts","../../src/permissions/rules/hasMetadata.ts","../../src/permissions/rules/hasSpec.ts","../../src/permissions/rules/index.ts","../../src/service/AuthorizedEntitiesCatalog.ts","../../src/service/AuthorizedLocationService.ts","../../src/database/operations/provider/deleteWithEagerPruningOfChildren.ts","../../src/database/operations/provider/refreshByRefreshKeys.ts","../../src/database/DefaultProviderDatabase.ts","../../src/database/DefaultCatalogDatabase.ts","../../src/service/CatalogBuilder.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as codeowners from 'codeowners-utils';\nimport parseGitUrl from 'git-url-parse';\n\nconst USER_PATTERN = /^@.*/;\nconst GROUP_PATTERN = /^@.*\\/.*/;\nconst EMAIL_PATTERN = /^.*@.*\\..*$/;\n\nexport function resolveCodeOwner(\n  contents: string,\n  catalogInfoFileUrl: string,\n): string | undefined {\n  const codeOwnerEntries = codeowners.parse(contents);\n\n  const { filepath } = parseGitUrl(catalogInfoFileUrl);\n  const match = codeowners.matchFile(filepath, codeOwnerEntries);\n\n  return match ? normalizeCodeOwner(match.owners[0]) : undefined;\n}\n\nexport function normalizeCodeOwner(owner: string) {\n  if (owner.match(GROUP_PATTERN)) {\n    return owner.split('/')[1];\n  } else if (owner.match(USER_PATTERN)) {\n    return `User:${owner.substring(1)}`;\n  } else if (owner.match(EMAIL_PATTERN)) {\n    return owner.split('@')[0];\n  }\n\n  return owner;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst CODEOWNERS = 'CODEOWNERS';\n\nexport const scmCodeOwnersPaths: Record<string, string[]> = {\n  // https://mibexsoftware.atlassian.net/wiki/spaces/CODEOWNERS/pages/222822413/Usage\n  bitbucket: [CODEOWNERS, `.bitbucket/${CODEOWNERS}`],\n\n  // https://docs.gitlab.com/ee/user/project/code_owners.html#how-to-set-up-code-owners\n  gitlab: [CODEOWNERS, `.gitlab/${CODEOWNERS}`, `docs/${CODEOWNERS}`],\n\n  // https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-code-owners#codeowners-file-location\n  github: [CODEOWNERS, `.github/${CODEOWNERS}`, `docs/${CODEOWNERS}`],\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UrlReader } from '@backstage/backend-common';\nimport { NotFoundError } from '@backstage/errors';\nimport { ScmIntegration } from '@backstage/integration';\nimport 'core-js/features/promise'; // NOTE: This can be removed when ES2021 is implemented\nimport { resolveCodeOwner } from './resolve';\nimport { scmCodeOwnersPaths } from './scm';\n\nexport async function readCodeOwners(\n  reader: UrlReader,\n  sourceUrl: string,\n  codeownersPaths: string[],\n): Promise<string | undefined> {\n  const readOwnerLocation = async (path: string): Promise<string> => {\n    const url = `${sourceUrl}${path}`;\n    const data = await reader.readUrl(url);\n    const buffer = await data.buffer();\n    return buffer.toString();\n  };\n\n  const candidates = codeownersPaths.map(readOwnerLocation);\n\n  return Promise.any(candidates).catch((aggregateError: AggregateError) => {\n    const hardError = aggregateError.errors.find(\n      error => !(error instanceof NotFoundError),\n    );\n\n    if (hardError) {\n      throw hardError;\n    }\n\n    return undefined;\n  });\n}\n\nexport async function findCodeOwnerByTarget(\n  reader: UrlReader,\n  targetUrl: string,\n  scmIntegration: ScmIntegration,\n): Promise<string | undefined> {\n  const codeownersPaths = scmCodeOwnersPaths[scmIntegration?.type ?? ''];\n\n  const sourceUrl = scmIntegration?.resolveUrl({\n    url: '/',\n    base: targetUrl,\n  });\n\n  if (!sourceUrl || !codeownersPaths) {\n    return undefined;\n  }\n\n  const contents = await readCodeOwners(reader, sourceUrl, codeownersPaths);\n\n  if (!contents) {\n    return undefined;\n  }\n\n  const owner = resolveCodeOwner(contents, targetUrl);\n\n  return owner;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UrlReader } from '@backstage/backend-common';\nimport { Entity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport { CatalogProcessor } from '@backstage/plugin-catalog-node';\nimport { findCodeOwnerByTarget } from './lib';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nconst ALLOWED_KINDS = ['API', 'Component', 'Domain', 'Resource', 'System'];\nconst ALLOWED_LOCATION_TYPES = ['url'];\n\n/** @public */\nexport class CodeOwnersProcessor implements CatalogProcessor {\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly logger: LoggerService;\n  private readonly reader: UrlReader;\n\n  static fromConfig(\n    config: Config,\n    options: { logger: LoggerService; reader: UrlReader },\n  ) {\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return new CodeOwnersProcessor({\n      ...options,\n      integrations,\n    });\n  }\n\n  constructor(options: {\n    integrations: ScmIntegrationRegistry;\n    logger: LoggerService;\n    reader: UrlReader;\n  }) {\n    this.integrations = options.integrations;\n    this.logger = options.logger;\n    this.reader = options.reader;\n  }\n\n  getProcessorName(): string {\n    return 'CodeOwnersProcessor';\n  }\n\n  async preProcessEntity(\n    entity: Entity,\n    location: LocationSpec,\n  ): Promise<Entity> {\n    // Only continue if the owner is not set\n    if (\n      !entity ||\n      !ALLOWED_KINDS.includes(entity.kind) ||\n      !ALLOWED_LOCATION_TYPES.includes(location.type) ||\n      (entity.spec && entity.spec.owner)\n    ) {\n      return entity;\n    }\n\n    const scmIntegration = this.integrations.byUrl(location.target);\n    if (!scmIntegration) {\n      return entity;\n    }\n\n    const owner = await findCodeOwnerByTarget(\n      this.reader,\n      location.target,\n      scmIntegration,\n    );\n\n    if (!owner) {\n      this.logger.debug(\n        `CodeOwnerProcessor could not resolve owner for ${location.target}`,\n      );\n      return entity;\n    }\n\n    return {\n      ...entity,\n      spec: { ...entity.spec, owner },\n    };\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ANNOTATION_EDIT_URL,\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  ANNOTATION_SOURCE_LOCATION,\n  ANNOTATION_VIEW_URL,\n  Entity,\n  stringifyLocationRef,\n} from '@backstage/catalog-model';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { identity, merge, pickBy } from 'lodash';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n} from '@backstage/plugin-catalog-node';\n\n/** @public */\nexport class AnnotateLocationEntityProcessor implements CatalogProcessor {\n  constructor(\n    private readonly options: {\n      integrations: ScmIntegrationRegistry;\n    },\n  ) {}\n\n  getProcessorName(): string {\n    return 'AnnotateLocationEntityProcessor';\n  }\n\n  async preProcessEntity(\n    entity: Entity,\n    location: LocationSpec,\n    _: CatalogProcessorEmit,\n    originLocation: LocationSpec,\n  ): Promise<Entity> {\n    const { integrations } = this.options;\n    let viewUrl;\n    let editUrl;\n    let sourceLocation;\n\n    if (location.type === 'url') {\n      const scmIntegration = integrations.byUrl(location.target);\n\n      viewUrl = location.target;\n      editUrl = scmIntegration?.resolveEditUrl(location.target);\n\n      const sourceUrl = scmIntegration?.resolveUrl({\n        url: './',\n        base: location.target,\n      });\n\n      if (sourceUrl) {\n        sourceLocation = stringifyLocationRef({\n          type: 'url',\n          target: sourceUrl,\n        });\n      }\n    }\n\n    return merge(\n      {\n        metadata: {\n          annotations: pickBy(\n            {\n              [ANNOTATION_LOCATION]: stringifyLocationRef(location),\n              [ANNOTATION_ORIGIN_LOCATION]:\n                stringifyLocationRef(originLocation),\n              [ANNOTATION_VIEW_URL]: viewUrl,\n              [ANNOTATION_EDIT_URL]: editUrl,\n              [ANNOTATION_SOURCE_LOCATION]: sourceLocation,\n            },\n            identity,\n          ),\n        },\n      },\n      entity,\n    );\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ApiEntity,\n  apiEntityV1alpha1Validator,\n  ComponentEntity,\n  componentEntityV1alpha1Validator,\n  DomainEntity,\n  domainEntityV1alpha1Validator,\n  Entity,\n  getCompoundEntityRef,\n  GroupEntity,\n  groupEntityV1alpha1Validator,\n  locationEntityV1alpha1Validator,\n  parseEntityRef,\n  RELATION_API_CONSUMED_BY,\n  RELATION_API_PROVIDED_BY,\n  RELATION_CHILD_OF,\n  RELATION_CONSUMES_API,\n  RELATION_DEPENDENCY_OF,\n  RELATION_DEPENDS_ON,\n  RELATION_HAS_MEMBER,\n  RELATION_HAS_PART,\n  RELATION_MEMBER_OF,\n  RELATION_OWNED_BY,\n  RELATION_OWNER_OF,\n  RELATION_PARENT_OF,\n  RELATION_PART_OF,\n  RELATION_PROVIDES_API,\n  ResourceEntity,\n  resourceEntityV1alpha1Validator,\n  SystemEntity,\n  systemEntityV1alpha1Validator,\n  UserEntity,\n  userEntityV1alpha1Validator,\n} from '@backstage/catalog-model';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\n\n/** @public */\nexport class BuiltinKindsEntityProcessor implements CatalogProcessor {\n  private readonly validators = [\n    apiEntityV1alpha1Validator,\n    componentEntityV1alpha1Validator,\n    resourceEntityV1alpha1Validator,\n    groupEntityV1alpha1Validator,\n    locationEntityV1alpha1Validator,\n    userEntityV1alpha1Validator,\n    systemEntityV1alpha1Validator,\n    domainEntityV1alpha1Validator,\n  ];\n\n  getProcessorName(): string {\n    return 'BuiltinKindsEntityProcessor';\n  }\n\n  async validateEntityKind(entity: Entity): Promise<boolean> {\n    for (const validator of this.validators) {\n      const results = await validator.check(entity);\n      if (results) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async postProcessEntity(\n    entity: Entity,\n    _location: LocationSpec,\n    emit: CatalogProcessorEmit,\n  ): Promise<Entity> {\n    const selfRef = getCompoundEntityRef(entity);\n\n    /*\n     * Utilities\n     */\n\n    function doEmit(\n      targets: string | string[] | undefined,\n      context: { defaultKind?: string; defaultNamespace: string },\n      outgoingRelation: string,\n      incomingRelation: string,\n    ): void {\n      if (!targets) {\n        return;\n      }\n      for (const target of [targets].flat()) {\n        const targetRef = parseEntityRef(target, context);\n        emit(\n          processingResult.relation({\n            source: selfRef,\n            type: outgoingRelation,\n            target: {\n              kind: targetRef.kind,\n              namespace: targetRef.namespace,\n              name: targetRef.name,\n            },\n          }),\n        );\n        emit(\n          processingResult.relation({\n            source: {\n              kind: targetRef.kind,\n              namespace: targetRef.namespace,\n              name: targetRef.name,\n            },\n            type: incomingRelation,\n            target: selfRef,\n          }),\n        );\n      }\n    }\n\n    /*\n     * Emit relations for the Component kind\n     */\n\n    if (entity.kind === 'Component') {\n      const component = entity as ComponentEntity;\n      doEmit(\n        component.spec.owner,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_OWNED_BY,\n        RELATION_OWNER_OF,\n      );\n      doEmit(\n        component.spec.subcomponentOf,\n        { defaultKind: 'Component', defaultNamespace: selfRef.namespace },\n        RELATION_PART_OF,\n        RELATION_HAS_PART,\n      );\n      doEmit(\n        component.spec.providesApis,\n        { defaultKind: 'API', defaultNamespace: selfRef.namespace },\n        RELATION_PROVIDES_API,\n        RELATION_API_PROVIDED_BY,\n      );\n      doEmit(\n        component.spec.consumesApis,\n        { defaultKind: 'API', defaultNamespace: selfRef.namespace },\n        RELATION_CONSUMES_API,\n        RELATION_API_CONSUMED_BY,\n      );\n      doEmit(\n        component.spec.dependsOn,\n        { defaultNamespace: selfRef.namespace },\n        RELATION_DEPENDS_ON,\n        RELATION_DEPENDENCY_OF,\n      );\n      doEmit(\n        component.spec.system,\n        { defaultKind: 'System', defaultNamespace: selfRef.namespace },\n        RELATION_PART_OF,\n        RELATION_HAS_PART,\n      );\n    }\n\n    /*\n     * Emit relations for the API kind\n     */\n\n    if (entity.kind === 'API') {\n      const api = entity as ApiEntity;\n      doEmit(\n        api.spec.owner,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_OWNED_BY,\n        RELATION_OWNER_OF,\n      );\n      doEmit(\n        api.spec.system,\n        { defaultKind: 'System', defaultNamespace: selfRef.namespace },\n        RELATION_PART_OF,\n        RELATION_HAS_PART,\n      );\n    }\n\n    /*\n     * Emit relations for the Resource kind\n     */\n\n    if (entity.kind === 'Resource') {\n      const resource = entity as ResourceEntity;\n      doEmit(\n        resource.spec.owner,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_OWNED_BY,\n        RELATION_OWNER_OF,\n      );\n      doEmit(\n        resource.spec.dependsOn,\n        { defaultNamespace: selfRef.namespace },\n        RELATION_DEPENDS_ON,\n        RELATION_DEPENDENCY_OF,\n      );\n      doEmit(\n        resource.spec.dependencyOf,\n        { defaultNamespace: selfRef.namespace },\n        RELATION_DEPENDENCY_OF,\n        RELATION_DEPENDS_ON,\n      );\n      doEmit(\n        resource.spec.system,\n        { defaultKind: 'System', defaultNamespace: selfRef.namespace },\n        RELATION_PART_OF,\n        RELATION_HAS_PART,\n      );\n    }\n\n    /*\n     * Emit relations for the User kind\n     */\n\n    if (entity.kind === 'User') {\n      const user = entity as UserEntity;\n      doEmit(\n        user.spec.memberOf,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_MEMBER_OF,\n        RELATION_HAS_MEMBER,\n      );\n    }\n\n    /*\n     * Emit relations for the Group kind\n     */\n\n    if (entity.kind === 'Group') {\n      const group = entity as GroupEntity;\n      doEmit(\n        group.spec.parent,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_CHILD_OF,\n        RELATION_PARENT_OF,\n      );\n      doEmit(\n        group.spec.children,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_PARENT_OF,\n        RELATION_CHILD_OF,\n      );\n      doEmit(\n        group.spec.members,\n        { defaultKind: 'User', defaultNamespace: selfRef.namespace },\n        RELATION_HAS_MEMBER,\n        RELATION_MEMBER_OF,\n      );\n    }\n\n    /*\n     * Emit relations for the System kind\n     */\n\n    if (entity.kind === 'System') {\n      const system = entity as SystemEntity;\n      doEmit(\n        system.spec.owner,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_OWNED_BY,\n        RELATION_OWNER_OF,\n      );\n      doEmit(\n        system.spec.domain,\n        { defaultKind: 'Domain', defaultNamespace: selfRef.namespace },\n        RELATION_PART_OF,\n        RELATION_HAS_PART,\n      );\n    }\n\n    /*\n     * Emit relations for the Domain kind\n     */\n\n    if (entity.kind === 'Domain') {\n      const domain = entity as DomainEntity;\n      doEmit(\n        domain.spec.owner,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_OWNED_BY,\n        RELATION_OWNER_OF,\n      );\n    }\n\n    return entity;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs-extra';\nimport g from 'glob';\nimport path from 'path';\nimport { promisify } from 'util';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  CatalogProcessorParser,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\n\nconst glob = promisify(g);\n\nconst LOCATION_TYPE = 'file';\n\n/** @public */\nexport class FileReaderProcessor implements CatalogProcessor {\n  getProcessorName(): string {\n    return 'FileReaderProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    optional: boolean,\n    emit: CatalogProcessorEmit,\n    parser: CatalogProcessorParser,\n  ): Promise<boolean> {\n    if (location.type !== LOCATION_TYPE) {\n      return false;\n    }\n\n    try {\n      const fileMatches = await glob(location.target);\n\n      if (fileMatches.length > 0) {\n        for (const fileMatch of fileMatches) {\n          const data = await fs.readFile(fileMatch);\n          const normalizedFilePath = path.normalize(fileMatch);\n\n          // The normalize converts to native slashes; the glob library returns\n          // forward slashes even on windows\n          for await (const parseResult of parser({\n            data: data,\n            location: {\n              type: LOCATION_TYPE,\n              target: normalizedFilePath,\n            },\n          })) {\n            emit(parseResult);\n            emit(\n              processingResult.refresh(\n                `${LOCATION_TYPE}:${normalizedFilePath}`,\n              ),\n            );\n          }\n        }\n      } else if (!optional) {\n        const message = `${location.type} ${location.target} does not exist`;\n        emit(processingResult.notFoundError(location, message));\n      }\n    } catch (e) {\n      const message = `${location.type} ${location.target} could not be read, ${e}`;\n      emit(processingResult.generalError(location, message));\n    }\n\n    return true;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UrlReader } from '@backstage/backend-common';\nimport { Entity } from '@backstage/catalog-model';\nimport { JsonValue } from '@backstage/types';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport yaml from 'yaml';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  PlaceholderResolver,\n  PlaceholderResolverParams,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\n\n/** @public */\nexport type PlaceholderProcessorOptions = {\n  resolvers: Record<string, PlaceholderResolver>;\n  reader: UrlReader;\n  integrations: ScmIntegrationRegistry;\n};\n\n/**\n * Traverses raw entity JSON looking for occurrences of $-prefixed placeholders\n * that it then fills in with actual data.\n * @public\n */\nexport class PlaceholderProcessor implements CatalogProcessor {\n  constructor(private readonly options: PlaceholderProcessorOptions) {}\n\n  getProcessorName(): string {\n    return 'PlaceholderProcessor';\n  }\n\n  async preProcessEntity(\n    entity: Entity,\n    location: LocationSpec,\n    emit: CatalogProcessorEmit,\n  ): Promise<Entity> {\n    const process = async (data: any): Promise<[any, boolean]> => {\n      if (!data || !(data instanceof Object)) {\n        // Scalars can't have placeholders\n        return [data, false];\n      }\n\n      if (Array.isArray(data)) {\n        // We're an array - process all entries recursively\n        const items = await Promise.all(data.map(item => process(item)));\n        return items.every(([, changed]) => !changed)\n          ? [data, false]\n          : [items.map(([item]) => item), true];\n      }\n\n      const keys = Object.keys(data);\n      if (!keys.some(k => k.startsWith('$'))) {\n        // We're an object but no placeholders at this level - process all\n        // entries recursively\n        const entries = await Promise.all(\n          Object.entries(data).map(([k, v]) =>\n            process(v).then(vp => [k, vp] as const),\n          ),\n        );\n        return entries.every(([, [, changed]]) => !changed)\n          ? [data, false]\n          : [Object.fromEntries(entries.map(([k, [v]]) => [k, v])), true];\n      } else if (keys.length !== 1) {\n        // This was an object that had more than one key, some of which were\n        // dollar prefixed. We only handle the case where there is exactly one\n        // such key; anything else is left alone.\n        return [data, false];\n      }\n\n      const resolverKey = keys[0].substring(1);\n      const resolverValue = data[keys[0]];\n\n      const resolver = this.options.resolvers[resolverKey];\n      if (!resolver) {\n        // If there was no such placeholder resolver, we err on the side of safety\n        // and assume that this is something that's best left alone. For example, if\n        // the input contains JSONSchema, there may be \"$ref\": \"#/definitions/node\"\n        // nodes in the document.\n        return [data, false];\n      }\n\n      const read = async (url: string): Promise<Buffer> => {\n        const response = await this.options.reader.readUrl(url);\n        const buffer = await response.buffer();\n        return buffer;\n      };\n\n      const resolveUrl = (url: string, base: string): string =>\n        this.options.integrations.resolveUrl({\n          url,\n          base,\n        });\n\n      return [\n        await resolver({\n          key: resolverKey,\n          value: resolverValue,\n          baseUrl: location.target,\n          read,\n          resolveUrl,\n          emit,\n        }),\n        true,\n      ];\n    };\n\n    const [result] = await process(entity);\n    return result;\n  }\n}\n\n/*\n * Resolvers\n */\n\nexport async function yamlPlaceholderResolver(\n  params: PlaceholderResolverParams,\n): Promise<JsonValue> {\n  const { content, url } = await readTextLocation(params);\n\n  params.emit(processingResult.refresh(`url:${url}`));\n\n  let documents: yaml.Document.Parsed[];\n  try {\n    documents = yaml.parseAllDocuments(content).filter(d => d);\n  } catch (e) {\n    throw new Error(\n      `Placeholder \\$${params.key} failed to parse YAML data at ${params.value}, ${e}`,\n    );\n  }\n\n  if (documents.length !== 1) {\n    throw new Error(\n      `Placeholder \\$${params.key} expected to find exactly one document of data at ${params.value}, found ${documents.length}`,\n    );\n  }\n\n  const document = documents[0];\n\n  if (document.errors?.length) {\n    throw new Error(\n      `Placeholder \\$${params.key} found an error in the data at ${params.value}, ${document.errors[0]}`,\n    );\n  }\n\n  return document.toJSON();\n}\n\nexport async function jsonPlaceholderResolver(\n  params: PlaceholderResolverParams,\n): Promise<JsonValue> {\n  const { content, url } = await readTextLocation(params);\n\n  params.emit(processingResult.refresh(`url:${url}`));\n\n  try {\n    return JSON.parse(content);\n  } catch (e) {\n    throw new Error(\n      `Placeholder \\$${params.key} failed to parse JSON data at ${params.value}, ${e}`,\n    );\n  }\n}\n\nexport async function textPlaceholderResolver(\n  params: PlaceholderResolverParams,\n): Promise<JsonValue> {\n  const { content, url } = await readTextLocation(params);\n\n  params.emit(processingResult.refresh(`url:${url}`));\n\n  return content;\n}\n\n/*\n * Helpers\n */\n\nasync function readTextLocation(\n  params: PlaceholderResolverParams,\n): Promise<{ content: string; url: string }> {\n  const newUrl = relativeUrl(params);\n\n  try {\n    const data = await params.read(newUrl);\n    return { content: data.toString('utf-8'), url: newUrl };\n  } catch (e) {\n    throw new Error(\n      `Placeholder \\$${params.key} could not read location ${params.value}, ${e}`,\n    );\n  }\n}\n\nfunction relativeUrl({\n  key,\n  value,\n  baseUrl,\n  resolveUrl,\n}: PlaceholderResolverParams): string {\n  if (typeof value !== 'string') {\n    throw new Error(\n      `Placeholder \\$${key} expected a string value parameter, in the form of an absolute URL or a relative path`,\n    );\n  }\n\n  try {\n    return resolveUrl(value, baseUrl);\n  } catch (e) {\n    // The only remaining case that isn't support is a relative file path that should be\n    // resolved using a relative file location. Accessing local file paths can lead to\n    // path traversal attacks and access to any file on the host system. Implementing this\n    // would require additional security measures.\n    throw new Error(\n      `Placeholder \\$${key} could not form a URL out of ${baseUrl} and ${value}, ${e}`,\n    );\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UrlReader } from '@backstage/backend-common';\nimport { Entity } from '@backstage/catalog-model';\nimport { assertError } from '@backstage/errors';\nimport limiterFactory from 'p-limit';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport parseGitUrl from 'git-url-parse';\nimport {\n  CatalogProcessor,\n  CatalogProcessorCache,\n  CatalogProcessorEmit,\n  CatalogProcessorEntityResult,\n  CatalogProcessorParser,\n  CatalogProcessorResult,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nconst CACHE_KEY = 'v1';\n\n// WARNING: If you change this type, you likely need to bump the CACHE_KEY as well\ntype CacheItem = {\n  etag: string;\n  value: {\n    type: 'entity';\n    entity: Entity;\n    location: LocationSpec;\n  }[];\n};\n\n/** @public */\nexport class UrlReaderProcessor implements CatalogProcessor {\n  constructor(\n    private readonly options: {\n      reader: UrlReader;\n      logger: LoggerService;\n    },\n  ) {}\n\n  getProcessorName() {\n    return 'url-reader';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    optional: boolean,\n    emit: CatalogProcessorEmit,\n    parser: CatalogProcessorParser,\n    cache: CatalogProcessorCache,\n  ): Promise<boolean> {\n    if (location.type !== 'url') {\n      return false;\n    }\n\n    const cacheItem = await cache.get<CacheItem>(CACHE_KEY);\n\n    try {\n      const { response, etag: newEtag } = await this.doRead(\n        location.target,\n        cacheItem?.etag,\n      );\n\n      const parseResults: CatalogProcessorResult[] = [];\n      for (const item of response) {\n        for await (const parseResult of parser({\n          data: item.data,\n          location: { type: location.type, target: item.url },\n        })) {\n          parseResults.push(parseResult);\n          emit(parseResult);\n        }\n      }\n\n      const isOnlyEntities = parseResults.every(r => r.type === 'entity');\n      if (newEtag && isOnlyEntities) {\n        await cache.set<CacheItem>(CACHE_KEY, {\n          etag: newEtag,\n          value: parseResults as CatalogProcessorEntityResult[],\n        });\n      }\n\n      emit(processingResult.refresh(`${location.type}:${location.target}`));\n    } catch (error) {\n      assertError(error);\n      const message = `Unable to read ${location.type}, ${error}`.substring(\n        0,\n        5000,\n      );\n      if (error.name === 'NotModifiedError' && cacheItem) {\n        for (const parseResult of cacheItem.value) {\n          emit(parseResult);\n        }\n        emit(processingResult.refresh(`${location.type}:${location.target}`));\n      } else if (error.name === 'NotFoundError') {\n        if (!optional) {\n          emit(processingResult.notFoundError(location, message));\n        }\n      } else {\n        emit(processingResult.generalError(location, message));\n      }\n    }\n\n    return true;\n  }\n\n  private async doRead(\n    location: string,\n    etag?: string,\n  ): Promise<{ response: { data: Buffer; url: string }[]; etag?: string }> {\n    // Does it contain globs? I.e. does it contain asterisks or question marks\n    // (no curly braces for now)\n\n    const { filepath } = parseGitUrl(location);\n    if (filepath?.match(/[*?]/)) {\n      const limiter = limiterFactory(5);\n      const response = await this.options.reader.search(location, { etag });\n      const output = response.files.map(async file => ({\n        url: file.url,\n        data: await limiter(file.content),\n      }));\n      return { response: await Promise.all(output), etag: response.etag };\n    }\n\n    const data = await this.options.reader.readUrl(location, { etag });\n    return {\n      response: [{ url: location, data: await data.buffer() }],\n      etag: data.etag,\n    };\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, stringifyLocationRef } from '@backstage/catalog-model';\nimport lodash from 'lodash';\nimport yaml from 'yaml';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport {\n  CatalogProcessorParser,\n  CatalogProcessorResult,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\n\n/** @public */\nexport function* parseEntityYaml(\n  data: Buffer,\n  location: LocationSpec,\n): Iterable<CatalogProcessorResult> {\n  let documents: yaml.Document.Parsed[];\n  try {\n    documents = yaml.parseAllDocuments(data.toString('utf8')).filter(d => d);\n  } catch (e) {\n    const loc = stringifyLocationRef(location);\n    const message = `Failed to parse YAML at ${loc}, ${e}`;\n    yield processingResult.generalError(location, message);\n    return;\n  }\n\n  for (const document of documents) {\n    if (document.errors?.length) {\n      const loc = stringifyLocationRef(location);\n      const message = `YAML error at ${loc}, ${document.errors[0]}`;\n      yield processingResult.generalError(location, message);\n    } else {\n      const json = document.toJSON();\n      if (lodash.isPlainObject(json)) {\n        yield processingResult.entity(location, json as Entity);\n      } else if (json === null) {\n        // Ignore null values, these happen if there is an empty document in the\n        // YAML file, for example if --- is added to the end of the file.\n      } else {\n        const message = `Expected object at root, got ${typeof json}`;\n        yield processingResult.generalError(location, message);\n      }\n    }\n  }\n}\n\nexport const defaultEntityDataParser: CatalogProcessorParser =\n  async function* defaultEntityDataParser({ data, location }) {\n    for (const e of parseEntityYaml(data, location)) {\n      yield e;\n    }\n  };\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Function that returns the catalog processing interval in seconds.\n * @public\n */\nexport type ProcessingIntervalFunction = () => number;\n\n/**\n * Creates a function that returns a random processing interval between minSeconds and maxSeconds.\n * @returns A {@link ProcessingIntervalFunction} that provides the next processing interval\n * @public\n */\nexport function createRandomProcessingInterval(options: {\n  minSeconds: number;\n  maxSeconds: number;\n}): ProcessingIntervalFunction {\n  const { minSeconds, maxSeconds } = options;\n  return () => {\n    return Math.random() * (maxSeconds - minSeconds) + minSeconds;\n  };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  entityEnvelopeSchemaValidator,\n  entitySchemaValidator,\n  LocationEntity,\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport path from 'path';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\n\nexport function isLocationEntity(entity: Entity): entity is LocationEntity {\n  return entity.kind === 'Location';\n}\n\nexport function getEntityLocationRef(entity: Entity): string {\n  const ref = entity.metadata.annotations?.[ANNOTATION_LOCATION];\n  if (!ref) {\n    const entityRef = stringifyEntityRef(entity);\n    throw new InputError(\n      `Entity '${entityRef}' does not have the annotation ${ANNOTATION_LOCATION}`,\n    );\n  }\n  return ref;\n}\n\nexport function getEntityOriginLocationRef(entity: Entity): string {\n  const ref = entity.metadata.annotations?.[ANNOTATION_ORIGIN_LOCATION];\n  if (!ref) {\n    const entityRef = stringifyEntityRef(entity);\n    throw new InputError(\n      `Entity '${entityRef}' does not have the annotation ${ANNOTATION_ORIGIN_LOCATION}`,\n    );\n  }\n  return ref;\n}\n\nexport function toAbsoluteUrl(\n  integrations: ScmIntegrationRegistry,\n  base: LocationSpec,\n  type: string,\n  target: string,\n): string {\n  if (base.type !== type) {\n    return target;\n  }\n  try {\n    if (type === 'file') {\n      if (target.startsWith('.')) {\n        return path.join(path.dirname(base.target), target);\n      }\n      return target;\n    } else if (type === 'url') {\n      return integrations.resolveUrl({ url: target, base: base.target });\n    }\n    return target;\n  } catch (e) {\n    return target;\n  }\n}\n\nexport function isObject(value: JsonValue | undefined): value is JsonObject {\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n\nexport const validateEntity = entitySchemaValidator();\n\nexport const validateEntityEnvelope = entityEnvelopeSchemaValidator();\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  LocationEntityV1alpha1,\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  stringifyEntityRef,\n  stringifyLocationRef,\n} from '@backstage/catalog-model';\nimport { createHash } from 'crypto';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\n\nexport function locationSpecToMetadataName(location: LocationSpec) {\n  const hash = createHash('sha1')\n    .update(`${location.type}:${location.target}`)\n    .digest('hex');\n  return `generated-${hash}`;\n}\n\n/** @public */\nexport function locationSpecToLocationEntity(opts: {\n  location: LocationSpec;\n  parentEntity?: Entity;\n}): LocationEntityV1alpha1 {\n  const location = opts.location;\n  const parentEntity = opts.parentEntity;\n\n  let ownLocation: string;\n  let originLocation: string;\n  if (parentEntity) {\n    const maybeOwnLocation =\n      parentEntity.metadata.annotations?.[ANNOTATION_LOCATION];\n    if (!maybeOwnLocation) {\n      throw new Error(\n        `Parent entity '${stringifyEntityRef(\n          parentEntity,\n        )}' of location '${stringifyLocationRef(\n          location,\n        )}' does not have a location annotation`,\n      );\n    }\n    ownLocation = maybeOwnLocation;\n    const maybeOriginLocation =\n      parentEntity.metadata.annotations?.[ANNOTATION_ORIGIN_LOCATION];\n    if (!maybeOriginLocation) {\n      throw new Error(\n        `Parent entity '${stringifyEntityRef(\n          parentEntity,\n        )}' of location '${stringifyLocationRef(\n          location,\n        )}' does not have an origin location annotation`,\n      );\n    }\n    originLocation = maybeOriginLocation;\n  } else {\n    ownLocation = stringifyLocationRef(location);\n    originLocation = ownLocation;\n  }\n\n  const result: LocationEntityV1alpha1 = {\n    apiVersion: 'backstage.io/v1alpha1',\n    kind: 'Location',\n    metadata: {\n      name: locationSpecToMetadataName(location),\n      annotations: {\n        [ANNOTATION_LOCATION]: ownLocation,\n        [ANNOTATION_ORIGIN_LOCATION]: originLocation,\n      },\n    },\n    spec: {\n      type: location.type,\n      target: location.target,\n      presence: location.presence,\n    },\n  };\n\n  return result;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport path from 'path';\nimport { getEntityLocationRef } from '../../processing/util';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n} from '@backstage/plugin-catalog-node';\nimport { locationSpecToLocationEntity } from '../../util/conversion';\n\nexport class ConfigLocationEntityProvider implements EntityProvider {\n  constructor(private readonly config: Config) {}\n\n  getProviderName(): string {\n    return 'ConfigLocationProvider';\n  }\n\n  async connect(connection: EntityProviderConnection): Promise<void> {\n    const entities = this.getEntitiesFromConfig();\n    await connection.applyMutation({\n      type: 'full',\n      entities,\n    });\n\n    if (this.config.subscribe) {\n      let currentKey = JSON.stringify(entities);\n\n      this.config.subscribe(() => {\n        const newEntities = this.getEntitiesFromConfig();\n        const newKey = JSON.stringify(newEntities);\n\n        if (currentKey !== newKey) {\n          currentKey = newKey;\n          connection.applyMutation({\n            type: 'full',\n            entities: newEntities,\n          });\n        }\n      });\n    }\n  }\n\n  private getEntitiesFromConfig() {\n    const locationConfigs =\n      this.config.getOptionalConfigArray('catalog.locations') ?? [];\n\n    return locationConfigs.map(location => {\n      const type = location.getString('type');\n      const target = location.getString('target');\n      const entity = locationSpecToLocationEntity({\n        location: {\n          type,\n          target: type === 'file' ? path.resolve(target) : target,\n        },\n      });\n      const locationKey = getEntityLocationRef(entity);\n      return { entity, locationKey };\n    });\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from '@backstage/catalog-client';\nimport { ConflictError, NotFoundError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport { v4 as uuid } from 'uuid';\nimport {\n  DbLocationsRow,\n  DbRefreshStateRow,\n  DbSearchRow,\n} from '../../database/tables';\nimport { getEntityLocationRef } from '../../processing/util';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n} from '@backstage/plugin-catalog-node';\nimport { locationSpecToLocationEntity } from '../../util/conversion';\nimport { LocationInput, LocationStore } from '../../service/types';\nimport {\n  ANNOTATION_ORIGIN_LOCATION,\n  CompoundEntityRef,\n  parseLocationRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\n\nexport class DefaultLocationStore implements LocationStore, EntityProvider {\n  private _connection: EntityProviderConnection | undefined;\n\n  constructor(private readonly db: Knex) {}\n\n  getProviderName(): string {\n    return 'DefaultLocationStore';\n  }\n\n  async createLocation(input: LocationInput): Promise<Location> {\n    const location = await this.db.transaction(async tx => {\n      // Attempt to find a previous location matching the input\n      const previousLocations = await this.locations(tx);\n      // TODO: when location id's are a compilation of input target we can remove this full\n      // lookup of locations first and just grab the by that instead.\n      const previousLocation = previousLocations.some(\n        l => input.type === l.type && input.target === l.target,\n      );\n      if (previousLocation) {\n        throw new ConflictError(\n          `Location ${input.type}:${input.target} already exists`,\n        );\n      }\n\n      const inner: DbLocationsRow = {\n        id: uuid(),\n        type: input.type,\n        target: input.target,\n      };\n\n      await tx<DbLocationsRow>('locations').insert(inner);\n\n      return inner;\n    });\n    const entity = locationSpecToLocationEntity({ location });\n    await this.connection.applyMutation({\n      type: 'delta',\n      added: [{ entity, locationKey: getEntityLocationRef(entity) }],\n      removed: [],\n    });\n\n    return location;\n  }\n\n  async listLocations(): Promise<Location[]> {\n    return await this.locations();\n  }\n\n  async getLocation(id: string): Promise<Location> {\n    const items = await this.db<DbLocationsRow>('locations')\n      .where({ id })\n      .select();\n\n    if (!items.length) {\n      throw new NotFoundError(`Found no location with ID ${id}`);\n    }\n    return items[0];\n  }\n\n  async deleteLocation(id: string): Promise<void> {\n    if (!this.connection) {\n      throw new Error('location store is not initialized');\n    }\n\n    const deleted = await this.db.transaction(async tx => {\n      const [location] = await tx<DbLocationsRow>('locations')\n        .where({ id })\n        .select();\n\n      if (!location) {\n        throw new NotFoundError(`Found no location with ID ${id}`);\n      }\n\n      await tx<DbLocationsRow>('locations').where({ id }).del();\n      return location;\n    });\n    const entity = locationSpecToLocationEntity({ location: deleted });\n    await this.connection.applyMutation({\n      type: 'delta',\n      added: [],\n      removed: [{ entity, locationKey: getEntityLocationRef(entity) }],\n    });\n  }\n\n  async getLocationByEntity(entityRef: CompoundEntityRef): Promise<Location> {\n    const entityRefString = stringifyEntityRef(entityRef);\n\n    const [entity] = await this.db<DbRefreshStateRow>('refresh_state')\n      .where({ entity_ref: entityRefString })\n      .select('entity_id')\n      .limit(1);\n    if (!entity) {\n      throw new NotFoundError(`found no entity for ref ${entityRefString}`);\n    }\n\n    const [locationKeyValue] = await this.db<DbSearchRow>('search')\n      .where({\n        entity_id: entity.entity_id,\n        key: `metadata.annotations.${ANNOTATION_ORIGIN_LOCATION}`,\n      })\n      .select('value')\n      .limit(1);\n    if (!locationKeyValue) {\n      throw new NotFoundError(\n        `found no origin annotation for ref ${entityRefString}`,\n      );\n    }\n\n    const { type, target } = parseLocationRef(entityRefString);\n    // const kind, target = split[0], split[1];\n    const [location] = await this.db<DbLocationsRow>('locations')\n      .where({ type, target })\n      .select()\n      .limit(1);\n\n    // select * from locations where type = 'split(prev)[0]'\n    if (!location) {\n      throw new NotFoundError(\n        `Found no location with type ${type} and target ${target}`,\n      );\n    }\n    return location;\n  }\n\n  private get connection(): EntityProviderConnection {\n    if (!this._connection) {\n      throw new Error('location store is not initialized');\n    }\n\n    return this._connection;\n  }\n\n  async connect(connection: EntityProviderConnection): Promise<void> {\n    this._connection = connection;\n\n    const locations = await this.locations();\n\n    const entities = locations.map(location => {\n      const entity = locationSpecToLocationEntity({ location });\n      return { entity, locationKey: getEntityLocationRef(entity) };\n    });\n\n    await this.connection.applyMutation({\n      type: 'full',\n      entities,\n    });\n  }\n\n  private async locations(dbOrTx: Knex.Transaction | Knex = this.db) {\n    const locations = await dbOrTx<DbLocationsRow>('locations').select();\n    return (\n      locations\n        // TODO(blam): We should create a mutation to remove this location for everyone\n        // eventually when it's all done and dusted\n        .filter(({ type }) => type !== 'bootstrap')\n        .map(item => ({\n          id: item.id,\n          target: item.target,\n          type: item.type,\n        }))\n    );\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { Entity } from '@backstage/catalog-model';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { LocationAnalyzer } from './types';\nimport {\n  AnalyzeLocationRequest,\n  AnalyzeLocationResponse,\n} from '@backstage/plugin-catalog-common';\nimport { ScmLocationAnalyzer } from '@backstage/plugin-catalog-node';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nexport class RepoLocationAnalyzer implements LocationAnalyzer {\n  private readonly logger: LoggerService;\n  private readonly scmIntegrations: ScmIntegrationRegistry;\n  private readonly analyzers: ScmLocationAnalyzer[];\n\n  constructor(\n    logger: LoggerService,\n    scmIntegrations: ScmIntegrationRegistry,\n    analyzers: ScmLocationAnalyzer[],\n  ) {\n    this.logger = logger;\n    this.scmIntegrations = scmIntegrations;\n    this.analyzers = analyzers;\n  }\n  async analyzeLocation(\n    request: AnalyzeLocationRequest,\n  ): Promise<AnalyzeLocationResponse> {\n    const integration = this.scmIntegrations.byUrl(request.location.target);\n    const { owner, name } = parseGitUrl(request.location.target);\n\n    let annotationPrefix;\n    switch (integration?.type) {\n      case 'azure':\n        annotationPrefix = 'dev.azure.com';\n        break;\n      case 'bitbucket':\n        annotationPrefix = 'bitbucket.org';\n        break;\n      case 'github':\n        annotationPrefix = 'github.com';\n        break;\n      case 'gitlab':\n        annotationPrefix = 'gitlab.com';\n        break;\n      default:\n        break;\n    }\n\n    const analyzer = this.analyzers.find(a =>\n      a.supports(request.location.target),\n    );\n    if (analyzer) {\n      const analyzerResult = await analyzer.analyze({\n        url: request.location.target,\n      });\n      if (analyzerResult.existing.length > 0) {\n        this.logger.debug(\n          `entity for ${request.location.target} already exists.`,\n        );\n        return {\n          existingEntityFiles: analyzerResult.existing,\n          generateEntities: [],\n        };\n      }\n    }\n\n    const entity: Entity = {\n      apiVersion: 'backstage.io/v1alpha1',\n      kind: 'Component',\n      metadata: {\n        name: name,\n      },\n      spec: { type: 'other', lifecycle: 'unknown' },\n    };\n\n    if (annotationPrefix) {\n      entity.metadata.annotations = {\n        [`${annotationPrefix}/project-slug`]: `${owner}/${name}`,\n      };\n    }\n\n    this.logger.debug(`entity created for ${request.location.target}`);\n    return {\n      existingEntityFiles: [],\n      generateEntities: [{ entity, fields: [] }],\n    };\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isDatabaseConflictError } from '@backstage/backend-common';\nimport { ConflictError, InputError } from '@backstage/errors';\nimport { DateTime } from 'luxon';\n\n/**\n * Takes a TIMESTAMP type column and converts it to a DateTime.\n *\n * Some engines return the SQL string form (e.g. 'YYYY-MM-DD hh:mm:ss'), some\n * return ISO string form (e.g. 'YYYY-MM-DDThh:mm:ss.SSSZ'), some return a js\n * Date object.\n */\nexport function timestampToDateTime(input: Date | string): DateTime {\n  try {\n    if (typeof input === 'object') {\n      return DateTime.fromJSDate(input).toUTC();\n    }\n\n    const result = input.includes(' ')\n      ? DateTime.fromSQL(input, { zone: 'utc' })\n      : DateTime.fromISO(input, { zone: 'utc' });\n    if (!result.isValid) {\n      throw new TypeError('Not valid');\n    }\n\n    return result;\n  } catch (e) {\n    throw new InputError(`Failed to parse database timestamp ${input}`, e);\n  }\n}\n\n/**\n * Rethrows an error, possibly translating it to a more precise error type.\n */\nexport function rethrowError(e: any): never {\n  if (isDatabaseConflictError(e)) {\n    throw new ConflictError(`Rejected due to a conflicting entity`, e);\n  }\n\n  throw e;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Counter,\n  CounterConfiguration,\n  Gauge,\n  GaugeConfiguration,\n  Histogram,\n  HistogramConfiguration,\n  register,\n  Summary,\n  SummaryConfiguration,\n} from 'prom-client';\n\nexport function createCounterMetric<T extends string>(\n  config: CounterConfiguration<T>,\n): Counter<T> {\n  let metric = register.getSingleMetric(config.name);\n  if (!metric) {\n    metric = new Counter<T>(config);\n    register.registerMetric(metric);\n  }\n  return metric as Counter<T>;\n}\n\nexport function createGaugeMetric<T extends string>(\n  config: GaugeConfiguration<T>,\n): Gauge<T> {\n  let metric = register.getSingleMetric(config.name);\n  if (!metric) {\n    metric = new Gauge<T>(config);\n    register.registerMetric(metric);\n  }\n  return metric as Gauge<T>;\n}\n\nexport function createSummaryMetric<T extends string>(\n  config: SummaryConfiguration<T>,\n): Summary<T> {\n  let metric = register.getSingleMetric(config.name);\n  if (!metric) {\n    metric = new Summary<T>(config);\n    register.registerMetric(metric);\n  }\n\n  return metric as Summary<T>;\n}\n\nexport function createHistogramMetric<T extends string>(\n  config: HistogramConfiguration<T>,\n): Histogram<T> {\n  let metric = register.getSingleMetric(config.name);\n  if (!metric) {\n    metric = new Histogram<T>(config);\n    register.registerMetric(metric);\n  }\n\n  return metric as Histogram<T>;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { createGaugeMetric } from '../util/metrics';\nimport { DbRefreshStateRow, DbRelationsRow, DbLocationsRow } from './tables';\nimport { metrics } from '@opentelemetry/api';\nimport { parseEntityRef } from '@backstage/catalog-model';\n\nexport function initDatabaseMetrics(knex: Knex) {\n  const seenProm = new Set<string>();\n  const seen = new Set<string>();\n  const meter = metrics.getMeter('default');\n  return {\n    entities_count_prom: createGaugeMetric({\n      name: 'catalog_entities_count',\n      help: 'Total amount of entities in the catalog. DEPRECATED: Please use opentelemetry metrics instead.',\n      labelNames: ['kind'],\n      async collect() {\n        const result = await knex<DbRefreshStateRow>('refresh_state').select(\n          'entity_ref',\n        );\n        const results = result\n          .map(row => row.entity_ref.split(':')[0])\n          .reduce((acc, e) => acc.set(e, (acc.get(e) || 0) + 1), new Map());\n\n        results.forEach((value, key) => {\n          seenProm.add(key);\n          this.set({ kind: key }, value);\n        });\n\n        // Set all the entities that were not seenProm to 0 and delete them from the seenProm set.\n        seenProm.forEach(key => {\n          if (!results.has(key)) {\n            this.set({ kind: key }, 0);\n            seenProm.delete(key);\n          }\n        });\n      },\n    }),\n    registered_locations_prom: createGaugeMetric({\n      name: 'catalog_registered_locations_count',\n      help: 'Total amount of registered locations in the catalog. DEPRECATED: Please use opentelemetry metrics instead.',\n      async collect() {\n        const total = await knex<DbLocationsRow>('locations').count({\n          count: '*',\n        });\n        this.set(Number(total[0].count));\n      },\n    }),\n    relations_prom: createGaugeMetric({\n      name: 'catalog_relations_count',\n      help: 'Total amount of relations between entities. DEPRECATED: Please use opentelemetry metrics instead.',\n      async collect() {\n        const total = await knex<DbRelationsRow>('relations').count({\n          count: '*',\n        });\n        this.set(Number(total[0].count));\n      },\n    }),\n    entities_count: meter\n      .createObservableGauge('catalog_entities_count', {\n        description: 'Total amount of entities in the catalog',\n      })\n      .addCallback(async gauge => {\n        const result = await knex<DbRefreshStateRow>('refresh_state').select(\n          'entity_ref',\n        );\n        const results = result\n          .map(row => parseEntityRef(row.entity_ref).kind)\n          .reduce((acc, e) => acc.set(e, (acc.get(e) || 0) + 1), new Map());\n\n        results.forEach((value, key) => {\n          seen.add(key);\n          gauge.observe(value, { kind: key });\n        });\n\n        // Set all the entities that were not seen to 0 and delete them from the seen set.\n        seen.forEach(key => {\n          if (!results.has(key)) {\n            gauge.observe(0, { kind: key });\n            seen.delete(key);\n          }\n        });\n      }),\n    registered_locations: meter\n      .createObservableGauge('catalog_registered_locations_count', {\n        description: 'Total amount of registered locations in the catalog',\n      })\n      .addCallback(async gauge => {\n        const total = await knex<DbLocationsRow>('locations').count({\n          count: '*',\n        });\n        gauge.observe(Number(total[0].count));\n      }),\n    relations: meter\n      .createObservableGauge('catalog_relations_count', {\n        description: 'Total amount of relations between entities',\n      })\n      .addCallback(async gauge => {\n        const total = await knex<DbRelationsRow>('relations').count({\n          count: '*',\n        });\n        gauge.observe(Number(total[0].count));\n      }),\n  };\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { DbRefreshStateRow } from '../../tables';\n\n/**\n * Checks whether a refresh state exists for the given entity that has a\n * location key that does not match the provided location key.\n *\n * @returns The conflicting key if there is one.\n */\nexport async function checkLocationKeyConflict(options: {\n  tx: Knex.Transaction;\n  entityRef: string;\n  locationKey?: string;\n}): Promise<string | undefined> {\n  const { tx, entityRef, locationKey } = options;\n\n  const row = await tx<DbRefreshStateRow>('refresh_state')\n    .select('location_key')\n    .where('entity_ref', entityRef)\n    .first();\n\n  const conflictingKey = row?.location_key;\n\n  // If there's no existing key we can't have a conflict\n  if (!conflictingKey) {\n    return undefined;\n  }\n\n  if (conflictingKey !== locationKey) {\n    return conflictingKey;\n  }\n  return undefined;\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, stringifyEntityRef } from '@backstage/catalog-model';\nimport { Knex } from 'knex';\nimport { DbRefreshStateRow } from '../../tables';\nimport { v4 as uuid } from 'uuid';\nimport { isDatabaseConflictError } from '@backstage/backend-common';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\n/**\n * Attempts to insert a new refresh state row for the given entity, returning\n * true if successful and false if there was a conflict.\n */\nexport async function insertUnprocessedEntity(options: {\n  tx: Knex.Transaction;\n  entity: Entity;\n  hash: string;\n  locationKey?: string;\n  logger: LoggerService;\n}): Promise<boolean> {\n  const { tx, entity, hash, logger, locationKey } = options;\n\n  const entityRef = stringifyEntityRef(entity);\n  const serializedEntity = JSON.stringify(entity);\n\n  try {\n    let query = tx<DbRefreshStateRow>('refresh_state').insert({\n      entity_id: uuid(),\n      entity_ref: entityRef,\n      unprocessed_entity: serializedEntity,\n      unprocessed_hash: hash,\n      errors: '',\n      location_key: locationKey,\n      next_update_at: tx.fn.now(),\n      last_discovery_at: tx.fn.now(),\n    });\n\n    // TODO(Rugvip): only tested towards MySQL, Postgres and SQLite.\n    // We have to do this because the only way to detect if there was a conflict with\n    // SQLite is to catch the error, while Postgres needs to ignore the conflict to not\n    // break the ongoing transaction.\n    if (tx.client.config.client.includes('pg')) {\n      query = query.onConflict('entity_ref').ignore() as any; // type here does not match runtime\n    }\n\n    // Postgres gives as an object with rowCount, SQLite gives us an array\n    const result: { rowCount?: number; length?: number } = await query;\n    return result.rowCount === 1 || result.length === 1;\n  } catch (error) {\n    // SQLite, or MySQL reached this rather than the rowCount check above\n    if (!isDatabaseConflictError(error)) {\n      throw error;\n    } else {\n      logger.debug(`Unable to insert a new refresh state row, ${error}`);\n      return false;\n    }\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, stringifyEntityRef } from '@backstage/catalog-model';\nimport { Knex } from 'knex';\nimport { DbRefreshStateRow } from '../../tables';\n\n/**\n * Attempts to update an existing refresh state row, returning true if it was\n * updated and false if there was no entity with a matching ref and location key.\n *\n * Updating the entity will also cause it to be scheduled for immediate processing.\n */\nexport async function updateUnprocessedEntity(options: {\n  tx: Knex.Transaction;\n  entity: Entity;\n  hash: string;\n  locationKey?: string;\n}): Promise<boolean> {\n  const { tx, entity, hash, locationKey } = options;\n\n  const entityRef = stringifyEntityRef(entity);\n  const serializedEntity = JSON.stringify(entity);\n\n  const refreshResult = await tx<DbRefreshStateRow>('refresh_state')\n    .update({\n      unprocessed_entity: serializedEntity,\n      unprocessed_hash: hash,\n      location_key: locationKey,\n      last_discovery_at: tx.fn.now(),\n      // We only get to this point if a processed entity actually had any changes, or\n      // if an entity provider requested this mutation, meaning that we can safely\n      // bump the deferred entities to the front of the queue for immediate processing.\n      next_update_at: tx.fn.now(),\n    })\n    .where('entity_ref', entityRef)\n    .andWhere(inner => {\n      if (!locationKey) {\n        return inner.whereNull('location_key');\n      }\n      return inner\n        .where('location_key', locationKey)\n        .orWhereNull('location_key');\n    });\n\n  return refreshResult === 1;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { createHash } from 'crypto';\nimport stableStringify from 'fast-json-stable-stringify';\n\nexport function generateStableHash(entity: Entity) {\n  return createHash('sha1')\n    .update(stableStringify({ ...entity }))\n    .digest('hex');\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @public */\nexport const CATALOG_CONFLICTS_TOPIC = 'experimental.catalog.conflict';\n/** @public */\nexport const CATALOG_ERRORS_TOPIC = 'experimental.catalog.errors';\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, stringifyEntityRef } from '@backstage/catalog-model';\nimport { ConflictError } from '@backstage/errors';\nimport { DeferredEntity } from '@backstage/plugin-catalog-node';\nimport { Knex } from 'knex';\nimport lodash from 'lodash';\nimport { ProcessingIntervalFunction } from '../processing';\nimport { rethrowError, timestampToDateTime } from './conversion';\nimport { initDatabaseMetrics } from './metrics';\nimport {\n  DbRefreshKeysRow,\n  DbRefreshStateReferencesRow,\n  DbRefreshStateRow,\n  DbRelationsRow,\n} from './tables';\nimport {\n  GetProcessableEntitiesResult,\n  ListParentsOptions,\n  ListParentsResult,\n  ProcessingDatabase,\n  RefreshStateItem,\n  Transaction,\n  UpdateEntityCacheOptions,\n  UpdateProcessedEntityOptions,\n} from './types';\nimport { checkLocationKeyConflict } from './operations/refreshState/checkLocationKeyConflict';\nimport { insertUnprocessedEntity } from './operations/refreshState/insertUnprocessedEntity';\nimport { updateUnprocessedEntity } from './operations/refreshState/updateUnprocessedEntity';\nimport { generateStableHash } from './util';\nimport { EventBroker, EventParams } from '@backstage/plugin-events-node';\nimport { DateTime } from 'luxon';\nimport { CATALOG_CONFLICTS_TOPIC } from '../constants';\nimport { CatalogConflictEventPayload } from '../catalog/types';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\n// The number of items that are sent per batch to the database layer, when\n// doing .batchInsert calls to knex. This needs to be low enough to not cause\n// errors in the underlying engine due to exceeding query limits, but large\n// enough to get the speed benefits.\nconst BATCH_SIZE = 50;\n\nexport class DefaultProcessingDatabase implements ProcessingDatabase {\n  constructor(\n    private readonly options: {\n      database: Knex;\n      logger: LoggerService;\n      refreshInterval: ProcessingIntervalFunction;\n      eventBroker?: EventBroker;\n    },\n  ) {\n    initDatabaseMetrics(options.database);\n  }\n\n  async updateProcessedEntity(\n    txOpaque: Transaction,\n    options: UpdateProcessedEntityOptions,\n  ): Promise<{ previous: { relations: DbRelationsRow[] } }> {\n    const tx = txOpaque as Knex.Transaction;\n    const {\n      id,\n      processedEntity,\n      resultHash,\n      errors,\n      relations,\n      deferredEntities,\n      refreshKeys,\n      locationKey,\n    } = options;\n    const configClient = tx.client.config.client;\n    const refreshResult = await tx<DbRefreshStateRow>('refresh_state')\n      .update({\n        processed_entity: JSON.stringify(processedEntity),\n        result_hash: resultHash,\n        errors,\n        location_key: locationKey,\n      })\n      .where('entity_id', id)\n      .andWhere(inner => {\n        if (!locationKey) {\n          return inner.whereNull('location_key');\n        }\n        return inner\n          .where('location_key', locationKey)\n          .orWhereNull('location_key');\n      });\n    if (refreshResult === 0) {\n      throw new ConflictError(\n        `Conflicting write of processing result for ${id} with location key '${locationKey}'`,\n      );\n    }\n    const sourceEntityRef = stringifyEntityRef(processedEntity);\n\n    // Schedule all deferred entities for future processing.\n    await this.addUnprocessedEntities(tx, {\n      entities: deferredEntities,\n      sourceEntityRef,\n    });\n\n    // Delete old relations\n    // NOTE(freben): knex implemented support for returning() on update queries for sqlite, but at the current time of writing (Sep 2022) not for delete() queries.\n    let previousRelationRows: DbRelationsRow[];\n    if (configClient.includes('sqlite3') || configClient.includes('mysql')) {\n      previousRelationRows = await tx<DbRelationsRow>('relations')\n        .select('*')\n        .where({ originating_entity_id: id });\n      await tx<DbRelationsRow>('relations')\n        .where({ originating_entity_id: id })\n        .delete();\n    } else {\n      previousRelationRows = await tx<DbRelationsRow>('relations')\n        .where({ originating_entity_id: id })\n        .delete()\n        .returning('*');\n    }\n\n    // Batch insert new relations\n    const relationRows: DbRelationsRow[] = relations.map(\n      ({ source, target, type }) => ({\n        originating_entity_id: id,\n        source_entity_ref: stringifyEntityRef(source),\n        target_entity_ref: stringifyEntityRef(target),\n        type,\n      }),\n    );\n\n    await tx.batchInsert(\n      'relations',\n      this.deduplicateRelations(relationRows),\n      BATCH_SIZE,\n    );\n\n    // Delete old refresh keys\n    await tx<DbRefreshKeysRow>('refresh_keys')\n      .where({ entity_id: id })\n      .delete();\n\n    // Insert the refresh keys for the processed entity\n    await tx.batchInsert(\n      'refresh_keys',\n      refreshKeys.map(k => ({\n        entity_id: id,\n        key: k.key,\n      })),\n      BATCH_SIZE,\n    );\n\n    return {\n      previous: {\n        relations: previousRelationRows,\n      },\n    };\n  }\n\n  async updateProcessedEntityErrors(\n    txOpaque: Transaction,\n    options: UpdateProcessedEntityOptions,\n  ): Promise<void> {\n    const tx = txOpaque as Knex.Transaction;\n    const { id, errors, resultHash } = options;\n\n    await tx<DbRefreshStateRow>('refresh_state')\n      .update({\n        errors,\n        result_hash: resultHash,\n      })\n      .where('entity_id', id);\n  }\n\n  async updateEntityCache(\n    txOpaque: Transaction,\n    options: UpdateEntityCacheOptions,\n  ): Promise<void> {\n    const tx = txOpaque as Knex.Transaction;\n    const { id, state } = options;\n\n    await tx<DbRefreshStateRow>('refresh_state')\n      .update({ cache: JSON.stringify(state ?? {}) })\n      .where('entity_id', id);\n  }\n\n  async getProcessableEntities(\n    txOpaque: Transaction,\n    request: { processBatchSize: number },\n  ): Promise<GetProcessableEntitiesResult> {\n    const tx = txOpaque as Knex.Transaction;\n\n    let itemsQuery = tx<DbRefreshStateRow>('refresh_state').select();\n\n    // This avoids duplication of work because of race conditions and is\n    // also fast because locked rows are ignored rather than blocking.\n    // It's only available in MySQL and PostgreSQL\n    if (['mysql', 'mysql2', 'pg'].includes(tx.client.config.client)) {\n      itemsQuery = itemsQuery.forUpdate().skipLocked();\n    }\n\n    const items = await itemsQuery\n      .where('next_update_at', '<=', tx.fn.now())\n      .limit(request.processBatchSize)\n      .orderBy('next_update_at', 'asc');\n\n    const interval = this.options.refreshInterval();\n\n    const nextUpdateAt = (refreshInterval: number) => {\n      if (tx.client.config.client.includes('sqlite3')) {\n        return tx.raw(`datetime('now', ?)`, [`${refreshInterval} seconds`]);\n      }\n\n      if (tx.client.config.client.includes('mysql')) {\n        return tx.raw(`now() + interval ${refreshInterval} second`);\n      }\n\n      return tx.raw(`now() + interval '${refreshInterval} seconds'`);\n    };\n\n    await tx<DbRefreshStateRow>('refresh_state')\n      .whereIn(\n        'entity_ref',\n        items.map(i => i.entity_ref),\n      )\n      .update({\n        next_update_at: nextUpdateAt(interval),\n      });\n\n    return {\n      items: items.map(\n        i =>\n          ({\n            id: i.entity_id,\n            entityRef: i.entity_ref,\n            unprocessedEntity: JSON.parse(i.unprocessed_entity) as Entity,\n            processedEntity: i.processed_entity\n              ? (JSON.parse(i.processed_entity) as Entity)\n              : undefined,\n            resultHash: i.result_hash || '',\n            nextUpdateAt: timestampToDateTime(i.next_update_at),\n            lastDiscoveryAt: timestampToDateTime(i.last_discovery_at),\n            state: i.cache ? JSON.parse(i.cache) : undefined,\n            errors: i.errors,\n            locationKey: i.location_key,\n          } as RefreshStateItem),\n      ),\n    };\n  }\n\n  async listParents(\n    txOpaque: Transaction,\n    options: ListParentsOptions,\n  ): Promise<ListParentsResult> {\n    const tx = txOpaque as Knex.Transaction;\n\n    const rows = await tx<DbRefreshStateReferencesRow>(\n      'refresh_state_references',\n    )\n      .where({ target_entity_ref: options.entityRef })\n      .select();\n\n    const entityRefs = rows.map(r => r.source_entity_ref!).filter(Boolean);\n\n    return { entityRefs };\n  }\n\n  async transaction<T>(fn: (tx: Transaction) => Promise<T>): Promise<T> {\n    try {\n      let result: T | undefined = undefined;\n\n      await this.options.database.transaction(\n        async tx => {\n          // We can't return here, as knex swallows the return type in case the transaction is rolled back:\n          // https://github.com/knex/knex/blob/e37aeaa31c8ef9c1b07d2e4d3ec6607e557d800d/lib/transaction.js#L136\n          result = await fn(tx);\n        },\n        {\n          // If we explicitly trigger a rollback, don't fail.\n          doNotRejectOnRollback: true,\n        },\n      );\n\n      return result!;\n    } catch (e) {\n      this.options.logger.debug(`Error during transaction, ${e}`);\n      throw rethrowError(e);\n    }\n  }\n\n  private deduplicateRelations(rows: DbRelationsRow[]): DbRelationsRow[] {\n    return lodash.uniqBy(\n      rows,\n      r => `${r.source_entity_ref}:${r.target_entity_ref}:${r.type}`,\n    );\n  }\n\n  /**\n   * Add a set of deferred entities for processing.\n   * The entities will be added at the front of the processing queue.\n   */\n  private async addUnprocessedEntities(\n    txOpaque: Transaction,\n    options: {\n      sourceEntityRef: string;\n      entities: DeferredEntity[];\n    },\n  ): Promise<void> {\n    const tx = txOpaque as Knex.Transaction;\n\n    // Keeps track of the entities that we end up inserting to update refresh_state_references afterwards\n    const stateReferences = new Array<string>();\n\n    // Upsert all of the unprocessed entities into the refresh_state table, by\n    // their entity ref.\n    for (const { entity, locationKey } of options.entities) {\n      const entityRef = stringifyEntityRef(entity);\n      const hash = generateStableHash(entity);\n\n      const updated = await updateUnprocessedEntity({\n        tx,\n        entity,\n        hash,\n        locationKey,\n      });\n      if (updated) {\n        stateReferences.push(entityRef);\n        continue;\n      }\n\n      const inserted = await insertUnprocessedEntity({\n        tx,\n        entity,\n        hash,\n        locationKey,\n        logger: this.options.logger,\n      });\n      if (inserted) {\n        stateReferences.push(entityRef);\n        continue;\n      }\n\n      // If the row can't be inserted, we have a conflict, but it could be either\n      // because of a conflicting locationKey or a race with another instance, so check\n      // whether the conflicting entity has the same entityRef but a different locationKey\n      const conflictingKey = await checkLocationKeyConflict({\n        tx,\n        entityRef,\n        locationKey,\n      });\n      if (conflictingKey) {\n        this.options.logger.warn(\n          `Detected conflicting entityRef ${entityRef} already referenced by ${conflictingKey} and now also ${locationKey}`,\n        );\n        if (this.options.eventBroker && locationKey) {\n          const eventParams: EventParams<CatalogConflictEventPayload> = {\n            topic: CATALOG_CONFLICTS_TOPIC,\n            eventPayload: {\n              unprocessedEntity: entity,\n              entityRef,\n              newLocationKey: locationKey,\n              existingLocationKey: conflictingKey,\n              lastConflictAt: DateTime.now().toISO()!,\n            },\n          };\n          await this.options.eventBroker?.publish(eventParams);\n        }\n      }\n    }\n\n    // Replace all references for the originating entity or source and then create new ones\n    await tx<DbRefreshStateReferencesRow>('refresh_state_references')\n      .andWhere({ source_entity_ref: options.sourceEntityRef })\n      .delete();\n    await tx.batchInsert(\n      'refresh_state_references',\n      stateReferences.map(entityRef => ({\n        source_entity_ref: options.sourceEntityRef,\n        target_entity_ref: entityRef,\n      })),\n      BATCH_SIZE,\n    );\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { resolvePackagePath } from '@backstage/backend-common';\nimport { Knex } from 'knex';\n\nexport async function applyDatabaseMigrations(knex: Knex): Promise<void> {\n  const migrationsDir = resolvePackagePath(\n    '@backstage/plugin-catalog-backend',\n    'migrations',\n  );\n\n  await knex.migrate.latest({\n    directory: migrationsDir,\n  });\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { HumanDuration } from '@backstage/types';\n\n/**\n * Performs the act of stitching - to take all of the various outputs from the\n * ingestion process, and stitching them together into the final entity JSON\n * shape.\n */\nexport interface Stitcher {\n  stitch(options: {\n    entityRefs?: Iterable<string>;\n    entityIds?: Iterable<string>;\n  }): Promise<void>;\n}\n\n/**\n * The strategies supported by the stitching process, in terms of when to\n * perform stitching.\n *\n * @remarks\n *\n * In immediate mode, stitching happens \"in-band\" (blocking) immediately when\n * each processing task finishes. When set to `'deferred'`, stitching is instead\n * deferred to happen on a separate asynchronous worker queue just like\n * processing.\n *\n * Deferred stitching should make performance smoother when ingesting large\n * amounts of entities, and reduce p99 processing times and repeated\n * over-stitching of hot spot entities when fan-out/fan-in in terms of relations\n * is very large. It does however also come with some performance cost due to\n * the queuing with how much wall-clock time some types of task take.\n */\nexport type StitchingStrategy =\n  | {\n      mode: 'immediate';\n    }\n  | {\n      mode: 'deferred';\n      pollingInterval: HumanDuration;\n      stitchTimeout: HumanDuration;\n    };\n\nexport function stitchingStrategyFromConfig(config: Config): StitchingStrategy {\n  const strategyMode = config.getOptionalString(\n    'catalog.stitchingStrategy.mode',\n  );\n\n  if (strategyMode === undefined || strategyMode === 'immediate') {\n    return {\n      mode: 'immediate',\n    };\n  } else if (strategyMode === 'deferred') {\n    // TODO(freben): Make parameters configurable\n    return {\n      mode: 'deferred',\n      pollingInterval: { seconds: 1 },\n      stitchTimeout: { seconds: 60 },\n    };\n  }\n\n  throw new Error(\n    `Invalid stitching strategy mode '${strategyMode}', expected one of 'immediate' or 'deferred'`,\n  );\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Span, SpanOptions, SpanStatusCode, Tracer } from '@opentelemetry/api';\nimport { Entity } from '@backstage/catalog-model';\n\nexport const TRACER_ID = 'backstage-plugin-catalog-backend';\n\nfunction setAttributeIfDefined(span: Span, attribute: string, value?: string) {\n  if (value !== null && value !== undefined) {\n    span.setAttribute(attribute, value);\n  }\n}\n\nexport function addEntityAttributes(span: Span, entity: Entity) {\n  setAttributeIfDefined(span, 'backstage.entity.apiVersion', entity.apiVersion);\n  setAttributeIfDefined(span, 'backstage.entity.kind', entity.kind);\n  setAttributeIfDefined(\n    span,\n    'backstage.entity.metadata.namespace',\n    entity.metadata?.namespace,\n  );\n  setAttributeIfDefined(\n    span,\n    'backstage.entity.metadata.name',\n    entity.metadata?.name,\n  );\n}\n\n// Adapted from https://github.com/open-telemetry/opentelemetry-js/blob/359fbcc40a859057a02b14e84599eac399b8dba7/api/src/trace/SugaredTracer.ts\n// While waiting for something like https://github.com/open-telemetry/opentelemetry-js/pull/3317 to land upstream\n\nconst onException = (e: Error, span: Span) => {\n  span.recordException(e);\n  span.setStatus({\n    code: SpanStatusCode.ERROR,\n  });\n};\n\nfunction isPromiseLike<T, S>(obj: PromiseLike<T> | S): obj is PromiseLike<T> {\n  return (\n    !!obj &&\n    (typeof obj === 'object' || typeof obj === 'function') &&\n    'then' in obj &&\n    typeof obj.then === 'function'\n  );\n}\n\nfunction handleFn<F extends (span: Span) => ReturnType<F>>(\n  span: Span,\n  fn: F,\n): ReturnType<F> {\n  try {\n    const ret = fn(span);\n\n    // if fn is an async function attach a recordException and spanEnd callback to the promise\n    if (isPromiseLike(ret)) {\n      ret.then(\n        () => {\n          span.end();\n        },\n        e => {\n          onException(e, span);\n          span.end();\n        },\n      );\n    } else {\n      span.end();\n    }\n\n    return ret;\n  } catch (e) {\n    onException(e, span);\n    span.end();\n    throw e;\n  }\n}\n\nexport function withActiveSpan<F extends (span: Span) => ReturnType<F>>(\n  tracer: Tracer,\n  name: string,\n  fn: F,\n  spanOptions: SpanOptions = {},\n): ReturnType<F> {\n  return tracer.startActiveSpan(name, spanOptions, (span: Span) => {\n    return handleFn(span, fn);\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TRACER_ID, withActiveSpan } from '../util/opentelemetry';\nimport { trace } from '@opentelemetry/api';\n\nconst DEFAULT_POLLING_INTERVAL_MS = 1000;\nconst tracer = trace.getTracer(TRACER_ID);\n\ntype Options<T> = {\n  /**\n   * The callback used to load in new tasks. The number of items returned\n   * in the array must be at most `count` number of items, but may be lower.\n   *\n   * Any error thrown from this method fill be treated as an unhandled rejection.\n   */\n  loadTasks: (count: number) => Promise<Array<T>>;\n\n  /**\n   * The callback used to process a single item.\n   *\n   * Any error thrown from this method fill be treated as an unhandled rejection.\n   */\n  processTask: (item: T) => Promise<void>;\n\n  /**\n   * The target minimum number of items to process in parallel. Once the number\n   * of in-flight tasks reaches this count, more tasks will be loaded in.\n   */\n  lowWatermark: number;\n\n  /**\n   * The maximum number of items to process in parallel.\n   */\n  highWatermark: number;\n\n  /**\n   * The interval at which tasks are polled for in the background when\n   * there aren't enough tasks to load to satisfy the low watermark.\n   *\n   * @default 1000\n   */\n  pollingIntervalMs?: number;\n};\n\n/**\n * Creates a task processing pipeline which continuously loads in tasks to\n * keep the number of parallel in-flight tasks between a low and high watermark.\n *\n * @param options - The options for the pipeline.\n * @returns A stop function which when called halts all processing.\n */\nexport function startTaskPipeline<T>(options: Options<T>) {\n  const {\n    loadTasks,\n    processTask,\n    lowWatermark,\n    highWatermark,\n    pollingIntervalMs = DEFAULT_POLLING_INTERVAL_MS,\n  } = options;\n\n  if (lowWatermark >= highWatermark) {\n    throw new Error('lowWatermark must be lower than highWatermark');\n  }\n\n  // State is in an object so that it can be stably referenced from within\n  // callbacks below\n  const state = { inFlightCount: 0 };\n  const abortController = new AbortController();\n  const abortSignal = abortController.signal;\n\n  const barrier = createBarrier({\n    waitTimeoutMillis: pollingIntervalMs,\n    signal: abortSignal,\n  });\n\n  async function pipelineLoop() {\n    while (!abortSignal.aborted) {\n      if (state.inFlightCount <= lowWatermark) {\n        await withActiveSpan(tracer, 'TaskPipelineLoop', async span => {\n          const loadCount = highWatermark - state.inFlightCount;\n          const loadedItems = await Promise.resolve()\n            .then(() => loadTasks(loadCount))\n            .catch(() => {\n              // Silently swallow errors and go back to sleep to try again; we\n              // delegate to the loadTasks function itself to catch errors and log\n              // if it so desires\n              return [];\n            });\n          span.setAttribute('itemCount', loadedItems.length);\n          if (loadedItems.length && !abortSignal.aborted) {\n            state.inFlightCount += loadedItems.length;\n            for (const item of loadedItems) {\n              Promise.resolve()\n                .then(() => processTask(item))\n                .catch(() => {\n                  // Silently swallow errors and go back to sleep to try again; we\n                  // delegate to the processTask function itself to catch errors\n                  // and log if it so desires\n                })\n                .finally(() => {\n                  state.inFlightCount -= 1;\n                  barrier.release();\n                });\n            }\n          }\n        });\n      }\n      await barrier.wait();\n    }\n  }\n\n  pipelineLoop().catch(error => {\n    // This should be impossible, but if it did happen, it would signal a\n    // programming error inside the loop (errors should definitely be caught\n    // inside of it). Let's rethrow with more information, and let it be caught\n    // by the process' uncaught exception handler, which will log the occurrence\n    // at a high level.\n    throw new Error(`Unexpected error in processing pipeline loop`, error);\n  });\n\n  return () => {\n    abortController.abort();\n    barrier.destroy();\n  };\n}\n\n/**\n * Creates a barrier with a timeout, that can be awaited or prematurely\n * released either manually or by an abort signal.\n */\nexport function createBarrier(options: {\n  waitTimeoutMillis: number;\n  signal: AbortSignal;\n}): {\n  wait: () => Promise<void>;\n  release: () => void;\n  destroy: () => void;\n} {\n  const { waitTimeoutMillis, signal } = options;\n  const resolvers = new Set<() => void>();\n\n  function wait() {\n    if (signal.aborted || !(waitTimeoutMillis > 0)) {\n      return Promise.resolve();\n    }\n\n    return new Promise<void>(resolve => {\n      const timeoutHandle = setTimeout(done, waitTimeoutMillis);\n\n      function done() {\n        resolvers.delete(done);\n        clearTimeout(timeoutHandle);\n        resolve();\n      }\n\n      resolvers.add(done);\n    });\n  }\n\n  function release() {\n    const resolversToCall = new Set(resolvers);\n    resolvers.clear();\n    for (const resolver of resolversToCall) {\n      resolver();\n    }\n  }\n\n  signal.addEventListener('abort', release);\n\n  return {\n    wait,\n    release,\n    destroy: () => signal.removeEventListener('abort', release),\n  };\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport splitToChunks from 'lodash/chunk';\nimport { v4 as uuid } from 'uuid';\nimport { StitchingStrategy } from '../../../stitching/types';\nimport { DbFinalEntitiesRow, DbRefreshStateRow } from '../../tables';\n\n/**\n * Marks a number of entities for stitching some time in the near\n * future.\n *\n * @remarks\n */\nexport async function markForStitching(options: {\n  knex: Knex | Knex.Transaction;\n  strategy: StitchingStrategy;\n  entityRefs?: Iterable<string>;\n  entityIds?: Iterable<string>;\n}): Promise<void> {\n  // Splitting to chunks just to cover pathological cases that upset the db\n  const entityRefs = split(options.entityRefs);\n  const entityIds = split(options.entityIds);\n  const knex = options.knex;\n  const mode = options.strategy.mode;\n\n  if (mode === 'immediate') {\n    for (const chunk of entityRefs) {\n      await knex\n        .table<DbFinalEntitiesRow>('final_entities')\n        .update({\n          hash: 'force-stitching',\n        })\n        .whereIn(\n          'entity_id',\n          knex<DbRefreshStateRow>('refresh_state')\n            .select('entity_id')\n            .whereIn('entity_ref', chunk),\n        );\n      await knex\n        .table<DbRefreshStateRow>('refresh_state')\n        .update({\n          result_hash: 'force-stitching',\n          next_update_at: knex.fn.now(),\n        })\n        .whereIn('entity_ref', chunk);\n    }\n\n    for (const chunk of entityIds) {\n      await knex\n        .table<DbFinalEntitiesRow>('final_entities')\n        .update({\n          hash: 'force-stitching',\n        })\n        .whereIn('entity_id', chunk);\n      await knex\n        .table<DbRefreshStateRow>('refresh_state')\n        .update({\n          result_hash: 'force-stitching',\n          next_update_at: knex.fn.now(),\n        })\n        .whereIn('entity_id', chunk);\n    }\n  } else if (mode === 'deferred') {\n    // It's OK that this is shared across refresh state rows; it just needs to\n    // be uniquely generated for every new stitch request.\n    const ticket = uuid();\n\n    for (const chunk of entityRefs) {\n      await knex<DbRefreshStateRow>('refresh_state')\n        .update({\n          next_stitch_at: knex.fn.now(),\n          next_stitch_ticket: ticket,\n        })\n        .whereIn('entity_ref', chunk);\n    }\n\n    for (const chunk of entityIds) {\n      await knex<DbRefreshStateRow>('refresh_state')\n        .update({\n          next_stitch_at: knex.fn.now(),\n          next_stitch_ticket: ticket,\n        })\n        .whereIn('entity_id', chunk);\n    }\n  } else {\n    throw new Error(`Unknown stitching strategy mode ${mode}`);\n  }\n}\n\nfunction split(input: Iterable<string> | undefined): string[][] {\n  if (!input) {\n    return [];\n  }\n  return splitToChunks(Array.isArray(input) ? input : [...input], 200);\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport uniq from 'lodash/uniq';\nimport { StitchingStrategy } from '../../../stitching/types';\nimport { DbRefreshStateRow } from '../../tables';\nimport { markForStitching } from '../stitcher/markForStitching';\n\n/**\n * Finds and deletes all orphaned entities, i.e. entities that do not have any\n * incoming references to them, and also eagerly deletes all of their children\n * that would otherwise become orphaned.\n */\nexport async function deleteOrphanedEntities(options: {\n  knex: Knex.Transaction | Knex;\n  strategy: StitchingStrategy;\n}): Promise<number> {\n  const { knex, strategy } = options;\n\n  let total = 0;\n\n  // Limit iterations for sanity\n  for (let i = 0; i < 100; ++i) {\n    const candidates = await knex\n      .with('orphans', ['entity_id', 'entity_ref'], orphans =>\n        orphans\n          .from('refresh_state')\n          .select('refresh_state.entity_id', 'refresh_state.entity_ref')\n          .leftOuterJoin(\n            'refresh_state_references',\n            'refresh_state_references.target_entity_ref',\n            'refresh_state.entity_ref',\n          )\n          .whereNull('refresh_state_references.target_entity_ref'),\n      )\n      .select({\n        entityId: 'orphans.entity_id',\n        relationSourceId: 'refresh_state.entity_id',\n      })\n      .from('orphans')\n      .leftOuterJoin(\n        'relations',\n        'relations.target_entity_ref',\n        'orphans.entity_ref',\n      )\n      .leftOuterJoin(\n        'refresh_state',\n        'refresh_state.entity_ref',\n        'relations.source_entity_ref',\n      );\n\n    if (!candidates.length) {\n      break;\n    }\n\n    const orphanIds: string[] = uniq(candidates.map(r => r.entityId));\n    const orphanRelationIds: string[] = uniq(\n      candidates.map(r => r.relationSourceId).filter(Boolean),\n    );\n\n    total += orphanIds.length;\n\n    // Delete the orphans themselves\n    await knex\n      .table<DbRefreshStateRow>('refresh_state')\n      .delete()\n      .whereIn('entity_id', orphanIds);\n\n    // Mark all of the things that the orphans had relations to for stitching\n    await markForStitching({\n      knex,\n      strategy,\n      entityIds: orphanRelationIds,\n    });\n  }\n\n  return total;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ANNOTATION_LOCATION,\n  Entity,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { assertError, serializeError, stringifyError } from '@backstage/errors';\nimport { Hash } from 'crypto';\nimport stableStringify from 'fast-json-stable-stringify';\nimport { Knex } from 'knex';\nimport { metrics, trace } from '@opentelemetry/api';\nimport { ProcessingDatabase, RefreshStateItem } from '../database/types';\nimport { createCounterMetric, createSummaryMetric } from '../util/metrics';\nimport { CatalogProcessingOrchestrator, EntityProcessingResult } from './types';\nimport { Stitcher, stitchingStrategyFromConfig } from '../stitching/types';\nimport { startTaskPipeline } from './TaskPipeline';\nimport { PluginTaskScheduler } from '@backstage/backend-tasks';\nimport { Config } from '@backstage/config';\nimport {\n  addEntityAttributes,\n  TRACER_ID,\n  withActiveSpan,\n} from '../util/opentelemetry';\nimport { deleteOrphanedEntities } from '../database/operations/util/deleteOrphanedEntities';\nimport { EventBroker } from '@backstage/plugin-events-node';\nimport { CATALOG_ERRORS_TOPIC } from '../constants';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nconst CACHE_TTL = 5;\n\nconst tracer = trace.getTracer(TRACER_ID);\n\nexport type ProgressTracker = ReturnType<typeof progressTracker>;\n\n// NOTE(freben): Perhaps surprisingly, this class does not implement the\n// CatalogProcessingEngine type. That type is externally visible and its name is\n// the way it is for historic reasons. This class has no particular reason to\n// implement that precise interface; nowadays there are several different\n// engines \"hiding\" behind the CatalogProcessingEngine interface, of which this\n// is just one.\nexport class DefaultCatalogProcessingEngine {\n  private readonly config: Config;\n  private readonly scheduler?: PluginTaskScheduler;\n  private readonly logger: LoggerService;\n  private readonly knex: Knex;\n  private readonly processingDatabase: ProcessingDatabase;\n  private readonly orchestrator: CatalogProcessingOrchestrator;\n  private readonly stitcher: Stitcher;\n  private readonly createHash: () => Hash;\n  private readonly pollingIntervalMs: number;\n  private readonly orphanCleanupIntervalMs: number;\n  private readonly onProcessingError?: (event: {\n    unprocessedEntity: Entity;\n    errors: Error[];\n  }) => Promise<void> | void;\n  private readonly tracker: ProgressTracker;\n  private readonly eventBroker?: EventBroker;\n\n  private stopFunc?: () => void;\n\n  constructor(options: {\n    config: Config;\n    scheduler?: PluginTaskScheduler;\n    logger: LoggerService;\n    knex: Knex;\n    processingDatabase: ProcessingDatabase;\n    orchestrator: CatalogProcessingOrchestrator;\n    stitcher: Stitcher;\n    createHash: () => Hash;\n    pollingIntervalMs?: number;\n    orphanCleanupIntervalMs?: number;\n    onProcessingError?: (event: {\n      unprocessedEntity: Entity;\n      errors: Error[];\n    }) => Promise<void> | void;\n    tracker?: ProgressTracker;\n    eventBroker?: EventBroker;\n  }) {\n    this.config = options.config;\n    this.scheduler = options.scheduler;\n    this.logger = options.logger;\n    this.knex = options.knex;\n    this.processingDatabase = options.processingDatabase;\n    this.orchestrator = options.orchestrator;\n    this.stitcher = options.stitcher;\n    this.createHash = options.createHash;\n    this.pollingIntervalMs = options.pollingIntervalMs ?? 1_000;\n    this.orphanCleanupIntervalMs = options.orphanCleanupIntervalMs ?? 30_000;\n    this.onProcessingError = options.onProcessingError;\n    this.tracker = options.tracker ?? progressTracker();\n    this.eventBroker = options.eventBroker;\n\n    this.stopFunc = undefined;\n  }\n\n  async start() {\n    if (this.stopFunc) {\n      throw new Error('Processing engine is already started');\n    }\n\n    const stopPipeline = this.startPipeline();\n    const stopCleanup = this.startOrphanCleanup();\n\n    this.stopFunc = () => {\n      stopPipeline();\n      stopCleanup();\n    };\n  }\n\n  async stop() {\n    if (this.stopFunc) {\n      this.stopFunc();\n      this.stopFunc = undefined;\n    }\n  }\n\n  private startPipeline(): () => void {\n    return startTaskPipeline<RefreshStateItem>({\n      lowWatermark: 5,\n      highWatermark: 10,\n      pollingIntervalMs: this.pollingIntervalMs,\n      loadTasks: async count => {\n        try {\n          const { items } = await this.processingDatabase.transaction(\n            async tx => {\n              return this.processingDatabase.getProcessableEntities(tx, {\n                processBatchSize: count,\n              });\n            },\n          );\n          return items;\n        } catch (error) {\n          this.logger.warn('Failed to load processing items', error);\n          return [];\n        }\n      },\n      processTask: async item => {\n        await withActiveSpan(tracer, 'ProcessingRun', async span => {\n          const track = this.tracker.processStart(item, this.logger);\n          addEntityAttributes(span, item.unprocessedEntity);\n\n          try {\n            const {\n              id,\n              state,\n              unprocessedEntity,\n              entityRef,\n              locationKey,\n              resultHash: previousResultHash,\n            } = item;\n            const result = await this.orchestrator.process({\n              entity: unprocessedEntity,\n              state,\n            });\n\n            track.markProcessorsCompleted(result);\n\n            if (result.ok) {\n              const { ttl: _, ...stateWithoutTtl } = state ?? {};\n              if (\n                stableStringify(stateWithoutTtl) !==\n                stableStringify(result.state)\n              ) {\n                await this.processingDatabase.transaction(async tx => {\n                  await this.processingDatabase.updateEntityCache(tx, {\n                    id,\n                    state: {\n                      ttl: CACHE_TTL,\n                      ...result.state,\n                    },\n                  });\n                });\n              }\n            } else {\n              const maybeTtl = state?.ttl;\n              const ttl = Number.isInteger(maybeTtl) ? (maybeTtl as number) : 0;\n              await this.processingDatabase.transaction(async tx => {\n                await this.processingDatabase.updateEntityCache(tx, {\n                  id,\n                  state: ttl > 0 ? { ...state, ttl: ttl - 1 } : {},\n                });\n              });\n            }\n\n            const location =\n              unprocessedEntity?.metadata?.annotations?.[ANNOTATION_LOCATION];\n            if (result.errors.length) {\n              this.eventBroker?.publish({\n                topic: CATALOG_ERRORS_TOPIC,\n                eventPayload: {\n                  entity: entityRef,\n                  location,\n                  errors: result.errors,\n                },\n              });\n            }\n            const errorsString = JSON.stringify(\n              result.errors.map(e => serializeError(e)),\n            );\n\n            let hashBuilder = this.createHash().update(errorsString);\n\n            if (result.ok) {\n              const { entityRefs: parents } =\n                await this.processingDatabase.transaction(tx =>\n                  this.processingDatabase.listParents(tx, {\n                    entityRef,\n                  }),\n                );\n\n              hashBuilder = hashBuilder\n                .update(stableStringify({ ...result.completedEntity }))\n                .update(stableStringify([...result.deferredEntities]))\n                .update(stableStringify([...result.relations]))\n                .update(stableStringify([...result.refreshKeys]))\n                .update(stableStringify([...parents]));\n            }\n\n            const resultHash = hashBuilder.digest('hex');\n            if (resultHash === previousResultHash) {\n              // If nothing changed in our produced outputs, we cannot have any\n              // significant effect on our surroundings; therefore, we just abort\n              // without any updates / stitching.\n              track.markSuccessfulWithNoChanges();\n              return;\n            }\n\n            // If the result was marked as not OK, it signals that some part of the\n            // processing pipeline threw an exception. This can happen both as part of\n            // non-catastrophic things such as due to validation errors, as well as if\n            // something fatal happens inside the processing for other reasons. In any\n            // case, this means we can't trust that anything in the output is okay. So\n            // just store the errors and trigger a stich so that they become visible to\n            // the outside.\n            if (!result.ok) {\n              // notify the error listener if the entity can not be processed.\n              Promise.resolve(undefined)\n                .then(() =>\n                  this.onProcessingError?.({\n                    unprocessedEntity,\n                    errors: result.errors,\n                  }),\n                )\n                .catch(error => {\n                  this.logger.debug(\n                    `Processing error listener threw an exception, ${stringifyError(\n                      error,\n                    )}`,\n                  );\n                });\n\n              await this.processingDatabase.transaction(async tx => {\n                await this.processingDatabase.updateProcessedEntityErrors(tx, {\n                  id,\n                  errors: errorsString,\n                  resultHash,\n                });\n              });\n\n              await this.stitcher.stitch({\n                entityRefs: [stringifyEntityRef(unprocessedEntity)],\n              });\n\n              track.markSuccessfulWithErrors();\n              return;\n            }\n\n            result.completedEntity.metadata.uid = id;\n            let oldRelationSources: Map<string, string>;\n            await this.processingDatabase.transaction(async tx => {\n              const { previous } =\n                await this.processingDatabase.updateProcessedEntity(tx, {\n                  id,\n                  processedEntity: result.completedEntity,\n                  resultHash,\n                  errors: errorsString,\n                  relations: result.relations,\n                  deferredEntities: result.deferredEntities,\n                  locationKey,\n                  refreshKeys: result.refreshKeys,\n                });\n              oldRelationSources = new Map(\n                previous.relations.map(r => [\n                  `${r.source_entity_ref}:${r.type}`,\n                  r.source_entity_ref,\n                ]),\n              );\n            });\n\n            const newRelationSources = new Map<string, string>(\n              result.relations.map(relation => {\n                const sourceEntityRef = stringifyEntityRef(relation.source);\n                return [`${sourceEntityRef}:${relation.type}`, sourceEntityRef];\n              }),\n            );\n\n            const setOfThingsToStitch = new Set<string>([\n              stringifyEntityRef(result.completedEntity),\n            ]);\n            newRelationSources.forEach((sourceEntityRef, uniqueKey) => {\n              if (!oldRelationSources.has(uniqueKey)) {\n                setOfThingsToStitch.add(sourceEntityRef);\n              }\n            });\n            oldRelationSources!.forEach((sourceEntityRef, uniqueKey) => {\n              if (!newRelationSources.has(uniqueKey)) {\n                setOfThingsToStitch.add(sourceEntityRef);\n              }\n            });\n\n            await this.stitcher.stitch({\n              entityRefs: setOfThingsToStitch,\n            });\n\n            track.markSuccessfulWithChanges();\n          } catch (error) {\n            assertError(error);\n            track.markFailed(error);\n          }\n        });\n      },\n    });\n  }\n\n  private startOrphanCleanup(): () => void {\n    const orphanStrategy =\n      this.config.getOptionalString('catalog.orphanStrategy') ?? 'keep';\n    if (orphanStrategy !== 'delete') {\n      return () => {};\n    }\n\n    const stitchingStrategy = stitchingStrategyFromConfig(this.config);\n\n    const runOnce = async () => {\n      try {\n        const n = await deleteOrphanedEntities({\n          knex: this.knex,\n          strategy: stitchingStrategy,\n        });\n        if (n > 0) {\n          this.logger.info(`Deleted ${n} orphaned entities`);\n        }\n      } catch (error) {\n        this.logger.warn(`Failed to delete orphaned entities`, error);\n      }\n    };\n\n    if (this.scheduler) {\n      const abortController = new AbortController();\n\n      this.scheduler.scheduleTask({\n        id: 'catalog_orphan_cleanup',\n        frequency: { milliseconds: this.orphanCleanupIntervalMs },\n        timeout: { milliseconds: this.orphanCleanupIntervalMs * 0.8 },\n        fn: runOnce,\n        signal: abortController.signal,\n      });\n\n      return () => {\n        abortController.abort();\n      };\n    }\n\n    const intervalKey = setInterval(runOnce, this.orphanCleanupIntervalMs);\n    return () => {\n      clearInterval(intervalKey);\n    };\n  }\n}\n\n// Helps wrap the timing and logging behaviors\nfunction progressTracker() {\n  // prom-client metrics are deprecated in favour of OpenTelemetry metrics.\n  const promProcessedEntities = createCounterMetric({\n    name: 'catalog_processed_entities_count',\n    help: 'Amount of entities processed, DEPRECATED, use OpenTelemetry metrics instead',\n    labelNames: ['result'],\n  });\n  const promProcessingDuration = createSummaryMetric({\n    name: 'catalog_processing_duration_seconds',\n    help: 'Time spent executing the full processing flow, DEPRECATED, use OpenTelemetry metrics instead',\n    labelNames: ['result'],\n  });\n  const promProcessorsDuration = createSummaryMetric({\n    name: 'catalog_processors_duration_seconds',\n    help: 'Time spent executing catalog processors, DEPRECATED, use OpenTelemetry metrics instead',\n    labelNames: ['result'],\n  });\n  const promProcessingQueueDelay = createSummaryMetric({\n    name: 'catalog_processing_queue_delay_seconds',\n    help: 'The amount of delay between being scheduled for processing, and the start of actually being processed, DEPRECATED, use OpenTelemetry metrics instead',\n  });\n\n  const meter = metrics.getMeter('default');\n  const processedEntities = meter.createCounter(\n    'catalog.processed.entities.count',\n    { description: 'Amount of entities processed' },\n  );\n\n  const processingDuration = meter.createHistogram(\n    'catalog.processing.duration',\n    {\n      description: 'Time spent executing the full processing flow',\n      unit: 'seconds',\n    },\n  );\n\n  const processorsDuration = meter.createHistogram(\n    'catalog.processors.duration',\n    {\n      description: 'Time spent executing catalog processors',\n      unit: 'seconds',\n    },\n  );\n\n  const processingQueueDelay = meter.createHistogram(\n    'catalog.processing.queue.delay',\n    {\n      description:\n        'The amount of delay between being scheduled for processing, and the start of actually being processed',\n      unit: 'seconds',\n    },\n  );\n\n  function processStart(item: RefreshStateItem, logger: LoggerService) {\n    const startTime = process.hrtime();\n    const endOverallTimer = promProcessingDuration.startTimer();\n    const endProcessorsTimer = promProcessorsDuration.startTimer();\n\n    logger.debug(`Processing ${item.entityRef}`);\n\n    if (item.nextUpdateAt) {\n      const seconds = -item.nextUpdateAt.diffNow().as('seconds');\n      promProcessingQueueDelay.observe(seconds);\n      processingQueueDelay.record(seconds);\n    }\n\n    function endTime() {\n      const delta = process.hrtime(startTime);\n      return delta[0] + delta[1] / 1e9;\n    }\n\n    function markProcessorsCompleted(result: EntityProcessingResult) {\n      endProcessorsTimer({ result: result.ok ? 'ok' : 'failed' });\n      processorsDuration.record(endTime(), {\n        result: result.ok ? 'ok' : 'failed',\n      });\n    }\n\n    function markSuccessfulWithNoChanges() {\n      endOverallTimer({ result: 'unchanged' });\n      promProcessedEntities.inc({ result: 'unchanged' }, 1);\n\n      processingDuration.record(endTime(), { result: 'unchanged' });\n      processedEntities.add(1, { result: 'unchanged' });\n    }\n\n    function markSuccessfulWithErrors() {\n      endOverallTimer({ result: 'errors' });\n      promProcessedEntities.inc({ result: 'errors' }, 1);\n\n      processingDuration.record(endTime(), { result: 'errors' });\n      processedEntities.add(1, { result: 'errors' });\n    }\n\n    function markSuccessfulWithChanges() {\n      endOverallTimer({ result: 'changed' });\n      promProcessedEntities.inc({ result: 'changed' }, 1);\n\n      processingDuration.record(endTime(), { result: 'changed' });\n      processedEntities.add(1, { result: 'changed' });\n    }\n\n    function markFailed(error: Error) {\n      promProcessedEntities.inc({ result: 'failed' }, 1);\n      processedEntities.add(1, { result: 'failed' });\n      logger.warn(`Processing of ${item.entityRef} failed`, error);\n    }\n\n    return {\n      markProcessorsCompleted,\n      markSuccessfulWithNoChanges,\n      markSuccessfulWithErrors,\n      markSuccessfulWithChanges,\n      markFailed,\n    };\n  }\n\n  return { processStart };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  stringifyEntityRef,\n  CompoundEntityRef,\n  parseEntityRef,\n} from '@backstage/catalog-model';\nimport { Location } from '@backstage/catalog-client';\nimport { CatalogProcessingOrchestrator } from '../processing/types';\nimport { LocationInput, LocationService, LocationStore } from './types';\nimport { locationSpecToMetadataName } from '../util/conversion';\nimport { InputError } from '@backstage/errors';\nimport { DeferredEntity } from '@backstage/plugin-catalog-node';\n\nexport type DefaultLocationServiceOptions = {\n  allowedLocationTypes: string[];\n};\n\nexport class DefaultLocationService implements LocationService {\n  constructor(\n    private readonly store: LocationStore,\n    private readonly orchestrator: CatalogProcessingOrchestrator,\n    private readonly options: DefaultLocationServiceOptions = {\n      allowedLocationTypes: ['url'],\n    },\n  ) {}\n\n  async createLocation(\n    input: LocationInput,\n    dryRun: boolean,\n  ): Promise<{ location: Location; entities: Entity[]; exists?: boolean }> {\n    if (!this.options.allowedLocationTypes.includes(input.type)) {\n      throw new InputError(\n        `Registered locations must be of an allowed type ${JSON.stringify(\n          this.options.allowedLocationTypes,\n        )}`,\n      );\n    }\n    if (dryRun) {\n      return this.dryRunCreateLocation(input);\n    }\n    const location = await this.store.createLocation(input);\n    return { location, entities: [] };\n  }\n\n  listLocations(): Promise<Location[]> {\n    return this.store.listLocations();\n  }\n  getLocation(id: string): Promise<Location> {\n    return this.store.getLocation(id);\n  }\n  deleteLocation(id: string): Promise<void> {\n    return this.store.deleteLocation(id);\n  }\n\n  getLocationByEntity(\n    entityRef: CompoundEntityRef | string,\n  ): Promise<Location> {\n    return this.store.getLocationByEntity(parseEntityRef(entityRef));\n  }\n\n  private async processEntities(\n    unprocessedEntities: DeferredEntity[],\n  ): Promise<Entity[]> {\n    const entities: Entity[] = [];\n    while (unprocessedEntities.length) {\n      const currentEntity = unprocessedEntities.pop();\n      if (!currentEntity) {\n        continue;\n      }\n      const processed = await this.orchestrator.process({\n        entity: currentEntity.entity,\n        state: {}, // we process without the existing cache\n      });\n\n      if (processed.ok) {\n        if (\n          entities.some(\n            e =>\n              stringifyEntityRef(e) ===\n              stringifyEntityRef(processed.completedEntity),\n          )\n        ) {\n          throw new InputError(\n            `Duplicate nested entity: ${stringifyEntityRef(\n              processed.completedEntity,\n            )}`,\n          );\n        }\n        unprocessedEntities.push(...processed.deferredEntities);\n        entities.push(processed.completedEntity);\n      } else {\n        throw new InputError(processed.errors.map(String).join(', '));\n      }\n    }\n    return entities;\n  }\n\n  private async dryRunCreateLocation(\n    spec: LocationInput,\n  ): Promise<{ location: Location; entities: Entity[]; exists?: boolean }> {\n    // Run the existence check in parallel with the processing\n    const existsPromise = this.store\n      .listLocations()\n      .then(locations =>\n        locations.some(l => l.type === spec.type && l.target === spec.target),\n      );\n\n    const entity = {\n      apiVersion: 'backstage.io/v1alpha1',\n      kind: 'Location',\n      metadata: {\n        name: locationSpecToMetadataName({\n          type: spec.type,\n          target: spec.target,\n        }),\n        namespace: 'default',\n        annotations: {\n          [ANNOTATION_LOCATION]: `${spec.type}:${spec.target}`,\n          [ANNOTATION_ORIGIN_LOCATION]: `${spec.type}:${spec.target}`,\n        },\n      },\n      spec: {\n        type: spec.type,\n        target: spec.target,\n      },\n    };\n    const unprocessedEntities: DeferredEntity[] = [\n      { entity, locationKey: `${spec.type}:${spec.target}` },\n    ];\n    const entities: Entity[] = await this.processEntities(unprocessedEntities);\n\n    return {\n      exists: await existsPromise,\n      location: { ...spec, id: `${spec.type}:${spec.target}` },\n      entities,\n    };\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError, NotAllowedError } from '@backstage/errors';\nimport { Request } from 'express';\nimport lodash from 'lodash';\nimport { z } from 'zod';\nimport {\n  Cursor,\n  QueryEntitiesCursorRequest,\n  QueryEntitiesInitialRequest,\n  QueryEntitiesRequest,\n} from '../catalog/types';\nimport { EntityFilter } from '@backstage/plugin-catalog-node';\n\nexport async function requireRequestBody(req: Request): Promise<unknown> {\n  const contentType = req.header('content-type');\n  if (!contentType) {\n    throw new InputError('Content-Type missing');\n  } else if (!contentType.match(/^application\\/json($|;)/)) {\n    throw new InputError('Illegal Content-Type');\n  }\n\n  const body = req.body;\n  if (!body) {\n    throw new InputError('Missing request body');\n  } else if (!lodash.isPlainObject(body)) {\n    throw new InputError('Expected body to be a JSON object');\n  } else if (Object.keys(body).length === 0) {\n    // Because of how express.json() translates the empty body to {}\n    throw new InputError('Empty request body');\n  }\n\n  return body;\n}\n\nexport const locationInput = z\n  .object({\n    type: z.string(),\n    target: z.string(),\n    presence: z.literal('required').or(z.literal('optional')).optional(),\n  })\n  .strict(); // no unknown keys;\n\nexport async function validateRequestBody<T>(\n  req: Request,\n  schema: z.Schema<T>,\n): Promise<T> {\n  const body = await requireRequestBody(req);\n  try {\n    return await schema.parse(body);\n  } catch (e) {\n    throw new InputError(`Malformed request: ${e}`);\n  }\n}\n\nexport function disallowReadonlyMode(readonly: boolean) {\n  if (readonly) {\n    throw new NotAllowedError('This operation not allowed in readonly mode');\n  }\n}\n\nexport function isQueryEntitiesInitialRequest(\n  input: QueryEntitiesRequest | undefined,\n): input is QueryEntitiesInitialRequest {\n  if (!input) {\n    return false;\n  }\n  return !isQueryEntitiesCursorRequest(input);\n}\n\nexport function isQueryEntitiesCursorRequest(\n  input: QueryEntitiesRequest | undefined,\n): input is QueryEntitiesCursorRequest {\n  if (!input) {\n    return false;\n  }\n  return !!(input as QueryEntitiesCursorRequest).cursor;\n}\n\nconst entityFilterParser: z.ZodSchema<EntityFilter> = z.lazy(() =>\n  z\n    .object({\n      key: z.string(),\n      values: z.array(z.string()).optional(),\n    })\n    .or(z.object({ not: entityFilterParser }))\n    .or(z.object({ anyOf: z.array(entityFilterParser) }))\n    .or(z.object({ allOf: z.array(entityFilterParser) })),\n);\n\nexport const cursorParser: z.ZodSchema<Cursor> = z.object({\n  orderFields: z.array(\n    z.object({ field: z.string(), order: z.enum(['asc', 'desc']) }),\n  ),\n  fullTextFilter: z\n    .object({\n      term: z.string(),\n      fields: z.array(z.string()).optional(),\n    })\n    .optional(),\n  orderFieldValues: z.array(z.string().or(z.null())),\n  filter: entityFilterParser.optional(),\n  isPrevious: z.boolean(),\n  query: z.string().optional(),\n  firstSortFieldValues: z.array(z.string().or(z.null())).optional(),\n  totalItems: z.number().optional(),\n});\n\nexport function encodeCursor(cursor: Cursor) {\n  const json = JSON.stringify(cursor);\n  return Buffer.from(json, 'utf8').toString('base64');\n}\n\nexport function decodeCursor(encodedCursor: string) {\n  try {\n    const data = Buffer.from(encodedCursor, 'base64').toString('utf8');\n    const result = cursorParser.safeParse(JSON.parse(data));\n\n    if (!result.success) {\n      throw new InputError(`Malformed cursor: ${result.error}`);\n    }\n    return result.data;\n  } catch (e) {\n    throw new InputError(`Malformed cursor: ${e}`);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  parseEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { InputError, NotFoundError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport { chunk as lodashChunk, isEqual } from 'lodash';\nimport { z } from 'zod';\nimport {\n  Cursor,\n  EntitiesBatchRequest,\n  EntitiesBatchResponse,\n  EntitiesCatalog,\n  EntitiesRequest,\n  EntitiesResponse,\n  EntityAncestryResponse,\n  EntityFacetsRequest,\n  EntityFacetsResponse,\n  EntityOrder,\n  EntityPagination,\n  QueryEntitiesRequest,\n  QueryEntitiesResponse,\n} from '../catalog/types';\nimport {\n  DbFinalEntitiesRow,\n  DbPageInfo,\n  DbRefreshStateReferencesRow,\n  DbRefreshStateRow,\n  DbRelationsRow,\n  DbSearchRow,\n} from '../database/tables';\nimport { Stitcher } from '../stitching/types';\n\nimport {\n  isQueryEntitiesCursorRequest,\n  isQueryEntitiesInitialRequest,\n} from './util';\nimport {\n  EntitiesSearchFilter,\n  EntityFilter,\n} from '@backstage/plugin-catalog-node';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nconst defaultSortField: EntityOrder = {\n  field: 'metadata.uid',\n  order: 'asc',\n};\n\nconst DEFAULT_LIMIT = 20;\n\nfunction parsePagination(input?: EntityPagination): EntityPagination {\n  if (!input) {\n    return {};\n  }\n\n  let { limit, offset } = input;\n\n  if (input.after === undefined) {\n    return { limit, offset };\n  }\n\n  let cursor;\n  try {\n    const json = Buffer.from(input.after, 'base64').toString('utf8');\n    cursor = JSON.parse(json);\n  } catch {\n    throw new InputError('Malformed after cursor, could not be parsed');\n  }\n\n  if (cursor.limit !== undefined) {\n    if (!Number.isInteger(cursor.limit)) {\n      throw new InputError('Malformed after cursor, limit was not an number');\n    }\n    limit = cursor.limit;\n  }\n\n  if (cursor.offset !== undefined) {\n    if (!Number.isInteger(cursor.offset)) {\n      throw new InputError('Malformed after cursor, offset was not a number');\n    }\n    offset = cursor.offset;\n  }\n\n  return { limit, offset };\n}\n\nfunction stringifyPagination(\n  input: Required<Omit<EntityPagination, 'after'>>,\n): string {\n  const { limit, offset } = input;\n  const json = JSON.stringify({ limit, offset });\n  const base64 = Buffer.from(json, 'utf8').toString('base64');\n  return base64;\n}\n\nfunction addCondition(\n  queryBuilder: Knex.QueryBuilder,\n  db: Knex,\n  filter: EntitiesSearchFilter,\n  negate: boolean = false,\n  entityIdField = 'entity_id',\n): void {\n  const key = filter.key.toLowerCase();\n  const values = filter.values?.map(v => v.toLowerCase());\n\n  // NOTE(freben): This used to be a set of OUTER JOIN, which may seem to\n  // make a lot of sense. However, it had abysmal performance on sqlite\n  // when datasets grew large, so we're using IN instead.\n  const matchQuery = db<DbSearchRow>('search')\n    .select('search.entity_id')\n    .where({ key })\n    .andWhere(function keyFilter() {\n      if (values?.length === 1) {\n        this.where({ value: values.at(0) });\n      } else if (values) {\n        this.andWhere('value', 'in', values);\n      }\n    });\n  queryBuilder.andWhere(entityIdField, negate ? 'not in' : 'in', matchQuery);\n}\n\nfunction isEntitiesSearchFilter(\n  filter: EntitiesSearchFilter | EntityFilter,\n): filter is EntitiesSearchFilter {\n  return filter.hasOwnProperty('key');\n}\n\nfunction isOrEntityFilter(\n  filter: { anyOf: EntityFilter[] } | EntityFilter,\n): filter is { anyOf: EntityFilter[] } {\n  return filter.hasOwnProperty('anyOf');\n}\n\nfunction isNegationEntityFilter(\n  filter: { not: EntityFilter } | EntityFilter,\n): filter is { not: EntityFilter } {\n  return filter.hasOwnProperty('not');\n}\n\nfunction parseFilter(\n  filter: EntityFilter,\n  query: Knex.QueryBuilder,\n  db: Knex,\n  negate: boolean = false,\n  entityIdField = 'entity_id',\n): Knex.QueryBuilder {\n  if (isNegationEntityFilter(filter)) {\n    return parseFilter(filter.not, query, db, !negate, entityIdField);\n  }\n\n  if (isEntitiesSearchFilter(filter)) {\n    return query.andWhere(function filterFunction() {\n      addCondition(this, db, filter, negate, entityIdField);\n    });\n  }\n\n  return query[negate ? 'andWhereNot' : 'andWhere'](function filterFunction() {\n    if (isOrEntityFilter(filter)) {\n      for (const subFilter of filter.anyOf ?? []) {\n        this.orWhere(subQuery =>\n          parseFilter(subFilter, subQuery, db, false, entityIdField),\n        );\n      }\n    } else {\n      for (const subFilter of filter.allOf ?? []) {\n        this.andWhere(subQuery =>\n          parseFilter(subFilter, subQuery, db, false, entityIdField),\n        );\n      }\n    }\n  });\n}\n\nexport class DefaultEntitiesCatalog implements EntitiesCatalog {\n  private readonly database: Knex;\n  private readonly logger: LoggerService;\n  private readonly stitcher: Stitcher;\n\n  constructor(options: {\n    database: Knex;\n    logger: LoggerService;\n    stitcher: Stitcher;\n  }) {\n    this.database = options.database;\n    this.logger = options.logger;\n    this.stitcher = options.stitcher;\n  }\n\n  async entities(request?: EntitiesRequest): Promise<EntitiesResponse> {\n    const db = this.database;\n\n    let entitiesQuery =\n      db<DbFinalEntitiesRow>('final_entities').select('final_entities.*');\n\n    request?.order?.forEach(({ field }, index) => {\n      const alias = `order_${index}`;\n      entitiesQuery = entitiesQuery.leftOuterJoin(\n        { [alias]: 'search' },\n        function search(inner) {\n          inner\n            .on(`${alias}.entity_id`, 'final_entities.entity_id')\n            .andOn(`${alias}.key`, db.raw('?', [field]));\n        },\n      );\n    });\n\n    entitiesQuery = entitiesQuery.whereNotNull('final_entities.final_entity');\n\n    if (request?.filter) {\n      entitiesQuery = parseFilter(\n        request.filter,\n        entitiesQuery,\n        db,\n        false,\n        'final_entities.entity_id',\n      );\n    }\n\n    request?.order?.forEach(({ order }, index) => {\n      if (db.client.config.client === 'pg') {\n        // pg correctly orders by the column value and handling nulls in one go\n        entitiesQuery = entitiesQuery.orderBy([\n          { column: `order_${index}.value`, order, nulls: 'last' },\n        ]);\n      } else {\n        // sqlite and mysql translate the above statement ONLY into \"order by (value is null) asc\"\n        // no matter what the order is, for some reason, so we have to manually add back the statement\n        // that translates to \"order by value <order>\" while avoiding to give an order\n        entitiesQuery = entitiesQuery.orderBy([\n          { column: `order_${index}.value`, order: undefined, nulls: 'last' },\n          { column: `order_${index}.value`, order },\n        ]);\n      }\n    });\n    entitiesQuery = entitiesQuery.orderBy('final_entities.entity_id', 'asc'); // stable sort\n\n    const { limit, offset } = parsePagination(request?.pagination);\n    if (limit !== undefined) {\n      entitiesQuery = entitiesQuery.limit(limit + 1);\n    }\n    if (offset !== undefined) {\n      entitiesQuery = entitiesQuery.offset(offset);\n    }\n\n    let rows = await entitiesQuery;\n    let pageInfo: DbPageInfo;\n    if (limit === undefined || rows.length <= limit) {\n      pageInfo = { hasNextPage: false };\n    } else {\n      rows = rows.slice(0, -1);\n      pageInfo = {\n        hasNextPage: true,\n        endCursor: stringifyPagination({\n          limit,\n          offset: (offset ?? 0) + limit,\n        }),\n      };\n    }\n\n    let entities: Entity[] = rows.map(e => JSON.parse(e.final_entity!));\n\n    if (request?.fields) {\n      entities = entities.map(e => request.fields!(e));\n    }\n\n    // TODO(freben): This is added as a compatibility guarantee, until we can be\n    // sure that all adopters have re-stitched their entities so that the new\n    // targetRef field is present on them, and that they have stopped consuming\n    // the now-removed old field\n    // TODO(jhaals): Remove this in April 2022\n    for (const entity of entities) {\n      if (entity.relations) {\n        for (const relation of entity.relations as any) {\n          if (!relation.targetRef && relation.target) {\n            // This is the case where an old-form entity, not yet stitched with\n            // the updated code, was in the database\n            relation.targetRef = stringifyEntityRef(relation.target);\n          } else if (!relation.target && relation.targetRef) {\n            // This is the case where a new-form entity, stitched with the\n            // updated code, was in the database but we still want to produce\n            // the old data shape as well for compatibility reasons\n            relation.target = parseEntityRef(relation.targetRef);\n          }\n        }\n      }\n    }\n\n    return {\n      entities,\n      pageInfo,\n    };\n  }\n\n  async entitiesBatch(\n    request: EntitiesBatchRequest,\n  ): Promise<EntitiesBatchResponse> {\n    const lookup = new Map<string, Entity>();\n\n    for (const chunk of lodashChunk(request.entityRefs, 200)) {\n      let query = this.database<DbFinalEntitiesRow>('final_entities')\n        .innerJoin<DbRefreshStateRow>(\n          'refresh_state',\n          'refresh_state.entity_id',\n          'final_entities.entity_id',\n        )\n        .select({\n          entityRef: 'refresh_state.entity_ref',\n          entity: 'final_entities.final_entity',\n        })\n        .whereIn('refresh_state.entity_ref', chunk);\n\n      if (request?.filter) {\n        query = parseFilter(\n          request.filter,\n          query,\n          this.database,\n          false,\n          'refresh_state.entity_id',\n        );\n      }\n\n      for (const row of await query) {\n        lookup.set(row.entityRef, row.entity ? JSON.parse(row.entity) : null);\n      }\n    }\n\n    let items = request.entityRefs.map(ref => lookup.get(ref) ?? null);\n\n    if (request.fields) {\n      items = items.map(e => e && request.fields!(e));\n    }\n\n    return { items };\n  }\n\n  async queryEntities(\n    request: QueryEntitiesRequest,\n  ): Promise<QueryEntitiesResponse> {\n    const db = this.database;\n\n    const limit = request.limit ?? DEFAULT_LIMIT;\n\n    const cursor: Omit<Cursor, 'orderFieldValues'> & {\n      orderFieldValues?: (string | null)[];\n    } = {\n      orderFields: [defaultSortField],\n      isPrevious: false,\n      ...parseCursorFromRequest(request),\n    };\n\n    const isFetchingBackwards = cursor.isPrevious;\n\n    if (cursor.orderFields.length > 1) {\n      this.logger.warn(`Only one sort field is supported, ignoring the rest`);\n    }\n\n    const sortField: EntityOrder = {\n      ...defaultSortField,\n      ...cursor.orderFields[0],\n    };\n\n    const [prevItemOrderFieldValue, prevItemUid] =\n      cursor.orderFieldValues || [];\n\n    const dbQuery = db('search')\n      .join('final_entities', 'search.entity_id', 'final_entities.entity_id')\n      .where('search.key', sortField.field);\n\n    if (cursor.filter) {\n      parseFilter(cursor.filter, dbQuery, db, false, 'search.entity_id');\n    }\n\n    const normalizedFullTextFilterTerm = cursor.fullTextFilter?.term?.trim();\n    const textFilterFields = cursor.fullTextFilter?.fields ?? [sortField.field];\n    if (normalizedFullTextFilterTerm) {\n      if (\n        textFilterFields.length === 1 &&\n        textFilterFields[0] === sortField.field\n      ) {\n        // If there is one item, apply the like query to the top level query which is already\n        //   filtered based on the singular sortField.\n        dbQuery.andWhereRaw(\n          'value like ?',\n          `%${normalizedFullTextFilterTerm.toLocaleLowerCase('en-US')}%`,\n        );\n      } else {\n        const matchQuery = db<DbSearchRow>('search')\n          .select('search.entity_id')\n          .whereIn('key', textFilterFields)\n          .andWhere(function keyFilter() {\n            this.andWhereRaw(\n              'value like ?',\n              `%${normalizedFullTextFilterTerm.toLocaleLowerCase('en-US')}%`,\n            );\n          });\n        dbQuery.andWhere('search.entity_id', 'in', matchQuery);\n      }\n    }\n\n    const countQuery = dbQuery.clone();\n\n    const isOrderingDescending = sortField.order === 'desc';\n\n    if (prevItemOrderFieldValue) {\n      dbQuery.andWhere(function nested() {\n        this.where(\n          'value',\n          isFetchingBackwards !== isOrderingDescending ? '<' : '>',\n          prevItemOrderFieldValue,\n        )\n          .orWhere('value', '=', prevItemOrderFieldValue)\n          .andWhere(\n            'search.entity_id',\n            isFetchingBackwards !== isOrderingDescending ? '<' : '>',\n            prevItemUid,\n          );\n      });\n    }\n\n    dbQuery\n      .orderBy([\n        {\n          column: 'value',\n          order: isFetchingBackwards\n            ? invertOrder(sortField.order)\n            : sortField.order,\n        },\n        {\n          column: 'search.entity_id',\n          order: isFetchingBackwards\n            ? invertOrder(sortField.order)\n            : sortField.order,\n        },\n      ])\n      // fetch an extra item to check if there are more items.\n      .limit(isFetchingBackwards ? limit : limit + 1);\n\n    countQuery.count('search.entity_id', { as: 'count' });\n\n    const [rows, [{ count }]] = await Promise.all([\n      limit > 0 ? dbQuery : [],\n      // for performance reasons we invoke the countQuery\n      // only on the first request.\n      // The result is then embedded into the cursor\n      // for subsequent requests.\n      typeof cursor.totalItems === 'undefined'\n        ? countQuery\n        : [{ count: cursor.totalItems }],\n    ]);\n\n    const totalItems = Number(count);\n\n    if (isFetchingBackwards) {\n      rows.reverse();\n    }\n    const hasMoreResults =\n      limit > 0 && (isFetchingBackwards || rows.length > limit);\n\n    // discard the extra item only when fetching forward.\n    if (rows.length > limit) {\n      rows.length -= 1;\n    }\n\n    const isInitialRequest = cursor.firstSortFieldValues === undefined;\n\n    const firstRow = rows[0];\n    const lastRow = rows[rows.length - 1];\n\n    const firstSortFieldValues = cursor.firstSortFieldValues || [\n      firstRow?.value,\n      firstRow?.entity_id,\n    ];\n\n    const nextCursor: Cursor | undefined = hasMoreResults\n      ? {\n          ...cursor,\n          orderFieldValues: sortFieldsFromRow(lastRow),\n          firstSortFieldValues,\n          isPrevious: false,\n          totalItems,\n        }\n      : undefined;\n\n    const prevCursor: Cursor | undefined =\n      !isInitialRequest &&\n      rows.length > 0 &&\n      !isEqual(sortFieldsFromRow(firstRow), cursor.firstSortFieldValues)\n        ? {\n            ...cursor,\n            orderFieldValues: sortFieldsFromRow(firstRow),\n            firstSortFieldValues: cursor.firstSortFieldValues,\n            isPrevious: true,\n            totalItems,\n          }\n        : undefined;\n\n    const items = rows\n      .map(e => JSON.parse(e.final_entity!))\n      .map(e => (request.fields ? request.fields(e) : e));\n\n    return {\n      items,\n      pageInfo: {\n        ...(!!prevCursor && { prevCursor }),\n        ...(!!nextCursor && { nextCursor }),\n      },\n      totalItems,\n    };\n  }\n\n  async removeEntityByUid(uid: string): Promise<void> {\n    const dbConfig = this.database.client.config;\n\n    // Clear the hashed state of the immediate parents of the deleted entity.\n    // This makes sure that when they get reprocessed, their output is written\n    // down again. The reason for wanting to do this, is that if the user\n    // deletes entities that ARE still emitted by the parent, the parent\n    // processing will still generate the same output hash as always, which\n    // means it'll never try to write down the children again (it assumes that\n    // they already exist). This means that without the code below, the database\n    // never \"heals\" from accidental deletes.\n    if (dbConfig.client.includes('mysql')) {\n      // MySQL doesn't support the syntax we need to do this in a single query,\n      // http://dev.mysql.com/doc/refman/5.6/en/update.html\n      const results = await this.database<DbRefreshStateRow>('refresh_state')\n        .select('entity_id')\n        .whereIn('entity_ref', function parents(builder) {\n          return builder\n            .from<DbRefreshStateRow>('refresh_state')\n            .innerJoin<DbRefreshStateReferencesRow>(\n              'refresh_state_references',\n              {\n                'refresh_state_references.target_entity_ref':\n                  'refresh_state.entity_ref',\n              },\n            )\n            .where('refresh_state.entity_id', '=', uid)\n            .select('refresh_state_references.source_entity_ref');\n        });\n      await this.database<DbRefreshStateRow>('refresh_state')\n        .update({\n          result_hash: 'child-was-deleted',\n          next_update_at: this.database.fn.now(),\n        })\n        .whereIn(\n          'entity_id',\n          results.map(key => key.entity_id),\n        );\n    } else {\n      await this.database<DbRefreshStateRow>('refresh_state')\n        .update({\n          result_hash: 'child-was-deleted',\n          next_update_at: this.database.fn.now(),\n        })\n        .whereIn('entity_ref', function parents(builder) {\n          return builder\n            .from<DbRefreshStateRow>('refresh_state')\n            .innerJoin<DbRefreshStateReferencesRow>(\n              'refresh_state_references',\n              {\n                'refresh_state_references.target_entity_ref':\n                  'refresh_state.entity_ref',\n              },\n            )\n            .where('refresh_state.entity_id', '=', uid)\n            .select('refresh_state_references.source_entity_ref');\n        });\n    }\n\n    // Stitch the entities that the deleted one had relations to. If we do not\n    // do this, the entities in the other end of the relations will still look\n    // like they have a relation to the entity that was deleted, despite not\n    // having any corresponding rows in the relations table.\n    const relationPeers = await this.database\n      .from<DbRelationsRow>('relations')\n      .innerJoin<DbRefreshStateReferencesRow>('refresh_state', {\n        'refresh_state.entity_ref': 'relations.target_entity_ref',\n      })\n      .where('relations.originating_entity_id', '=', uid)\n      .andWhere('refresh_state.entity_id', '!=', uid)\n      .select({ ref: 'relations.target_entity_ref' })\n      .union(other =>\n        other\n          .from<DbRelationsRow>('relations')\n          .innerJoin<DbRefreshStateReferencesRow>('refresh_state', {\n            'refresh_state.entity_ref': 'relations.source_entity_ref',\n          })\n          .where('relations.originating_entity_id', '=', uid)\n          .andWhere('refresh_state.entity_id', '!=', uid)\n          .select({ ref: 'relations.source_entity_ref' }),\n      );\n\n    await this.database<DbRefreshStateRow>('refresh_state')\n      .where('entity_id', uid)\n      .delete();\n\n    await this.stitcher.stitch({\n      entityRefs: new Set(relationPeers.map(p => p.ref)),\n    });\n  }\n\n  async entityAncestry(rootRef: string): Promise<EntityAncestryResponse> {\n    const [rootRow] = await this.database<DbRefreshStateRow>('refresh_state')\n      .leftJoin<DbFinalEntitiesRow>('final_entities', {\n        'refresh_state.entity_id': 'final_entities.entity_id',\n      })\n      .where('refresh_state.entity_ref', '=', rootRef)\n      .select({\n        entityJson: 'final_entities.final_entity',\n      });\n\n    if (!rootRow) {\n      throw new NotFoundError(`No such entity ${rootRef}`);\n    }\n\n    const rootEntity = JSON.parse(rootRow.entityJson) as Entity;\n    const seenEntityRefs = new Set<string>();\n    const todo = new Array<Entity>();\n    const items = new Array<{ entity: Entity; parentEntityRefs: string[] }>();\n\n    for (\n      let current: Entity | undefined = rootEntity;\n      current;\n      current = todo.pop()\n    ) {\n      const currentRef = stringifyEntityRef(current);\n      seenEntityRefs.add(currentRef);\n\n      const parentRows = await this.database<DbRefreshStateReferencesRow>(\n        'refresh_state_references',\n      )\n        .innerJoin<DbRefreshStateRow>('refresh_state', {\n          'refresh_state_references.source_entity_ref':\n            'refresh_state.entity_ref',\n        })\n        .innerJoin<DbFinalEntitiesRow>('final_entities', {\n          'refresh_state.entity_id': 'final_entities.entity_id',\n        })\n        .where('refresh_state_references.target_entity_ref', '=', currentRef)\n        .select({\n          parentEntityRef: 'refresh_state.entity_ref',\n          parentEntityJson: 'final_entities.final_entity',\n        });\n\n      const parentRefs: string[] = [];\n      for (const { parentEntityRef, parentEntityJson } of parentRows) {\n        parentRefs.push(parentEntityRef);\n        if (!seenEntityRefs.has(parentEntityRef)) {\n          seenEntityRefs.add(parentEntityRef);\n          todo.push(JSON.parse(parentEntityJson));\n        }\n      }\n\n      items.push({\n        entity: current,\n        parentEntityRefs: parentRefs,\n      });\n    }\n\n    return {\n      rootEntityRef: stringifyEntityRef(rootEntity),\n      items,\n    };\n  }\n\n  async facets(request: EntityFacetsRequest): Promise<EntityFacetsResponse> {\n    const facets: EntityFacetsResponse['facets'] = {};\n    const db = this.database;\n\n    for (const facet of request.facets) {\n      const dbQuery = db<DbSearchRow>('search')\n        .where('search.key', facet.toLocaleLowerCase('en-US'))\n        .whereNotNull('search.original_value')\n        .select({ value: 'search.original_value', count: db.raw('count(*)') })\n        .groupBy('search.original_value');\n\n      if (request?.filter) {\n        parseFilter(request.filter, dbQuery, db, false, 'search.entity_id');\n      }\n\n      const result = await dbQuery;\n\n      facets[facet] = result.map(data => ({\n        value: String(data.value),\n        count: Number(data.count),\n      }));\n    }\n\n    return { facets };\n  }\n}\n\nconst entityFilterParser: z.ZodSchema<EntityFilter> = z.lazy(() =>\n  z\n    .object({\n      key: z.string(),\n      values: z.array(z.string()).optional(),\n    })\n    .or(z.object({ not: entityFilterParser }))\n    .or(z.object({ anyOf: z.array(entityFilterParser) }))\n    .or(z.object({ allOf: z.array(entityFilterParser) })),\n);\n\nexport const cursorParser: z.ZodSchema<Cursor> = z.object({\n  orderFields: z.array(\n    z.object({ field: z.string(), order: z.enum(['asc', 'desc']) }),\n  ),\n  orderFieldValues: z.array(z.string().or(z.null())),\n  filter: entityFilterParser.optional(),\n  isPrevious: z.boolean(),\n  query: z.string().optional(),\n  firstSortFieldValues: z.array(z.string().or(z.null())).optional(),\n  totalItems: z.number().optional(),\n});\n\nfunction parseCursorFromRequest(\n  request?: QueryEntitiesRequest,\n): Partial<Cursor> {\n  if (isQueryEntitiesInitialRequest(request)) {\n    const {\n      filter,\n      orderFields: sortFields = [defaultSortField],\n      fullTextFilter,\n    } = request;\n    return { filter, orderFields: sortFields, fullTextFilter };\n  }\n  if (isQueryEntitiesCursorRequest(request)) {\n    return request.cursor;\n  }\n  return {};\n}\n\nfunction invertOrder(order: EntityOrder['order']) {\n  return order === 'asc' ? 'desc' : 'asc';\n}\n\nfunction sortFieldsFromRow(row: DbSearchRow) {\n  return [row.value, row.entity_id];\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  Entity,\n  stringifyEntityRef,\n  stringifyLocationRef,\n} from '@backstage/catalog-model';\nimport { assertError } from '@backstage/errors';\nimport {\n  CatalogProcessor,\n  CatalogProcessorResult,\n  DeferredEntity,\n  EntityRelationSpec,\n} from '@backstage/plugin-catalog-node';\nimport { locationSpecToLocationEntity } from '../util/conversion';\nimport {\n  getEntityLocationRef,\n  getEntityOriginLocationRef,\n  validateEntityEnvelope,\n} from './util';\nimport { RefreshKeyData } from './types';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\n/**\n * Helper class for aggregating all of the emitted data from processors.\n */\nexport class ProcessorOutputCollector {\n  private readonly errors = new Array<Error>();\n  private readonly relations = new Array<EntityRelationSpec>();\n  private readonly deferredEntities = new Array<DeferredEntity>();\n  private readonly refreshKeys = new Array<RefreshKeyData>();\n  private done = false;\n\n  constructor(\n    private readonly logger: LoggerService,\n    private readonly parentEntity: Entity,\n  ) {}\n\n  generic(): (i: CatalogProcessorResult) => void {\n    return i => this.receive(this.logger, i);\n  }\n\n  forProcessor(\n    processor: CatalogProcessor,\n  ): (i: CatalogProcessorResult) => void {\n    const logger = this.logger.child({\n      processor: processor.getProcessorName(),\n    });\n    return i => this.receive(logger, i);\n  }\n\n  results() {\n    this.done = true;\n    return {\n      errors: this.errors,\n      relations: this.relations,\n      refreshKeys: this.refreshKeys,\n      deferredEntities: this.deferredEntities,\n    };\n  }\n\n  private receive(logger: LoggerService, i: CatalogProcessorResult) {\n    if (this.done) {\n      logger.warn(\n        `Item of type \"${\n          i.type\n        }\" was emitted after processing had completed. Stack trace: ${\n          new Error().stack\n        }`,\n      );\n      return;\n    }\n\n    if (i.type === 'entity') {\n      let entity: Entity;\n      const location = stringifyLocationRef(i.location);\n\n      try {\n        entity = validateEntityEnvelope(i.entity);\n      } catch (e) {\n        assertError(e);\n        logger.debug(`Envelope validation failed at ${location}, ${e}`);\n        this.errors.push(e);\n        return;\n      }\n\n      // The processor contract says you should return the \"trunk\" (current)\n      // entity, not emit it. But it happens that this is misunderstood or\n      // accidentally forgotten. This can lead to circular references which at\n      // best is wasteful, so we try to be helpful by ignoring such emitted\n      // entities.\n      const entityRef = stringifyEntityRef(entity);\n      if (entityRef === stringifyEntityRef(this.parentEntity)) {\n        logger.warn(\n          `Ignored emitted entity ${entityRef} whose ref was identical to the one being processed. This commonly indicates mistakenly emitting the input entity instead of returning it.`,\n        );\n        return;\n      }\n\n      // Note that at this point, we have only validated the envelope part of\n      // the entity data. Annotations are not part of that, so we have to be\n      // defensive. If the annotations were malformed (e.g. were not a valid\n      // object), we just skip over this step and let the full entity\n      // validation at the next step of processing catch that.\n      const annotations = entity.metadata.annotations || {};\n      if (typeof annotations === 'object' && !Array.isArray(annotations)) {\n        const originLocation = getEntityOriginLocationRef(this.parentEntity);\n        entity = {\n          ...entity,\n          metadata: {\n            ...entity.metadata,\n            annotations: {\n              ...annotations,\n              [ANNOTATION_ORIGIN_LOCATION]: originLocation,\n              [ANNOTATION_LOCATION]: location,\n            },\n          },\n        };\n      }\n\n      this.deferredEntities.push({ entity, locationKey: location });\n    } else if (i.type === 'location') {\n      const entity = locationSpecToLocationEntity({\n        location: i.location,\n        parentEntity: this.parentEntity,\n      });\n      const locationKey = getEntityLocationRef(entity);\n      this.deferredEntities.push({ entity, locationKey });\n    } else if (i.type === 'relation') {\n      this.relations.push(i.relation);\n    } else if (i.type === 'error') {\n      this.errors.push(i.error);\n    } else if (i.type === 'refresh') {\n      this.refreshKeys.push({ key: i.key });\n    }\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport {\n  CatalogProcessor,\n  CatalogProcessorCache,\n} from '@backstage/plugin-catalog-node';\nimport { isObject } from './util';\n\nclass SingleProcessorSubCache implements CatalogProcessorCache {\n  private newState?: JsonObject;\n\n  constructor(private readonly existingState?: JsonObject) {}\n\n  async get<ItemType extends JsonValue>(\n    key: string,\n  ): Promise<ItemType | undefined> {\n    return this.existingState?.[key] as ItemType | undefined;\n  }\n\n  async set<ItemType extends JsonValue>(\n    key: string,\n    value: ItemType,\n  ): Promise<void> {\n    if (!this.newState) {\n      this.newState = {};\n    }\n\n    this.newState[key] = value;\n  }\n\n  collect(): JsonObject | undefined {\n    return this.newState ?? this.existingState;\n  }\n}\n\nclass SingleProcessorCache implements CatalogProcessorCache {\n  private newState?: JsonObject;\n  private subCaches: Map<string, SingleProcessorSubCache> = new Map();\n\n  constructor(private readonly existingState?: JsonObject) {}\n\n  async get<ItemType extends JsonValue>(\n    key: string,\n  ): Promise<ItemType | undefined> {\n    return this.existingState?.[key] as ItemType | undefined;\n  }\n\n  async set<ItemType extends JsonValue>(\n    key: string,\n    value: ItemType,\n  ): Promise<void> {\n    if (!this.newState) {\n      this.newState = {};\n    }\n\n    this.newState[key] = value;\n  }\n\n  withKey(key: string) {\n    const existingSubCache = this.subCaches.get(key);\n    if (existingSubCache) {\n      return existingSubCache;\n    }\n    const existing = this.existingState?.[key];\n    const subCache = new SingleProcessorSubCache(\n      isObject(existing) ? existing : undefined,\n    );\n    this.subCaches.set(key, subCache);\n    return subCache;\n  }\n\n  collect(): JsonObject | undefined {\n    let obj = this.newState ?? this.existingState;\n    for (const [key, subCache] of this.subCaches) {\n      const subCacheValue = subCache.collect();\n      if (subCacheValue) {\n        obj = { ...obj, [key]: subCacheValue };\n      }\n    }\n    return obj;\n  }\n}\n\nexport class ProcessorCacheManager {\n  private caches = new Map<string, SingleProcessorCache>();\n\n  constructor(private readonly existingState: JsonObject) {}\n\n  forProcessor(\n    processor: CatalogProcessor,\n    key?: string,\n  ): CatalogProcessorCache {\n    // constructor name will be deprecated in the future when we make `getProcessorName` required in the implementation\n    const name = processor.getProcessorName();\n    const cache = this.caches.get(name);\n    if (cache) {\n      return key ? cache.withKey(key) : cache;\n    }\n\n    const existing = this.existingState[name];\n\n    const newCache = new SingleProcessorCache(\n      isObject(existing) ? existing : undefined,\n    );\n    this.caches.set(name, newCache);\n    return key ? newCache.withKey(key) : newCache;\n  }\n\n  collect(): JsonObject {\n    const result: JsonObject = {};\n    for (const [key, value] of this.caches.entries()) {\n      result[key] = value.collect();\n    }\n\n    return result;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Span, trace } from '@opentelemetry/api';\nimport {\n  Entity,\n  EntityPolicy,\n  LocationEntity,\n  parseLocationRef,\n  stringifyEntityRef,\n  stringifyLocationRef,\n} from '@backstage/catalog-model';\nimport {\n  assertError,\n  ConflictError,\n  InputError,\n  NotAllowedError,\n} from '@backstage/errors';\nimport { JsonValue } from '@backstage/types';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport path from 'path';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport {\n  CatalogProcessor,\n  CatalogProcessorParser,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\nimport {\n  CatalogProcessingOrchestrator,\n  EntityProcessingRequest,\n  EntityProcessingResult,\n} from './types';\nimport { ProcessorOutputCollector } from './ProcessorOutputCollector';\nimport {\n  getEntityLocationRef,\n  getEntityOriginLocationRef,\n  isLocationEntity,\n  isObject,\n  toAbsoluteUrl,\n  validateEntity,\n  validateEntityEnvelope,\n} from './util';\nimport { CatalogRulesEnforcer } from '../ingestion/CatalogRules';\nimport { ProcessorCacheManager } from './ProcessorCacheManager';\nimport {\n  addEntityAttributes,\n  TRACER_ID,\n  withActiveSpan,\n} from '../util/opentelemetry';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nconst tracer = trace.getTracer(TRACER_ID);\n\ntype Context = {\n  entityRef: string;\n  location: LocationSpec;\n  originLocation: LocationSpec;\n  collector: ProcessorOutputCollector;\n  cache: ProcessorCacheManager;\n};\n\nfunction addProcessorAttributes(\n  span: Span,\n  stage: string,\n  processor: CatalogProcessor,\n) {\n  span.setAttribute('backstage.catalog.processor.stage', stage);\n  span.setAttribute(\n    'backstage.catalog.processor.name',\n    processor.getProcessorName(),\n  );\n}\n\n/** @public */\nexport class DefaultCatalogProcessingOrchestrator\n  implements CatalogProcessingOrchestrator\n{\n  constructor(\n    private readonly options: {\n      processors: CatalogProcessor[];\n      integrations: ScmIntegrationRegistry;\n      logger: LoggerService;\n      parser: CatalogProcessorParser;\n      policy: EntityPolicy;\n      rulesEnforcer: CatalogRulesEnforcer;\n      legacySingleProcessorValidation: boolean;\n    },\n  ) {}\n\n  async process(\n    request: EntityProcessingRequest,\n  ): Promise<EntityProcessingResult> {\n    return this.processSingleEntity(request.entity, request.state);\n  }\n\n  private async processSingleEntity(\n    unprocessedEntity: Entity,\n    state: JsonValue | undefined,\n  ): Promise<EntityProcessingResult> {\n    const collector = new ProcessorOutputCollector(\n      this.options.logger,\n      unprocessedEntity,\n    );\n\n    // Cache that is scoped to the entity and processor\n    const cache = new ProcessorCacheManager(\n      isObject(state) && isObject(state.cache) ? state.cache : {},\n    );\n\n    try {\n      // This will be checked and mutated step by step below\n      let entity: Entity = unprocessedEntity;\n\n      // NOTE: At this early point, we can only rely on the envelope having to\n      // be valid; full entity + kind validation happens after the (potentially\n      // mutative) pre-steps. This means that the code below can't make a lot\n      // of assumptions about the data despite it using the Entity type.\n      try {\n        validateEntityEnvelope(entity);\n      } catch (e) {\n        throw new InputError(\n          `Entity envelope failed validation before processing`,\n          e,\n        );\n      }\n\n      // TODO: which one do we actually use for the location?\n      // source-location? - maybe probably doesn't exist yet?\n      const context: Context = {\n        entityRef: stringifyEntityRef(entity),\n        location: parseLocationRef(getEntityLocationRef(entity)),\n        originLocation: parseLocationRef(getEntityOriginLocationRef(entity)),\n        cache,\n        collector,\n      };\n\n      // Run the steps\n      entity = await this.runPreProcessStep(entity, context);\n      entity = await this.runPolicyStep(entity);\n      await this.runValidateStep(entity, context);\n      if (isLocationEntity(entity)) {\n        await this.runSpecialLocationStep(entity, context);\n      }\n      entity = await this.runPostProcessStep(entity, context);\n\n      // Check that any emitted entities are permitted to originate from that\n      // particular location according to the catalog rules\n      const collectorResults = context.collector.results();\n      for (const deferredEntity of collectorResults.deferredEntities) {\n        if (\n          !this.options.rulesEnforcer.isAllowed(\n            deferredEntity.entity,\n            context.originLocation,\n          )\n        ) {\n          throw new NotAllowedError(\n            `Entity ${stringifyEntityRef(\n              deferredEntity.entity,\n            )} at ${stringifyLocationRef(\n              context.location,\n            )}, originated at ${stringifyLocationRef(\n              context.originLocation,\n            )}, is not of an allowed kind for that location`,\n          );\n        }\n      }\n\n      return {\n        ...collectorResults,\n        completedEntity: entity,\n        state: { cache: cache.collect() },\n        ok: collectorResults.errors.length === 0,\n      };\n    } catch (error) {\n      assertError(error);\n      return {\n        ok: false,\n        errors: collector.results().errors.concat(error),\n      };\n    }\n  }\n\n  // Pre-process phase, used to populate entities with data that is required\n  // during the main processing step\n  private async runPreProcessStep(\n    entity: Entity,\n    context: Context,\n  ): Promise<Entity> {\n    return await withActiveSpan(tracer, 'ProcessingStage', async stageSpan => {\n      addEntityAttributes(stageSpan, entity);\n      stageSpan.setAttribute('backstage.catalog.processor.stage', 'preProcess');\n      let res = entity;\n\n      for (const processor of this.options.processors) {\n        if (processor.preProcessEntity) {\n          let innerRes = res;\n          res = await withActiveSpan(tracer, 'ProcessingStep', async span => {\n            addEntityAttributes(span, entity);\n            addProcessorAttributes(span, 'preProcessEntity', processor);\n            try {\n              innerRes = await processor.preProcessEntity!(\n                innerRes,\n                context.location,\n                context.collector.forProcessor(processor),\n                context.originLocation,\n                context.cache.forProcessor(processor),\n              );\n            } catch (e) {\n              throw new InputError(\n                `Processor ${processor.constructor.name} threw an error while preprocessing`,\n                e,\n              );\n            }\n            return innerRes;\n          });\n        }\n      }\n\n      return res;\n    });\n  }\n\n  /**\n   * Enforce entity policies making sure that entities conform to a general schema\n   */\n  private async runPolicyStep(entity: Entity): Promise<Entity> {\n    return await withActiveSpan(tracer, 'ProcessingStage', async stageSpan => {\n      addEntityAttributes(stageSpan, entity);\n      stageSpan.setAttribute(\n        'backstage.catalog.processor.stage',\n        'enforcePolicy',\n      );\n      let policyEnforcedEntity: Entity | undefined;\n\n      try {\n        policyEnforcedEntity = await this.options.policy.enforce(entity);\n      } catch (e) {\n        throw new InputError(\n          `Policy check failed for ${stringifyEntityRef(entity)}`,\n          e,\n        );\n      }\n\n      if (!policyEnforcedEntity) {\n        throw new Error(\n          `Policy unexpectedly returned no data for ${stringifyEntityRef(\n            entity,\n          )}`,\n        );\n      }\n\n      return policyEnforcedEntity;\n    });\n  }\n\n  /**\n   * Validate the given entity\n   */\n  private async runValidateStep(\n    entity: Entity,\n    context: Context,\n  ): Promise<void> {\n    return await withActiveSpan(tracer, 'ProcessingStage', async stageSpan => {\n      addEntityAttributes(stageSpan, entity);\n      stageSpan.setAttribute('backstage.catalog.processor.stage', 'validate');\n      // Double check that none of the previous steps tried to change something\n      // related to the entity ref, which would break downstream\n      if (stringifyEntityRef(entity) !== context.entityRef) {\n        throw new ConflictError(\n          'Fatal: The entity kind, namespace, or name changed during processing',\n        );\n      }\n\n      // Validate that the end result is a valid Entity at all\n      try {\n        validateEntity(entity);\n      } catch (e) {\n        throw new ConflictError(\n          `Entity envelope for ${context.entityRef} failed validation after preprocessing`,\n          e,\n        );\n      }\n\n      let valid = false;\n\n      for (const processor of this.options.processors) {\n        if (processor.validateEntityKind) {\n          try {\n            const thisValid = await withActiveSpan(\n              tracer,\n              'ProcessingStep',\n              async span => {\n                addEntityAttributes(span, entity);\n                addProcessorAttributes(span, 'validateEntityKind', processor);\n                return await processor.validateEntityKind!(entity);\n              },\n            );\n            if (thisValid) {\n              valid = true;\n              if (this.options.legacySingleProcessorValidation) {\n                break;\n              }\n            }\n          } catch (e) {\n            throw new InputError(\n              `Processor ${processor.constructor.name} threw an error while validating the entity ${context.entityRef}`,\n              e,\n            );\n          }\n        }\n      }\n\n      if (!valid) {\n        throw new InputError(\n          `No processor recognized the entity ${context.entityRef} as valid, possibly caused by a foreign kind or apiVersion`,\n        );\n      }\n    });\n  }\n\n  /**\n   * Backwards compatible processing of location entities\n   */\n  private async runSpecialLocationStep(\n    entity: LocationEntity,\n    context: Context,\n  ): Promise<void> {\n    return await withActiveSpan(tracer, 'ProcessingStage', async stageSpan => {\n      addEntityAttributes(stageSpan, entity);\n      stageSpan.setAttribute(\n        'backstage.catalog.processor.stage',\n        'readLocation',\n      );\n      const { type = context.location.type, presence = 'required' } =\n        entity.spec;\n      const targets = new Array<string>();\n      if (entity.spec.target) {\n        targets.push(entity.spec.target);\n      }\n      if (entity.spec.targets) {\n        targets.push(...entity.spec.targets);\n      }\n\n      for (const maybeRelativeTarget of targets) {\n        if (type === 'file' && maybeRelativeTarget.endsWith(path.sep)) {\n          context.collector.generic()(\n            processingResult.inputError(\n              context.location,\n              `LocationEntityProcessor cannot handle ${type} type location with target ${context.location.target} that ends with a path separator`,\n            ),\n          );\n          continue;\n        }\n        const target = toAbsoluteUrl(\n          this.options.integrations,\n          context.location,\n          type,\n          maybeRelativeTarget,\n        );\n\n        let didRead = false;\n        for (const processor of this.options.processors) {\n          if (processor.readLocation) {\n            try {\n              const read = await withActiveSpan(\n                tracer,\n                'ProcessingStep',\n                async span => {\n                  addEntityAttributes(span, entity);\n                  addProcessorAttributes(span, 'readLocation', processor);\n                  return await processor.readLocation!(\n                    {\n                      type,\n                      target,\n                      presence,\n                    },\n                    presence === 'optional',\n                    context.collector.forProcessor(processor),\n                    this.options.parser,\n                    context.cache.forProcessor(processor, target),\n                  );\n                },\n              );\n              if (read) {\n                didRead = true;\n                break;\n              }\n            } catch (e) {\n              throw new InputError(\n                `Processor ${processor.constructor.name} threw an error while reading ${type}:${target}`,\n                e,\n              );\n            }\n          }\n        }\n        if (!didRead) {\n          throw new InputError(\n            `No processor was able to handle reading of ${type}:${target}`,\n          );\n        }\n      }\n    });\n  }\n\n  /**\n   * Main processing step of the entity\n   */\n  private async runPostProcessStep(\n    entity: Entity,\n    context: Context,\n  ): Promise<Entity> {\n    return await withActiveSpan(tracer, 'ProcessingStage', async stageSpan => {\n      addEntityAttributes(stageSpan, entity);\n      stageSpan.setAttribute(\n        'backstage.catalog.processor.stage',\n        'postProcessEntity',\n      );\n      let res = entity;\n\n      for (const processor of this.options.processors) {\n        if (processor.postProcessEntity) {\n          let innerRes = res;\n          res = await withActiveSpan(tracer, 'ProcessingStep', async span => {\n            addEntityAttributes(span, entity);\n            addProcessorAttributes(span, 'postProcessEntity', processor);\n            try {\n              innerRes = await processor.postProcessEntity!(\n                innerRes,\n                context.location,\n                context.collector.forProcessor(processor),\n                context.cache.forProcessor(processor),\n              );\n            } catch (e) {\n              throw new InputError(\n                `Processor ${processor.constructor.name} threw an error while postprocessing`,\n                e,\n              );\n            }\n            return innerRes;\n          });\n        }\n      }\n\n      return res;\n    });\n  }\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { durationToMilliseconds, HumanDuration } from '@backstage/types';\nimport { Knex } from 'knex';\nimport { DateTime } from 'luxon';\nimport { timestampToDateTime } from '../../conversion';\nimport { DbRefreshStateRow } from '../../tables';\n\n// TODO(freben): There is no retry counter or similar. If items start\n// perpetually crashing during stitching, they'll just get silently retried over\n// and over again, for better or worse. This will be visible in metrics though.\n\n/**\n * Finds entities that are marked for deferred stitching.\n *\n * @remarks\n *\n * This assumes that the stitching strategy is set to deferred.\n *\n * They are expected to already have the next_stitch_ticket set (by\n * markForStitching) so that their tickets can be returned with each item.\n *\n * All returned items have their next_stitch_at updated to be moved forward by\n * the given timeout duration. This has the effect that they will be picked up\n * for stitching again in the future, if it hasn't completed by that point for\n * some reason (restarts, crashes, etc).\n */\nexport async function getDeferredStitchableEntities(options: {\n  knex: Knex | Knex.Transaction;\n  batchSize: number;\n  stitchTimeout: HumanDuration;\n}): Promise<\n  Array<{\n    entityRef: string;\n    stitchTicket: string;\n    stitchRequestedAt: DateTime; // the time BEFORE moving it forward by the timeout\n  }>\n> {\n  const { knex, batchSize, stitchTimeout } = options;\n\n  let itemsQuery = knex<DbRefreshStateRow>('refresh_state').select(\n    'entity_ref',\n    'next_stitch_at',\n    'next_stitch_ticket',\n  );\n\n  // This avoids duplication of work because of race conditions and is\n  // also fast because locked rows are ignored rather than blocking.\n  // It's only available in MySQL and PostgreSQL\n  if (['mysql', 'mysql2', 'pg'].includes(knex.client.config.client)) {\n    itemsQuery = itemsQuery.forUpdate().skipLocked();\n  }\n\n  const items = await itemsQuery\n    .whereNotNull('next_stitch_at')\n    .whereNotNull('next_stitch_ticket')\n    .where('next_stitch_at', '<=', knex.fn.now())\n    .orderBy('next_stitch_at', 'asc')\n    .limit(batchSize);\n\n  if (!items.length) {\n    return [];\n  }\n\n  await knex<DbRefreshStateRow>('refresh_state')\n    .whereIn(\n      'entity_ref',\n      items.map(i => i.entity_ref),\n    )\n    // avoid race condition where someone completes a stitch right between these statements\n    .whereNotNull('next_stitch_ticket')\n    .update({\n      next_stitch_at: nowPlus(knex, stitchTimeout),\n    });\n\n  return items.map(i => ({\n    entityRef: i.entity_ref,\n    stitchTicket: i.next_stitch_ticket!,\n    stitchRequestedAt: timestampToDateTime(i.next_stitch_at!),\n  }));\n}\n\nfunction nowPlus(knex: Knex, duration: HumanDuration): Knex.Raw {\n  const seconds = durationToMilliseconds(duration) / 1000;\n  if (knex.client.config.client.includes('sqlite3')) {\n    return knex.raw(`datetime('now', ?)`, [`${seconds} seconds`]);\n  } else if (knex.client.config.client.includes('mysql')) {\n    return knex.raw(`now() + interval ${seconds} second`);\n  }\n  return knex.raw(`now() + interval '${seconds} seconds'`);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_NAMESPACE, Entity } from '@backstage/catalog-model';\nimport { InputError } from '@backstage/errors';\nimport { DbSearchRow } from '../../tables';\n\n// These are excluded in the generic loop, either because they do not make sense\n// to index, or because they are special-case always inserted whether they are\n// null or not\nconst SPECIAL_KEYS = [\n  'attachments',\n  'relations',\n  'status',\n  'metadata.name',\n  'metadata.namespace',\n  'metadata.uid',\n  'metadata.etag',\n];\n\n// The maximum length allowed for search values. These columns are indexed, and\n// database engines do not like to index on massive values. For example,\n// postgres will balk after 8191 byte line sizes.\nconst MAX_KEY_LENGTH = 200;\nconst MAX_VALUE_LENGTH = 200;\n\ntype Kv = {\n  key: string;\n  value: unknown;\n};\n\n// Helper for traversing through a nested structure and outputting a list of\n// path->value entries of the leaves.\n//\n// For example, this yaml structure\n//\n// a: 1\n// b:\n//   c: null\n//   e: [f, g]\n// h:\n//  - i: 1\n//    j: k\n//  - i: 2\n//    j: l\n//\n// will result in\n//\n// \"a\", 1\n// \"b.c\", null\n// \"b.e\": \"f\"\n// \"b.e.f\": true\n// \"b.e\": \"g\"\n// \"b.e.g\": true\n// \"h.i\": 1\n// \"h.j\": \"k\"\n// \"h.i\": 2\n// \"h.j\": \"l\"\nexport function traverse(root: unknown): Kv[] {\n  const output: Kv[] = [];\n\n  function visit(path: string, current: unknown) {\n    if (SPECIAL_KEYS.includes(path)) {\n      return;\n    }\n\n    // empty or scalar\n    if (\n      current === undefined ||\n      current === null ||\n      ['string', 'number', 'boolean'].includes(typeof current)\n    ) {\n      output.push({ key: path, value: current });\n      return;\n    }\n\n    // unknown\n    if (typeof current !== 'object') {\n      return;\n    }\n\n    // array\n    if (Array.isArray(current)) {\n      for (const item of current) {\n        // NOTE(freben): The reason that these are output in two different ways,\n        // is to support use cases where you want to express that MORE than one\n        // tag is present in a list. Since the EntityFilters structure is a\n        // record, you can't have several entries of the same key. Therefore\n        // you will have to match on\n        //\n        // { \"a.b\": [\"true\"], \"a.c\": [\"true\"] }\n        //\n        // rather than\n        //\n        // { \"a\": [\"b\", \"c\"] }\n        //\n        // because the latter means EITHER b or c has to be present.\n        visit(path, item);\n        if (typeof item === 'string') {\n          output.push({ key: `${path}.${item}`, value: true });\n        }\n      }\n      return;\n    }\n\n    // object\n    for (const [key, value] of Object.entries(current!)) {\n      visit(path ? `${path}.${key}` : key, value);\n    }\n  }\n\n  visit('', root);\n\n  return output;\n}\n\n// Translates a number of raw data rows to search table rows\nexport function mapToRows(input: Kv[], entityId: string): DbSearchRow[] {\n  const result: DbSearchRow[] = [];\n\n  for (const { key: rawKey, value: rawValue } of input) {\n    const key = rawKey.toLocaleLowerCase('en-US');\n    if (key.length > MAX_KEY_LENGTH) {\n      continue;\n    }\n    if (rawValue === undefined || rawValue === null) {\n      result.push({\n        entity_id: entityId,\n        key,\n        original_value: null,\n        value: null,\n      });\n    } else {\n      const value = String(rawValue).toLocaleLowerCase('en-US');\n      if (value.length <= MAX_VALUE_LENGTH) {\n        result.push({\n          entity_id: entityId,\n          key,\n          original_value: String(rawValue),\n          value: value,\n        });\n      } else {\n        result.push({\n          entity_id: entityId,\n          key,\n          original_value: null,\n          value: null,\n        });\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * Generates all of the search rows that are relevant for this entity.\n *\n * @param entityId - The uid of the entity\n * @param entity - The entity\n * @returns A list of entity search rows\n */\nexport function buildEntitySearch(\n  entityId: string,\n  entity: Entity,\n): DbSearchRow[] {\n  // Visit the base structure recursively\n  const raw = traverse(entity);\n\n  // Start with some special keys that are always present because you want to\n  // be able to easily search for null specifically\n  raw.push({ key: 'metadata.name', value: entity.metadata.name });\n  raw.push({ key: 'metadata.namespace', value: entity.metadata.namespace });\n  raw.push({ key: 'metadata.uid', value: entity.metadata.uid });\n\n  // Namespace not specified has the default value \"default\", so we want to\n  // match on that as well\n  if (!entity.metadata.namespace) {\n    raw.push({ key: 'metadata.namespace', value: DEFAULT_NAMESPACE });\n  }\n\n  // Visit relations\n  for (const relation of entity.relations ?? []) {\n    raw.push({\n      key: `relations.${relation.type}`,\n      value: relation.targetRef,\n    });\n  }\n\n  // This validates that there are no keys that vary only in casing, such\n  // as `spec.foo` and `spec.Foo`.\n  const keys = new Set(raw.map(r => r.key));\n  const lowerKeys = new Set(raw.map(r => r.key.toLocaleLowerCase('en-US')));\n  if (keys.size !== lowerKeys.size) {\n    const difference = [];\n    for (const key of keys) {\n      const lower = key.toLocaleLowerCase('en-US');\n      if (!lowerKeys.delete(lower)) {\n        difference.push(lower);\n      }\n    }\n    const badKeys = `'${difference.join(\"', '\")}'`;\n    throw new InputError(\n      `Entity has duplicate keys that vary only in casing, ${badKeys}`,\n    );\n  }\n\n  return mapToRows(raw, entityId);\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { DbRefreshStateRow } from '../../tables';\n\n/**\n * Marks a single entity as having been stitched.\n *\n * @remarks\n *\n * This assumes that the stitching strategy is set to deferred.\n *\n * The timestamp and ticket are only reset if the ticket hasn't changed. If it\n * has, it means that a new stitch request has been made, and the entity should\n * be stitched once more some time in the future - or is indeed already being\n * stitched concurrently with ourselves.\n */\nexport async function markDeferredStitchCompleted(option: {\n  knex: Knex | Knex.Transaction;\n  entityRef: string;\n  stitchTicket: string;\n}): Promise<void> {\n  const { knex, entityRef, stitchTicket } = option;\n\n  await knex<DbRefreshStateRow>('refresh_state')\n    .update({\n      next_stitch_at: null,\n      next_stitch_ticket: null,\n    })\n    .where('entity_ref', '=', entityRef)\n    .andWhere('next_stitch_ticket', '=', stitchTicket);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { createHash } from 'crypto';\nimport stableStringify from 'fast-json-stable-stringify';\n\n// The number of items that are sent per batch to the database layer, when\n// doing .batchInsert calls to knex. This needs to be low enough to not cause\n// errors in the underlying engine due to exceeding query limits, but large\n// enough to get the speed benefits.\nexport const BATCH_SIZE = 50;\n\nexport function generateStableHash(entity: Entity) {\n  return createHash('sha1')\n    .update(stableStringify({ ...entity }))\n    .digest('hex');\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ENTITY_STATUS_CATALOG_PROCESSING_TYPE } from '@backstage/catalog-client';\nimport {\n  ANNOTATION_EDIT_URL,\n  ANNOTATION_VIEW_URL,\n  EntityRelation,\n} from '@backstage/catalog-model';\nimport { AlphaEntity, EntityStatusItem } from '@backstage/catalog-model/alpha';\nimport { SerializedError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport { v4 as uuid } from 'uuid';\nimport { StitchingStrategy } from '../../../stitching/types';\nimport {\n  DbFinalEntitiesRow,\n  DbRefreshStateRow,\n  DbSearchRow,\n} from '../../tables';\nimport { buildEntitySearch } from './buildEntitySearch';\nimport { markDeferredStitchCompleted } from './markDeferredStitchCompleted';\nimport { BATCH_SIZE, generateStableHash } from './util';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\n// See https://github.com/facebook/react/blob/f0cf832e1d0c8544c36aa8b310960885a11a847c/packages/react-dom-bindings/src/shared/sanitizeURL.js\nconst scriptProtocolPattern =\n  // eslint-disable-next-line no-control-regex\n  /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*\\:/i;\n\n/**\n * Performs the act of stitching - to take all of the various outputs from the\n * ingestion process, and stitching them together into the final entity JSON\n * shape.\n */\nexport async function performStitching(options: {\n  knex: Knex | Knex.Transaction;\n  logger: LoggerService;\n  strategy: StitchingStrategy;\n  entityRef: string;\n  stitchTicket?: string;\n}): Promise<'changed' | 'unchanged' | 'abandoned'> {\n  const { knex, logger, entityRef } = options;\n  const stitchTicket = options.stitchTicket ?? uuid();\n\n  const entityResult = await knex<DbRefreshStateRow>('refresh_state')\n    .where({ entity_ref: entityRef })\n    .limit(1)\n    .select('entity_id');\n  if (!entityResult.length) {\n    // Entity does no exist in refresh state table, no stitching required.\n    return 'abandoned';\n  }\n\n  // Insert stitching ticket that will be compared before inserting the final entity.\n  await knex<DbFinalEntitiesRow>('final_entities')\n    .insert({\n      entity_id: entityResult[0].entity_id,\n      hash: '',\n      stitch_ticket: stitchTicket,\n    })\n    .onConflict('entity_id')\n    .merge(['stitch_ticket']);\n\n  // Selecting from refresh_state and final_entities should yield exactly\n  // one row (except in abnormal cases where the stitch was invoked for\n  // something that didn't exist at all, in which case it's zero rows).\n  // The join with the temporary incoming_references still gives one row.\n  const [processedResult, relationsResult] = await Promise.all([\n    knex\n      .with('incoming_references', function incomingReferences(builder) {\n        return builder\n          .from('refresh_state_references')\n          .where({ target_entity_ref: entityRef })\n          .count({ count: '*' });\n      })\n      .select({\n        entityId: 'refresh_state.entity_id',\n        processedEntity: 'refresh_state.processed_entity',\n        errors: 'refresh_state.errors',\n        incomingReferenceCount: 'incoming_references.count',\n        previousHash: 'final_entities.hash',\n      })\n      .from('refresh_state')\n      .where({ 'refresh_state.entity_ref': entityRef })\n      .crossJoin(knex.raw('incoming_references'))\n      .leftOuterJoin('final_entities', {\n        'final_entities.entity_id': 'refresh_state.entity_id',\n      }),\n    knex\n      .distinct({\n        relationType: 'type',\n        relationTarget: 'target_entity_ref',\n      })\n      .from('relations')\n      .where({ source_entity_ref: entityRef })\n      .orderBy('relationType', 'asc')\n      .orderBy('relationTarget', 'asc'),\n  ]);\n\n  // If there were no rows returned, it would mean that there was no\n  // matching row even in the refresh_state. This can happen for example\n  // if we emit a relation to something that hasn't been ingested yet.\n  // It's safe to ignore this stitch attempt in that case.\n  if (!processedResult.length) {\n    logger.debug(\n      `Unable to stitch ${entityRef}, item does not exist in refresh state table`,\n    );\n    return 'abandoned';\n  }\n\n  const {\n    entityId,\n    processedEntity,\n    errors,\n    incomingReferenceCount,\n    previousHash,\n  } = processedResult[0];\n\n  // If there was no processed entity in place, the target hasn't been\n  // through the processing steps yet. It's safe to ignore this stitch\n  // attempt in that case, since another stitch will be triggered when\n  // that processing has finished.\n  if (!processedEntity) {\n    logger.debug(\n      `Unable to stitch ${entityRef}, the entity has not yet been processed`,\n    );\n    return 'abandoned';\n  }\n\n  // Grab the processed entity and stitch all of the relevant data into\n  // it\n  const entity = JSON.parse(processedEntity) as AlphaEntity;\n  const isOrphan = Number(incomingReferenceCount) === 0;\n  let statusItems: EntityStatusItem[] = [];\n\n  if (isOrphan) {\n    logger.debug(`${entityRef} is an orphan`);\n    entity.metadata.annotations = {\n      ...entity.metadata.annotations,\n      ['backstage.io/orphan']: 'true',\n    };\n  }\n  if (errors) {\n    const parsedErrors = JSON.parse(errors) as SerializedError[];\n    if (Array.isArray(parsedErrors) && parsedErrors.length) {\n      statusItems = parsedErrors.map(e => ({\n        type: ENTITY_STATUS_CATALOG_PROCESSING_TYPE,\n        level: 'error',\n        message: `${e.name}: ${e.message}`,\n        error: e,\n      }));\n    }\n  }\n  // We opt to do this check here as we otherwise can't guarantee that it will be run after all processors\n  for (const annotation of [ANNOTATION_VIEW_URL, ANNOTATION_EDIT_URL]) {\n    const value = entity.metadata.annotations?.[annotation];\n    if (typeof value === 'string' && scriptProtocolPattern.test(value)) {\n      entity.metadata.annotations![annotation] =\n        'https://backstage.io/annotation-rejected-for-security-reasons';\n    }\n  }\n\n  // TODO: entityRef is lower case and should be uppercase in the final\n  // result\n  entity.relations = relationsResult\n    .filter(row => row.relationType /* exclude null row, if relevant */)\n    .map<EntityRelation>(row => ({\n      type: row.relationType!,\n      targetRef: row.relationTarget!,\n    }));\n  if (statusItems.length) {\n    entity.status = {\n      ...entity.status,\n      items: [...(entity.status?.items ?? []), ...statusItems],\n    };\n  }\n\n  // If the output entity was actually not changed, just abort\n  const hash = generateStableHash(entity);\n  if (hash === previousHash) {\n    logger.debug(`Skipped stitching of ${entityRef}, no changes`);\n    return 'unchanged';\n  }\n\n  entity.metadata.uid = entityId;\n  if (!entity.metadata.etag) {\n    // If the original data source did not have its own etag handling,\n    // use the hash as a good-quality etag\n    entity.metadata.etag = hash;\n  }\n\n  // This may throw if the entity is invalid, so we call it before\n  // the final_entities write, even though we may end up not needing\n  // to write the search index.\n  const searchEntries = buildEntitySearch(entityId, entity);\n\n  const amountOfRowsChanged = await knex<DbFinalEntitiesRow>('final_entities')\n    .update({\n      final_entity: JSON.stringify(entity),\n      hash,\n      last_updated_at: knex.fn.now(),\n    })\n    .where('entity_id', entityId)\n    .where('stitch_ticket', stitchTicket)\n    .onConflict('entity_id')\n    .merge(['final_entity', 'hash', 'last_updated_at']);\n\n  if (options.strategy.mode === 'deferred') {\n    await markDeferredStitchCompleted({\n      knex: knex,\n      entityRef,\n      stitchTicket,\n    });\n  }\n\n  if (amountOfRowsChanged === 0) {\n    logger.debug(`Entity ${entityRef} is already stitched, skipping write.`);\n    return 'abandoned';\n  }\n\n  // TODO(freben): Search will probably need a similar safeguard against\n  // race conditions like the final_entities ticket handling above.\n  // Otherwise, it can be the case that:\n  // A writes the entity ->\n  // B writes the entity ->\n  // B writes search ->\n  // A writes search\n  await knex<DbSearchRow>('search').where({ entity_id: entityId }).delete();\n  await knex.batchInsert('search', searchEntries, BATCH_SIZE);\n\n  return 'changed';\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringifyError } from '@backstage/errors';\nimport { metrics } from '@opentelemetry/api';\nimport { Knex } from 'knex';\nimport { DateTime } from 'luxon';\nimport { DbRefreshStateRow } from '../database/tables';\nimport { createCounterMetric } from '../util/metrics';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\n// Helps wrap the timing and logging behaviors\nexport function progressTracker(knex: Knex, logger: LoggerService) {\n  // prom-client metrics are deprecated in favour of OpenTelemetry metrics.\n  const promStitchedEntities = createCounterMetric({\n    name: 'catalog_stitched_entities_count',\n    help: 'Amount of entities stitched. DEPRECATED, use OpenTelemetry metrics instead',\n  });\n\n  const meter = metrics.getMeter('default');\n\n  const stitchedEntities = meter.createCounter(\n    'catalog.stitched.entities.count',\n    {\n      description: 'Amount of entities stitched',\n    },\n  );\n\n  const stitchingDuration = meter.createHistogram(\n    'catalog.stitching.duration',\n    {\n      description: 'Time spent executing the full stitching flow',\n      unit: 'seconds',\n    },\n  );\n\n  const stitchingQueueCount = meter.createObservableGauge(\n    'catalog.stitching.queue.length',\n    { description: 'Number of entities currently in the stitching queue' },\n  );\n  stitchingQueueCount.addCallback(async result => {\n    const total = await knex<DbRefreshStateRow>('refresh_state')\n      .count({ count: '*' })\n      .whereNotNull('next_stitch_at');\n    result.observe(Number(total[0].count));\n  });\n\n  const stitchingQueueDelay = meter.createHistogram(\n    'catalog.stitching.queue.delay',\n    {\n      description:\n        'The amount of delay between being scheduled for stitching, and the start of actually being stitched',\n      unit: 'seconds',\n    },\n  );\n\n  function stitchStart(item: {\n    entityRef: string;\n    stitchRequestedAt?: DateTime;\n  }) {\n    logger.debug(`Stitching ${item.entityRef}`);\n\n    const startTime = process.hrtime();\n    if (item.stitchRequestedAt) {\n      stitchingQueueDelay.record(\n        -item.stitchRequestedAt.diffNow().as('seconds'),\n      );\n    }\n\n    function endTime() {\n      const delta = process.hrtime(startTime);\n      return delta[0] + delta[1] / 1e9;\n    }\n\n    function markComplete(result: string) {\n      promStitchedEntities.inc(1);\n      stitchedEntities.add(1, { result });\n      stitchingDuration.record(endTime(), { result });\n    }\n\n    function markFailed(error: Error) {\n      promStitchedEntities.inc(1);\n      stitchedEntities.add(1, { result: 'error' });\n      stitchingDuration.record(endTime(), { result: 'error' });\n      logger.error(\n        `Failed to stitch ${item.entityRef}, ${stringifyError(error)}`,\n      );\n    }\n\n    return {\n      markComplete,\n      markFailed,\n    };\n  }\n\n  return { stitchStart };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { durationToMilliseconds, HumanDuration } from '@backstage/types';\nimport { Knex } from 'knex';\nimport splitToChunks from 'lodash/chunk';\nimport { DateTime } from 'luxon';\nimport { getDeferredStitchableEntities } from '../database/operations/stitcher/getDeferredStitchableEntities';\nimport { markForStitching } from '../database/operations/stitcher/markForStitching';\nimport { performStitching } from '../database/operations/stitcher/performStitching';\nimport { DbRefreshStateRow } from '../database/tables';\nimport { startTaskPipeline } from '../processing/TaskPipeline';\nimport { progressTracker } from './progressTracker';\nimport {\n  Stitcher,\n  StitchingStrategy,\n  stitchingStrategyFromConfig,\n} from './types';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\ntype DeferredStitchItem = Awaited<\n  ReturnType<typeof getDeferredStitchableEntities>\n>[0];\n\ntype StitchProgressTracker = ReturnType<typeof progressTracker>;\n\n/**\n * Performs the act of stitching - to take all of the various outputs from the\n * ingestion process, and stitching them together into the final entity JSON\n * shape.\n */\nexport class DefaultStitcher implements Stitcher {\n  private readonly knex: Knex;\n  private readonly logger: LoggerService;\n  private readonly strategy: StitchingStrategy;\n  private readonly tracker: StitchProgressTracker;\n  private stopFunc?: () => void;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      knex: Knex;\n      logger: LoggerService;\n    },\n  ): DefaultStitcher {\n    return new DefaultStitcher({\n      knex: options.knex,\n      logger: options.logger,\n      strategy: stitchingStrategyFromConfig(config),\n    });\n  }\n\n  constructor(options: {\n    knex: Knex;\n    logger: LoggerService;\n    strategy: StitchingStrategy;\n  }) {\n    this.knex = options.knex;\n    this.logger = options.logger;\n    this.strategy = options.strategy;\n    this.tracker = progressTracker(options.knex, options.logger);\n  }\n\n  async stitch(options: {\n    entityRefs?: Iterable<string>;\n    entityIds?: Iterable<string>;\n  }) {\n    const { entityRefs, entityIds } = options;\n\n    if (this.strategy.mode === 'deferred') {\n      await markForStitching({\n        knex: this.knex,\n        strategy: this.strategy,\n        entityRefs,\n        entityIds,\n      });\n      return;\n    }\n\n    if (entityRefs) {\n      for (const entityRef of entityRefs) {\n        await this.#stitchOne({ entityRef });\n      }\n    }\n\n    if (entityIds) {\n      const chunks = splitToChunks(\n        Array.isArray(entityIds) ? entityIds : [...entityIds],\n        100,\n      );\n      for (const chunk of chunks) {\n        const rows = await this.knex<DbRefreshStateRow>('refresh_state')\n          .select('entity_ref')\n          .whereIn('entity_id', chunk);\n        for (const row of rows) {\n          await this.#stitchOne({ entityRef: row.entity_ref });\n        }\n      }\n    }\n  }\n\n  async start() {\n    if (this.strategy.mode === 'deferred') {\n      if (this.stopFunc) {\n        throw new Error('Processing engine is already started');\n      }\n\n      const { pollingInterval, stitchTimeout } = this.strategy;\n\n      const stopPipeline = startTaskPipeline<DeferredStitchItem>({\n        lowWatermark: 2,\n        highWatermark: 5,\n        pollingIntervalMs: durationToMilliseconds(pollingInterval),\n        loadTasks: async count => {\n          return await this.#getStitchableEntities(count, stitchTimeout);\n        },\n        processTask: async item => {\n          return await this.#stitchOne({\n            entityRef: item.entityRef,\n            stitchTicket: item.stitchTicket,\n            stitchRequestedAt: item.stitchRequestedAt,\n          });\n        },\n      });\n\n      this.stopFunc = () => {\n        stopPipeline();\n      };\n    }\n  }\n\n  async stop() {\n    if (this.strategy.mode === 'deferred') {\n      if (this.stopFunc) {\n        this.stopFunc();\n        this.stopFunc = undefined;\n      }\n    }\n  }\n\n  async #getStitchableEntities(count: number, stitchTimeout: HumanDuration) {\n    try {\n      return await getDeferredStitchableEntities({\n        knex: this.knex,\n        batchSize: count,\n        stitchTimeout: stitchTimeout,\n      });\n    } catch (error) {\n      this.logger.warn('Failed to load stitchable entities', error);\n      return [];\n    }\n  }\n\n  async #stitchOne(options: {\n    entityRef: string;\n    stitchTicket?: string;\n    stitchRequestedAt?: DateTime;\n  }) {\n    const track = this.tracker.stitchStart({\n      entityRef: options.entityRef,\n      stitchRequestedAt: options.stitchRequestedAt,\n    });\n\n    try {\n      const result = await performStitching({\n        knex: this.knex,\n        logger: this.logger,\n        strategy: this.strategy,\n        entityRef: options.entityRef,\n        stitchTicket: options.stitchTicket,\n      });\n      track.markComplete(result);\n    } catch (error) {\n      track.markFailed(error);\n    }\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { Request } from 'express';\nimport { z } from 'zod';\n\nconst schema = z.object({\n  entityRefs: z.array(z.string()),\n  fields: z.array(z.string()).optional(),\n});\n\nexport function entitiesBatchRequest(req: Request): z.infer<typeof schema> {\n  try {\n    return schema.parse(req.body);\n  } catch (error) {\n    throw new InputError(\n      `Malformed request body (did you remember to specify an application/json content type?), ${error.message}`,\n    );\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  EntitiesSearchFilter,\n  EntityFilter,\n} from '@backstage/plugin-catalog-node';\n\n/**\n * Forms a full EntityFilter based on a single key-value(s) object.\n */\nexport function basicEntityFilter(\n  items: Record<string, string | string[]>,\n): EntityFilter {\n  const filtersByKey: Record<string, EntitiesSearchFilter> = {};\n\n  for (const [key, value] of Object.entries(items)) {\n    const values = [value].flat();\n\n    const f =\n      key in filtersByKey\n        ? filtersByKey[key]\n        : (filtersByKey[key] = { key, values: [] });\n\n    f.values!.push(...values);\n  }\n\n  return { anyOf: [{ allOf: Object.values(filtersByKey) }] };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\n\n/**\n * Takes a single unknown parameter and makes sure that it's a string that can\n * be parsed as an integer.\n */\nexport function parseIntegerParam(\n  param: unknown,\n  ctx: string,\n): number | undefined {\n  if (param === undefined) {\n    return undefined;\n  }\n\n  if (typeof param !== 'string') {\n    throw new InputError(`Invalid ${ctx}, not an integer on string form`);\n  }\n\n  const parsed = parseInt(param, 10);\n  if (!Number.isInteger(parsed) || String(parsed) !== param) {\n    throw new InputError(`Invalid ${ctx}, not an integer`);\n  }\n\n  return parsed;\n}\n\n/**\n * Takes a single unknown parameter and makes sure that it's a string.\n */\nexport function parseStringParam(\n  param: unknown,\n  ctx: string,\n): string | undefined {\n  if (param === undefined) {\n    return undefined;\n  }\n\n  if (typeof param !== 'string') {\n    throw new InputError(`Invalid ${ctx}, not a string`);\n  }\n\n  return param;\n}\n\n/**\n * Takes a single unknown parameter and makes sure that it's a single string or\n * an array of strings, and returns as an array.\n */\nexport function parseStringsParam(\n  param: unknown,\n  ctx: string,\n): string[] | undefined {\n  if (param === undefined) {\n    return undefined;\n  }\n\n  const array = [param].flat();\n  if (array.some(p => typeof p !== 'string')) {\n    throw new InputError(`Invalid ${ctx}, not a string`);\n  }\n\n  return array as string[];\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { parseStringsParam } from './common';\nimport {\n  EntitiesSearchFilter,\n  EntityFilter,\n} from '@backstage/plugin-catalog-node';\n\n/**\n * Parses the filtering part of a query, like\n * /entities?filter=metadata.namespace=default,kind=Component\n */\nexport function parseEntityFilterParams(\n  params: Record<string, unknown>,\n): EntityFilter | undefined {\n  // Each filter string is on the form a=b,c=d\n  const filterStrings = parseStringsParam(params.filter, 'filter');\n  if (!filterStrings) {\n    return undefined;\n  }\n\n  // Outer array: \"any of the inner ones\"\n  // Inner arrays: \"all of these must match\"\n  const filters = filterStrings.map(parseEntityFilterString).filter(Boolean);\n  if (!filters.length) {\n    return undefined;\n  }\n\n  return { anyOf: filters.map(f => ({ allOf: f! })) };\n}\n\n/**\n * Parses a single filter string as seen in a filter query, for example\n * metadata.namespace=default,kind=Component\n */\nexport function parseEntityFilterString(\n  filterString: string,\n): EntitiesSearchFilter[] | undefined {\n  const statements = filterString\n    .split(',')\n    .map(s => s.trim())\n    .filter(Boolean);\n\n  if (!statements.length) {\n    return undefined;\n  }\n\n  const filtersByKey: Record<string, EntitiesSearchFilter> = {};\n\n  for (const statement of statements) {\n    const equalsIndex = statement.indexOf('=');\n\n    const key =\n      equalsIndex === -1\n        ? statement\n        : statement.substring(0, equalsIndex).trim();\n    const value =\n      equalsIndex === -1\n        ? undefined\n        : statement.substring(equalsIndex + 1).trim();\n    if (!key) {\n      throw new InputError(\n        `Invalid filter, '${statement}' is not a valid statement (expected a string on the form a=b or a= or a)`,\n      );\n    }\n\n    const f =\n      key in filtersByKey ? filtersByKey[key] : (filtersByKey[key] = { key });\n\n    if (value !== undefined) {\n      f.values = f.values || [];\n      f.values.push(value);\n    }\n  }\n\n  return Object.values(filtersByKey);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { InputError } from '@backstage/errors';\nimport lodash from 'lodash';\nimport { RecursivePartial } from '../../util/RecursivePartial';\nimport { parseStringsParam } from './common';\n\nfunction getPathArrayAndValue(input: Entity, field: string) {\n  return field.split('.').reduce(\n    ([pathArray, inputSubset], pathPart, index, fieldParts) => {\n      if (lodash.hasIn(inputSubset, pathPart)) {\n        return [pathArray.concat(pathPart), inputSubset[pathPart]];\n      } else if (fieldParts[index + 1] !== undefined) {\n        fieldParts[index + 1] = `${pathPart}.${fieldParts[index + 1]}`;\n        return [pathArray, inputSubset];\n      }\n\n      return [pathArray, undefined];\n    },\n    [[] as string[], input as any],\n  );\n}\n\nexport function parseEntityTransformParams(\n  params: Record<string, unknown>,\n  extra?: string[],\n): ((entity: Entity) => Entity) | undefined {\n  const queryFields = parseStringsParam(params.fields, 'fields');\n\n  const fields = Array.from(\n    new Set(\n      [...(extra ?? []), ...(queryFields?.map(s => s.split(',')) ?? [])]\n        .flat()\n        .map(s => s.trim())\n        .filter(Boolean),\n    ),\n  );\n\n  if (!fields.length) {\n    return undefined;\n  }\n\n  const arrayTypeField = fields.find(f => f.includes('['));\n  if (arrayTypeField) {\n    throw new InputError(\n      `Invalid field \"${arrayTypeField}\", array type fields are not supported`,\n    );\n  }\n\n  return input => {\n    const output: RecursivePartial<Entity> = {};\n\n    for (const field of fields) {\n      const [pathArray, value] = getPathArrayAndValue(input, field);\n\n      if (value !== undefined) {\n        lodash.set(output, pathArray, value);\n      }\n    }\n\n    return output as Entity;\n  };\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { EntityOrder } from '../../catalog/types';\nimport { parseStringsParam } from './common';\n\nexport function parseEntityOrderFieldParams(\n  params: Record<string, unknown>,\n): EntityOrder[] | undefined {\n  const orderFieldStrings = parseStringsParam(params.orderField, 'orderField');\n  if (!orderFieldStrings) {\n    return undefined;\n  }\n\n  return orderFieldStrings.map(orderFieldString => {\n    const [field, order] = orderFieldString.split(',');\n\n    if (order !== undefined && !isOrder(order)) {\n      throw new InputError('Invalid order field order, must be asc or desc');\n    }\n    return { field, order };\n  });\n}\n\nexport function isOrder(order: string): order is 'asc' | 'desc' {\n  return ['asc', 'desc'].includes(order);\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  QueryEntitiesCursorRequest,\n  QueryEntitiesInitialRequest,\n  QueryEntitiesRequest,\n} from '../../catalog/types';\nimport { decodeCursor } from '../util';\nimport { parseEntityFilterParams } from './parseEntityFilterParams';\nimport { parseEntityOrderFieldParams } from './parseEntityOrderFieldParams';\nimport { parseEntityTransformParams } from './parseEntityTransformParams';\nimport { spec } from '../../schema/openapi.generated';\nimport { internal } from '@backstage/backend-openapi-utils';\n\nexport function parseQueryEntitiesParams(\n  params: internal.QuerySchema<typeof spec, '/entities/by-query', 'get'>,\n): Omit<QueryEntitiesRequest, 'credentials' | 'limit'> {\n  const fields = parseEntityTransformParams(params);\n\n  if (params.cursor) {\n    const decodedCursor = decodeCursor(params.cursor);\n    const response: Omit<QueryEntitiesCursorRequest, 'credentials'> = {\n      cursor: decodedCursor,\n      fields,\n    };\n    return response;\n  }\n\n  const filter = parseEntityFilterParams(params);\n  const orderFields = parseEntityOrderFieldParams(params);\n\n  const response: Omit<QueryEntitiesInitialRequest, 'credentials'> = {\n    fields,\n    filter,\n    orderFields,\n    fullTextFilter: {\n      term: params.fullTextFilterTerm || '',\n      fields: params.fullTextFilterFields,\n    },\n  };\n\n  return response;\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { parseStringsParam } from './common';\n\n/**\n * Parses the facets part of a facet query, like\n * /entity-facets?filter=metadata.namespace=default,kind=Component&facet=metadata.namespace\n */\nexport function parseEntityFacetParams(\n  params: Record<string, unknown>,\n): string[] {\n  // Each facet string is on the form a.b.c\n  const facetStrings = parseStringsParam(params.facet, 'facet');\n  if (facetStrings) {\n    const filtered = facetStrings.filter(Boolean);\n    if (filtered.length) {\n      return filtered;\n    }\n  }\n\n  throw new InputError('Missing facet parameter');\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { EntityOrder } from '../../catalog/types';\nimport { parseStringsParam } from './common';\n\nexport function parseEntityOrderParams(\n  params: Record<string, unknown>,\n): EntityOrder[] | undefined {\n  return parseStringsParam(params.order, 'order')?.map(item => {\n    const match = item.match(/^(asc|desc):(.+)$/);\n    if (!match) {\n      throw new InputError(\n        `Invalid order parameter \"${item}\", expected \"<asc or desc>:<field name>\"`,\n      );\n    }\n\n    return {\n      order: match[1] as 'asc' | 'desc',\n      field: match[2],\n    };\n  });\n}\n","/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// ******************************************************************\n// * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. *\n// ******************************************************************\nimport { createValidatedOpenApiRouter } from '@backstage/backend-openapi-utils';\n\nexport const spec = {\n  openapi: '3.0.3',\n  info: {\n    title: 'catalog',\n    version: '1',\n    description:\n      'The Backstage backend plugin that provides the Backstage catalog',\n    license: {\n      name: 'Apache-2.0',\n      url: 'http://www.apache.org/licenses/LICENSE-2.0.html',\n    },\n    contact: {},\n  },\n  servers: [\n    {\n      url: '/',\n    },\n  ],\n  components: {\n    examples: {},\n    headers: {},\n    parameters: {\n      kind: {\n        name: 'kind',\n        in: 'path',\n        required: true,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n        },\n      },\n      namespace: {\n        name: 'namespace',\n        in: 'path',\n        required: true,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n        },\n      },\n      name: {\n        name: 'name',\n        in: 'path',\n        required: true,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n        },\n      },\n      uid: {\n        name: 'uid',\n        in: 'path',\n        required: true,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n        },\n      },\n      cursor: {\n        name: 'cursor',\n        in: 'query',\n        description: 'Cursor to a set page of results.',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n          minLength: 1,\n        },\n      },\n      after: {\n        name: 'after',\n        in: 'query',\n        description: 'Pointer to the previous page of results.',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n          minLength: 1,\n        },\n      },\n      fields: {\n        name: 'fields',\n        in: 'query',\n        description: 'Restrict to just these fields in the response.',\n        required: false,\n        allowReserved: true,\n        explode: false,\n        schema: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        examples: {\n          'Get name and the entire relations collection': {\n            value: ['metadata.name', 'relations'],\n          },\n          'Get kind, name and namespace': {\n            value: ['kind', 'metadata.name', 'metadata.namespace'],\n          },\n        },\n      },\n      filter: {\n        name: 'filter',\n        in: 'query',\n        description: 'Filter for just the entities defined by this filter.',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        examples: {\n          'Get groups': {\n            value: ['kind=group'],\n          },\n          'Get orphaned components': {\n            value: [\n              'kind=component,metadata.annotations.backstage.io/orphan=true',\n            ],\n          },\n        },\n      },\n      offset: {\n        name: 'offset',\n        in: 'query',\n        description: 'Number of records to skip in the query page.',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'integer',\n          minimum: 0,\n        },\n      },\n      limit: {\n        name: 'limit',\n        in: 'query',\n        description: 'Number of records to return in the response.',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'integer',\n          minimum: 0,\n        },\n      },\n      orderField: {\n        name: 'orderField',\n        in: 'query',\n        description: 'The fields to sort returned results by.',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'array',\n          items: {\n            type: 'string',\n            description: 'A two-item tuple of [field, order].',\n          },\n        },\n        explode: true,\n        style: 'form',\n        examples: {\n          'Order ascending by name': {\n            value: ['metadata.name,asc'],\n          },\n          'Order descending by owner': {\n            value: ['spec.owner,desc'],\n          },\n        },\n      },\n    },\n    requestBodies: {},\n    responses: {\n      ErrorResponse: {\n        description: 'An error response from the backend.',\n        content: {\n          'application/json': {\n            schema: {\n              $ref: '#/components/schemas/Error',\n            },\n          },\n        },\n      },\n    },\n    schemas: {\n      Error: {\n        type: 'object',\n        properties: {\n          error: {\n            type: 'object',\n            properties: {\n              name: {\n                type: 'string',\n              },\n              message: {\n                type: 'string',\n              },\n              stack: {\n                type: 'string',\n              },\n              code: {\n                type: 'string',\n              },\n            },\n            required: ['name', 'message'],\n          },\n          request: {\n            type: 'object',\n            properties: {\n              method: {\n                type: 'string',\n              },\n              url: {\n                type: 'string',\n              },\n            },\n            required: ['method', 'url'],\n          },\n          response: {\n            type: 'object',\n            properties: {\n              statusCode: {\n                type: 'number',\n              },\n            },\n            required: ['statusCode'],\n          },\n        },\n        required: ['error', 'response'],\n        additionalProperties: {},\n      },\n      JsonObject: {\n        type: 'object',\n        properties: {},\n        description: 'A type representing all allowed JSON object values.',\n        additionalProperties: {},\n      },\n      MapStringString: {\n        type: 'object',\n        properties: {},\n        additionalProperties: {\n          type: 'string',\n        },\n        description: 'Construct a type with a set of properties K of type T',\n      },\n      EntityLink: {\n        type: 'object',\n        properties: {\n          type: {\n            type: 'string',\n            description:\n              'An optional value to categorize links into specific groups',\n          },\n          icon: {\n            type: 'string',\n            description:\n              'An optional semantic key that represents a visual icon.',\n          },\n          title: {\n            type: 'string',\n            description: 'An optional descriptive title for the link.',\n          },\n          url: {\n            type: 'string',\n            description: 'The url to the external site, document, etc.',\n          },\n        },\n        required: ['url'],\n        description:\n          'A link to external information that is related to the entity.',\n        additionalProperties: false,\n      },\n      EntityMeta: {\n        type: 'object',\n        properties: {\n          links: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/EntityLink',\n            },\n            description: 'A list of external hyperlinks related to the entity.',\n          },\n          tags: {\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n            description:\n              'A list of single-valued strings, to for example classify catalog entities in\\nvarious ways.',\n          },\n          annotations: {\n            $ref: '#/components/schemas/MapStringString',\n          },\n          labels: {\n            $ref: '#/components/schemas/MapStringString',\n          },\n          description: {\n            type: 'string',\n            description:\n              'A short (typically relatively few words, on one line) description of the\\nentity.',\n          },\n          title: {\n            type: 'string',\n            description:\n              'A display name of the entity, to be presented in user interfaces instead\\nof the `name` property above, when available.\\nThis field is sometimes useful when the `name` is cumbersome or ends up\\nbeing perceived as overly technical. The title generally does not have\\nas stringent format requirements on it, so it may contain special\\ncharacters and be more explanatory. Do keep it very short though, and\\navoid situations where a title can be confused with the name of another\\nentity, or where two entities share a title.\\nNote that this is only for display purposes, and may be ignored by some\\nparts of the code. Entity references still always make use of the `name`\\nproperty, not the title.',\n          },\n          namespace: {\n            type: 'string',\n            description: 'The namespace that the entity belongs to.',\n          },\n          name: {\n            type: 'string',\n            description:\n              'The name of the entity.\\nMust be unique within the catalog at any given point in time, for any\\ngiven namespace + kind pair. This value is part of the technical\\nidentifier of the entity, and as such it will appear in URLs, database\\ntables, entity references, and similar. It is subject to restrictions\\nregarding what characters are allowed.\\nIf you want to use a different, more human readable string with fewer\\nrestrictions on it in user interfaces, see the `title` field below.',\n          },\n          etag: {\n            type: 'string',\n            description:\n              'An opaque string that changes for each update operation to any part of\\nthe entity, including metadata.\\nThis field can not be set by the user at creation time, and the server\\nwill reject an attempt to do so. The field will be populated in read\\noperations. The field can (optionally) be specified when performing\\nupdate or delete operations, and the server will then reject the\\noperation if it does not match the current stored value.',\n          },\n          uid: {\n            type: 'string',\n            description:\n              'A globally unique ID for the entity.\\nThis field can not be set by the user at creation time, and the server\\nwill reject an attempt to do so. The field will be populated in read\\noperations. The field can (optionally) be specified when performing\\nupdate or delete operations, but the server is free to reject requests\\nthat do so in such a way that it breaks semantics.',\n          },\n        },\n        required: ['name'],\n        description: 'Metadata fields common to all versions/kinds of entity.',\n        additionalProperties: {},\n      },\n      EntityRelation: {\n        type: 'object',\n        properties: {\n          targetRef: {\n            type: 'string',\n            description: 'The entity ref of the target of this relation.',\n          },\n          type: {\n            type: 'string',\n            description: 'The type of the relation.',\n          },\n        },\n        required: ['targetRef', 'type'],\n        description:\n          'A relation of a specific type to another entity in the catalog.',\n        additionalProperties: false,\n      },\n      Entity: {\n        type: 'object',\n        properties: {\n          relations: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/EntityRelation',\n            },\n            description:\n              'The relations that this entity has with other entities.',\n          },\n          spec: {\n            $ref: '#/components/schemas/JsonObject',\n          },\n          metadata: {\n            $ref: '#/components/schemas/EntityMeta',\n          },\n          kind: {\n            type: 'string',\n            description: 'The high level entity type being described.',\n          },\n          apiVersion: {\n            type: 'string',\n            description:\n              'The version of specification format for this particular entity that\\nthis is written against.',\n          },\n        },\n        required: ['metadata', 'kind', 'apiVersion'],\n        description:\n          \"The parts of the format that's common to all versions/kinds of entity.\",\n      },\n      NullableEntity: {\n        type: 'object',\n        properties: {\n          relations: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/EntityRelation',\n            },\n            description:\n              'The relations that this entity has with other entities.',\n          },\n          spec: {\n            $ref: '#/components/schemas/JsonObject',\n          },\n          metadata: {\n            $ref: '#/components/schemas/EntityMeta',\n          },\n          kind: {\n            type: 'string',\n            description: 'The high level entity type being described.',\n          },\n          apiVersion: {\n            type: 'string',\n            description:\n              'The version of specification format for this particular entity that\\nthis is written against.',\n          },\n        },\n        required: ['metadata', 'kind', 'apiVersion'],\n        description:\n          \"The parts of the format that's common to all versions/kinds of entity.\",\n        nullable: true,\n      },\n      EntityAncestryResponse: {\n        type: 'object',\n        properties: {\n          items: {\n            type: 'array',\n            items: {\n              type: 'object',\n              properties: {\n                parentEntityRefs: {\n                  items: {\n                    type: 'string',\n                  },\n                  type: 'array',\n                },\n                entity: {\n                  $ref: '#/components/schemas/Entity',\n                },\n              },\n              required: ['parentEntityRefs', 'entity'],\n            },\n          },\n          rootEntityRef: {\n            type: 'string',\n          },\n        },\n        required: ['items', 'rootEntityRef'],\n        additionalProperties: false,\n      },\n      EntitiesBatchResponse: {\n        type: 'object',\n        properties: {\n          items: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/NullableEntity',\n            },\n            description:\n              'The list of entities, in the same order as the refs in the request. Entries\\nthat are null signify that no entity existed with that ref.',\n          },\n        },\n        required: ['items'],\n        additionalProperties: false,\n      },\n      EntityFacet: {\n        type: 'object',\n        properties: {\n          value: {\n            type: 'string',\n          },\n          count: {\n            type: 'number',\n          },\n        },\n        required: ['value', 'count'],\n        additionalProperties: false,\n      },\n      EntityFacetsResponse: {\n        type: 'object',\n        properties: {\n          facets: {\n            type: 'object',\n            additionalProperties: {\n              type: 'array',\n              items: {\n                $ref: '#/components/schemas/EntityFacet',\n              },\n            },\n          },\n        },\n        required: ['facets'],\n        additionalProperties: false,\n      },\n      Location: {\n        type: 'object',\n        properties: {\n          target: {\n            type: 'string',\n          },\n          type: {\n            type: 'string',\n          },\n          id: {\n            type: 'string',\n          },\n        },\n        required: ['target', 'type', 'id'],\n        description: 'Entity location for a specific entity.',\n        additionalProperties: false,\n      },\n      LocationSpec: {\n        type: 'object',\n        properties: {\n          target: {\n            type: 'string',\n          },\n          type: {\n            type: 'string',\n          },\n        },\n        required: ['target', 'type'],\n        description: 'Holds the entity location information.',\n        additionalProperties: false,\n      },\n      AnalyzeLocationExistingEntity: {\n        type: 'object',\n        properties: {\n          entity: {\n            $ref: '#/components/schemas/Entity',\n          },\n          isRegistered: {\n            type: 'boolean',\n          },\n          location: {\n            $ref: '#/components/schemas/LocationSpec',\n          },\n        },\n        required: ['entity', 'isRegistered', 'location'],\n        description:\n          \"If the folder pointed to already contained catalog info yaml files, they are\\nread and emitted like this so that the frontend can inform the user that it\\nlocated them and can make sure to register them as well if they weren't\\nalready\",\n        additionalProperties: false,\n      },\n      RecursivePartialEntityRelation: {\n        type: 'object',\n        properties: {\n          targetRef: {\n            type: 'string',\n            description: 'The entity ref of the target of this relation.',\n          },\n          type: {\n            type: 'string',\n            description: 'The type of the relation.',\n          },\n        },\n        description:\n          'A relation of a specific type to another entity in the catalog.',\n        additionalProperties: false,\n      },\n      RecursivePartialEntityMeta: {\n        allOf: [\n          {\n            $ref: '#/components/schemas/JsonObject',\n          },\n          {\n            type: 'object',\n            properties: {\n              links: {\n                type: 'array',\n                items: {\n                  $ref: '#/components/schemas/EntityLink',\n                },\n                description:\n                  'A list of external hyperlinks related to the entity.',\n              },\n              tags: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                },\n                description:\n                  'A list of single-valued strings, to for example classify catalog entities in\\nvarious ways.',\n              },\n              annotations: {\n                $ref: '#/components/schemas/MapStringString',\n              },\n              labels: {\n                $ref: '#/components/schemas/MapStringString',\n              },\n              description: {\n                type: 'string',\n                description:\n                  'A short (typically relatively few words, on one line) description of the\\nentity.',\n              },\n              title: {\n                type: 'string',\n                description:\n                  'A display name of the entity, to be presented in user interfaces instead\\nof the `name` property above, when available.\\nThis field is sometimes useful when the `name` is cumbersome or ends up\\nbeing perceived as overly technical. The title generally does not have\\nas stringent format requirements on it, so it may contain special\\ncharacters and be more explanatory. Do keep it very short though, and\\navoid situations where a title can be confused with the name of another\\nentity, or where two entities share a title.\\nNote that this is only for display purposes, and may be ignored by some\\nparts of the code. Entity references still always make use of the `name`\\nproperty, not the title.',\n              },\n              namespace: {\n                type: 'string',\n                description: 'The namespace that the entity belongs to.',\n              },\n              name: {\n                type: 'string',\n                description:\n                  'The name of the entity.\\nMust be unique within the catalog at any given point in time, for any\\ngiven namespace + kind pair. This value is part of the technical\\nidentifier of the entity, and as such it will appear in URLs, database\\ntables, entity references, and similar. It is subject to restrictions\\nregarding what characters are allowed.\\nIf you want to use a different, more human readable string with fewer\\nrestrictions on it in user interfaces, see the `title` field below.',\n              },\n              etag: {\n                type: 'string',\n                description:\n                  'An opaque string that changes for each update operation to any part of\\nthe entity, including metadata.\\nThis field can not be set by the user at creation time, and the server\\nwill reject an attempt to do so. The field will be populated in read\\noperations. The field can (optionally) be specified when performing\\nupdate or delete operations, and the server will then reject the\\noperation if it does not match the current stored value.',\n              },\n              uid: {\n                type: 'string',\n                description:\n                  'A globally unique ID for the entity.\\nThis field can not be set by the user at creation time, and the server\\nwill reject an attempt to do so. The field will be populated in read\\noperations. The field can (optionally) be specified when performing\\nupdate or delete operations, but the server is free to reject requests\\nthat do so in such a way that it breaks semantics.',\n              },\n            },\n            description:\n              'Metadata fields common to all versions/kinds of entity.',\n          },\n        ],\n        additionalProperties: false,\n      },\n      RecursivePartialEntity: {\n        type: 'object',\n        properties: {\n          apiVersion: {\n            type: 'string',\n            description:\n              'The version of specification format for this particular entity that\\nthis is written against.',\n          },\n          kind: {\n            type: 'string',\n            description: 'The high level entity type being described.',\n          },\n          metadata: {\n            $ref: '#/components/schemas/RecursivePartialEntityMeta',\n          },\n          spec: {\n            $ref: '#/components/schemas/JsonObject',\n          },\n          relations: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/RecursivePartialEntityRelation',\n            },\n            description:\n              'The relations that this entity has with other entities.',\n          },\n        },\n        description: 'Makes all keys of an entire hierarchy optional.',\n        additionalProperties: false,\n      },\n      AnalyzeLocationEntityField: {\n        type: 'object',\n        properties: {\n          description: {\n            type: 'string',\n            description:\n              'A text to show to the user to inform about the choices made. Like, it could say\\n\"Found a CODEOWNERS file that covers this target, so we suggest leaving this\\nfield empty; which would currently make it owned by X\" where X is taken from the\\ncodeowners file.',\n          },\n          value: {\n            type: 'string',\n            nullable: true,\n          },\n          state: {\n            type: 'string',\n            enum: [\n              'analysisSuggestedValue',\n              'analysisSuggestedNoValue',\n              'needsUserInput',\n            ],\n            description:\n              'The outcome of the analysis for this particular field',\n          },\n          field: {\n            type: 'string',\n            description:\n              'e.g. \"spec.owner\"? The frontend needs to know how to \"inject\" the field into the\\nentity again if the user wants to change it',\n          },\n        },\n        required: ['description', 'value', 'state', 'field'],\n        additionalProperties: false,\n      },\n      AnalyzeLocationGenerateEntity: {\n        type: 'object',\n        properties: {\n          fields: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/AnalyzeLocationEntityField',\n            },\n          },\n          entity: {\n            $ref: '#/components/schemas/RecursivePartialEntity',\n          },\n        },\n        required: ['fields', 'entity'],\n        description:\n          \"This is some form of representation of what the analyzer could deduce.\\nWe should probably have a chat about how this can best be conveyed to\\nthe frontend. It'll probably contain a (possibly incomplete) entity, plus\\nenough info for the frontend to know what form data to show to the user\\nfor overriding/completing the info.\",\n        additionalProperties: false,\n      },\n      AnalyzeLocationResponse: {\n        type: 'object',\n        properties: {\n          generateEntities: {\n            items: {\n              $ref: '#/components/schemas/AnalyzeLocationGenerateEntity',\n            },\n            type: 'array',\n          },\n          existingEntityFiles: {\n            items: {\n              $ref: '#/components/schemas/AnalyzeLocationExistingEntity',\n            },\n            type: 'array',\n          },\n        },\n        required: ['generateEntities', 'existingEntityFiles'],\n        additionalProperties: false,\n      },\n      LocationInput: {\n        type: 'object',\n        properties: {\n          type: {\n            type: 'string',\n          },\n          target: {\n            type: 'string',\n          },\n        },\n        required: ['type', 'target'],\n        additionalProperties: false,\n      },\n      EntitiesQueryResponse: {\n        type: 'object',\n        properties: {\n          items: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/Entity',\n            },\n            description: 'The list of entities paginated by a specific filter.',\n          },\n          totalItems: {\n            type: 'number',\n          },\n          pageInfo: {\n            type: 'object',\n            properties: {\n              nextCursor: {\n                type: 'string',\n                description: 'The cursor for the next batch of entities.',\n              },\n              prevCursor: {\n                type: 'string',\n                description: 'The cursor for the previous batch of entities.',\n              },\n            },\n          },\n        },\n        required: ['items', 'totalItems', 'pageInfo'],\n        additionalProperties: false,\n      },\n    },\n    securitySchemes: {\n      JWT: {\n        type: 'http',\n        scheme: 'bearer',\n        bearerFormat: 'JWT',\n      },\n    },\n  },\n  paths: {\n    '/refresh': {\n      post: {\n        operationId: 'RefreshEntity',\n        description: 'Refresh the entity related to entityRef.',\n        responses: {\n          '200': {\n            description: 'Refreshed',\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [],\n        requestBody: {\n          required: true,\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                properties: {\n                  authorizationToken: {\n                    type: 'string',\n                  },\n                  entityRef: {\n                    type: 'string',\n                    description:\n                      'The reference to a single entity that should be refreshed',\n                  },\n                },\n                required: ['entityRef'],\n                description:\n                  'Options for requesting a refresh of entities in the catalog.',\n                additionalProperties: false,\n              },\n            },\n          },\n        },\n      },\n    },\n    '/entities': {\n      get: {\n        operationId: 'GetEntities',\n        description: 'Get all entities matching a given filter.',\n        responses: {\n          '200': {\n            description: '',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'array',\n                  items: {\n                    $ref: '#/components/schemas/Entity',\n                  },\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/fields',\n          },\n          {\n            $ref: '#/components/parameters/limit',\n          },\n          {\n            $ref: '#/components/parameters/filter',\n          },\n          {\n            $ref: '#/components/parameters/offset',\n          },\n          {\n            $ref: '#/components/parameters/after',\n          },\n          {\n            name: 'order',\n            in: 'query',\n            allowReserved: true,\n            required: false,\n            schema: {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n            },\n          },\n        ],\n      },\n    },\n    '/entities/by-uid/{uid}': {\n      get: {\n        operationId: 'GetEntityByUid',\n        description: 'Get a single entity by the UID.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/Entity',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/uid',\n          },\n        ],\n      },\n      delete: {\n        operationId: 'DeleteEntityByUid',\n        description: 'Delete a single entity by UID.',\n        responses: {\n          '204': {\n            description: 'Deleted successfully.',\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/uid',\n          },\n        ],\n      },\n    },\n    '/entities/by-name/{kind}/{namespace}/{name}': {\n      get: {\n        operationId: 'GetEntityByName',\n        description: 'Get an entity by an entity ref.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/Entity',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/kind',\n          },\n          {\n            $ref: '#/components/parameters/namespace',\n          },\n          {\n            $ref: '#/components/parameters/name',\n          },\n        ],\n      },\n    },\n    '/entities/by-name/{kind}/{namespace}/{name}/ancestry': {\n      get: {\n        operationId: 'GetEntityAncestryByName',\n        description: \"Get an entity's ancestry by entity ref.\",\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/EntityAncestryResponse',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/kind',\n          },\n          {\n            $ref: '#/components/parameters/namespace',\n          },\n          {\n            $ref: '#/components/parameters/name',\n          },\n        ],\n      },\n    },\n    '/entities/by-refs': {\n      post: {\n        operationId: 'GetEntitiesByRefs',\n        description:\n          'Get a batch set of entities given an array of entityRefs.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/EntitiesBatchResponse',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        requestBody: {\n          required: false,\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                required: ['entityRefs'],\n                properties: {\n                  entityRefs: {\n                    type: 'array',\n                    items: {\n                      type: 'string',\n                    },\n                  },\n                  fields: {\n                    type: 'array',\n                    items: {\n                      type: 'string',\n                    },\n                  },\n                },\n              },\n              examples: {\n                'Fetch Backstage entities': {\n                  value: {\n                    entityRefs: [\n                      'component:default/backstage',\n                      'api:default/backstage',\n                    ],\n                  },\n                },\n                'Fetch annotations for backstage entity': {\n                  value: {\n                    entityRefs: ['component:default/backstage'],\n                    fields: ['metadata.annotations'],\n                  },\n                },\n              },\n            },\n          },\n        },\n        parameters: [\n          {\n            $ref: '#/components/parameters/filter',\n          },\n        ],\n      },\n    },\n    '/entities/by-query': {\n      get: {\n        operationId: 'GetEntitiesByQuery',\n        description: 'Search for entities by a given query.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/EntitiesQueryResponse',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/fields',\n          },\n          {\n            $ref: '#/components/parameters/limit',\n          },\n          {\n            $ref: '#/components/parameters/orderField',\n          },\n          {\n            $ref: '#/components/parameters/cursor',\n          },\n          {\n            $ref: '#/components/parameters/filter',\n          },\n          {\n            name: 'fullTextFilterTerm',\n            in: 'query',\n            description: 'Text search term.',\n            required: false,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n          {\n            name: 'fullTextFilterFields',\n            in: 'query',\n            description:\n              'A comma separated list of fields to sort returned results by.',\n            required: false,\n            allowReserved: true,\n            schema: {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n            },\n            explode: false,\n            style: 'form',\n          },\n        ],\n      },\n    },\n    '/entity-facets': {\n      get: {\n        operationId: 'GetEntityFacets',\n        description: 'Get all entity facets that match the given filters.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/EntityFacetsResponse',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            in: 'query',\n            name: 'facet',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n            },\n            examples: {\n              'Entities by kind': {\n                value: ['kind'],\n              },\n              'Entities by spec type': {\n                value: ['spec.type'],\n              },\n            },\n          },\n          {\n            $ref: '#/components/parameters/filter',\n          },\n        ],\n      },\n    },\n    '/locations': {\n      post: {\n        operationId: 'CreateLocation',\n        description: 'Create a location for a given target.',\n        responses: {\n          '201': {\n            description: 'Created',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    exists: {\n                      type: 'boolean',\n                    },\n                    entities: {\n                      items: {\n                        $ref: '#/components/schemas/Entity',\n                      },\n                      type: 'array',\n                    },\n                    location: {\n                      $ref: '#/components/schemas/Location',\n                    },\n                  },\n                  required: ['entities', 'location'],\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            in: 'query',\n            name: 'dryRun',\n            required: false,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n        ],\n        requestBody: {\n          required: true,\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                properties: {\n                  target: {\n                    type: 'string',\n                  },\n                  type: {\n                    type: 'string',\n                  },\n                },\n                required: ['target', 'type'],\n              },\n            },\n          },\n        },\n      },\n      get: {\n        operationId: 'GetLocations',\n        description: 'Get all locations',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    properties: {\n                      data: {\n                        $ref: '#/components/schemas/Location',\n                      },\n                    },\n                    required: ['data'],\n                  },\n                },\n              },\n            },\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [],\n      },\n    },\n    '/locations/{id}': {\n      get: {\n        operationId: 'GetLocation',\n        description: 'Get a location by id.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/Location',\n                },\n              },\n            },\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            in: 'path',\n            name: 'id',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n        ],\n      },\n      delete: {\n        operationId: 'DeleteLocation',\n        description: 'Delete a location by id.',\n        responses: {\n          '204': {\n            description: 'No content',\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            in: 'path',\n            name: 'id',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n        ],\n      },\n    },\n    '/locations/by-entity/{kind}/{namespace}/{name}': {\n      get: {\n        operationId: 'getLocationByEntity',\n        description: 'Get a location for entity.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/Location',\n                },\n              },\n            },\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            in: 'path',\n            name: 'kind',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n          {\n            in: 'path',\n            name: 'namespace',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n          {\n            in: 'path',\n            name: 'name',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n        ],\n      },\n    },\n    '/analyze-location': {\n      post: {\n        operationId: 'AnalyzeLocation',\n        description: 'Validate a given location.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/AnalyzeLocationResponse',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [],\n        requestBody: {\n          required: true,\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                properties: {\n                  catalogFileName: {\n                    type: 'string',\n                  },\n                  location: {\n                    $ref: '#/components/schemas/LocationInput',\n                  },\n                },\n                required: ['location'],\n              },\n            },\n          },\n        },\n      },\n    },\n    '/validate-entity': {\n      post: {\n        operationId: 'ValidateEntity',\n        description:\n          'Validate that a passed in entity has no errors in schema.',\n        responses: {\n          '200': {\n            description: 'Ok',\n          },\n          '400': {\n            description: 'Validation errors.',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    errors: {\n                      type: 'array',\n                      items: {\n                        type: 'object',\n                        properties: {\n                          name: {\n                            type: 'string',\n                          },\n                          message: {\n                            type: 'string',\n                          },\n                        },\n                        required: ['name', 'message'],\n                        additionalProperties: {},\n                      },\n                    },\n                  },\n                  required: ['errors'],\n                },\n              },\n            },\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [],\n        requestBody: {\n          required: true,\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                properties: {\n                  location: {\n                    type: 'string',\n                  },\n                  entity: {\n                    type: 'object',\n                    additionalProperties: {},\n                  },\n                },\n                required: ['location', 'entity'],\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n} as const;\nexport const createOpenApiRouter = async (\n  options?: Parameters<typeof createValidatedOpenApiRouter>['1'],\n) => createValidatedOpenApiRouter<typeof spec>(spec, options);\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { EntityPagination } from '../../catalog/types';\n\n/**\n * Parses the pagination related parameters out of a query, e.g.\n * /entities?offset=100&limit=10\n */\nexport function parseEntityPaginationParams({\n  limit,\n  offset,\n  after,\n}: {\n  offset?: number;\n  limit?: number;\n  after?: string;\n}): EntityPagination | undefined {\n  if (offset === undefined && limit === undefined && after === undefined) {\n    return undefined;\n  }\n\n  if (offset !== undefined && offset < 0) {\n    throw new InputError(`Invalid offset, must be zero or greater`);\n  }\n  if (limit !== undefined && limit <= 0) {\n    throw new InputError(`Invalid limit, must be greater than zero`);\n  }\n  if (after !== undefined && !after) {\n    throw new InputError(`Invalid after, must not be empty`);\n  }\n\n  return {\n    ...(offset !== undefined ? { offset } : {}),\n    ...(limit !== undefined ? { limit } : {}),\n    ...(after !== undefined ? { after } : {}),\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { errorHandler } from '@backstage/backend-common';\nimport {\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  Entity,\n  parseLocationRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { InputError, NotFoundError, serializeError } from '@backstage/errors';\nimport express from 'express';\nimport yn from 'yn';\nimport { z } from 'zod';\nimport { EntitiesCatalog } from '../catalog/types';\nimport { LocationAnalyzer } from '../ingestion';\nimport { CatalogProcessingOrchestrator } from '../processing/types';\nimport { validateEntityEnvelope } from '../processing/util';\nimport {\n  basicEntityFilter,\n  entitiesBatchRequest,\n  parseEntityFilterParams,\n  parseEntityTransformParams,\n  parseQueryEntitiesParams,\n} from './request';\nimport { parseEntityFacetParams } from './request/parseEntityFacetParams';\nimport { parseEntityOrderParams } from './request/parseEntityOrderParams';\nimport { LocationService, RefreshService } from './types';\nimport {\n  disallowReadonlyMode,\n  encodeCursor,\n  locationInput,\n  validateRequestBody,\n} from './util';\nimport { createOpenApiRouter } from '../schema/openapi.generated';\nimport { PluginTaskScheduler } from '@backstage/backend-tasks';\nimport { parseEntityPaginationParams } from './request/parseEntityPaginationParams';\nimport {\n  AuthService,\n  HttpAuthService,\n  LoggerService,\n} from '@backstage/backend-plugin-api';\n\n/**\n * Options used by {@link createRouter}.\n *\n * @public\n */\nexport interface RouterOptions {\n  entitiesCatalog?: EntitiesCatalog;\n  locationAnalyzer?: LocationAnalyzer;\n  locationService: LocationService;\n  orchestrator?: CatalogProcessingOrchestrator;\n  refreshService?: RefreshService;\n  scheduler?: PluginTaskScheduler;\n  logger: LoggerService;\n  config: Config;\n  permissionIntegrationRouter?: express.Router;\n  auth: AuthService;\n  httpAuth: HttpAuthService;\n}\n\n/**\n * Creates a catalog router.\n *\n * @public\n */\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const router = await createOpenApiRouter({\n    validatorOptions: {\n      // We want the spec to be up to date with the expected value, but the return type needs\n      //  to be controlled by the router implementation not the request validator.\n      ignorePaths: /^\\/validate-entity\\/?$/,\n    },\n  });\n  const {\n    entitiesCatalog,\n    locationAnalyzer,\n    locationService,\n    orchestrator,\n    refreshService,\n    config,\n    logger,\n    permissionIntegrationRouter,\n    auth,\n    httpAuth,\n  } = options;\n\n  const readonlyEnabled =\n    config.getOptionalBoolean('catalog.readonly') || false;\n  if (readonlyEnabled) {\n    logger.info('Catalog is running in readonly mode');\n  }\n\n  if (refreshService) {\n    router.post('/refresh', async (req, res) => {\n      const { authorizationToken, ...restBody } = req.body;\n\n      const credentials = authorizationToken\n        ? await auth.authenticate(authorizationToken)\n        : await httpAuth.credentials(req);\n\n      await refreshService.refresh({\n        ...restBody,\n        credentials,\n      });\n      res.status(200).end();\n    });\n  }\n\n  if (permissionIntegrationRouter) {\n    router.use(permissionIntegrationRouter);\n  }\n\n  if (entitiesCatalog) {\n    router\n      .get('/entities', async (req, res) => {\n        const { entities, pageInfo } = await entitiesCatalog.entities({\n          filter: parseEntityFilterParams(req.query),\n          fields: parseEntityTransformParams(req.query),\n          order: parseEntityOrderParams(req.query),\n          pagination: parseEntityPaginationParams(req.query),\n          credentials: await httpAuth.credentials(req),\n        });\n\n        // Add a Link header to the next page\n        if (pageInfo.hasNextPage) {\n          const url = new URL(`http://ignored${req.url}`);\n          url.searchParams.delete('offset');\n          url.searchParams.set('after', pageInfo.endCursor);\n          res.setHeader('link', `<${url.pathname}${url.search}>; rel=\"next\"`);\n        }\n\n        // TODO(freben): encode the pageInfo in the response\n        res.json(entities);\n      })\n      .get('/entities/by-query', async (req, res) => {\n        const { items, pageInfo, totalItems } =\n          await entitiesCatalog.queryEntities({\n            limit: req.query.limit,\n            ...parseQueryEntitiesParams(req.query),\n            credentials: await httpAuth.credentials(req),\n          });\n\n        res.json({\n          items,\n          totalItems,\n          pageInfo: {\n            ...(pageInfo.nextCursor && {\n              nextCursor: encodeCursor(pageInfo.nextCursor),\n            }),\n            ...(pageInfo.prevCursor && {\n              prevCursor: encodeCursor(pageInfo.prevCursor),\n            }),\n          },\n        });\n      })\n      .get('/entities/by-uid/:uid', async (req, res) => {\n        const { uid } = req.params;\n        const { entities } = await entitiesCatalog.entities({\n          filter: basicEntityFilter({ 'metadata.uid': uid }),\n          credentials: await httpAuth.credentials(req),\n        });\n        if (!entities.length) {\n          throw new NotFoundError(`No entity with uid ${uid}`);\n        }\n        res.status(200).json(entities[0]);\n      })\n      .delete('/entities/by-uid/:uid', async (req, res) => {\n        const { uid } = req.params;\n        await entitiesCatalog.removeEntityByUid(uid, {\n          credentials: await httpAuth.credentials(req),\n        });\n        res.status(204).end();\n      })\n      .get('/entities/by-name/:kind/:namespace/:name', async (req, res) => {\n        const { kind, namespace, name } = req.params;\n        const { entities } = await entitiesCatalog.entities({\n          filter: basicEntityFilter({\n            kind: kind,\n            'metadata.namespace': namespace,\n            'metadata.name': name,\n          }),\n          credentials: await httpAuth.credentials(req),\n        });\n        if (!entities.length) {\n          throw new NotFoundError(\n            `No entity named '${name}' found, with kind '${kind}' in namespace '${namespace}'`,\n          );\n        }\n        res.status(200).json(entities[0]);\n      })\n      .get(\n        '/entities/by-name/:kind/:namespace/:name/ancestry',\n        async (req, res) => {\n          const { kind, namespace, name } = req.params;\n          const entityRef = stringifyEntityRef({ kind, namespace, name });\n          const response = await entitiesCatalog.entityAncestry(entityRef, {\n            credentials: await httpAuth.credentials(req),\n          });\n          res.status(200).json(response);\n        },\n      )\n      .post('/entities/by-refs', async (req, res) => {\n        const request = entitiesBatchRequest(req);\n        const response = await entitiesCatalog.entitiesBatch({\n          entityRefs: request.entityRefs,\n          filter: parseEntityFilterParams(req.query),\n          fields: parseEntityTransformParams(req.query, request.fields),\n          credentials: await httpAuth.credentials(req),\n        });\n        res.status(200).json(response);\n      })\n      .get('/entity-facets', async (req, res) => {\n        const response = await entitiesCatalog.facets({\n          filter: parseEntityFilterParams(req.query),\n          facets: parseEntityFacetParams(req.query),\n          credentials: await httpAuth.credentials(req),\n        });\n        res.status(200).json(response);\n      });\n  }\n\n  if (locationService) {\n    router\n      .post('/locations', async (req, res) => {\n        const location = await validateRequestBody(req, locationInput);\n        const dryRun = yn(req.query.dryRun, { default: false });\n\n        // when in dryRun addLocation is effectively a read operation so we don't\n        // need to disallow readonly\n        if (!dryRun) {\n          disallowReadonlyMode(readonlyEnabled);\n        }\n\n        const output = await locationService.createLocation(location, dryRun, {\n          credentials: await httpAuth.credentials(req),\n        });\n        res.status(201).json(output);\n      })\n      .get('/locations', async (req, res) => {\n        const locations = await locationService.listLocations({\n          credentials: await httpAuth.credentials(req),\n        });\n        res.status(200).json(locations.map(l => ({ data: l })));\n      })\n\n      .get('/locations/:id', async (req, res) => {\n        const { id } = req.params;\n        const output = await locationService.getLocation(id, {\n          credentials: await httpAuth.credentials(req),\n        });\n        res.status(200).json(output);\n      })\n      .delete('/locations/:id', async (req, res) => {\n        disallowReadonlyMode(readonlyEnabled);\n\n        const { id } = req.params;\n        await locationService.deleteLocation(id, {\n          credentials: await httpAuth.credentials(req),\n        });\n        res.status(204).end();\n      })\n      .get('/locations/by-entity/:kind/:namespace/:name', async (req, res) => {\n        const { kind, namespace, name } = req.params;\n        const output = await locationService.getLocationByEntity(\n          { kind, namespace, name },\n          { credentials: await httpAuth.credentials(req) },\n        );\n        res.status(200).json(output);\n      });\n  }\n\n  if (locationAnalyzer) {\n    router.post('/analyze-location', async (req, res) => {\n      const body = await validateRequestBody(\n        req,\n        z.object({\n          location: locationInput,\n          catalogFilename: z.string().optional(),\n        }),\n      );\n      const schema = z.object({\n        location: locationInput,\n        catalogFilename: z.string().optional(),\n      });\n      const parsedBody = schema.parse(body);\n      try {\n        const output = await locationAnalyzer.analyzeLocation(parsedBody);\n        res.status(200).json(output);\n      } catch (err) {\n        if (\n          // Catch errors from parse-url library.\n          err.name === 'Error' &&\n          'subject_url' in err\n        ) {\n          throw new InputError('The given location.target is not a URL');\n        }\n        throw err;\n      }\n    });\n  }\n\n  if (orchestrator) {\n    router.post('/validate-entity', async (req, res) => {\n      const bodySchema = z.object({\n        entity: z.unknown(),\n        location: z.string(),\n      });\n\n      let body: z.infer<typeof bodySchema>;\n      let entity: Entity;\n      let location: { type: string; target: string };\n      try {\n        body = await validateRequestBody(req, bodySchema);\n        entity = validateEntityEnvelope(body.entity);\n        location = parseLocationRef(body.location);\n        if (location.type !== 'url')\n          throw new TypeError(\n            `Invalid location ref ${body.location}, only 'url:<target>' is supported, e.g. url:https://host/path`,\n          );\n      } catch (err) {\n        return res.status(400).json({\n          errors: [serializeError(err)],\n        });\n      }\n\n      const processingResult = await orchestrator.process({\n        entity: {\n          ...entity,\n          metadata: {\n            ...entity.metadata,\n            annotations: {\n              [ANNOTATION_LOCATION]: body.location,\n              [ANNOTATION_ORIGIN_LOCATION]: body.location,\n              ...entity.metadata.annotations,\n            },\n          },\n        },\n      });\n\n      if (!processingResult.ok)\n        res.status(400).json({\n          errors: processingResult.errors.map(e => serializeError(e)),\n        });\n      return res.status(200).end();\n    });\n  }\n\n  router.use(errorHandler());\n  return router;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DefaultCatalogDatabase } from '../database/DefaultCatalogDatabase';\nimport { RefreshOptions, RefreshService } from './types';\n\nexport class DefaultRefreshService implements RefreshService {\n  private database: DefaultCatalogDatabase;\n\n  constructor(options: { database: DefaultCatalogDatabase }) {\n    this.database = options.database;\n  }\n\n  async refresh(options: RefreshOptions) {\n    await this.database.transaction(async tx => {\n      const { entityRefs } = await this.database.listAncestors(tx, {\n        entityRef: options.entityRef,\n      });\n      const locationAncestor = entityRefs.find(ref =>\n        ref.startsWith('location:'),\n      );\n\n      // TODO: Refreshes are currently scheduled(as soon as possible) for execution and will therefore happen in the future.\n      // There's room for improvements here where the refresh could potentially hang or return an ID so that the user can check progress.\n      if (locationAncestor) {\n        await this.database.refresh(tx, {\n          entityRef: locationAncestor,\n        });\n      }\n      await this.database.refresh(tx, {\n        entityRef: options.entityRef,\n      });\n    });\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NotAllowedError } from '@backstage/errors';\nimport { catalogEntityRefreshPermission } from '@backstage/plugin-catalog-common/alpha';\nimport { AuthorizeResult } from '@backstage/plugin-permission-common';\nimport { RefreshOptions, RefreshService } from './types';\nimport { PermissionsService } from '@backstage/backend-plugin-api';\n\nexport class AuthorizedRefreshService implements RefreshService {\n  constructor(\n    private readonly service: RefreshService,\n    private readonly permissionApi: PermissionsService,\n  ) {}\n\n  async refresh(options: RefreshOptions) {\n    const authorizeDecision = (\n      await this.permissionApi.authorize(\n        [\n          {\n            permission: catalogEntityRefreshPermission,\n            resourceRef: options.entityRef,\n          },\n        ],\n        { credentials: options.credentials },\n      )\n    )[0];\n    if (authorizeDecision.result !== AuthorizeResult.ALLOW) {\n      throw new NotAllowedError();\n    }\n    await this.service.refresh(options);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { Entity } from '@backstage/catalog-model';\nimport path from 'path';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport { minimatch } from 'minimatch';\n\n/**\n * Rules to apply to catalog entities.\n *\n * An undefined list of matchers means match all, an empty list of matchers means match none.\n */\nexport type CatalogRule = {\n  allow: Array<{\n    kind: string;\n  }>;\n  locations?: Array<{\n    exact?: string;\n    type: string;\n    pattern?: string;\n  }>;\n};\n\n/**\n * Decides whether an entity from a given location is allowed to enter the\n * catalog, according to some rule set.\n */\nexport type CatalogRulesEnforcer = {\n  isAllowed(entity: Entity, location: LocationSpec): boolean;\n};\n\n/**\n * Implements the default catalog rule set, consuming the config keys\n * `catalog.rules` and `catalog.locations.[].rules`.\n */\nexport class DefaultCatalogRulesEnforcer implements CatalogRulesEnforcer {\n  /**\n   * Default rules used by the catalog.\n   *\n   * Denies any location from specifying user or group entities.\n   */\n  static readonly defaultRules: CatalogRule[] = [\n    {\n      allow: ['Component', 'API', 'Location'].map(kind => ({ kind })),\n    },\n  ];\n\n  /**\n   * Loads catalog rules from config.\n   *\n   * This reads `catalog.rules` and defaults to the default rules if no value is present.\n   * The value of the config should be a list of config objects, each with a single `allow`\n   * field which in turn is a list of entity kinds to allow.\n   *\n   * If there is no matching rule to allow an ingested entity, it will be rejected by the catalog.\n   *\n   * It also reads in rules from `catalog.locations`, where each location can have a list\n   * of rules for that specific location, specified in a `rules` field.\n   *\n   * For example:\n   *\n   * ```yaml\n   * catalog:\n   *   rules:\n   *   - allow: [Component, API]\n   *   - allow: [Template]\n   *     locations:\n   *       - type: url\n   *         pattern: https://github.com/org/*\\/blob/master/template.yaml\n   *   - allow: [Location]\n   *     locations:\n   *       - type: url\n   *         pattern: https://github.com/org/repo/blob/master/location.yaml\n   *\n   *   locations:\n   *   - type: url\n   *     target: https://github.com/org/repo/blob/master/users.yaml\n   *     rules:\n   *       - allow: [User, Group]\n   *   - type: url\n   *     target: https://github.com/org/repo/blob/master/systems.yaml\n   *     rules:\n   *       - allow: [System]\n   * ```\n   */\n  static fromConfig(config: Config) {\n    const rules = new Array<CatalogRule>();\n\n    if (config.has('catalog.rules')) {\n      const globalRules = config\n        .getConfigArray('catalog.rules')\n        .map(ruleConf => ({\n          allow: ruleConf.getStringArray('allow').map(kind => ({ kind })),\n          locations: ruleConf\n            .getOptionalConfigArray('locations')\n            ?.map(locationConfig => {\n              const location = {\n                pattern: locationConfig.getOptionalString('pattern'),\n                type: locationConfig.getString('type'),\n                exact: locationConfig.getOptionalString('exact'),\n              };\n              if (location.pattern && location.exact) {\n                throw new Error(\n                  'A catalog rule location cannot have both exact and pattern values',\n                );\n              }\n              return location;\n            }),\n        }));\n      rules.push(...globalRules);\n    } else {\n      rules.push(...DefaultCatalogRulesEnforcer.defaultRules);\n    }\n\n    if (config.has('catalog.locations')) {\n      const locationRules = config\n        .getConfigArray('catalog.locations')\n        .flatMap(locConf => {\n          if (!locConf.has('rules')) {\n            return [];\n          }\n          const type = locConf.getString('type');\n          const exact = resolveTarget(type, locConf.getString('target'));\n\n          return locConf.getConfigArray('rules').map(ruleConf => ({\n            allow: ruleConf.getStringArray('allow').map(kind => ({ kind })),\n            locations: [{ type, exact }],\n          }));\n        });\n\n      rules.push(...locationRules);\n    }\n\n    return new DefaultCatalogRulesEnforcer(rules);\n  }\n\n  constructor(private readonly rules: CatalogRule[]) {}\n\n  /**\n   * Checks whether a specific entity/location combination is allowed\n   * according to the configured rules.\n   */\n  isAllowed(entity: Entity, location: LocationSpec) {\n    for (const rule of this.rules) {\n      if (!this.matchLocation(location, rule.locations)) {\n        continue;\n      }\n\n      if (this.matchEntity(entity, rule.allow)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private matchLocation(\n    location: LocationSpec,\n    matchers?: { exact?: string; type: string; pattern?: string }[],\n  ): boolean {\n    if (!matchers) {\n      return true;\n    }\n\n    for (const matcher of matchers) {\n      if (matcher.type !== location?.type) {\n        continue;\n      }\n      if (matcher.exact && matcher.exact !== location?.target) {\n        continue;\n      }\n      if (\n        matcher.pattern &&\n        !minimatch(location?.target, matcher.pattern, {\n          nocase: true,\n          dot: true,\n        })\n      ) {\n        continue;\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n  private matchEntity(entity: Entity, matchers?: { kind: string }[]): boolean {\n    if (!matchers) {\n      return true;\n    }\n\n    for (const matcher of matchers) {\n      if (entity?.kind?.toLowerCase() !== matcher.kind.toLowerCase()) {\n        continue;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n}\n\nfunction resolveTarget(type: string, target: string): string {\n  if (type !== 'file') {\n    return target;\n  }\n\n  return path.resolve(target);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  entityEnvelopeSchemaValidator,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { ProviderDatabase } from '../database/types';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n  EntityProviderRefreshOptions,\n  EntityProviderMutation,\n} from '@backstage/plugin-catalog-node';\n\nclass Connection implements EntityProviderConnection {\n  readonly validateEntityEnvelope = entityEnvelopeSchemaValidator();\n\n  constructor(\n    private readonly config: {\n      id: string;\n      providerDatabase: ProviderDatabase;\n    },\n  ) {}\n\n  async applyMutation(mutation: EntityProviderMutation): Promise<void> {\n    const db = this.config.providerDatabase;\n\n    if (mutation.type === 'full') {\n      this.check(mutation.entities.map(e => e.entity));\n      await db.transaction(async tx => {\n        await db.replaceUnprocessedEntities(tx, {\n          sourceKey: this.config.id,\n          type: 'full',\n          items: mutation.entities,\n        });\n      });\n    } else if (mutation.type === 'delta') {\n      this.check(mutation.added.map(e => e.entity));\n      this.check(\n        mutation.removed\n          .map(e => ('entity' in e ? e.entity : undefined))\n          .filter((e): e is Entity => Boolean(e)),\n      );\n      await db.transaction(async tx => {\n        await db.replaceUnprocessedEntities(tx, {\n          sourceKey: this.config.id,\n          type: 'delta',\n          added: mutation.added,\n          removed: mutation.removed.map(r =>\n            'entityRef' in r\n              ? r\n              : {\n                  entityRef: stringifyEntityRef(r.entity),\n                  locationKey: r.locationKey,\n                },\n          ),\n        });\n      });\n    }\n  }\n\n  async refresh(options: EntityProviderRefreshOptions): Promise<void> {\n    const db = this.config.providerDatabase;\n\n    await db.transaction(async (tx: any) => {\n      return db.refreshByRefreshKeys(tx, {\n        keys: options.keys,\n      });\n    });\n  }\n\n  private check(entities: Entity[]) {\n    for (const entity of entities) {\n      try {\n        this.validateEntityEnvelope(entity);\n      } catch (e) {\n        throw new TypeError(`Malformed entity envelope, ${e}`);\n      }\n    }\n  }\n}\n\nexport async function connectEntityProviders(\n  db: ProviderDatabase,\n  providers: EntityProvider[],\n) {\n  await Promise.all(\n    providers.map(async provider => {\n      const connection = new Connection({\n        id: provider.getProviderName(),\n        providerDatabase: db,\n      });\n      return provider.connect(connection);\n    }),\n  );\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { RESOURCE_TYPE_CATALOG_ENTITY } from '@backstage/plugin-catalog-common/alpha';\nimport { EntitiesSearchFilter } from '@backstage/plugin-catalog-node';\nimport { PermissionRuleParams } from '@backstage/plugin-permission-common';\nimport {\n  makeCreatePermissionRule,\n  PermissionRule,\n} from '@backstage/plugin-permission-node';\n\n/**\n * Convenience type for {@link @backstage/plugin-permission-node#PermissionRule}\n * instances with the correct resource type, resource, and filter to work with\n * the catalog.\n *\n * @alpha\n */\nexport type CatalogPermissionRule<\n  TParams extends PermissionRuleParams = PermissionRuleParams,\n> = PermissionRule<Entity, EntitiesSearchFilter, 'catalog-entity', TParams>;\n\n/**\n * Helper function for creating correctly-typed\n * {@link @backstage/plugin-permission-node#PermissionRule}s for the\n * catalog-backend.\n *\n * @alpha\n */\nexport const createCatalogPermissionRule = makeCreatePermissionRule<\n  Entity,\n  EntitiesSearchFilter,\n  typeof RESOURCE_TYPE_CATALOG_ENTITY\n>();\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RESOURCE_TYPE_CATALOG_ENTITY } from '@backstage/plugin-catalog-common/alpha';\nimport { z } from 'zod';\nimport { createCatalogPermissionRule } from './util';\n\n/**\n * A catalog {@link @backstage/plugin-permission-node#PermissionRule} which\n * filters for the presence of an annotation on a given entity.\n *\n * If a value is given, it filters for the annotation value, too.\n *\n * @alpha\n */\nexport const hasAnnotation = createCatalogPermissionRule({\n  name: 'HAS_ANNOTATION',\n  description: 'Allow entities with the specified annotation',\n  resourceType: RESOURCE_TYPE_CATALOG_ENTITY,\n  paramsSchema: z.object({\n    annotation: z.string().describe('Name of the annotation to match on'),\n    value: z\n      .string()\n      .optional()\n      .describe('Value of the annotation to match on'),\n  }),\n  apply: (resource, { annotation, value }) =>\n    !!resource.metadata.annotations?.hasOwnProperty(annotation) &&\n    (value === undefined\n      ? true\n      : resource.metadata.annotations?.[annotation] === value),\n  toQuery: ({ annotation, value }) =>\n    value === undefined\n      ? {\n          key: `metadata.annotations.${annotation}`,\n        }\n      : {\n          key: `metadata.annotations.${annotation}`,\n          values: [value],\n        },\n});\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RESOURCE_TYPE_CATALOG_ENTITY } from '@backstage/plugin-catalog-common/alpha';\nimport { z } from 'zod';\nimport { createCatalogPermissionRule } from './util';\n\n/**\n * A catalog {@link @backstage/plugin-permission-node#PermissionRule} which\n * filters for entities with a specified kind.\n * @alpha\n */\nexport const isEntityKind = createCatalogPermissionRule({\n  name: 'IS_ENTITY_KIND',\n  description: 'Allow entities matching a specified kind',\n  resourceType: RESOURCE_TYPE_CATALOG_ENTITY,\n  paramsSchema: z.object({\n    kinds: z\n      .array(z.string())\n      .describe('List of kinds to match at least one of'),\n  }),\n  apply(resource, { kinds }) {\n    const resourceKind = resource.kind.toLocaleLowerCase('en-US');\n    return kinds.some(kind => kind.toLocaleLowerCase('en-US') === resourceKind);\n  },\n  toQuery({ kinds }) {\n    return {\n      key: 'kind',\n      values: kinds.map(kind => kind.toLocaleLowerCase('en-US')),\n    };\n  },\n});\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RELATION_OWNED_BY } from '@backstage/catalog-model';\nimport { RESOURCE_TYPE_CATALOG_ENTITY } from '@backstage/plugin-catalog-common/alpha';\nimport { z } from 'zod';\nimport { createCatalogPermissionRule } from './util';\n\n/**\n * A catalog {@link @backstage/plugin-permission-node#PermissionRule} which\n * filters for entities with a specified owner.\n *\n * @alpha\n */\nexport const isEntityOwner = createCatalogPermissionRule({\n  name: 'IS_ENTITY_OWNER',\n  description: 'Allow entities owned by a specified claim',\n  resourceType: RESOURCE_TYPE_CATALOG_ENTITY,\n  paramsSchema: z.object({\n    claims: z\n      .array(z.string())\n      .describe(\n        `List of claims to match at least one on within ${RELATION_OWNED_BY}`,\n      ),\n  }),\n  apply: (resource, { claims }) => {\n    if (!resource.relations) {\n      return false;\n    }\n\n    return resource.relations\n      .filter(relation => relation.type === RELATION_OWNED_BY)\n      .some(relation => claims.includes(relation.targetRef));\n  },\n  toQuery: ({ claims }) => ({\n    key: 'relations.ownedBy',\n    values: claims,\n  }),\n});\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RESOURCE_TYPE_CATALOG_ENTITY } from '@backstage/plugin-catalog-common/alpha';\nimport { z } from 'zod';\nimport { createCatalogPermissionRule } from './util';\n\n/**\n * A catalog {@link @backstage/plugin-permission-node#PermissionRule} which\n * filters for entities with a specified label in its metadata.\n * @alpha\n */\nexport const hasLabel = createCatalogPermissionRule({\n  name: 'HAS_LABEL',\n  description: 'Allow entities with the specified label',\n  resourceType: RESOURCE_TYPE_CATALOG_ENTITY,\n  paramsSchema: z.object({\n    label: z.string().describe('Name of the label to match on'),\n  }),\n  apply: (resource, { label }) =>\n    !!resource.metadata.labels?.hasOwnProperty(label),\n  toQuery: ({ label }) => ({\n    key: `metadata.labels.${label}`,\n  }),\n});\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { get } from 'lodash';\nimport { RESOURCE_TYPE_CATALOG_ENTITY } from '@backstage/plugin-catalog-common/alpha';\nimport { createCatalogPermissionRule } from './util';\nimport { z } from 'zod';\n\nexport const createPropertyRule = (propertyType: 'metadata' | 'spec') =>\n  createCatalogPermissionRule({\n    name: `HAS_${propertyType.toUpperCase()}`,\n    description: `Allow entities with the specified ${propertyType} subfield`,\n    resourceType: RESOURCE_TYPE_CATALOG_ENTITY,\n    paramsSchema: z.object({\n      key: z\n        .string()\n        .describe(`Property within the entities ${propertyType} to match on`),\n      value: z\n        .string()\n        .optional()\n        .describe(`Value of the given property to match on`),\n    }),\n    apply: (resource, { key, value }) => {\n      const foundValue = get(resource[propertyType], key);\n\n      if (Array.isArray(foundValue)) {\n        if (value !== undefined) {\n          return foundValue.includes(value);\n        }\n        return foundValue.length > 0;\n      }\n      if (value !== undefined) {\n        return value === foundValue;\n      }\n      return !!foundValue;\n    },\n    toQuery: ({ key, value }) => ({\n      key: `${propertyType}.${key}`,\n      ...(value !== undefined && { values: [value] }),\n    }),\n  });\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createPropertyRule } from './createPropertyRule';\n\n/**\n * A catalog {@link @backstage/plugin-permission-node#PermissionRule} which\n * filters for entities with the specified metadata subfield. Also matches on\n * values if value is provided.\n *\n * The key argument to the `apply` and `toQuery` methods can be nested, such as\n * 'field.nestedfield'.\n * @alpha\n */\nexport const hasMetadata = createPropertyRule('metadata');\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createPropertyRule } from './createPropertyRule';\n\n/**\n * A catalog {@link @backstage/plugin-permission-node#PermissionRule} which\n * filters for entities with the specified spec subfield. Also matches on values\n * if value is provided.\n *\n * The key argument to the `apply` and `toQuery` methods can be nested, such as\n * 'field.nestedfield'.\n * @alpha\n */\nexport const hasSpec = createPropertyRule('spec');\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { hasAnnotation } from './hasAnnotation';\nimport { isEntityKind } from './isEntityKind';\nimport { isEntityOwner } from './isEntityOwner';\nimport { hasLabel } from './hasLabel';\nimport { hasMetadata } from './hasMetadata';\nimport { hasSpec } from './hasSpec';\n\n/**\n * These permission rules can be used to conditionally filter catalog entities\n * or describe a user's access to the entities.\n *\n * @alpha\n */\nexport const permissionRules = {\n  hasAnnotation,\n  hasLabel,\n  hasMetadata,\n  hasSpec,\n  isEntityKind,\n  isEntityOwner,\n};\n\nexport type { CatalogPermissionRule } from './util';\nexport { createCatalogPermissionRule } from './util';\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NotAllowedError } from '@backstage/errors';\nimport {\n  catalogEntityDeletePermission,\n  catalogEntityReadPermission,\n} from '@backstage/plugin-catalog-common/alpha';\nimport { Entity, stringifyEntityRef } from '@backstage/catalog-model';\nimport { AuthorizeResult } from '@backstage/plugin-permission-common';\nimport { ConditionTransformer } from '@backstage/plugin-permission-node';\nimport {\n  Cursor,\n  EntitiesBatchRequest,\n  EntitiesBatchResponse,\n  EntitiesCatalog,\n  EntitiesRequest,\n  EntitiesResponse,\n  EntityAncestryResponse,\n  EntityFacetsRequest,\n  EntityFacetsResponse,\n  QueryEntitiesRequest,\n  QueryEntitiesResponse,\n} from '../catalog/types';\nimport { basicEntityFilter } from './request';\nimport { isQueryEntitiesCursorRequest } from './util';\nimport { EntityFilter } from '@backstage/plugin-catalog-node';\nimport {\n  BackstageCredentials,\n  PermissionsService,\n} from '@backstage/backend-plugin-api';\n\nexport class AuthorizedEntitiesCatalog implements EntitiesCatalog {\n  constructor(\n    private readonly entitiesCatalog: EntitiesCatalog,\n    private readonly permissionApi: PermissionsService,\n    private readonly transformConditions: ConditionTransformer<EntityFilter>,\n  ) {}\n\n  async entities(request: EntitiesRequest): Promise<EntitiesResponse> {\n    const authorizeDecision = (\n      await this.permissionApi.authorizeConditional(\n        [{ permission: catalogEntityReadPermission }],\n        { credentials: request.credentials },\n      )\n    )[0];\n\n    if (authorizeDecision.result === AuthorizeResult.DENY) {\n      return {\n        entities: [],\n        pageInfo: { hasNextPage: false },\n      };\n    }\n\n    if (authorizeDecision.result === AuthorizeResult.CONDITIONAL) {\n      const permissionFilter: EntityFilter = this.transformConditions(\n        authorizeDecision.conditions,\n      );\n      return this.entitiesCatalog.entities({\n        ...request,\n        filter: request?.filter\n          ? { allOf: [permissionFilter, request.filter] }\n          : permissionFilter,\n      });\n    }\n\n    return this.entitiesCatalog.entities(request);\n  }\n\n  async entitiesBatch(\n    request: EntitiesBatchRequest,\n  ): Promise<EntitiesBatchResponse> {\n    const authorizeDecision = (\n      await this.permissionApi.authorizeConditional(\n        [{ permission: catalogEntityReadPermission }],\n        { credentials: request.credentials },\n      )\n    )[0];\n\n    if (authorizeDecision.result === AuthorizeResult.DENY) {\n      return {\n        items: new Array(request.entityRefs.length).fill(null),\n      };\n    }\n\n    if (authorizeDecision.result === AuthorizeResult.CONDITIONAL) {\n      const permissionFilter: EntityFilter = this.transformConditions(\n        authorizeDecision.conditions,\n      );\n      return this.entitiesCatalog.entitiesBatch({\n        ...request,\n        filter: request?.filter\n          ? { allOf: [permissionFilter, request.filter] }\n          : permissionFilter,\n      });\n    }\n\n    return this.entitiesCatalog.entitiesBatch(request);\n  }\n\n  async queryEntities(\n    request: QueryEntitiesRequest,\n  ): Promise<QueryEntitiesResponse> {\n    const authorizeDecision = (\n      await this.permissionApi.authorizeConditional(\n        [{ permission: catalogEntityReadPermission }],\n        { credentials: request.credentials },\n      )\n    )[0];\n\n    if (authorizeDecision.result === AuthorizeResult.DENY) {\n      return {\n        items: [],\n        pageInfo: {},\n        totalItems: 0,\n      };\n    }\n\n    if (authorizeDecision.result === AuthorizeResult.CONDITIONAL) {\n      const permissionFilter: EntityFilter = this.transformConditions(\n        authorizeDecision.conditions,\n      );\n\n      let permissionedRequest: QueryEntitiesRequest;\n      let requestFilter: EntityFilter | undefined;\n\n      if (isQueryEntitiesCursorRequest(request)) {\n        requestFilter = request.cursor.filter;\n\n        permissionedRequest = {\n          ...request,\n          cursor: {\n            ...request.cursor,\n            filter: request.cursor.filter\n              ? { allOf: [permissionFilter, request.cursor.filter] }\n              : permissionFilter,\n          },\n        };\n      } else {\n        permissionedRequest = {\n          ...request,\n          filter: request.filter\n            ? { allOf: [permissionFilter, request.filter] }\n            : permissionFilter,\n        };\n        requestFilter = request.filter;\n      }\n\n      const response = await this.entitiesCatalog.queryEntities(\n        permissionedRequest,\n      );\n\n      const prevCursor: Cursor | undefined = response.pageInfo.prevCursor && {\n        ...response.pageInfo.prevCursor,\n        filter: requestFilter,\n      };\n\n      const nextCursor: Cursor | undefined = response.pageInfo.nextCursor && {\n        ...response.pageInfo.nextCursor,\n        filter: requestFilter,\n      };\n\n      return {\n        ...response,\n        pageInfo: {\n          prevCursor,\n          nextCursor,\n        },\n      };\n    }\n\n    return this.entitiesCatalog.queryEntities(request);\n  }\n\n  async removeEntityByUid(\n    uid: string,\n    options: { credentials: BackstageCredentials },\n  ): Promise<void> {\n    const authorizeResponse = (\n      await this.permissionApi.authorizeConditional(\n        [{ permission: catalogEntityDeletePermission }],\n        { credentials: options.credentials },\n      )\n    )[0];\n    if (authorizeResponse.result === AuthorizeResult.DENY) {\n      throw new NotAllowedError();\n    }\n    if (authorizeResponse.result === AuthorizeResult.CONDITIONAL) {\n      const permissionFilter: EntityFilter = this.transformConditions(\n        authorizeResponse.conditions,\n      );\n      const { entities } = await this.entitiesCatalog.entities({\n        credentials: options.credentials,\n        filter: {\n          allOf: [permissionFilter, basicEntityFilter({ 'metadata.uid': uid })],\n        },\n      });\n      if (entities.length === 0) {\n        throw new NotAllowedError();\n      }\n    }\n    return this.entitiesCatalog.removeEntityByUid(uid, {\n      credentials: options.credentials,\n    });\n  }\n\n  async entityAncestry(\n    entityRef: string,\n    options: { credentials: BackstageCredentials },\n  ): Promise<EntityAncestryResponse> {\n    const rootEntityAuthorizeResponse = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogEntityReadPermission, resourceRef: entityRef }],\n        { credentials: options.credentials },\n      )\n    )[0];\n    if (rootEntityAuthorizeResponse.result === AuthorizeResult.DENY) {\n      throw new NotAllowedError();\n    }\n\n    const ancestryResult = await this.entitiesCatalog.entityAncestry(\n      entityRef,\n      { credentials: options.credentials },\n    );\n    const authorizeResponse = await this.permissionApi.authorize(\n      ancestryResult.items.map(item => ({\n        permission: catalogEntityReadPermission,\n        resourceRef: stringifyEntityRef(item.entity),\n      })),\n      { credentials: options.credentials },\n    );\n    const unauthorizedAncestryItems = ancestryResult.items.filter(\n      (_, index) => authorizeResponse[index].result === AuthorizeResult.DENY,\n    );\n    if (unauthorizedAncestryItems.length === 0) {\n      return ancestryResult;\n    }\n    const rootUnauthorizedEntityRefs = unauthorizedAncestryItems.map(\n      ancestryItem => stringifyEntityRef(ancestryItem.entity),\n    );\n    const allUnauthorizedEntityRefs = new Set(\n      rootUnauthorizedEntityRefs.flatMap(rootEntityRef =>\n        this.findParents(\n          rootEntityRef,\n          ancestryResult.items,\n          new Set(rootUnauthorizedEntityRefs),\n        ),\n      ),\n    );\n    return {\n      rootEntityRef: ancestryResult.rootEntityRef,\n      items: ancestryResult.items.filter(\n        ancestryItem =>\n          !allUnauthorizedEntityRefs.has(\n            stringifyEntityRef(ancestryItem.entity),\n          ),\n      ),\n    };\n  }\n\n  async facets(request: EntityFacetsRequest): Promise<EntityFacetsResponse> {\n    const authorizeDecision = (\n      await this.permissionApi.authorizeConditional(\n        [{ permission: catalogEntityReadPermission }],\n        { credentials: request.credentials },\n      )\n    )[0];\n\n    if (authorizeDecision.result === AuthorizeResult.DENY) {\n      return {\n        facets: Object.fromEntries(request.facets.map(f => [f, []])),\n      };\n    }\n\n    if (authorizeDecision.result === AuthorizeResult.CONDITIONAL) {\n      const permissionFilter: EntityFilter = this.transformConditions(\n        authorizeDecision.conditions,\n      );\n      return this.entitiesCatalog.facets({\n        ...request,\n        filter: request?.filter\n          ? { allOf: [permissionFilter, request.filter] }\n          : permissionFilter,\n      });\n    }\n\n    return this.entitiesCatalog.facets(request);\n  }\n\n  private findParents(\n    entityRef: string,\n    allAncestryItems: { entity: Entity; parentEntityRefs: string[] }[],\n    seenEntityRefs: Set<string>,\n  ): string[] {\n    const entity = allAncestryItems.find(\n      ancestryItem => stringifyEntityRef(ancestryItem.entity) === entityRef,\n    );\n    if (!entity) return [];\n\n    const newSeenEntityRefs = new Set(seenEntityRefs);\n    entity.parentEntityRefs.forEach(parentRef =>\n      newSeenEntityRefs.add(parentRef),\n    );\n\n    return [\n      entityRef,\n      ...entity.parentEntityRefs.flatMap(parentRef =>\n        seenEntityRefs.has(parentRef)\n          ? []\n          : this.findParents(parentRef, allAncestryItems, newSeenEntityRefs),\n      ),\n    ];\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from '@backstage/catalog-client';\nimport { CompoundEntityRef, Entity } from '@backstage/catalog-model';\nimport { NotAllowedError, NotFoundError } from '@backstage/errors';\nimport {\n  catalogLocationCreatePermission,\n  catalogLocationDeletePermission,\n  catalogLocationReadPermission,\n} from '@backstage/plugin-catalog-common/alpha';\nimport { AuthorizeResult } from '@backstage/plugin-permission-common';\nimport { LocationInput, LocationService } from './types';\nimport {\n  BackstageCredentials,\n  PermissionsService,\n} from '@backstage/backend-plugin-api';\n\nexport class AuthorizedLocationService implements LocationService {\n  constructor(\n    private readonly locationService: LocationService,\n    private readonly permissionApi: PermissionsService,\n  ) {}\n\n  async createLocation(\n    spec: LocationInput,\n    dryRun: boolean,\n    options: {\n      credentials: BackstageCredentials;\n    },\n  ): Promise<{\n    location: Location;\n    entities: Entity[];\n    exists?: boolean | undefined;\n  }> {\n    const authorizationResponse = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogLocationCreatePermission }],\n        { credentials: options.credentials },\n      )\n    )[0];\n\n    if (authorizationResponse.result === AuthorizeResult.DENY) {\n      throw new NotAllowedError();\n    }\n\n    return this.locationService.createLocation(spec, dryRun, options);\n  }\n\n  async listLocations(options: {\n    credentials: BackstageCredentials;\n  }): Promise<Location[]> {\n    const authorizationResponse = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogLocationReadPermission }],\n        { credentials: options.credentials },\n      )\n    )[0];\n\n    if (authorizationResponse.result === AuthorizeResult.DENY) {\n      return [];\n    }\n\n    return this.locationService.listLocations(options);\n  }\n\n  async getLocation(\n    id: string,\n    options: { credentials: BackstageCredentials },\n  ): Promise<Location> {\n    const authorizationResponse = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogLocationReadPermission }],\n        { credentials: options.credentials },\n      )\n    )[0];\n\n    if (authorizationResponse.result === AuthorizeResult.DENY) {\n      throw new NotFoundError(`Found no location with ID ${id}`);\n    }\n\n    return this.locationService.getLocation(id, options);\n  }\n\n  async deleteLocation(\n    id: string,\n    options: { credentials: BackstageCredentials },\n  ): Promise<void> {\n    const authorizationResponse = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogLocationDeletePermission }],\n        { credentials: options.credentials },\n      )\n    )[0];\n\n    if (authorizationResponse.result === AuthorizeResult.DENY) {\n      throw new NotAllowedError();\n    }\n\n    return this.locationService.deleteLocation(id, options);\n  }\n\n  async getLocationByEntity(\n    entityRef: CompoundEntityRef | string,\n    options: { credentials: BackstageCredentials },\n  ): Promise<Location> {\n    const authorizationResponse = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogLocationReadPermission }],\n        { credentials: options.credentials },\n      )\n    )[0];\n\n    if (authorizationResponse.result === AuthorizeResult.DENY) {\n      throw new NotFoundError();\n    }\n    return this.locationService.getLocationByEntity(entityRef, options);\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport lodash from 'lodash';\nimport {\n  DbFinalEntitiesRow,\n  DbRefreshStateReferencesRow,\n  DbRefreshStateRow,\n} from '../../tables';\n\n/**\n * Given a number of entity refs originally created by a given entity provider\n * (source key), remove those entities from the refresh state, and at the same\n * time recursively remove every child that is a direct or indirect result of\n * processing those entities, if they would have otherwise become orphaned by\n * the removal of their parents.\n */\nexport async function deleteWithEagerPruningOfChildren(options: {\n  knex: Knex | Knex.Transaction;\n  entityRefs: string[];\n  sourceKey: string;\n}): Promise<number> {\n  const { knex, entityRefs, sourceKey } = options;\n\n  // Split up the operation by (large) chunks, so that we do not hit database\n  // limits for the number of permitted bindings on a precompiled statement\n  let removedCount = 0;\n  for (const refs of lodash.chunk(entityRefs, 1000)) {\n    const { orphanEntityRefs } =\n      await findDescendantsThatWouldHaveBeenOrphanedByDeletion({\n        knex: options.knex,\n        refs,\n        sourceKey,\n      });\n\n    // Chunk again - these can be many more than the outer chunk size\n    for (const refsToDelete of lodash.chunk(orphanEntityRefs, 1000)) {\n      await markEntitiesAffectedByDeletionForStitching({\n        knex: options.knex,\n        entityRefs: refsToDelete,\n      });\n      await knex\n        .delete()\n        .from('refresh_state')\n        .whereIn('entity_ref', refsToDelete);\n    }\n\n    // Delete the references that originate only from this entity provider. Note\n    // that there may be more than one entity provider making a \"claim\" for a\n    // given root entity, if they emit with the same location key.\n    await knex<DbRefreshStateReferencesRow>('refresh_state_references')\n      .where('source_key', '=', sourceKey)\n      .whereIn('target_entity_ref', refs)\n      .delete();\n\n    removedCount += orphanEntityRefs.length;\n  }\n\n  return removedCount;\n}\n\nasync function findDescendantsThatWouldHaveBeenOrphanedByDeletion(options: {\n  knex: Knex | Knex.Transaction;\n  refs: string[];\n  sourceKey: string;\n}): Promise<{ orphanEntityRefs: string[] }> {\n  const { knex, refs, sourceKey } = options;\n\n  const orphans: string[] =\n    // First find all nodes that can be reached downwards from the roots\n    // (deletion targets), including the roots themselves, by traversing\n    // down the refresh_state_references table. Note that this query\n    // starts with a condition that source_key = our source key, and\n    // target_entity_ref is one of the deletion targets. This has two\n    // effects: it won't match attempts at deleting something that didn't\n    // originate from us in the first place, and also won't match non-root\n    // entities (source_key would be null for those).\n    //\n    //   KeyA - R1 - R2        Legend:\n    //                 \\       -----------------------------------------\n    //                  R3     Key*    Source key\n    //                 /       R*      Entity ref\n    //   KeyA - R4 - R5        lines   Individual references; sources to\n    //              /                  the left and targets to the right\n    //   KeyB --- R6\n    //\n    // The scenario is that KeyA wants to delete R1.\n    //\n    // The query starts with the KeyA-R1 reference, and then traverses\n    // down to also find R2 and R3. It uses union instead of union all,\n    // because it wants to find the set of unique descendants even if\n    // the tree has unexpected loops etc.\n    await knex\n      .withRecursive('descendants', ['entity_ref'], initial =>\n        initial\n          .select('target_entity_ref')\n          .from('refresh_state_references')\n          .where('source_key', '=', sourceKey)\n          .whereIn('target_entity_ref', refs)\n          .union(recursive =>\n            recursive\n              .select('refresh_state_references.target_entity_ref')\n              .from('descendants')\n              .join(\n                'refresh_state_references',\n                'descendants.entity_ref',\n                'refresh_state_references.source_entity_ref',\n              ),\n          ),\n      )\n      // Then for each descendant, traverse all the way back upwards through\n      // the refresh_state_references table to get an exhaustive list of all\n      // references that are part of keeping that particular descendant\n      // alive.\n      //\n      // Continuing the scenario from above, starting from R3, it goes\n      // upwards to find every pair along every relation line.\n      //\n      //   Top branch:     R2-R3, R1-R2, KeyA-R1\n      //   Middle branch:  R5-R3, R4-R5, KeyA-R4\n      //   Bottom branch:  R6-R5, KeyB-R6\n      //\n      // Note that this all applied to the subject R3. The exact same thing\n      // will be done starting from each other descendant (R2 and R1). They\n      // only have one and two references to find, respectively.\n      //\n      // This query also uses union instead of union all, to get the set of\n      // distinct relations even if the tree has unexpected loops etc.\n      .withRecursive(\n        'ancestors',\n        ['source_key', 'source_entity_ref', 'target_entity_ref', 'subject'],\n        initial =>\n          initial\n            .select(\n              'refresh_state_references.source_key',\n              'refresh_state_references.source_entity_ref',\n              'refresh_state_references.target_entity_ref',\n              'descendants.entity_ref',\n            )\n            .from('descendants')\n            .join(\n              'refresh_state_references',\n              'refresh_state_references.target_entity_ref',\n              'descendants.entity_ref',\n            )\n            .union(recursive =>\n              recursive\n                .select(\n                  'refresh_state_references.source_key',\n                  'refresh_state_references.source_entity_ref',\n                  'refresh_state_references.target_entity_ref',\n                  'ancestors.subject',\n                )\n                .from('ancestors')\n                .join(\n                  'refresh_state_references',\n                  'refresh_state_references.target_entity_ref',\n                  'ancestors.source_entity_ref',\n                ),\n            ),\n      )\n      // Finally, from that list of ancestor relations per descendant, pick\n      // out the ones that are roots (have a source_key). Specifically, find\n      // ones that seem to be be either (1) from another source, or (2)\n      // aren't part of the deletion targets. Those are markers that tell us\n      // that the corresponding descendant should be kept alive and NOT\n      // subject to eager deletion, because there's \"something else\" (not\n      // targeted for deletion) that has references down through the tree to\n      // it.\n      //\n      // Continuing the scenario from above, for R3 we have\n      //\n      //   KeyA-R1, KeyA-R4, KeyB-R6\n      //\n      // This tells us that R3 should be kept alive for two reasons: it's\n      // referenced by a node that isn't being deleted (R4), and also by\n      // another source (KeyB). What about R1 and R2? They both have\n      //\n      //   KeyA-R1\n      //\n      // So those should be deleted, since they are definitely only being\n      // kept alive by something that's about to be deleted.\n      //\n      // Final shape of the tree:\n      //\n      //                  R3\n      //                 /\n      //   KeyA - R4 - R5\n      //              /\n      //   KeyB --- R6\n      .with('retained', ['entity_ref'], notPartOfDeletion =>\n        notPartOfDeletion\n          .select('subject')\n          .from('ancestors')\n          .whereNotNull('ancestors.source_key')\n          .where(foreignKeyOrRef =>\n            foreignKeyOrRef\n              .where('ancestors.source_key', '!=', sourceKey)\n              .orWhereNotIn('ancestors.target_entity_ref', refs),\n          ),\n      )\n      // Return all descendants minus the retained ones\n      .select('descendants.entity_ref AS entity_ref')\n      .from('descendants')\n      .leftOuterJoin(\n        'retained',\n        'retained.entity_ref',\n        'descendants.entity_ref',\n      )\n      .whereNull('retained.entity_ref')\n      .then(rows => rows.map(row => row.entity_ref));\n\n  return { orphanEntityRefs: orphans };\n}\n\nasync function markEntitiesAffectedByDeletionForStitching(options: {\n  knex: Knex | Knex.Transaction;\n  entityRefs: string[];\n}) {\n  const { knex, entityRefs } = options;\n\n  // We want to re-stitch anything that has a relation pointing to the\n  // soon-to-be-deleted entity. In many circumstances we also re-stitch children\n  // in the refresh_state_references graph because their orphan state might\n  // change, but not here - this code by its very definition is meant to not\n  // leave any orphans behind, so we can simplify away that.\n  const affectedIds = await knex\n    .select('refresh_state.entity_id AS entity_id')\n    .from('relations')\n    .join(\n      'refresh_state',\n      'relations.source_entity_ref',\n      'refresh_state.entity_ref',\n    )\n    .whereIn('relations.target_entity_ref', entityRefs)\n    .then(rows => rows.map(row => row.entity_id));\n\n  for (const ids of lodash.chunk(affectedIds, 1000)) {\n    await knex\n      .table<DbFinalEntitiesRow>('final_entities')\n      .update({\n        hash: 'force-stitching',\n      })\n      .whereIn('entity_id', ids);\n    await knex\n      .table<DbRefreshStateRow>('refresh_state')\n      .update({\n        result_hash: 'force-stitching',\n        next_update_at: knex.fn.now(),\n      })\n      .whereIn('entity_id', ids);\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { DbRefreshStateRow } from '../../tables';\n\n/**\n * Schedules a future refresh of entities, by so called \"refresh keys\" that may\n * be associated with one or more entities. Note that this does not mean that\n * the refresh happens immediately, but rather that their scheduling time gets\n * moved up the queue and will get picked up eventually by the regular\n * processing loop.\n */\nexport async function refreshByRefreshKeys(options: {\n  tx: Knex.Transaction;\n  keys: string[];\n}): Promise<void> {\n  const { tx, keys } = options;\n\n  await tx<DbRefreshStateRow>('refresh_state')\n    .whereIn('entity_id', function selectEntityRefs(inner) {\n      inner\n        .whereIn('key', keys)\n        .select({\n          entity_id: 'refresh_keys.entity_id',\n        })\n        .from('refresh_keys');\n    })\n    .update({ next_update_at: tx.fn.now() });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isDatabaseConflictError } from '@backstage/backend-common';\nimport { stringifyEntityRef } from '@backstage/catalog-model';\nimport { DeferredEntity } from '@backstage/plugin-catalog-node';\nimport { Knex } from 'knex';\nimport lodash from 'lodash';\nimport { v4 as uuid } from 'uuid';\nimport { rethrowError } from './conversion';\nimport { deleteWithEagerPruningOfChildren } from './operations/provider/deleteWithEagerPruningOfChildren';\nimport { refreshByRefreshKeys } from './operations/provider/refreshByRefreshKeys';\nimport { checkLocationKeyConflict } from './operations/refreshState/checkLocationKeyConflict';\nimport { insertUnprocessedEntity } from './operations/refreshState/insertUnprocessedEntity';\nimport { updateUnprocessedEntity } from './operations/refreshState/updateUnprocessedEntity';\nimport { DbRefreshStateReferencesRow, DbRefreshStateRow } from './tables';\nimport {\n  ProviderDatabase,\n  RefreshByKeyOptions,\n  ReplaceUnprocessedEntitiesOptions,\n  Transaction,\n} from './types';\nimport { generateStableHash } from './util';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\n// The number of items that are sent per batch to the database layer, when\n// doing .batchInsert calls to knex. This needs to be low enough to not cause\n// errors in the underlying engine due to exceeding query limits, but large\n// enough to get the speed benefits.\nconst BATCH_SIZE = 50;\n\nexport class DefaultProviderDatabase implements ProviderDatabase {\n  constructor(\n    private readonly options: {\n      database: Knex;\n      logger: LoggerService;\n    },\n  ) {}\n\n  async transaction<T>(fn: (tx: Transaction) => Promise<T>): Promise<T> {\n    try {\n      let result: T | undefined = undefined;\n      await this.options.database.transaction(\n        async tx => {\n          // We can't return here, as knex swallows the return type in case the\n          // transaction is rolled back:\n          // https://github.com/knex/knex/blob/e37aeaa31c8ef9c1b07d2e4d3ec6607e557d800d/lib/transaction.js#L136\n          result = await fn(tx);\n        },\n        {\n          // If we explicitly trigger a rollback, don't fail.\n          doNotRejectOnRollback: true,\n        },\n      );\n      return result!;\n    } catch (e) {\n      this.options.logger.debug(`Error during transaction, ${e}`);\n      throw rethrowError(e);\n    }\n  }\n\n  async replaceUnprocessedEntities(\n    txOpaque: Transaction,\n    options: ReplaceUnprocessedEntitiesOptions,\n  ): Promise<void> {\n    const tx = txOpaque as Knex.Transaction;\n    const { toAdd, toUpsert, toRemove } = await this.createDelta(tx, options);\n\n    if (toRemove.length) {\n      const removedCount = await deleteWithEagerPruningOfChildren({\n        knex: tx,\n        entityRefs: toRemove,\n        sourceKey: options.sourceKey,\n      });\n      this.options.logger.debug(\n        `removed, ${removedCount} entities: ${JSON.stringify(toRemove)}`,\n      );\n    }\n\n    if (toAdd.length) {\n      // The reason for this chunking, rather than just massively batch\n      // inserting the entire payload, is that we fall back to the individual\n      // upsert mechanism below on conflicts. That path is massively slower than\n      // the fast batch path, so we don't want to end up accidentally having to\n      // for example item-by-item upsert tens of thousands of entities in a\n      // large initial delivery dump. The implication is that the size of these\n      // chunks needs to weigh the benefit of fast successful inserts, against\n      // the drawback of super slow but more rare fallbacks. There's quickly\n      // diminishing returns though with turning up this value way high.\n      for (const chunk of lodash.chunk(toAdd, 50)) {\n        try {\n          await tx.batchInsert(\n            'refresh_state',\n            chunk.map(item => ({\n              entity_id: uuid(),\n              entity_ref: stringifyEntityRef(item.deferred.entity),\n              unprocessed_entity: JSON.stringify(item.deferred.entity),\n              unprocessed_hash: item.hash,\n              errors: '',\n              location_key: item.deferred.locationKey,\n              next_update_at: tx.fn.now(),\n              last_discovery_at: tx.fn.now(),\n            })),\n            BATCH_SIZE,\n          );\n          await tx.batchInsert(\n            'refresh_state_references',\n            chunk.map(item => ({\n              source_key: options.sourceKey,\n              target_entity_ref: stringifyEntityRef(item.deferred.entity),\n            })),\n            BATCH_SIZE,\n          );\n        } catch (error) {\n          if (!isDatabaseConflictError(error)) {\n            throw error;\n          } else {\n            this.options.logger.debug(\n              `Fast insert path failed, falling back to slow path, ${error}`,\n            );\n            toUpsert.push(...chunk);\n          }\n        }\n      }\n    }\n\n    if (toUpsert.length) {\n      for (const {\n        deferred: { entity, locationKey },\n        hash,\n      } of toUpsert) {\n        const entityRef = stringifyEntityRef(entity);\n\n        try {\n          let ok = await updateUnprocessedEntity({\n            tx,\n            entity,\n            hash,\n            locationKey,\n          });\n          if (!ok) {\n            ok = await insertUnprocessedEntity({\n              tx,\n              entity,\n              hash,\n              locationKey,\n              logger: this.options.logger,\n            });\n          }\n\n          await tx<DbRefreshStateReferencesRow>('refresh_state_references')\n            .where('target_entity_ref', entityRef)\n            .andWhere({ source_key: options.sourceKey })\n            .delete();\n\n          if (ok) {\n            await tx<DbRefreshStateReferencesRow>(\n              'refresh_state_references',\n            ).insert({\n              source_key: options.sourceKey,\n              target_entity_ref: entityRef,\n            });\n          } else {\n            const conflictingKey = await checkLocationKeyConflict({\n              tx,\n              entityRef,\n              locationKey,\n            });\n            if (conflictingKey) {\n              this.options.logger.warn(\n                `Source ${options.sourceKey} detected conflicting entityRef ${entityRef} already referenced by ${conflictingKey} and now also ${locationKey}`,\n              );\n            }\n          }\n        } catch (error) {\n          this.options.logger.error(\n            `Failed to add '${entityRef}' from source '${options.sourceKey}', ${error}`,\n          );\n        }\n      }\n    }\n  }\n\n  async refreshByRefreshKeys(\n    txOpaque: Transaction,\n    options: RefreshByKeyOptions,\n  ) {\n    const tx = txOpaque as Knex.Transaction;\n    await refreshByRefreshKeys({ tx, keys: options.keys });\n  }\n\n  private async createDelta(\n    tx: Knex.Transaction,\n    options: ReplaceUnprocessedEntitiesOptions,\n  ): Promise<{\n    toAdd: { deferred: DeferredEntity; hash: string }[];\n    toUpsert: { deferred: DeferredEntity; hash: string }[];\n    toRemove: string[];\n  }> {\n    if (options.type === 'delta') {\n      return {\n        toAdd: [],\n        toUpsert: options.added.map(e => ({\n          deferred: e,\n          hash: generateStableHash(e.entity),\n        })),\n        toRemove: options.removed.map(e => e.entityRef),\n      };\n    }\n\n    // Grab all of the existing references from the same source, and their locationKeys as well\n    const oldRefs = await tx<DbRefreshStateReferencesRow>(\n      'refresh_state_references',\n    )\n      .leftJoin<DbRefreshStateRow>('refresh_state', {\n        target_entity_ref: 'entity_ref',\n      })\n      .where({ source_key: options.sourceKey })\n      .select({\n        target_entity_ref: 'refresh_state_references.target_entity_ref',\n        location_key: 'refresh_state.location_key',\n        unprocessed_hash: 'refresh_state.unprocessed_hash',\n      });\n\n    const items = options.items.map(deferred => ({\n      deferred,\n      ref: stringifyEntityRef(deferred.entity),\n      hash: generateStableHash(deferred.entity),\n    }));\n\n    const oldRefsSet = new Map(\n      oldRefs.map(r => [\n        r.target_entity_ref,\n        {\n          locationKey: r.location_key,\n          oldEntityHash: r.unprocessed_hash,\n        },\n      ]),\n    );\n    const newRefsSet = new Set(items.map(item => item.ref));\n\n    const toAdd = new Array<{ deferred: DeferredEntity; hash: string }>();\n    const toUpsert = new Array<{ deferred: DeferredEntity; hash: string }>();\n    const toRemove = oldRefs\n      .map(row => row.target_entity_ref)\n      .filter(ref => !newRefsSet.has(ref));\n\n    for (const item of items) {\n      const oldRef = oldRefsSet.get(item.ref);\n      const upsertItem = { deferred: item.deferred, hash: item.hash };\n      if (!oldRef) {\n        // Add any entity that does not exist in the database\n        toAdd.push(upsertItem);\n      } else if (\n        (oldRef?.locationKey ?? undefined) !==\n        (item.deferred.locationKey ?? undefined)\n      ) {\n        // Remove and then re-add any entity that exists, but with a different location key\n        toRemove.push(item.ref);\n        toAdd.push(upsertItem);\n      } else if (oldRef.oldEntityHash !== item.hash) {\n        // Entities with modifications should be pushed through too\n        toUpsert.push(upsertItem);\n      }\n    }\n\n    return { toAdd, toUpsert, toRemove };\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NotFoundError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport {\n  CatalogDatabase,\n  ListAncestorsOptions,\n  ListAncestorsResult,\n  RefreshOptions,\n  Transaction,\n} from './types';\nimport { DbRefreshStateReferencesRow, DbRefreshStateRow } from './tables';\nimport { rethrowError } from './conversion';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nconst MAX_ANCESTOR_DEPTH = 32;\n\nexport class DefaultCatalogDatabase implements CatalogDatabase {\n  constructor(\n    private readonly options: {\n      database: Knex;\n      logger: LoggerService;\n    },\n  ) {}\n\n  async transaction<T>(fn: (tx: Transaction) => Promise<T>): Promise<T> {\n    try {\n      let result: T | undefined = undefined;\n\n      await this.options.database.transaction(\n        async tx => {\n          // We can't return here, as knex swallows the return type in case the transaction is rolled back:\n          // https://github.com/knex/knex/blob/e37aeaa31c8ef9c1b07d2e4d3ec6607e557d800d/lib/transaction.js#L136\n          result = await fn(tx);\n        },\n        {\n          // If we explicitly trigger a rollback, don't fail.\n          doNotRejectOnRollback: true,\n        },\n      );\n\n      return result!;\n    } catch (e) {\n      this.options.logger.debug(`Error during transaction, ${e}`);\n      throw rethrowError(e);\n    }\n  }\n\n  async listAncestors(\n    txOpaque: Transaction,\n    options: ListAncestorsOptions,\n  ): Promise<ListAncestorsResult> {\n    const tx = txOpaque as Knex.Transaction;\n    const { entityRef } = options;\n    const entityRefs = new Array<string>();\n\n    let currentRef = entityRef.toLocaleLowerCase('en-US');\n    for (let depth = 1; depth <= MAX_ANCESTOR_DEPTH; depth += 1) {\n      const rows = await tx<DbRefreshStateReferencesRow>(\n        'refresh_state_references',\n      )\n        .where({ target_entity_ref: currentRef })\n        .select();\n\n      if (rows.length === 0) {\n        if (depth === 1) {\n          throw new NotFoundError(`Entity ${currentRef} not found`);\n        }\n        throw new NotFoundError(\n          `Entity ${entityRef} has a broken parent reference chain at ${currentRef}`,\n        );\n      }\n\n      const parentRef = rows.find(r => r.source_entity_ref)?.source_entity_ref;\n      if (!parentRef) {\n        // We've reached the top of the tree which is the entityProvider.\n        // In this case we refresh the entity itself.\n        return { entityRefs };\n      }\n      entityRefs.push(parentRef);\n      currentRef = parentRef;\n    }\n    throw new Error(\n      `Unable receive ancestors for ${entityRef}, reached maximum depth of ${MAX_ANCESTOR_DEPTH}`,\n    );\n  }\n\n  async refresh(txOpaque: Transaction, options: RefreshOptions): Promise<void> {\n    const tx = txOpaque as Knex.Transaction;\n    const { entityRef } = options;\n\n    const updateResult = await tx<DbRefreshStateRow>('refresh_state')\n      .where({ entity_ref: entityRef.toLocaleLowerCase('en-US') })\n      .update({ next_update_at: tx.fn.now() });\n    if (updateResult === 0) {\n      throw new NotFoundError(`Failed to schedule ${entityRef} for refresh`);\n    }\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createLegacyAuthAdapters,\n  HostDiscovery,\n  PluginDatabaseManager,\n  UrlReader,\n} from '@backstage/backend-common';\nimport { PluginTaskScheduler } from '@backstage/backend-tasks';\nimport {\n  DefaultNamespaceEntityPolicy,\n  Entity,\n  EntityPolicies,\n  EntityPolicy,\n  FieldFormatEntityPolicy,\n  makeValidator,\n  NoForeignRootFieldsEntityPolicy,\n  parseEntityRef,\n  SchemaValidEntityPolicy,\n  stringifyEntityRef,\n  Validators,\n} from '@backstage/catalog-model';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { createHash } from 'crypto';\nimport { Router } from 'express';\nimport lodash, { keyBy } from 'lodash';\n\nimport {\n  CatalogProcessor,\n  CatalogProcessorParser,\n  EntitiesSearchFilter,\n  EntityProvider,\n  PlaceholderResolver,\n  ScmLocationAnalyzer,\n} from '@backstage/plugin-catalog-node';\nimport {\n  AnnotateLocationEntityProcessor,\n  BuiltinKindsEntityProcessor,\n  CodeOwnersProcessor,\n  FileReaderProcessor,\n  PlaceholderProcessor,\n  UrlReaderProcessor,\n} from '../modules';\nimport { ConfigLocationEntityProvider } from '../modules/core/ConfigLocationEntityProvider';\nimport { DefaultLocationStore } from '../modules/core/DefaultLocationStore';\nimport { RepoLocationAnalyzer } from '../ingestion/LocationAnalyzer';\nimport {\n  jsonPlaceholderResolver,\n  textPlaceholderResolver,\n  yamlPlaceholderResolver,\n} from '../modules/core/PlaceholderProcessor';\nimport { defaultEntityDataParser } from '../modules/util/parse';\nimport { LocationAnalyzer } from '../ingestion';\nimport {\n  CatalogProcessingEngine,\n  createRandomProcessingInterval,\n  ProcessingIntervalFunction,\n} from '../processing';\nimport { DefaultProcessingDatabase } from '../database/DefaultProcessingDatabase';\nimport { applyDatabaseMigrations } from '../database/migrations';\nimport { DefaultCatalogProcessingEngine } from '../processing/DefaultCatalogProcessingEngine';\nimport { DefaultLocationService } from './DefaultLocationService';\nimport { DefaultEntitiesCatalog } from './DefaultEntitiesCatalog';\nimport { DefaultCatalogProcessingOrchestrator } from '../processing/DefaultCatalogProcessingOrchestrator';\nimport { DefaultStitcher } from '../stitching/DefaultStitcher';\nimport { createRouter } from './createRouter';\nimport { DefaultRefreshService } from './DefaultRefreshService';\nimport { AuthorizedRefreshService } from './AuthorizedRefreshService';\nimport { DefaultCatalogRulesEnforcer } from '../ingestion/CatalogRules';\nimport { Config, readDurationFromConfig } from '@backstage/config';\nimport { connectEntityProviders } from '../processing/connectEntityProviders';\nimport {\n  Permission,\n  PermissionAuthorizer,\n  PermissionRuleParams,\n  toPermissionEvaluator,\n} from '@backstage/plugin-permission-common';\nimport { permissionRules as catalogPermissionRules } from '../permissions/rules';\nimport {\n  createConditionTransformer,\n  createPermissionIntegrationRouter,\n  PermissionRule,\n} from '@backstage/plugin-permission-node';\nimport { AuthorizedEntitiesCatalog } from './AuthorizedEntitiesCatalog';\nimport { basicEntityFilter } from './request';\nimport {\n  catalogPermissions,\n  RESOURCE_TYPE_CATALOG_ENTITY,\n} from '@backstage/plugin-catalog-common/alpha';\nimport { AuthorizedLocationService } from './AuthorizedLocationService';\nimport { DefaultProviderDatabase } from '../database/DefaultProviderDatabase';\nimport { DefaultCatalogDatabase } from '../database/DefaultCatalogDatabase';\nimport { EventBroker } from '@backstage/plugin-events-node';\nimport { durationToMilliseconds } from '@backstage/types';\nimport {\n  AuthService,\n  DiscoveryService,\n  HttpAuthService,\n  LoggerService,\n  PermissionsService,\n} from '@backstage/backend-plugin-api';\n\n/**\n * This is a duplicate of the alpha `CatalogPermissionRule` type, for use in the stable API.\n *\n * @public\n */\nexport type CatalogPermissionRuleInput<\n  TParams extends PermissionRuleParams = PermissionRuleParams,\n> = PermissionRule<Entity, EntitiesSearchFilter, 'catalog-entity', TParams>;\n\n/** @public */\nexport type CatalogEnvironment = {\n  logger: LoggerService;\n  database: PluginDatabaseManager;\n  config: Config;\n  reader: UrlReader;\n  permissions: PermissionsService | PermissionAuthorizer;\n  scheduler?: PluginTaskScheduler;\n  discovery?: DiscoveryService;\n  auth?: AuthService;\n  httpAuth?: HttpAuthService;\n};\n\n/**\n * A builder that helps wire up all of the component parts of the catalog.\n *\n * The touch points where you can replace or extend behavior are as follows:\n *\n * - Entity policies can be added or replaced. These are automatically run\n *   after the processors' pre-processing steps. All policies are given the\n *   chance to inspect the entity, and all of them have to pass in order for\n *   the entity to be considered valid from an overall point of view.\n * - Location analyzers can be added. These are responsible for analyzing\n *   repositories when onboarding them into the catalog, by finding\n *   catalog-info.yaml files and other artifacts that can help automatically\n *   register or create catalog data on the user's behalf.\n * - Placeholder resolvers can be replaced or added. These run on the raw\n *   structured data between the parsing and pre-processing steps, to replace\n *   dollar-prefixed entries with their actual values (like $file).\n * - Field format validators can be replaced. These check the format of\n *   individual core fields such as metadata.name, to ensure that they adhere\n *   to certain rules.\n * - Processors can be added or replaced. These implement the functionality of\n *   reading, parsing, validating, and processing the entity data before it is\n *   persisted in the catalog.\n *\n * @public\n */\nexport class CatalogBuilder {\n  private readonly env: CatalogEnvironment;\n  private entityPolicies: EntityPolicy[];\n  private entityPoliciesReplace: boolean;\n  private placeholderResolvers: Record<string, PlaceholderResolver>;\n  private fieldFormatValidators: Partial<Validators>;\n  private entityProviders: EntityProvider[];\n  private processors: CatalogProcessor[];\n  private locationAnalyzers: ScmLocationAnalyzer[];\n  private processorsReplace: boolean;\n  private parser: CatalogProcessorParser | undefined;\n  private onProcessingError?: (event: {\n    unprocessedEntity: Entity;\n    errors: Error[];\n  }) => Promise<void> | void;\n  private processingInterval: ProcessingIntervalFunction;\n  private locationAnalyzer: LocationAnalyzer | undefined = undefined;\n  private readonly permissions: Permission[];\n  private readonly permissionRules: CatalogPermissionRuleInput[];\n  private allowedLocationType: string[];\n  private legacySingleProcessorValidation = false;\n  private eventBroker?: EventBroker;\n\n  /**\n   * Creates a catalog builder.\n   */\n  static create(env: CatalogEnvironment): CatalogBuilder {\n    return new CatalogBuilder(env);\n  }\n\n  private constructor(env: CatalogEnvironment) {\n    this.env = env;\n    this.entityPolicies = [];\n    this.entityPoliciesReplace = false;\n    this.placeholderResolvers = {};\n    this.fieldFormatValidators = {};\n    this.entityProviders = [];\n    this.processors = [];\n    this.locationAnalyzers = [];\n    this.processorsReplace = false;\n    this.parser = undefined;\n    this.permissions = [...catalogPermissions];\n    this.permissionRules = Object.values(catalogPermissionRules);\n    this.allowedLocationType = ['url'];\n\n    this.processingInterval = CatalogBuilder.getDefaultProcessingInterval(\n      env.config,\n    );\n  }\n\n  /**\n   * Adds policies that are used to validate entities between the pre-\n   * processing and post-processing stages. All such policies must pass for the\n   * entity to be considered valid.\n   *\n   * If what you want to do is to replace the rules for what format is allowed\n   * in various core entity fields (such as metadata.name), you may want to use\n   * {@link CatalogBuilder#setFieldFormatValidators} instead.\n   *\n   * @param policies - One or more policies\n   */\n  addEntityPolicy(\n    ...policies: Array<EntityPolicy | Array<EntityPolicy>>\n  ): CatalogBuilder {\n    this.entityPolicies.push(...policies.flat());\n    return this;\n  }\n\n  /**\n   * Processing interval determines how often entities should be processed.\n   * Seconds provided will be multiplied by 1.5\n   * The default processing interval is 100-150 seconds.\n   * setting this too low will potentially deplete request quotas to upstream services.\n   */\n  setProcessingIntervalSeconds(seconds: number): CatalogBuilder {\n    this.processingInterval = createRandomProcessingInterval({\n      minSeconds: seconds,\n      maxSeconds: seconds * 1.5,\n    });\n    return this;\n  }\n\n  /**\n   * Overwrites the default processing interval function used to spread\n   * entity updates in the catalog.\n   */\n  setProcessingInterval(\n    processingInterval: ProcessingIntervalFunction,\n  ): CatalogBuilder {\n    this.processingInterval = processingInterval;\n    return this;\n  }\n\n  /**\n   * Overwrites the default location analyzer.\n   */\n  setLocationAnalyzer(locationAnalyzer: LocationAnalyzer): CatalogBuilder {\n    this.locationAnalyzer = locationAnalyzer;\n    return this;\n  }\n\n  /**\n   * Sets what policies to use for validation of entities between the pre-\n   * processing and post-processing stages. All such policies must pass for the\n   * entity to be considered valid.\n   *\n   * If what you want to do is to replace the rules for what format is allowed\n   * in various core entity fields (such as metadata.name), you may want to use\n   * {@link CatalogBuilder#setFieldFormatValidators} instead.\n   *\n   * This function replaces the default set of policies; use with care.\n   *\n   * @param policies - One or more policies\n   */\n  replaceEntityPolicies(policies: EntityPolicy[]): CatalogBuilder {\n    this.entityPolicies = [...policies];\n    this.entityPoliciesReplace = true;\n    return this;\n  }\n\n  /**\n   * Adds, or overwrites, a handler for placeholders (e.g. $file) in entity\n   * definition files.\n   *\n   * @param key - The key that identifies the placeholder, e.g. \"file\"\n   * @param resolver - The resolver that gets values for this placeholder\n   */\n  setPlaceholderResolver(\n    key: string,\n    resolver: PlaceholderResolver,\n  ): CatalogBuilder {\n    this.placeholderResolvers[key] = resolver;\n    return this;\n  }\n\n  /**\n   * Sets the validator function to use for one or more special fields of an\n   * entity. This is useful if the default rules for formatting of fields are\n   * not sufficient.\n   *\n   * This function has no effect if used together with\n   * {@link CatalogBuilder#replaceEntityPolicies}.\n   *\n   * @param validators - The (subset of) validators to set\n   */\n  setFieldFormatValidators(validators: Partial<Validators>): CatalogBuilder {\n    lodash.merge(this.fieldFormatValidators, validators);\n    return this;\n  }\n\n  /**\n   * Adds or replaces entity providers. These are responsible for bootstrapping\n   * the list of entities out of original data sources. For example, there is\n   * one entity source for the config locations, and one for the database\n   * stored locations. If you ingest entities out of a third party system, you\n   * may want to implement that in terms of an entity provider as well.\n   *\n   * @param providers - One or more entity providers\n   */\n  addEntityProvider(\n    ...providers: Array<EntityProvider | Array<EntityProvider>>\n  ): CatalogBuilder {\n    this.entityProviders.push(...providers.flat());\n    return this;\n  }\n\n  /**\n   * Adds entity processors. These are responsible for reading, parsing, and\n   * processing entities before they are persisted in the catalog.\n   *\n   * @param processors - One or more processors\n   */\n  addProcessor(\n    ...processors: Array<CatalogProcessor | Array<CatalogProcessor>>\n  ): CatalogBuilder {\n    this.processors.push(...processors.flat());\n    return this;\n  }\n\n  /**\n   * Sets what entity processors to use. These are responsible for reading,\n   * parsing, and processing entities before they are persisted in the catalog.\n   *\n   * This function replaces the default set of processors, consider using with\n   * {@link CatalogBuilder#getDefaultProcessors}; use with care.\n   *\n   * @param processors - One or more processors\n   */\n  replaceProcessors(processors: CatalogProcessor[]): CatalogBuilder {\n    this.processors = [...processors];\n    this.processorsReplace = true;\n    return this;\n  }\n\n  /**\n   * Returns the default list of entity processors. These are responsible for reading,\n   * parsing, and processing entities before they are persisted in the catalog. Changing\n   * the order of processing can give more control to custom processors.\n   *\n   * Consider using with {@link CatalogBuilder#replaceProcessors}\n   *\n   */\n  getDefaultProcessors(): CatalogProcessor[] {\n    const { config, logger, reader } = this.env;\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return [\n      new FileReaderProcessor(),\n      new UrlReaderProcessor({ reader, logger }),\n      CodeOwnersProcessor.fromConfig(config, { logger, reader }),\n      new AnnotateLocationEntityProcessor({ integrations }),\n    ];\n  }\n\n  /**\n   * Adds Location Analyzers. These are responsible for analyzing\n   * repositories when onboarding them into the catalog, by finding\n   * catalog-info.yaml files and other artifacts that can help automatically\n   * register or create catalog data on the user's behalf.\n   *\n   * @param locationAnalyzers - One or more location analyzers\n   */\n  addLocationAnalyzers(\n    ...analyzers: Array<ScmLocationAnalyzer | Array<ScmLocationAnalyzer>>\n  ): CatalogBuilder {\n    this.locationAnalyzers.push(...analyzers.flat());\n    return this;\n  }\n\n  /**\n   * Sets up the catalog to use a custom parser for entity data.\n   *\n   * This is the function that gets called immediately after some raw entity\n   * specification data has been read from a remote source, and needs to be\n   * parsed and emitted as structured data.\n   *\n   * @param parser - The custom parser\n   */\n  setEntityDataParser(parser: CatalogProcessorParser): CatalogBuilder {\n    this.parser = parser;\n    return this;\n  }\n\n  /**\n   * Adds additional permissions. See\n   * {@link @backstage/plugin-permission-node#Permission}.\n   *\n   * @param permissions - Additional permissions\n   */\n  addPermissions(...permissions: Array<Permission | Array<Permission>>) {\n    this.permissions.push(...permissions.flat());\n    return this;\n  }\n\n  /**\n   * Adds additional permission rules. Permission rules are used to evaluate\n   * catalog resources against queries. See\n   * {@link @backstage/plugin-permission-node#PermissionRule}.\n   *\n   * @param permissionRules - Additional permission rules\n   */\n  addPermissionRules(\n    ...permissionRules: Array<\n      CatalogPermissionRuleInput | Array<CatalogPermissionRuleInput>\n    >\n  ) {\n    this.permissionRules.push(...permissionRules.flat());\n    return this;\n  }\n\n  /**\n   * Sets up the allowed location types from being registered via the location service.\n   *\n   * @param allowedLocationTypes - the allowed location types\n   */\n  setAllowedLocationTypes(allowedLocationTypes: string[]): CatalogBuilder {\n    this.allowedLocationType = allowedLocationTypes;\n    return this;\n  }\n\n  /**\n   * Enables the legacy behaviour of canceling validation early whenever only a\n   * single processor declares an entity kind to be valid.\n   */\n  useLegacySingleProcessorValidation(): this {\n    this.legacySingleProcessorValidation = true;\n    return this;\n  }\n\n  /**\n   * Enables the publishing of events for conflicts in the DefaultProcessingDatabase\n   */\n  setEventBroker(broker: EventBroker): CatalogBuilder {\n    this.eventBroker = broker;\n    return this;\n  }\n\n  /**\n   * Wires up and returns all of the component parts of the catalog\n   */\n  async build(): Promise<{\n    processingEngine: CatalogProcessingEngine;\n    router: Router;\n  }> {\n    const {\n      config,\n      database,\n      logger,\n      permissions,\n      scheduler,\n      discovery = HostDiscovery.fromConfig(config),\n    } = this.env;\n\n    const { auth, httpAuth } = createLegacyAuthAdapters({\n      ...this.env,\n      discovery,\n    });\n\n    const policy = this.buildEntityPolicy();\n    const processors = this.buildProcessors();\n    const parser = this.parser || defaultEntityDataParser;\n\n    const dbClient = await database.getClient();\n    if (!database.migrations?.skip) {\n      logger.info('Performing database migration');\n      await applyDatabaseMigrations(dbClient);\n    }\n\n    const stitcher = DefaultStitcher.fromConfig(config, {\n      knex: dbClient,\n      logger,\n    });\n\n    const processingDatabase = new DefaultProcessingDatabase({\n      database: dbClient,\n      logger,\n      refreshInterval: this.processingInterval,\n      eventBroker: this.eventBroker,\n    });\n    const providerDatabase = new DefaultProviderDatabase({\n      database: dbClient,\n      logger,\n    });\n    const catalogDatabase = new DefaultCatalogDatabase({\n      database: dbClient,\n      logger,\n    });\n    const integrations = ScmIntegrations.fromConfig(config);\n    const rulesEnforcer = DefaultCatalogRulesEnforcer.fromConfig(config);\n    const orchestrator = new DefaultCatalogProcessingOrchestrator({\n      processors,\n      integrations,\n      rulesEnforcer,\n      logger,\n      parser,\n      policy,\n      legacySingleProcessorValidation: this.legacySingleProcessorValidation,\n    });\n    const unauthorizedEntitiesCatalog = new DefaultEntitiesCatalog({\n      database: dbClient,\n      logger,\n      stitcher,\n    });\n\n    let permissionsService: PermissionsService;\n    if ('authorizeConditional' in permissions) {\n      permissionsService = permissions as PermissionsService;\n    } else {\n      logger.warn(\n        'PermissionAuthorizer is deprecated. Please use an instance of PermissionEvaluator instead of PermissionAuthorizer in PluginEnvironment#permissions',\n      );\n      permissionsService = toPermissionEvaluator(permissions);\n    }\n\n    const entitiesCatalog = new AuthorizedEntitiesCatalog(\n      unauthorizedEntitiesCatalog,\n      permissionsService,\n      createConditionTransformer(this.permissionRules),\n    );\n    const permissionIntegrationRouter = createPermissionIntegrationRouter({\n      resourceType: RESOURCE_TYPE_CATALOG_ENTITY,\n      getResources: async (resourceRefs: string[]) => {\n        const { entities } = await unauthorizedEntitiesCatalog.entities({\n          credentials: await auth.getOwnServiceCredentials(),\n          filter: {\n            anyOf: resourceRefs.map(resourceRef => {\n              const { kind, namespace, name } = parseEntityRef(resourceRef);\n\n              return basicEntityFilter({\n                kind,\n                'metadata.namespace': namespace,\n                'metadata.name': name,\n              });\n            }),\n          },\n        });\n\n        const entitiesByRef = keyBy(entities, stringifyEntityRef);\n\n        return resourceRefs.map(\n          resourceRef =>\n            entitiesByRef[stringifyEntityRef(parseEntityRef(resourceRef))],\n        );\n      },\n      permissions: this.permissions,\n      rules: this.permissionRules,\n    });\n\n    const locationStore = new DefaultLocationStore(dbClient);\n    const configLocationProvider = new ConfigLocationEntityProvider(config);\n    const entityProviders = lodash.uniqBy(\n      [...this.entityProviders, locationStore, configLocationProvider],\n      provider => provider.getProviderName(),\n    );\n\n    const processingEngine = new DefaultCatalogProcessingEngine({\n      config,\n      scheduler,\n      logger,\n      knex: dbClient,\n      processingDatabase,\n      orchestrator,\n      stitcher,\n      createHash: () => createHash('sha1'),\n      pollingIntervalMs: 1000,\n      onProcessingError: event => {\n        this.onProcessingError?.(event);\n      },\n      eventBroker: this.eventBroker,\n    });\n\n    const locationAnalyzer =\n      this.locationAnalyzer ??\n      new RepoLocationAnalyzer(logger, integrations, this.locationAnalyzers);\n    const locationService = new AuthorizedLocationService(\n      new DefaultLocationService(locationStore, orchestrator, {\n        allowedLocationTypes: this.allowedLocationType,\n      }),\n      permissionsService,\n    );\n    const refreshService = new AuthorizedRefreshService(\n      new DefaultRefreshService({ database: catalogDatabase }),\n      permissionsService,\n    );\n\n    const router = await createRouter({\n      entitiesCatalog,\n      locationAnalyzer,\n      locationService,\n      orchestrator,\n      refreshService,\n      logger,\n      config,\n      permissionIntegrationRouter,\n      auth,\n      httpAuth,\n    });\n\n    await connectEntityProviders(providerDatabase, entityProviders);\n\n    return {\n      processingEngine: {\n        async start() {\n          await processingEngine.start();\n          await stitcher.start();\n        },\n        async stop() {\n          await processingEngine.stop();\n          await stitcher.stop();\n        },\n      },\n      router,\n    };\n  }\n\n  subscribe(options: {\n    onProcessingError: (event: {\n      unprocessedEntity: Entity;\n      errors: Error[];\n    }) => Promise<void> | void;\n  }) {\n    this.onProcessingError = options.onProcessingError;\n  }\n\n  private buildEntityPolicy(): EntityPolicy {\n    const entityPolicies: EntityPolicy[] = this.entityPoliciesReplace\n      ? [new SchemaValidEntityPolicy(), ...this.entityPolicies]\n      : [\n          new SchemaValidEntityPolicy(),\n          new DefaultNamespaceEntityPolicy(),\n          new NoForeignRootFieldsEntityPolicy(),\n          new FieldFormatEntityPolicy(\n            makeValidator(this.fieldFormatValidators),\n          ),\n          ...this.entityPolicies,\n        ];\n\n    return EntityPolicies.allOf(entityPolicies);\n  }\n\n  private buildProcessors(): CatalogProcessor[] {\n    const { config, reader } = this.env;\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    this.checkDeprecatedReaderProcessors();\n\n    const placeholderResolvers: Record<string, PlaceholderResolver> = {\n      json: jsonPlaceholderResolver,\n      yaml: yamlPlaceholderResolver,\n      text: textPlaceholderResolver,\n      ...this.placeholderResolvers,\n    };\n\n    // The placeholder is always there no matter what\n    const processors: CatalogProcessor[] = [\n      new PlaceholderProcessor({\n        resolvers: placeholderResolvers,\n        reader,\n        integrations,\n      }),\n    ];\n\n    const builtinKindsEntityProcessor = new BuiltinKindsEntityProcessor();\n    // If the user adds a processor named 'BuiltinKindsEntityProcessor',\n    //   skip inclusion of the catalog-backend version.\n    if (\n      !this.processors.some(\n        processor =>\n          processor.getProcessorName() ===\n          builtinKindsEntityProcessor.getProcessorName(),\n      )\n    ) {\n      processors.push(builtinKindsEntityProcessor);\n    }\n\n    // These are only added unless the user replaced them all\n    if (!this.processorsReplace) {\n      processors.push(...this.getDefaultProcessors());\n    }\n\n    // Add the ones (if any) that the user added\n    processors.push(...this.processors);\n\n    this.checkMissingExternalProcessors(processors);\n\n    return processors;\n  }\n\n  // TODO(Rugvip): These old processors are removed, for a while we'll be throwing\n  //               errors here to make sure people know where to move the config\n  private checkDeprecatedReaderProcessors() {\n    const pc = this.env.config.getOptionalConfig('catalog.processors');\n    if (pc?.has('github')) {\n      throw new Error(\n        `Using deprecated configuration for catalog.processors.github, move to using integrations.github instead`,\n      );\n    }\n    if (pc?.has('gitlabApi')) {\n      throw new Error(\n        `Using deprecated configuration for catalog.processors.gitlabApi, move to using integrations.gitlab instead`,\n      );\n    }\n    if (pc?.has('bitbucketApi')) {\n      throw new Error(\n        `Using deprecated configuration for catalog.processors.bitbucketApi, move to using integrations.bitbucket instead`,\n      );\n    }\n    if (pc?.has('azureApi')) {\n      throw new Error(\n        `Using deprecated configuration for catalog.processors.azureApi, move to using integrations.azure instead`,\n      );\n    }\n  }\n\n  // TODO(freben): This can be removed no sooner than June 2022, after adopters have had some time to adapt to the new package structure\n  private checkMissingExternalProcessors(processors: CatalogProcessor[]) {\n    const skipCheckVarName = 'BACKSTAGE_CATALOG_SKIP_MISSING_PROCESSORS_CHECK';\n    if (process.env[skipCheckVarName]) {\n      return;\n    }\n\n    const locationTypes = new Set(\n      this.env.config\n        .getOptionalConfigArray('catalog.locations')\n        ?.map(l => l.getString('type')) ?? [],\n    );\n    const processorNames = new Set(processors.map(p => p.getProcessorName()));\n\n    function check(\n      locationType: string,\n      processorName: string,\n      installationUrl: string,\n    ) {\n      if (\n        locationTypes.has(locationType) &&\n        !processorNames.has(processorName)\n      ) {\n        throw new Error(\n          [\n            `Your config contains a \"catalog.locations\" entry of type ${locationType},`,\n            `but does not have the corresponding catalog processor ${processorName} installed.`,\n            `This processor used to be built into the catalog itself, but is now moved to an`,\n            `external module that has to be installed manually. Please follow the installation`,\n            `instructions at ${installationUrl} if you are using this ability, or remove the`,\n            `location from your app config if you do not. You can also silence this check entirely`,\n            `by setting the environment variable ${skipCheckVarName} to 'true'.`,\n          ].join(' '),\n        );\n      }\n    }\n\n    check(\n      'aws-cloud-accounts',\n      'AwsOrganizationCloudAccountProcessor',\n      'https://backstage.io/docs/integrations',\n    );\n    check(\n      's3-discovery',\n      'AwsS3DiscoveryProcessor',\n      'https://backstage.io/docs/integrations/aws-s3/discovery',\n    );\n    check(\n      'azure-discovery',\n      'AzureDevOpsDiscoveryProcessor',\n      'https://backstage.io/docs/integrations/azure/discovery',\n    );\n    check(\n      'bitbucket-discovery',\n      'BitbucketDiscoveryProcessor',\n      'https://backstage.io/docs/integrations/bitbucket/discovery',\n    );\n    check(\n      'github-discovery',\n      'GithubDiscoveryProcessor',\n      'https://backstage.io/docs/integrations/github/discovery',\n    );\n    check(\n      'github-org',\n      'GithubOrgReaderProcessor',\n      'https://backstage.io/docs/integrations/github/org',\n    );\n    check(\n      'gitlab-discovery',\n      'GitLabDiscoveryProcessor',\n      'https://backstage.io/docs/integrations/gitlab/discovery',\n    );\n    check(\n      'ldap-org',\n      'LdapOrgReaderProcessor',\n      'https://backstage.io/docs/integrations/ldap/org',\n    );\n    check(\n      'microsoft-graph-org',\n      'MicrosoftGraphOrgReaderProcessor',\n      'https://backstage.io/docs/integrations/azure/org',\n    );\n  }\n\n  private static getDefaultProcessingInterval(\n    config: Config,\n  ): ProcessingIntervalFunction {\n    const processingIntervalKey = 'catalog.processingInterval';\n\n    if (!config.has(processingIntervalKey)) {\n      return createRandomProcessingInterval({\n        minSeconds: 100,\n        maxSeconds: 150,\n      });\n    }\n\n    const duration = readDurationFromConfig(config, {\n      key: processingIntervalKey,\n    });\n    const seconds = Math.max(\n      1,\n      Math.round(durationToMilliseconds(duration) / 1000),\n    );\n\n    return createRandomProcessingInterval({\n      minSeconds: seconds,\n      maxSeconds: seconds * 1.5,\n    });\n  }\n}\n"],"names":["codeowners","parseGitUrl","NotFoundError","__publicField","ScmIntegrations","stringifyLocationRef","merge","pickBy","ANNOTATION_LOCATION","ANNOTATION_ORIGIN_LOCATION","ANNOTATION_VIEW_URL","ANNOTATION_EDIT_URL","ANNOTATION_SOURCE_LOCATION","identity","apiEntityV1alpha1Validator","componentEntityV1alpha1Validator","resourceEntityV1alpha1Validator","groupEntityV1alpha1Validator","locationEntityV1alpha1Validator","userEntityV1alpha1Validator","systemEntityV1alpha1Validator","domainEntityV1alpha1Validator","getCompoundEntityRef","parseEntityRef","processingResult","RELATION_OWNED_BY","RELATION_OWNER_OF","RELATION_PART_OF","RELATION_HAS_PART","RELATION_PROVIDES_API","RELATION_API_PROVIDED_BY","RELATION_CONSUMES_API","RELATION_API_CONSUMED_BY","RELATION_DEPENDS_ON","RELATION_DEPENDENCY_OF","RELATION_MEMBER_OF","RELATION_HAS_MEMBER","RELATION_CHILD_OF","RELATION_PARENT_OF","promisify","g","fs","path","yaml","assertError","limiterFactory","lodash","defaultEntityDataParser","stringifyEntityRef","InputError","entitySchemaValidator","entityEnvelopeSchemaValidator","createHash","ConflictError","uuid","parseLocationRef","DateTime","isDatabaseConflictError","register","Counter","Gauge","Summary","metrics","generateStableHash","stableStringify","BATCH_SIZE","errors","resolvePackagePath","SpanStatusCode","tracer","trace","splitToChunks","uniq","progressTracker","serializeError","_a","stringifyError","z","NotAllowedError","entityFilterParser","lodashChunk","isEqual","durationToMilliseconds","DEFAULT_NAMESPACE","ENTITY_STATUS_CATALOG_PROCESSING_TYPE","response","createValidatedOpenApiRouter","yn","errorHandler","catalogEntityRefreshPermission","AuthorizeResult","minimatch","makeCreatePermissionRule","RESOURCE_TYPE_CATALOG_ENTITY","get","catalogEntityReadPermission","catalogEntityDeletePermission","catalogLocationCreatePermission","catalogLocationReadPermission","catalogLocationDeletePermission","catalogPermissions","catalogPermissionRules","HostDiscovery","createLegacyAuthAdapters","toPermissionEvaluator","createConditionTransformer","createPermissionIntegrationRouter","keyBy","SchemaValidEntityPolicy","DefaultNamespaceEntityPolicy","NoForeignRootFieldsEntityPolicy","FieldFormatEntityPolicy","makeValidator","EntityPolicies","config","readDurationFromConfig"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"CatalogBuilder-WfXI1o7H.cjs.js","sources":["../../src/modules/codeowners/lib/resolve.ts","../../src/modules/codeowners/lib/scm.ts","../../src/modules/codeowners/lib/read.ts","../../src/modules/codeowners/CodeOwnersProcessor.ts","../../src/modules/core/AnnotateLocationEntityProcessor.ts","../../src/modules/core/BuiltinKindsEntityProcessor.ts","../../src/modules/core/FileReaderProcessor.ts","../../src/modules/core/PlaceholderProcessor.ts","../../src/modules/core/UrlReaderProcessor.ts","../../src/modules/util/parse.ts","../../src/processing/refresh.ts","../../src/processing/util.ts","../../src/util/conversion.ts","../../src/modules/core/ConfigLocationEntityProvider.ts","../../src/modules/core/DefaultLocationStore.ts","../../src/ingestion/LocationAnalyzer.ts","../../src/database/conversion.ts","../../src/util/metrics.ts","../../src/database/metrics.ts","../../src/database/operations/refreshState/checkLocationKeyConflict.ts","../../src/database/operations/refreshState/insertUnprocessedEntity.ts","../../src/database/operations/refreshState/updateUnprocessedEntity.ts","../../src/database/util.ts","../../src/constants.ts","../../src/database/DefaultProcessingDatabase.ts","../../src/database/migrations.ts","../../src/stitching/types.ts","../../src/util/opentelemetry.ts","../../src/processing/TaskPipeline.ts","../../src/database/operations/stitcher/markForStitching.ts","../../src/database/operations/util/deleteOrphanedEntities.ts","../../src/processing/DefaultCatalogProcessingEngine.ts","../../src/service/DefaultLocationService.ts","../../src/service/util.ts","../../src/service/DefaultEntitiesCatalog.ts","../../src/processing/ProcessorOutputCollector.ts","../../src/processing/ProcessorCacheManager.ts","../../src/processing/DefaultCatalogProcessingOrchestrator.ts","../../src/database/operations/stitcher/getDeferredStitchableEntities.ts","../../src/database/operations/stitcher/buildEntitySearch.ts","../../src/database/operations/stitcher/markDeferredStitchCompleted.ts","../../src/database/operations/stitcher/util.ts","../../src/database/operations/stitcher/performStitching.ts","../../src/stitching/progressTracker.ts","../../src/stitching/DefaultStitcher.ts","../../src/service/request/entitiesBatchRequest.ts","../../src/service/request/basicEntityFilter.ts","../../src/service/request/common.ts","../../src/service/request/parseEntityFilterParams.ts","../../src/service/request/parseEntityTransformParams.ts","../../src/service/request/parseEntityOrderFieldParams.ts","../../src/service/request/parseQueryEntitiesParams.ts","../../src/service/request/parseEntityFacetParams.ts","../../src/service/request/parseEntityOrderParams.ts","../../src/schema/openapi.generated.ts","../../src/service/request/parseEntityPaginationParams.ts","../../src/service/createRouter.ts","../../src/service/DefaultRefreshService.ts","../../src/service/AuthorizedRefreshService.ts","../../src/ingestion/CatalogRules.ts","../../src/processing/connectEntityProviders.ts","../../src/permissions/rules/util.ts","../../src/permissions/rules/hasAnnotation.ts","../../src/permissions/rules/isEntityKind.ts","../../src/permissions/rules/isEntityOwner.ts","../../src/permissions/rules/hasLabel.ts","../../src/permissions/rules/createPropertyRule.ts","../../src/permissions/rules/hasMetadata.ts","../../src/permissions/rules/hasSpec.ts","../../src/permissions/rules/index.ts","../../src/service/AuthorizedEntitiesCatalog.ts","../../src/service/AuthorizedLocationService.ts","../../src/database/operations/provider/deleteWithEagerPruningOfChildren.ts","../../src/database/operations/provider/refreshByRefreshKeys.ts","../../src/database/DefaultProviderDatabase.ts","../../src/database/DefaultCatalogDatabase.ts","../../src/service/CatalogBuilder.ts"],"sourcesContent":["/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as codeowners from 'codeowners-utils';\nimport parseGitUrl from 'git-url-parse';\n\nconst USER_PATTERN = /^@.*/;\nconst GROUP_PATTERN = /^@.*\\/.*/;\nconst EMAIL_PATTERN = /^.*@.*\\..*$/;\n\nexport function resolveCodeOwner(\n  contents: string,\n  catalogInfoFileUrl: string,\n): string | undefined {\n  const codeOwnerEntries = codeowners.parse(contents);\n\n  const { filepath } = parseGitUrl(catalogInfoFileUrl);\n  const match = codeowners.matchFile(filepath, codeOwnerEntries);\n\n  return match ? normalizeCodeOwner(match.owners[0]) : undefined;\n}\n\nexport function normalizeCodeOwner(owner: string) {\n  if (owner.match(GROUP_PATTERN)) {\n    return owner.split('/')[1];\n  } else if (owner.match(USER_PATTERN)) {\n    return `User:${owner.substring(1)}`;\n  } else if (owner.match(EMAIL_PATTERN)) {\n    return owner.split('@')[0];\n  }\n\n  return owner;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst CODEOWNERS = 'CODEOWNERS';\n\nexport const scmCodeOwnersPaths: Record<string, string[]> = {\n  // https://mibexsoftware.atlassian.net/wiki/spaces/CODEOWNERS/pages/222822413/Usage\n  bitbucket: [CODEOWNERS, `.bitbucket/${CODEOWNERS}`],\n\n  // https://docs.gitlab.com/ee/user/project/code_owners.html#how-to-set-up-code-owners\n  gitlab: [CODEOWNERS, `.gitlab/${CODEOWNERS}`, `docs/${CODEOWNERS}`],\n\n  // https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/about-code-owners#codeowners-file-location\n  github: [CODEOWNERS, `.github/${CODEOWNERS}`, `docs/${CODEOWNERS}`],\n};\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UrlReader } from '@backstage/backend-common';\nimport { NotFoundError } from '@backstage/errors';\nimport { ScmIntegration } from '@backstage/integration';\nimport 'core-js/features/promise'; // NOTE: This can be removed when ES2021 is implemented\nimport { resolveCodeOwner } from './resolve';\nimport { scmCodeOwnersPaths } from './scm';\n\nexport async function readCodeOwners(\n  reader: UrlReader,\n  sourceUrl: string,\n  codeownersPaths: string[],\n): Promise<string | undefined> {\n  const readOwnerLocation = async (path: string): Promise<string> => {\n    const url = `${sourceUrl}${path}`;\n    const data = await reader.readUrl(url);\n    const buffer = await data.buffer();\n    return buffer.toString();\n  };\n\n  const candidates = codeownersPaths.map(readOwnerLocation);\n\n  return Promise.any(candidates).catch((aggregateError: AggregateError) => {\n    const hardError = aggregateError.errors.find(\n      error => !(error instanceof NotFoundError),\n    );\n\n    if (hardError) {\n      throw hardError;\n    }\n\n    return undefined;\n  });\n}\n\nexport async function findCodeOwnerByTarget(\n  reader: UrlReader,\n  targetUrl: string,\n  scmIntegration: ScmIntegration,\n): Promise<string | undefined> {\n  const codeownersPaths = scmCodeOwnersPaths[scmIntegration?.type ?? ''];\n\n  const sourceUrl = scmIntegration?.resolveUrl({\n    url: '/',\n    base: targetUrl,\n  });\n\n  if (!sourceUrl || !codeownersPaths) {\n    return undefined;\n  }\n\n  const contents = await readCodeOwners(reader, sourceUrl, codeownersPaths);\n\n  if (!contents) {\n    return undefined;\n  }\n\n  const owner = resolveCodeOwner(contents, targetUrl);\n\n  return owner;\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UrlReader } from '@backstage/backend-common';\nimport { Entity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport { CatalogProcessor } from '@backstage/plugin-catalog-node';\nimport { findCodeOwnerByTarget } from './lib';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nconst ALLOWED_KINDS = ['API', 'Component', 'Domain', 'Resource', 'System'];\nconst ALLOWED_LOCATION_TYPES = ['url'];\n\n/** @public */\nexport class CodeOwnersProcessor implements CatalogProcessor {\n  private readonly integrations: ScmIntegrationRegistry;\n  private readonly logger: LoggerService;\n  private readonly reader: UrlReader;\n\n  static fromConfig(\n    config: Config,\n    options: { logger: LoggerService; reader: UrlReader },\n  ) {\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return new CodeOwnersProcessor({\n      ...options,\n      integrations,\n    });\n  }\n\n  constructor(options: {\n    integrations: ScmIntegrationRegistry;\n    logger: LoggerService;\n    reader: UrlReader;\n  }) {\n    this.integrations = options.integrations;\n    this.logger = options.logger;\n    this.reader = options.reader;\n  }\n\n  getProcessorName(): string {\n    return 'CodeOwnersProcessor';\n  }\n\n  async preProcessEntity(\n    entity: Entity,\n    location: LocationSpec,\n  ): Promise<Entity> {\n    // Only continue if the owner is not set\n    if (\n      !entity ||\n      !ALLOWED_KINDS.includes(entity.kind) ||\n      !ALLOWED_LOCATION_TYPES.includes(location.type) ||\n      (entity.spec && entity.spec.owner)\n    ) {\n      return entity;\n    }\n\n    const scmIntegration = this.integrations.byUrl(location.target);\n    if (!scmIntegration) {\n      return entity;\n    }\n\n    const owner = await findCodeOwnerByTarget(\n      this.reader,\n      location.target,\n      scmIntegration,\n    );\n\n    if (!owner) {\n      this.logger.debug(\n        `CodeOwnerProcessor could not resolve owner for ${location.target}`,\n      );\n      return entity;\n    }\n\n    return {\n      ...entity,\n      spec: { ...entity.spec, owner },\n    };\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ANNOTATION_EDIT_URL,\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  ANNOTATION_SOURCE_LOCATION,\n  ANNOTATION_VIEW_URL,\n  Entity,\n  stringifyLocationRef,\n} from '@backstage/catalog-model';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { identity, merge, pickBy } from 'lodash';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n} from '@backstage/plugin-catalog-node';\n\n/** @public */\nexport class AnnotateLocationEntityProcessor implements CatalogProcessor {\n  constructor(\n    private readonly options: {\n      integrations: ScmIntegrationRegistry;\n    },\n  ) {}\n\n  getProcessorName(): string {\n    return 'AnnotateLocationEntityProcessor';\n  }\n\n  async preProcessEntity(\n    entity: Entity,\n    location: LocationSpec,\n    _: CatalogProcessorEmit,\n    originLocation: LocationSpec,\n  ): Promise<Entity> {\n    const { integrations } = this.options;\n    let viewUrl;\n    let editUrl;\n    let sourceLocation;\n\n    if (location.type === 'url') {\n      const scmIntegration = integrations.byUrl(location.target);\n\n      viewUrl = location.target;\n      editUrl = scmIntegration?.resolveEditUrl(location.target);\n\n      const sourceUrl = scmIntegration?.resolveUrl({\n        url: './',\n        base: location.target,\n      });\n\n      if (sourceUrl) {\n        sourceLocation = stringifyLocationRef({\n          type: 'url',\n          target: sourceUrl,\n        });\n      }\n    }\n\n    return merge(\n      {\n        metadata: {\n          annotations: pickBy(\n            {\n              [ANNOTATION_LOCATION]: stringifyLocationRef(location),\n              [ANNOTATION_ORIGIN_LOCATION]:\n                stringifyLocationRef(originLocation),\n              [ANNOTATION_VIEW_URL]: viewUrl,\n              [ANNOTATION_EDIT_URL]: editUrl,\n              [ANNOTATION_SOURCE_LOCATION]: sourceLocation,\n            },\n            identity,\n          ),\n        },\n      },\n      entity,\n    );\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ApiEntity,\n  apiEntityV1alpha1Validator,\n  ComponentEntity,\n  componentEntityV1alpha1Validator,\n  DomainEntity,\n  domainEntityV1alpha1Validator,\n  Entity,\n  getCompoundEntityRef,\n  GroupEntity,\n  groupEntityV1alpha1Validator,\n  locationEntityV1alpha1Validator,\n  parseEntityRef,\n  RELATION_API_CONSUMED_BY,\n  RELATION_API_PROVIDED_BY,\n  RELATION_CHILD_OF,\n  RELATION_CONSUMES_API,\n  RELATION_DEPENDENCY_OF,\n  RELATION_DEPENDS_ON,\n  RELATION_HAS_MEMBER,\n  RELATION_HAS_PART,\n  RELATION_MEMBER_OF,\n  RELATION_OWNED_BY,\n  RELATION_OWNER_OF,\n  RELATION_PARENT_OF,\n  RELATION_PART_OF,\n  RELATION_PROVIDES_API,\n  ResourceEntity,\n  resourceEntityV1alpha1Validator,\n  SystemEntity,\n  systemEntityV1alpha1Validator,\n  UserEntity,\n  userEntityV1alpha1Validator,\n} from '@backstage/catalog-model';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\n\n/** @public */\nexport class BuiltinKindsEntityProcessor implements CatalogProcessor {\n  private readonly validators = [\n    apiEntityV1alpha1Validator,\n    componentEntityV1alpha1Validator,\n    resourceEntityV1alpha1Validator,\n    groupEntityV1alpha1Validator,\n    locationEntityV1alpha1Validator,\n    userEntityV1alpha1Validator,\n    systemEntityV1alpha1Validator,\n    domainEntityV1alpha1Validator,\n  ];\n\n  getProcessorName(): string {\n    return 'BuiltinKindsEntityProcessor';\n  }\n\n  async validateEntityKind(entity: Entity): Promise<boolean> {\n    for (const validator of this.validators) {\n      const results = await validator.check(entity);\n      if (results) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async postProcessEntity(\n    entity: Entity,\n    _location: LocationSpec,\n    emit: CatalogProcessorEmit,\n  ): Promise<Entity> {\n    const selfRef = getCompoundEntityRef(entity);\n\n    /*\n     * Utilities\n     */\n\n    function doEmit(\n      targets: string | string[] | undefined,\n      context: { defaultKind?: string; defaultNamespace: string },\n      outgoingRelation: string,\n      incomingRelation: string,\n    ): void {\n      if (!targets) {\n        return;\n      }\n      for (const target of [targets].flat()) {\n        const targetRef = parseEntityRef(target, context);\n        emit(\n          processingResult.relation({\n            source: selfRef,\n            type: outgoingRelation,\n            target: {\n              kind: targetRef.kind,\n              namespace: targetRef.namespace,\n              name: targetRef.name,\n            },\n          }),\n        );\n        emit(\n          processingResult.relation({\n            source: {\n              kind: targetRef.kind,\n              namespace: targetRef.namespace,\n              name: targetRef.name,\n            },\n            type: incomingRelation,\n            target: selfRef,\n          }),\n        );\n      }\n    }\n\n    /*\n     * Emit relations for the Component kind\n     */\n\n    if (entity.kind === 'Component') {\n      const component = entity as ComponentEntity;\n      doEmit(\n        component.spec.owner,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_OWNED_BY,\n        RELATION_OWNER_OF,\n      );\n      doEmit(\n        component.spec.subcomponentOf,\n        { defaultKind: 'Component', defaultNamespace: selfRef.namespace },\n        RELATION_PART_OF,\n        RELATION_HAS_PART,\n      );\n      doEmit(\n        component.spec.providesApis,\n        { defaultKind: 'API', defaultNamespace: selfRef.namespace },\n        RELATION_PROVIDES_API,\n        RELATION_API_PROVIDED_BY,\n      );\n      doEmit(\n        component.spec.consumesApis,\n        { defaultKind: 'API', defaultNamespace: selfRef.namespace },\n        RELATION_CONSUMES_API,\n        RELATION_API_CONSUMED_BY,\n      );\n      doEmit(\n        component.spec.dependsOn,\n        { defaultNamespace: selfRef.namespace },\n        RELATION_DEPENDS_ON,\n        RELATION_DEPENDENCY_OF,\n      );\n      doEmit(\n        component.spec.system,\n        { defaultKind: 'System', defaultNamespace: selfRef.namespace },\n        RELATION_PART_OF,\n        RELATION_HAS_PART,\n      );\n    }\n\n    /*\n     * Emit relations for the API kind\n     */\n\n    if (entity.kind === 'API') {\n      const api = entity as ApiEntity;\n      doEmit(\n        api.spec.owner,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_OWNED_BY,\n        RELATION_OWNER_OF,\n      );\n      doEmit(\n        api.spec.system,\n        { defaultKind: 'System', defaultNamespace: selfRef.namespace },\n        RELATION_PART_OF,\n        RELATION_HAS_PART,\n      );\n    }\n\n    /*\n     * Emit relations for the Resource kind\n     */\n\n    if (entity.kind === 'Resource') {\n      const resource = entity as ResourceEntity;\n      doEmit(\n        resource.spec.owner,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_OWNED_BY,\n        RELATION_OWNER_OF,\n      );\n      doEmit(\n        resource.spec.dependsOn,\n        { defaultNamespace: selfRef.namespace },\n        RELATION_DEPENDS_ON,\n        RELATION_DEPENDENCY_OF,\n      );\n      doEmit(\n        resource.spec.dependencyOf,\n        { defaultNamespace: selfRef.namespace },\n        RELATION_DEPENDENCY_OF,\n        RELATION_DEPENDS_ON,\n      );\n      doEmit(\n        resource.spec.system,\n        { defaultKind: 'System', defaultNamespace: selfRef.namespace },\n        RELATION_PART_OF,\n        RELATION_HAS_PART,\n      );\n    }\n\n    /*\n     * Emit relations for the User kind\n     */\n\n    if (entity.kind === 'User') {\n      const user = entity as UserEntity;\n      doEmit(\n        user.spec.memberOf,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_MEMBER_OF,\n        RELATION_HAS_MEMBER,\n      );\n    }\n\n    /*\n     * Emit relations for the Group kind\n     */\n\n    if (entity.kind === 'Group') {\n      const group = entity as GroupEntity;\n      doEmit(\n        group.spec.parent,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_CHILD_OF,\n        RELATION_PARENT_OF,\n      );\n      doEmit(\n        group.spec.children,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_PARENT_OF,\n        RELATION_CHILD_OF,\n      );\n      doEmit(\n        group.spec.members,\n        { defaultKind: 'User', defaultNamespace: selfRef.namespace },\n        RELATION_HAS_MEMBER,\n        RELATION_MEMBER_OF,\n      );\n    }\n\n    /*\n     * Emit relations for the System kind\n     */\n\n    if (entity.kind === 'System') {\n      const system = entity as SystemEntity;\n      doEmit(\n        system.spec.owner,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_OWNED_BY,\n        RELATION_OWNER_OF,\n      );\n      doEmit(\n        system.spec.domain,\n        { defaultKind: 'Domain', defaultNamespace: selfRef.namespace },\n        RELATION_PART_OF,\n        RELATION_HAS_PART,\n      );\n    }\n\n    /*\n     * Emit relations for the Domain kind\n     */\n\n    if (entity.kind === 'Domain') {\n      const domain = entity as DomainEntity;\n      doEmit(\n        domain.spec.owner,\n        { defaultKind: 'Group', defaultNamespace: selfRef.namespace },\n        RELATION_OWNED_BY,\n        RELATION_OWNER_OF,\n      );\n    }\n\n    return entity;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport fs from 'fs-extra';\nimport g from 'glob';\nimport path from 'path';\nimport { promisify } from 'util';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  CatalogProcessorParser,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\n\nconst glob = promisify(g);\n\nconst LOCATION_TYPE = 'file';\n\n/** @public */\nexport class FileReaderProcessor implements CatalogProcessor {\n  getProcessorName(): string {\n    return 'FileReaderProcessor';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    optional: boolean,\n    emit: CatalogProcessorEmit,\n    parser: CatalogProcessorParser,\n  ): Promise<boolean> {\n    if (location.type !== LOCATION_TYPE) {\n      return false;\n    }\n\n    try {\n      const fileMatches = await glob(location.target);\n\n      if (fileMatches.length > 0) {\n        for (const fileMatch of fileMatches) {\n          const data = await fs.readFile(fileMatch);\n          const normalizedFilePath = path.normalize(fileMatch);\n\n          // The normalize converts to native slashes; the glob library returns\n          // forward slashes even on windows\n          for await (const parseResult of parser({\n            data: data,\n            location: {\n              type: LOCATION_TYPE,\n              target: normalizedFilePath,\n            },\n          })) {\n            emit(parseResult);\n            emit(\n              processingResult.refresh(\n                `${LOCATION_TYPE}:${normalizedFilePath}`,\n              ),\n            );\n          }\n        }\n      } else if (!optional) {\n        const message = `${location.type} ${location.target} does not exist`;\n        emit(processingResult.notFoundError(location, message));\n      }\n    } catch (e) {\n      const message = `${location.type} ${location.target} could not be read, ${e}`;\n      emit(processingResult.generalError(location, message));\n    }\n\n    return true;\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UrlReader } from '@backstage/backend-common';\nimport { Entity } from '@backstage/catalog-model';\nimport { JsonValue } from '@backstage/types';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport yaml from 'yaml';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  PlaceholderResolver,\n  PlaceholderResolverParams,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\n\n/** @public */\nexport type PlaceholderProcessorOptions = {\n  resolvers: Record<string, PlaceholderResolver>;\n  reader: UrlReader;\n  integrations: ScmIntegrationRegistry;\n};\n\n/**\n * Traverses raw entity JSON looking for occurrences of $-prefixed placeholders\n * that it then fills in with actual data.\n * @public\n */\nexport class PlaceholderProcessor implements CatalogProcessor {\n  constructor(private readonly options: PlaceholderProcessorOptions) {}\n\n  getProcessorName(): string {\n    return 'PlaceholderProcessor';\n  }\n\n  async preProcessEntity(\n    entity: Entity,\n    location: LocationSpec,\n    emit: CatalogProcessorEmit,\n  ): Promise<Entity> {\n    const process = async (data: any): Promise<[any, boolean]> => {\n      if (!data || !(data instanceof Object)) {\n        // Scalars can't have placeholders\n        return [data, false];\n      }\n\n      if (Array.isArray(data)) {\n        // We're an array - process all entries recursively\n        const items = await Promise.all(data.map(item => process(item)));\n        return items.every(([, changed]) => !changed)\n          ? [data, false]\n          : [items.map(([item]) => item), true];\n      }\n\n      const keys = Object.keys(data);\n      if (!keys.some(k => k.startsWith('$'))) {\n        // We're an object but no placeholders at this level - process all\n        // entries recursively\n        const entries = await Promise.all(\n          Object.entries(data).map(([k, v]) =>\n            process(v).then(vp => [k, vp] as const),\n          ),\n        );\n        return entries.every(([, [, changed]]) => !changed)\n          ? [data, false]\n          : [Object.fromEntries(entries.map(([k, [v]]) => [k, v])), true];\n      } else if (keys.length !== 1) {\n        // This was an object that had more than one key, some of which were\n        // dollar prefixed. We only handle the case where there is exactly one\n        // such key; anything else is left alone.\n        return [data, false];\n      }\n\n      const resolverKey = keys[0].substring(1);\n      const resolverValue = data[keys[0]];\n\n      const resolver = this.options.resolvers[resolverKey];\n      if (!resolver) {\n        // If there was no such placeholder resolver, we err on the side of safety\n        // and assume that this is something that's best left alone. For example, if\n        // the input contains JSONSchema, there may be \"$ref\": \"#/definitions/node\"\n        // nodes in the document.\n        return [data, false];\n      }\n\n      const read = async (url: string): Promise<Buffer> => {\n        const response = await this.options.reader.readUrl(url);\n        const buffer = await response.buffer();\n        return buffer;\n      };\n\n      const resolveUrl = (url: string, base: string): string =>\n        this.options.integrations.resolveUrl({\n          url,\n          base,\n        });\n\n      return [\n        await resolver({\n          key: resolverKey,\n          value: resolverValue,\n          baseUrl: location.target,\n          read,\n          resolveUrl,\n          emit,\n        }),\n        true,\n      ];\n    };\n\n    const [result] = await process(entity);\n    return result;\n  }\n}\n\n/*\n * Resolvers\n */\n\nexport async function yamlPlaceholderResolver(\n  params: PlaceholderResolverParams,\n): Promise<JsonValue> {\n  const { content, url } = await readTextLocation(params);\n\n  params.emit(processingResult.refresh(`url:${url}`));\n\n  let documents: yaml.Document.Parsed[];\n  try {\n    documents = yaml.parseAllDocuments(content).filter(d => d);\n  } catch (e) {\n    throw new Error(\n      `Placeholder \\$${params.key} failed to parse YAML data at ${params.value}, ${e}`,\n    );\n  }\n\n  if (documents.length !== 1) {\n    throw new Error(\n      `Placeholder \\$${params.key} expected to find exactly one document of data at ${params.value}, found ${documents.length}`,\n    );\n  }\n\n  const document = documents[0];\n\n  if (document.errors?.length) {\n    throw new Error(\n      `Placeholder \\$${params.key} found an error in the data at ${params.value}, ${document.errors[0]}`,\n    );\n  }\n\n  return document.toJSON();\n}\n\nexport async function jsonPlaceholderResolver(\n  params: PlaceholderResolverParams,\n): Promise<JsonValue> {\n  const { content, url } = await readTextLocation(params);\n\n  params.emit(processingResult.refresh(`url:${url}`));\n\n  try {\n    return JSON.parse(content);\n  } catch (e) {\n    throw new Error(\n      `Placeholder \\$${params.key} failed to parse JSON data at ${params.value}, ${e}`,\n    );\n  }\n}\n\nexport async function textPlaceholderResolver(\n  params: PlaceholderResolverParams,\n): Promise<JsonValue> {\n  const { content, url } = await readTextLocation(params);\n\n  params.emit(processingResult.refresh(`url:${url}`));\n\n  return content;\n}\n\n/*\n * Helpers\n */\n\nasync function readTextLocation(\n  params: PlaceholderResolverParams,\n): Promise<{ content: string; url: string }> {\n  const newUrl = relativeUrl(params);\n\n  try {\n    const data = await params.read(newUrl);\n    return { content: data.toString('utf-8'), url: newUrl };\n  } catch (e) {\n    throw new Error(\n      `Placeholder \\$${params.key} could not read location ${params.value}, ${e}`,\n    );\n  }\n}\n\nfunction relativeUrl({\n  key,\n  value,\n  baseUrl,\n  resolveUrl,\n}: PlaceholderResolverParams): string {\n  if (typeof value !== 'string') {\n    throw new Error(\n      `Placeholder \\$${key} expected a string value parameter, in the form of an absolute URL or a relative path`,\n    );\n  }\n\n  try {\n    return resolveUrl(value, baseUrl);\n  } catch (e) {\n    // The only remaining case that isn't support is a relative file path that should be\n    // resolved using a relative file location. Accessing local file paths can lead to\n    // path traversal attacks and access to any file on the host system. Implementing this\n    // would require additional security measures.\n    throw new Error(\n      `Placeholder \\$${key} could not form a URL out of ${baseUrl} and ${value}, ${e}`,\n    );\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { UrlReader } from '@backstage/backend-common';\nimport { Entity } from '@backstage/catalog-model';\nimport { assertError } from '@backstage/errors';\nimport limiterFactory from 'p-limit';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport parseGitUrl from 'git-url-parse';\nimport {\n  CatalogProcessor,\n  CatalogProcessorCache,\n  CatalogProcessorEmit,\n  CatalogProcessorEntityResult,\n  CatalogProcessorParser,\n  CatalogProcessorResult,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nconst CACHE_KEY = 'v1';\n\n// WARNING: If you change this type, you likely need to bump the CACHE_KEY as well\ntype CacheItem = {\n  etag: string;\n  value: {\n    type: 'entity';\n    entity: Entity;\n    location: LocationSpec;\n  }[];\n};\n\n/** @public */\nexport class UrlReaderProcessor implements CatalogProcessor {\n  constructor(\n    private readonly options: {\n      reader: UrlReader;\n      logger: LoggerService;\n    },\n  ) {}\n\n  getProcessorName() {\n    return 'url-reader';\n  }\n\n  async readLocation(\n    location: LocationSpec,\n    optional: boolean,\n    emit: CatalogProcessorEmit,\n    parser: CatalogProcessorParser,\n    cache: CatalogProcessorCache,\n  ): Promise<boolean> {\n    if (location.type !== 'url') {\n      return false;\n    }\n\n    const cacheItem = await cache.get<CacheItem>(CACHE_KEY);\n\n    try {\n      const { response, etag: newEtag } = await this.doRead(\n        location.target,\n        cacheItem?.etag,\n      );\n\n      const parseResults: CatalogProcessorResult[] = [];\n      for (const item of response) {\n        for await (const parseResult of parser({\n          data: item.data,\n          location: { type: location.type, target: item.url },\n        })) {\n          parseResults.push(parseResult);\n          emit(parseResult);\n        }\n      }\n\n      const isOnlyEntities = parseResults.every(r => r.type === 'entity');\n      if (newEtag && isOnlyEntities) {\n        await cache.set<CacheItem>(CACHE_KEY, {\n          etag: newEtag,\n          value: parseResults as CatalogProcessorEntityResult[],\n        });\n      }\n\n      emit(processingResult.refresh(`${location.type}:${location.target}`));\n    } catch (error) {\n      assertError(error);\n      const message = `Unable to read ${location.type}, ${error}`.substring(\n        0,\n        5000,\n      );\n      if (error.name === 'NotModifiedError' && cacheItem) {\n        for (const parseResult of cacheItem.value) {\n          emit(parseResult);\n        }\n        emit(processingResult.refresh(`${location.type}:${location.target}`));\n      } else if (error.name === 'NotFoundError') {\n        if (!optional) {\n          emit(processingResult.notFoundError(location, message));\n        }\n      } else {\n        emit(processingResult.generalError(location, message));\n      }\n    }\n\n    return true;\n  }\n\n  private async doRead(\n    location: string,\n    etag?: string,\n  ): Promise<{ response: { data: Buffer; url: string }[]; etag?: string }> {\n    // Does it contain globs? I.e. does it contain asterisks or question marks\n    // (no curly braces for now)\n\n    const { filepath } = parseGitUrl(location);\n    if (filepath?.match(/[*?]/)) {\n      const limiter = limiterFactory(5);\n      const response = await this.options.reader.search(location, { etag });\n      const output = response.files.map(async file => ({\n        url: file.url,\n        data: await limiter(file.content),\n      }));\n      return { response: await Promise.all(output), etag: response.etag };\n    }\n\n    const data = await this.options.reader.readUrl(location, { etag });\n    return {\n      response: [{ url: location, data: await data.buffer() }],\n      etag: data.etag,\n    };\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, stringifyLocationRef } from '@backstage/catalog-model';\nimport lodash from 'lodash';\nimport yaml from 'yaml';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport {\n  CatalogProcessorParser,\n  CatalogProcessorResult,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\n\n/** @public */\nexport function* parseEntityYaml(\n  data: Buffer,\n  location: LocationSpec,\n): Iterable<CatalogProcessorResult> {\n  let documents: yaml.Document.Parsed[];\n  try {\n    documents = yaml.parseAllDocuments(data.toString('utf8')).filter(d => d);\n  } catch (e) {\n    const loc = stringifyLocationRef(location);\n    const message = `Failed to parse YAML at ${loc}, ${e}`;\n    yield processingResult.generalError(location, message);\n    return;\n  }\n\n  for (const document of documents) {\n    if (document.errors?.length) {\n      const loc = stringifyLocationRef(location);\n      const message = `YAML error at ${loc}, ${document.errors[0]}`;\n      yield processingResult.generalError(location, message);\n    } else {\n      const json = document.toJSON();\n      if (lodash.isPlainObject(json)) {\n        yield processingResult.entity(location, json as Entity);\n      } else if (json === null) {\n        // Ignore null values, these happen if there is an empty document in the\n        // YAML file, for example if --- is added to the end of the file.\n      } else {\n        const message = `Expected object at root, got ${typeof json}`;\n        yield processingResult.generalError(location, message);\n      }\n    }\n  }\n}\n\nexport const defaultEntityDataParser: CatalogProcessorParser =\n  async function* defaultEntityDataParser({ data, location }) {\n    for (const e of parseEntityYaml(data, location)) {\n      yield e;\n    }\n  };\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Function that returns the catalog processing interval in seconds.\n * @public\n */\nexport type ProcessingIntervalFunction = () => number;\n\n/**\n * Creates a function that returns a random processing interval between minSeconds and maxSeconds.\n * @returns A {@link ProcessingIntervalFunction} that provides the next processing interval\n * @public\n */\nexport function createRandomProcessingInterval(options: {\n  minSeconds: number;\n  maxSeconds: number;\n}): ProcessingIntervalFunction {\n  const { minSeconds, maxSeconds } = options;\n  return () => {\n    return Math.random() * (maxSeconds - minSeconds) + minSeconds;\n  };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  entityEnvelopeSchemaValidator,\n  entitySchemaValidator,\n  LocationEntity,\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport { InputError } from '@backstage/errors';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport path from 'path';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\n\nexport function isLocationEntity(entity: Entity): entity is LocationEntity {\n  return entity.kind === 'Location';\n}\n\nexport function getEntityLocationRef(entity: Entity): string {\n  const ref = entity.metadata.annotations?.[ANNOTATION_LOCATION];\n  if (!ref) {\n    const entityRef = stringifyEntityRef(entity);\n    throw new InputError(\n      `Entity '${entityRef}' does not have the annotation ${ANNOTATION_LOCATION}`,\n    );\n  }\n  return ref;\n}\n\nexport function getEntityOriginLocationRef(entity: Entity): string {\n  const ref = entity.metadata.annotations?.[ANNOTATION_ORIGIN_LOCATION];\n  if (!ref) {\n    const entityRef = stringifyEntityRef(entity);\n    throw new InputError(\n      `Entity '${entityRef}' does not have the annotation ${ANNOTATION_ORIGIN_LOCATION}`,\n    );\n  }\n  return ref;\n}\n\nexport function toAbsoluteUrl(\n  integrations: ScmIntegrationRegistry,\n  base: LocationSpec,\n  type: string,\n  target: string,\n): string {\n  if (base.type !== type) {\n    return target;\n  }\n  try {\n    if (type === 'file') {\n      if (target.startsWith('.')) {\n        return path.join(path.dirname(base.target), target);\n      }\n      return target;\n    } else if (type === 'url') {\n      return integrations.resolveUrl({ url: target, base: base.target });\n    }\n    return target;\n  } catch (e) {\n    return target;\n  }\n}\n\nexport function isObject(value: JsonValue | undefined): value is JsonObject {\n  return typeof value === 'object' && value !== null && !Array.isArray(value);\n}\n\nexport const validateEntity = entitySchemaValidator();\n\nexport const validateEntityEnvelope = entityEnvelopeSchemaValidator();\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  LocationEntityV1alpha1,\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  stringifyEntityRef,\n  stringifyLocationRef,\n} from '@backstage/catalog-model';\nimport { createHash } from 'crypto';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\n\nexport function locationSpecToMetadataName(location: LocationSpec) {\n  const hash = createHash('sha1')\n    .update(`${location.type}:${location.target}`)\n    .digest('hex');\n  return `generated-${hash}`;\n}\n\n/** @public */\nexport function locationSpecToLocationEntity(opts: {\n  location: LocationSpec;\n  parentEntity?: Entity;\n}): LocationEntityV1alpha1 {\n  const location = opts.location;\n  const parentEntity = opts.parentEntity;\n\n  let ownLocation: string;\n  let originLocation: string;\n  if (parentEntity) {\n    const maybeOwnLocation =\n      parentEntity.metadata.annotations?.[ANNOTATION_LOCATION];\n    if (!maybeOwnLocation) {\n      throw new Error(\n        `Parent entity '${stringifyEntityRef(\n          parentEntity,\n        )}' of location '${stringifyLocationRef(\n          location,\n        )}' does not have a location annotation`,\n      );\n    }\n    ownLocation = maybeOwnLocation;\n    const maybeOriginLocation =\n      parentEntity.metadata.annotations?.[ANNOTATION_ORIGIN_LOCATION];\n    if (!maybeOriginLocation) {\n      throw new Error(\n        `Parent entity '${stringifyEntityRef(\n          parentEntity,\n        )}' of location '${stringifyLocationRef(\n          location,\n        )}' does not have an origin location annotation`,\n      );\n    }\n    originLocation = maybeOriginLocation;\n  } else {\n    ownLocation = stringifyLocationRef(location);\n    originLocation = ownLocation;\n  }\n\n  const result: LocationEntityV1alpha1 = {\n    apiVersion: 'backstage.io/v1alpha1',\n    kind: 'Location',\n    metadata: {\n      name: locationSpecToMetadataName(location),\n      annotations: {\n        [ANNOTATION_LOCATION]: ownLocation,\n        [ANNOTATION_ORIGIN_LOCATION]: originLocation,\n      },\n    },\n    spec: {\n      type: location.type,\n      target: location.target,\n      presence: location.presence,\n    },\n  };\n\n  return result;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport path from 'path';\nimport { getEntityLocationRef } from '../../processing/util';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n} from '@backstage/plugin-catalog-node';\nimport { locationSpecToLocationEntity } from '../../util/conversion';\n\nexport class ConfigLocationEntityProvider implements EntityProvider {\n  constructor(private readonly config: Config) {}\n\n  getProviderName(): string {\n    return 'ConfigLocationProvider';\n  }\n\n  async connect(connection: EntityProviderConnection): Promise<void> {\n    const entities = this.getEntitiesFromConfig();\n    await connection.applyMutation({\n      type: 'full',\n      entities,\n    });\n\n    if (this.config.subscribe) {\n      let currentKey = JSON.stringify(entities);\n\n      this.config.subscribe(() => {\n        const newEntities = this.getEntitiesFromConfig();\n        const newKey = JSON.stringify(newEntities);\n\n        if (currentKey !== newKey) {\n          currentKey = newKey;\n          connection.applyMutation({\n            type: 'full',\n            entities: newEntities,\n          });\n        }\n      });\n    }\n  }\n\n  private getEntitiesFromConfig() {\n    const locationConfigs =\n      this.config.getOptionalConfigArray('catalog.locations') ?? [];\n\n    return locationConfigs.map(location => {\n      const type = location.getString('type');\n      const target = location.getString('target');\n      const entity = locationSpecToLocationEntity({\n        location: {\n          type,\n          target: type === 'file' ? path.resolve(target) : target,\n        },\n      });\n      const locationKey = getEntityLocationRef(entity);\n      return { entity, locationKey };\n    });\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from '@backstage/catalog-client';\nimport { ConflictError, NotFoundError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport { v4 as uuid } from 'uuid';\nimport {\n  DbLocationsRow,\n  DbRefreshStateRow,\n  DbSearchRow,\n} from '../../database/tables';\nimport { getEntityLocationRef } from '../../processing/util';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n} from '@backstage/plugin-catalog-node';\nimport { locationSpecToLocationEntity } from '../../util/conversion';\nimport { LocationInput, LocationStore } from '../../service/types';\nimport {\n  ANNOTATION_ORIGIN_LOCATION,\n  CompoundEntityRef,\n  parseLocationRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\n\nexport class DefaultLocationStore implements LocationStore, EntityProvider {\n  private _connection: EntityProviderConnection | undefined;\n\n  constructor(private readonly db: Knex) {}\n\n  getProviderName(): string {\n    return 'DefaultLocationStore';\n  }\n\n  async createLocation(input: LocationInput): Promise<Location> {\n    const location = await this.db.transaction(async tx => {\n      // Attempt to find a previous location matching the input\n      const previousLocations = await this.locations(tx);\n      // TODO: when location id's are a compilation of input target we can remove this full\n      // lookup of locations first and just grab the by that instead.\n      const previousLocation = previousLocations.some(\n        l => input.type === l.type && input.target === l.target,\n      );\n      if (previousLocation) {\n        throw new ConflictError(\n          `Location ${input.type}:${input.target} already exists`,\n        );\n      }\n\n      const inner: DbLocationsRow = {\n        id: uuid(),\n        type: input.type,\n        target: input.target,\n      };\n\n      await tx<DbLocationsRow>('locations').insert(inner);\n\n      return inner;\n    });\n    const entity = locationSpecToLocationEntity({ location });\n    await this.connection.applyMutation({\n      type: 'delta',\n      added: [{ entity, locationKey: getEntityLocationRef(entity) }],\n      removed: [],\n    });\n\n    return location;\n  }\n\n  async listLocations(): Promise<Location[]> {\n    return await this.locations();\n  }\n\n  async getLocation(id: string): Promise<Location> {\n    const items = await this.db<DbLocationsRow>('locations')\n      .where({ id })\n      .select();\n\n    if (!items.length) {\n      throw new NotFoundError(`Found no location with ID ${id}`);\n    }\n    return items[0];\n  }\n\n  async deleteLocation(id: string): Promise<void> {\n    if (!this.connection) {\n      throw new Error('location store is not initialized');\n    }\n\n    const deleted = await this.db.transaction(async tx => {\n      const [location] = await tx<DbLocationsRow>('locations')\n        .where({ id })\n        .select();\n\n      if (!location) {\n        throw new NotFoundError(`Found no location with ID ${id}`);\n      }\n\n      await tx<DbLocationsRow>('locations').where({ id }).del();\n      return location;\n    });\n    const entity = locationSpecToLocationEntity({ location: deleted });\n    await this.connection.applyMutation({\n      type: 'delta',\n      added: [],\n      removed: [{ entity, locationKey: getEntityLocationRef(entity) }],\n    });\n  }\n\n  async getLocationByEntity(entityRef: CompoundEntityRef): Promise<Location> {\n    const entityRefString = stringifyEntityRef(entityRef);\n\n    const [entity] = await this.db<DbRefreshStateRow>('refresh_state')\n      .where({ entity_ref: entityRefString })\n      .select('entity_id')\n      .limit(1);\n    if (!entity) {\n      throw new NotFoundError(`found no entity for ref ${entityRefString}`);\n    }\n\n    const [locationKeyValue] = await this.db<DbSearchRow>('search')\n      .where({\n        entity_id: entity.entity_id,\n        key: `metadata.annotations.${ANNOTATION_ORIGIN_LOCATION}`,\n      })\n      .select('value')\n      .limit(1);\n    if (!locationKeyValue) {\n      throw new NotFoundError(\n        `found no origin annotation for ref ${entityRefString}`,\n      );\n    }\n\n    const { type, target } = parseLocationRef(entityRefString);\n    // const kind, target = split[0], split[1];\n    const [location] = await this.db<DbLocationsRow>('locations')\n      .where({ type, target })\n      .select()\n      .limit(1);\n\n    // select * from locations where type = 'split(prev)[0]'\n    if (!location) {\n      throw new NotFoundError(\n        `Found no location with type ${type} and target ${target}`,\n      );\n    }\n    return location;\n  }\n\n  private get connection(): EntityProviderConnection {\n    if (!this._connection) {\n      throw new Error('location store is not initialized');\n    }\n\n    return this._connection;\n  }\n\n  async connect(connection: EntityProviderConnection): Promise<void> {\n    this._connection = connection;\n\n    const locations = await this.locations();\n\n    const entities = locations.map(location => {\n      const entity = locationSpecToLocationEntity({ location });\n      return { entity, locationKey: getEntityLocationRef(entity) };\n    });\n\n    await this.connection.applyMutation({\n      type: 'full',\n      entities,\n    });\n  }\n\n  private async locations(dbOrTx: Knex.Transaction | Knex = this.db) {\n    const locations = await dbOrTx<DbLocationsRow>('locations').select();\n    return (\n      locations\n        // TODO(blam): We should create a mutation to remove this location for everyone\n        // eventually when it's all done and dusted\n        .filter(({ type }) => type !== 'bootstrap')\n        .map(item => ({\n          id: item.id,\n          target: item.target,\n          type: item.type,\n        }))\n    );\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport parseGitUrl from 'git-url-parse';\nimport { Entity } from '@backstage/catalog-model';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport { LocationAnalyzer } from './types';\nimport {\n  AnalyzeLocationRequest,\n  AnalyzeLocationResponse,\n} from '@backstage/plugin-catalog-common';\nimport { ScmLocationAnalyzer } from '@backstage/plugin-catalog-node';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nexport class RepoLocationAnalyzer implements LocationAnalyzer {\n  private readonly logger: LoggerService;\n  private readonly scmIntegrations: ScmIntegrationRegistry;\n  private readonly analyzers: ScmLocationAnalyzer[];\n\n  constructor(\n    logger: LoggerService,\n    scmIntegrations: ScmIntegrationRegistry,\n    analyzers: ScmLocationAnalyzer[],\n  ) {\n    this.logger = logger;\n    this.scmIntegrations = scmIntegrations;\n    this.analyzers = analyzers;\n  }\n  async analyzeLocation(\n    request: AnalyzeLocationRequest,\n  ): Promise<AnalyzeLocationResponse> {\n    const integration = this.scmIntegrations.byUrl(request.location.target);\n    const { owner, name } = parseGitUrl(request.location.target);\n\n    let annotationPrefix;\n    switch (integration?.type) {\n      case 'azure':\n        annotationPrefix = 'dev.azure.com';\n        break;\n      case 'bitbucket':\n        annotationPrefix = 'bitbucket.org';\n        break;\n      case 'github':\n        annotationPrefix = 'github.com';\n        break;\n      case 'gitlab':\n        annotationPrefix = 'gitlab.com';\n        break;\n      default:\n        break;\n    }\n\n    const analyzer = this.analyzers.find(a =>\n      a.supports(request.location.target),\n    );\n    if (analyzer) {\n      const analyzerResult = await analyzer.analyze({\n        url: request.location.target,\n      });\n      if (analyzerResult.existing.length > 0) {\n        this.logger.debug(\n          `entity for ${request.location.target} already exists.`,\n        );\n        return {\n          existingEntityFiles: analyzerResult.existing,\n          generateEntities: [],\n        };\n      }\n    }\n\n    const entity: Entity = {\n      apiVersion: 'backstage.io/v1alpha1',\n      kind: 'Component',\n      metadata: {\n        name: name,\n      },\n      spec: { type: 'other', lifecycle: 'unknown' },\n    };\n\n    if (annotationPrefix) {\n      entity.metadata.annotations = {\n        [`${annotationPrefix}/project-slug`]: `${owner}/${name}`,\n      };\n    }\n\n    this.logger.debug(`entity created for ${request.location.target}`);\n    return {\n      existingEntityFiles: [],\n      generateEntities: [{ entity, fields: [] }],\n    };\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isDatabaseConflictError } from '@backstage/backend-common';\nimport { ConflictError, InputError } from '@backstage/errors';\nimport { DateTime } from 'luxon';\n\n/**\n * Takes a TIMESTAMP type column and converts it to a DateTime.\n *\n * Some engines return the SQL string form (e.g. 'YYYY-MM-DD hh:mm:ss'), some\n * return ISO string form (e.g. 'YYYY-MM-DDThh:mm:ss.SSSZ'), some return a js\n * Date object.\n */\nexport function timestampToDateTime(input: Date | string): DateTime {\n  try {\n    if (typeof input === 'object') {\n      return DateTime.fromJSDate(input).toUTC();\n    }\n\n    const result = input.includes(' ')\n      ? DateTime.fromSQL(input, { zone: 'utc' })\n      : DateTime.fromISO(input, { zone: 'utc' });\n    if (!result.isValid) {\n      throw new TypeError('Not valid');\n    }\n\n    return result;\n  } catch (e) {\n    throw new InputError(`Failed to parse database timestamp ${input}`, e);\n  }\n}\n\n/**\n * Rethrows an error, possibly translating it to a more precise error type.\n */\nexport function rethrowError(e: any): never {\n  if (isDatabaseConflictError(e)) {\n    throw new ConflictError(`Rejected due to a conflicting entity`, e);\n  }\n\n  throw e;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Counter,\n  CounterConfiguration,\n  Gauge,\n  GaugeConfiguration,\n  Histogram,\n  HistogramConfiguration,\n  register,\n  Summary,\n  SummaryConfiguration,\n} from 'prom-client';\n\nexport function createCounterMetric<T extends string>(\n  config: CounterConfiguration<T>,\n): Counter<T> {\n  let metric = register.getSingleMetric(config.name);\n  if (!metric) {\n    metric = new Counter<T>(config);\n    register.registerMetric(metric);\n  }\n  return metric as Counter<T>;\n}\n\nexport function createGaugeMetric<T extends string>(\n  config: GaugeConfiguration<T>,\n): Gauge<T> {\n  let metric = register.getSingleMetric(config.name);\n  if (!metric) {\n    metric = new Gauge<T>(config);\n    register.registerMetric(metric);\n  }\n  return metric as Gauge<T>;\n}\n\nexport function createSummaryMetric<T extends string>(\n  config: SummaryConfiguration<T>,\n): Summary<T> {\n  let metric = register.getSingleMetric(config.name);\n  if (!metric) {\n    metric = new Summary<T>(config);\n    register.registerMetric(metric);\n  }\n\n  return metric as Summary<T>;\n}\n\nexport function createHistogramMetric<T extends string>(\n  config: HistogramConfiguration<T>,\n): Histogram<T> {\n  let metric = register.getSingleMetric(config.name);\n  if (!metric) {\n    metric = new Histogram<T>(config);\n    register.registerMetric(metric);\n  }\n\n  return metric as Histogram<T>;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { createGaugeMetric } from '../util/metrics';\nimport { DbRefreshStateRow, DbRelationsRow, DbLocationsRow } from './tables';\nimport { metrics } from '@opentelemetry/api';\nimport { parseEntityRef } from '@backstage/catalog-model';\n\nexport function initDatabaseMetrics(knex: Knex) {\n  const seenProm = new Set<string>();\n  const seen = new Set<string>();\n  const meter = metrics.getMeter('default');\n  return {\n    entities_count_prom: createGaugeMetric({\n      name: 'catalog_entities_count',\n      help: 'Total amount of entities in the catalog. DEPRECATED: Please use opentelemetry metrics instead.',\n      labelNames: ['kind'],\n      async collect() {\n        const result = await knex<DbRefreshStateRow>('refresh_state').select(\n          'entity_ref',\n        );\n        const results = result\n          .map(row => row.entity_ref.split(':')[0])\n          .reduce((acc, e) => acc.set(e, (acc.get(e) || 0) + 1), new Map());\n\n        results.forEach((value, key) => {\n          seenProm.add(key);\n          this.set({ kind: key }, value);\n        });\n\n        // Set all the entities that were not seenProm to 0 and delete them from the seenProm set.\n        seenProm.forEach(key => {\n          if (!results.has(key)) {\n            this.set({ kind: key }, 0);\n            seenProm.delete(key);\n          }\n        });\n      },\n    }),\n    registered_locations_prom: createGaugeMetric({\n      name: 'catalog_registered_locations_count',\n      help: 'Total amount of registered locations in the catalog. DEPRECATED: Please use opentelemetry metrics instead.',\n      async collect() {\n        const total = await knex<DbLocationsRow>('locations').count({\n          count: '*',\n        });\n        this.set(Number(total[0].count));\n      },\n    }),\n    relations_prom: createGaugeMetric({\n      name: 'catalog_relations_count',\n      help: 'Total amount of relations between entities. DEPRECATED: Please use opentelemetry metrics instead.',\n      async collect() {\n        const total = await knex<DbRelationsRow>('relations').count({\n          count: '*',\n        });\n        this.set(Number(total[0].count));\n      },\n    }),\n    entities_count: meter\n      .createObservableGauge('catalog_entities_count', {\n        description: 'Total amount of entities in the catalog',\n      })\n      .addCallback(async gauge => {\n        const result = await knex<DbRefreshStateRow>('refresh_state').select(\n          'entity_ref',\n        );\n        const results = result\n          .map(row => parseEntityRef(row.entity_ref).kind)\n          .reduce((acc, e) => acc.set(e, (acc.get(e) || 0) + 1), new Map());\n\n        results.forEach((value, key) => {\n          seen.add(key);\n          gauge.observe(value, { kind: key });\n        });\n\n        // Set all the entities that were not seen to 0 and delete them from the seen set.\n        seen.forEach(key => {\n          if (!results.has(key)) {\n            gauge.observe(0, { kind: key });\n            seen.delete(key);\n          }\n        });\n      }),\n    registered_locations: meter\n      .createObservableGauge('catalog_registered_locations_count', {\n        description: 'Total amount of registered locations in the catalog',\n      })\n      .addCallback(async gauge => {\n        const total = await knex<DbLocationsRow>('locations').count({\n          count: '*',\n        });\n        gauge.observe(Number(total[0].count));\n      }),\n    relations: meter\n      .createObservableGauge('catalog_relations_count', {\n        description: 'Total amount of relations between entities',\n      })\n      .addCallback(async gauge => {\n        const total = await knex<DbRelationsRow>('relations').count({\n          count: '*',\n        });\n        gauge.observe(Number(total[0].count));\n      }),\n  };\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { DbRefreshStateRow } from '../../tables';\n\n/**\n * Checks whether a refresh state exists for the given entity that has a\n * location key that does not match the provided location key.\n *\n * @returns The conflicting key if there is one.\n */\nexport async function checkLocationKeyConflict(options: {\n  tx: Knex.Transaction;\n  entityRef: string;\n  locationKey?: string;\n}): Promise<string | undefined> {\n  const { tx, entityRef, locationKey } = options;\n\n  const row = await tx<DbRefreshStateRow>('refresh_state')\n    .select('location_key')\n    .where('entity_ref', entityRef)\n    .first();\n\n  const conflictingKey = row?.location_key;\n\n  // If there's no existing key we can't have a conflict\n  if (!conflictingKey) {\n    return undefined;\n  }\n\n  if (conflictingKey !== locationKey) {\n    return conflictingKey;\n  }\n  return undefined;\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, stringifyEntityRef } from '@backstage/catalog-model';\nimport { Knex } from 'knex';\nimport { DbRefreshStateRow } from '../../tables';\nimport { v4 as uuid } from 'uuid';\nimport { isDatabaseConflictError } from '@backstage/backend-common';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\n/**\n * Attempts to insert a new refresh state row for the given entity, returning\n * true if successful and false if there was a conflict.\n */\nexport async function insertUnprocessedEntity(options: {\n  tx: Knex.Transaction;\n  entity: Entity;\n  hash: string;\n  locationKey?: string;\n  logger: LoggerService;\n}): Promise<boolean> {\n  const { tx, entity, hash, logger, locationKey } = options;\n\n  const entityRef = stringifyEntityRef(entity);\n  const serializedEntity = JSON.stringify(entity);\n\n  try {\n    let query = tx<DbRefreshStateRow>('refresh_state').insert({\n      entity_id: uuid(),\n      entity_ref: entityRef,\n      unprocessed_entity: serializedEntity,\n      unprocessed_hash: hash,\n      errors: '',\n      location_key: locationKey,\n      next_update_at: tx.fn.now(),\n      last_discovery_at: tx.fn.now(),\n    });\n\n    // TODO(Rugvip): only tested towards MySQL, Postgres and SQLite.\n    // We have to do this because the only way to detect if there was a conflict with\n    // SQLite is to catch the error, while Postgres needs to ignore the conflict to not\n    // break the ongoing transaction.\n    if (tx.client.config.client.includes('pg')) {\n      query = query.onConflict('entity_ref').ignore() as any; // type here does not match runtime\n    }\n\n    // Postgres gives as an object with rowCount, SQLite gives us an array\n    const result: { rowCount?: number; length?: number } = await query;\n    return result.rowCount === 1 || result.length === 1;\n  } catch (error) {\n    // SQLite, or MySQL reached this rather than the rowCount check above\n    if (!isDatabaseConflictError(error)) {\n      throw error;\n    } else {\n      logger.debug(`Unable to insert a new refresh state row, ${error}`);\n      return false;\n    }\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, stringifyEntityRef } from '@backstage/catalog-model';\nimport { Knex } from 'knex';\nimport { DbRefreshStateRow } from '../../tables';\n\n/**\n * Attempts to update an existing refresh state row, returning true if it was\n * updated and false if there was no entity with a matching ref and location key.\n *\n * Updating the entity will also cause it to be scheduled for immediate processing.\n */\nexport async function updateUnprocessedEntity(options: {\n  tx: Knex.Transaction;\n  entity: Entity;\n  hash: string;\n  locationKey?: string;\n}): Promise<boolean> {\n  const { tx, entity, hash, locationKey } = options;\n\n  const entityRef = stringifyEntityRef(entity);\n  const serializedEntity = JSON.stringify(entity);\n\n  const refreshResult = await tx<DbRefreshStateRow>('refresh_state')\n    .update({\n      unprocessed_entity: serializedEntity,\n      unprocessed_hash: hash,\n      location_key: locationKey,\n      last_discovery_at: tx.fn.now(),\n      // We only get to this point if a processed entity actually had any changes, or\n      // if an entity provider requested this mutation, meaning that we can safely\n      // bump the deferred entities to the front of the queue for immediate processing.\n      next_update_at: tx.fn.now(),\n    })\n    .where('entity_ref', entityRef)\n    .andWhere(inner => {\n      if (!locationKey) {\n        return inner.whereNull('location_key');\n      }\n      return inner\n        .where('location_key', locationKey)\n        .orWhereNull('location_key');\n    });\n\n  return refreshResult === 1;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { createHash } from 'crypto';\nimport stableStringify from 'fast-json-stable-stringify';\n\nexport function generateStableHash(entity: Entity) {\n  return createHash('sha1')\n    .update(stableStringify({ ...entity }))\n    .digest('hex');\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @public */\nexport const CATALOG_CONFLICTS_TOPIC = 'experimental.catalog.conflict';\n/** @public */\nexport const CATALOG_ERRORS_TOPIC = 'experimental.catalog.errors';\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, stringifyEntityRef } from '@backstage/catalog-model';\nimport { ConflictError } from '@backstage/errors';\nimport { DeferredEntity } from '@backstage/plugin-catalog-node';\nimport { Knex } from 'knex';\nimport lodash from 'lodash';\nimport { ProcessingIntervalFunction } from '../processing';\nimport { rethrowError, timestampToDateTime } from './conversion';\nimport { initDatabaseMetrics } from './metrics';\nimport {\n  DbRefreshKeysRow,\n  DbRefreshStateReferencesRow,\n  DbRefreshStateRow,\n  DbRelationsRow,\n} from './tables';\nimport {\n  GetProcessableEntitiesResult,\n  ListParentsOptions,\n  ListParentsResult,\n  ProcessingDatabase,\n  RefreshStateItem,\n  Transaction,\n  UpdateEntityCacheOptions,\n  UpdateProcessedEntityOptions,\n} from './types';\nimport { checkLocationKeyConflict } from './operations/refreshState/checkLocationKeyConflict';\nimport { insertUnprocessedEntity } from './operations/refreshState/insertUnprocessedEntity';\nimport { updateUnprocessedEntity } from './operations/refreshState/updateUnprocessedEntity';\nimport { generateStableHash } from './util';\nimport { EventBroker, EventParams } from '@backstage/plugin-events-node';\nimport { DateTime } from 'luxon';\nimport { CATALOG_CONFLICTS_TOPIC } from '../constants';\nimport { CatalogConflictEventPayload } from '../catalog/types';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\n// The number of items that are sent per batch to the database layer, when\n// doing .batchInsert calls to knex. This needs to be low enough to not cause\n// errors in the underlying engine due to exceeding query limits, but large\n// enough to get the speed benefits.\nconst BATCH_SIZE = 50;\n\nexport class DefaultProcessingDatabase implements ProcessingDatabase {\n  constructor(\n    private readonly options: {\n      database: Knex;\n      logger: LoggerService;\n      refreshInterval: ProcessingIntervalFunction;\n      eventBroker?: EventBroker;\n    },\n  ) {\n    initDatabaseMetrics(options.database);\n  }\n\n  async updateProcessedEntity(\n    txOpaque: Transaction,\n    options: UpdateProcessedEntityOptions,\n  ): Promise<{ previous: { relations: DbRelationsRow[] } }> {\n    const tx = txOpaque as Knex.Transaction;\n    const {\n      id,\n      processedEntity,\n      resultHash,\n      errors,\n      relations,\n      deferredEntities,\n      refreshKeys,\n      locationKey,\n    } = options;\n    const configClient = tx.client.config.client;\n    const refreshResult = await tx<DbRefreshStateRow>('refresh_state')\n      .update({\n        processed_entity: JSON.stringify(processedEntity),\n        result_hash: resultHash,\n        errors,\n        location_key: locationKey,\n      })\n      .where('entity_id', id)\n      .andWhere(inner => {\n        if (!locationKey) {\n          return inner.whereNull('location_key');\n        }\n        return inner\n          .where('location_key', locationKey)\n          .orWhereNull('location_key');\n      });\n    if (refreshResult === 0) {\n      throw new ConflictError(\n        `Conflicting write of processing result for ${id} with location key '${locationKey}'`,\n      );\n    }\n    const sourceEntityRef = stringifyEntityRef(processedEntity);\n\n    // Schedule all deferred entities for future processing.\n    await this.addUnprocessedEntities(tx, {\n      entities: deferredEntities,\n      sourceEntityRef,\n    });\n\n    // Delete old relations\n    // NOTE(freben): knex implemented support for returning() on update queries for sqlite, but at the current time of writing (Sep 2022) not for delete() queries.\n    let previousRelationRows: DbRelationsRow[];\n    if (configClient.includes('sqlite3') || configClient.includes('mysql')) {\n      previousRelationRows = await tx<DbRelationsRow>('relations')\n        .select('*')\n        .where({ originating_entity_id: id });\n      await tx<DbRelationsRow>('relations')\n        .where({ originating_entity_id: id })\n        .delete();\n    } else {\n      previousRelationRows = await tx<DbRelationsRow>('relations')\n        .where({ originating_entity_id: id })\n        .delete()\n        .returning('*');\n    }\n\n    // Batch insert new relations\n    const relationRows: DbRelationsRow[] = relations.map(\n      ({ source, target, type }) => ({\n        originating_entity_id: id,\n        source_entity_ref: stringifyEntityRef(source),\n        target_entity_ref: stringifyEntityRef(target),\n        type,\n      }),\n    );\n\n    await tx.batchInsert(\n      'relations',\n      this.deduplicateRelations(relationRows),\n      BATCH_SIZE,\n    );\n\n    // Delete old refresh keys\n    await tx<DbRefreshKeysRow>('refresh_keys')\n      .where({ entity_id: id })\n      .delete();\n\n    // Insert the refresh keys for the processed entity\n    await tx.batchInsert(\n      'refresh_keys',\n      refreshKeys.map(k => ({\n        entity_id: id,\n        key: k.key,\n      })),\n      BATCH_SIZE,\n    );\n\n    return {\n      previous: {\n        relations: previousRelationRows,\n      },\n    };\n  }\n\n  async updateProcessedEntityErrors(\n    txOpaque: Transaction,\n    options: UpdateProcessedEntityOptions,\n  ): Promise<void> {\n    const tx = txOpaque as Knex.Transaction;\n    const { id, errors, resultHash } = options;\n\n    await tx<DbRefreshStateRow>('refresh_state')\n      .update({\n        errors,\n        result_hash: resultHash,\n      })\n      .where('entity_id', id);\n  }\n\n  async updateEntityCache(\n    txOpaque: Transaction,\n    options: UpdateEntityCacheOptions,\n  ): Promise<void> {\n    const tx = txOpaque as Knex.Transaction;\n    const { id, state } = options;\n\n    await tx<DbRefreshStateRow>('refresh_state')\n      .update({ cache: JSON.stringify(state ?? {}) })\n      .where('entity_id', id);\n  }\n\n  async getProcessableEntities(\n    txOpaque: Transaction,\n    request: { processBatchSize: number },\n  ): Promise<GetProcessableEntitiesResult> {\n    const tx = txOpaque as Knex.Transaction;\n\n    let itemsQuery = tx<DbRefreshStateRow>('refresh_state').select();\n\n    // This avoids duplication of work because of race conditions and is\n    // also fast because locked rows are ignored rather than blocking.\n    // It's only available in MySQL and PostgreSQL\n    if (['mysql', 'mysql2', 'pg'].includes(tx.client.config.client)) {\n      itemsQuery = itemsQuery.forUpdate().skipLocked();\n    }\n\n    const items = await itemsQuery\n      .where('next_update_at', '<=', tx.fn.now())\n      .limit(request.processBatchSize)\n      .orderBy('next_update_at', 'asc');\n\n    const interval = this.options.refreshInterval();\n\n    const nextUpdateAt = (refreshInterval: number) => {\n      if (tx.client.config.client.includes('sqlite3')) {\n        return tx.raw(`datetime('now', ?)`, [`${refreshInterval} seconds`]);\n      }\n\n      if (tx.client.config.client.includes('mysql')) {\n        return tx.raw(`now() + interval ${refreshInterval} second`);\n      }\n\n      return tx.raw(`now() + interval '${refreshInterval} seconds'`);\n    };\n\n    await tx<DbRefreshStateRow>('refresh_state')\n      .whereIn(\n        'entity_ref',\n        items.map(i => i.entity_ref),\n      )\n      .update({\n        next_update_at: nextUpdateAt(interval),\n      });\n\n    return {\n      items: items.map(\n        i =>\n          ({\n            id: i.entity_id,\n            entityRef: i.entity_ref,\n            unprocessedEntity: JSON.parse(i.unprocessed_entity) as Entity,\n            processedEntity: i.processed_entity\n              ? (JSON.parse(i.processed_entity) as Entity)\n              : undefined,\n            resultHash: i.result_hash || '',\n            nextUpdateAt: timestampToDateTime(i.next_update_at),\n            lastDiscoveryAt: timestampToDateTime(i.last_discovery_at),\n            state: i.cache ? JSON.parse(i.cache) : undefined,\n            errors: i.errors,\n            locationKey: i.location_key,\n          } as RefreshStateItem),\n      ),\n    };\n  }\n\n  async listParents(\n    txOpaque: Transaction,\n    options: ListParentsOptions,\n  ): Promise<ListParentsResult> {\n    const tx = txOpaque as Knex.Transaction;\n\n    const rows = await tx<DbRefreshStateReferencesRow>(\n      'refresh_state_references',\n    )\n      .where({ target_entity_ref: options.entityRef })\n      .select();\n\n    const entityRefs = rows.map(r => r.source_entity_ref!).filter(Boolean);\n\n    return { entityRefs };\n  }\n\n  async transaction<T>(fn: (tx: Transaction) => Promise<T>): Promise<T> {\n    try {\n      let result: T | undefined = undefined;\n\n      await this.options.database.transaction(\n        async tx => {\n          // We can't return here, as knex swallows the return type in case the transaction is rolled back:\n          // https://github.com/knex/knex/blob/e37aeaa31c8ef9c1b07d2e4d3ec6607e557d800d/lib/transaction.js#L136\n          result = await fn(tx);\n        },\n        {\n          // If we explicitly trigger a rollback, don't fail.\n          doNotRejectOnRollback: true,\n        },\n      );\n\n      return result!;\n    } catch (e) {\n      this.options.logger.debug(`Error during transaction, ${e}`);\n      throw rethrowError(e);\n    }\n  }\n\n  private deduplicateRelations(rows: DbRelationsRow[]): DbRelationsRow[] {\n    return lodash.uniqBy(\n      rows,\n      r => `${r.source_entity_ref}:${r.target_entity_ref}:${r.type}`,\n    );\n  }\n\n  /**\n   * Add a set of deferred entities for processing.\n   * The entities will be added at the front of the processing queue.\n   */\n  private async addUnprocessedEntities(\n    txOpaque: Transaction,\n    options: {\n      sourceEntityRef: string;\n      entities: DeferredEntity[];\n    },\n  ): Promise<void> {\n    const tx = txOpaque as Knex.Transaction;\n\n    // Keeps track of the entities that we end up inserting to update refresh_state_references afterwards\n    const stateReferences = new Array<string>();\n\n    // Upsert all of the unprocessed entities into the refresh_state table, by\n    // their entity ref.\n    for (const { entity, locationKey } of options.entities) {\n      const entityRef = stringifyEntityRef(entity);\n      const hash = generateStableHash(entity);\n\n      const updated = await updateUnprocessedEntity({\n        tx,\n        entity,\n        hash,\n        locationKey,\n      });\n      if (updated) {\n        stateReferences.push(entityRef);\n        continue;\n      }\n\n      const inserted = await insertUnprocessedEntity({\n        tx,\n        entity,\n        hash,\n        locationKey,\n        logger: this.options.logger,\n      });\n      if (inserted) {\n        stateReferences.push(entityRef);\n        continue;\n      }\n\n      // If the row can't be inserted, we have a conflict, but it could be either\n      // because of a conflicting locationKey or a race with another instance, so check\n      // whether the conflicting entity has the same entityRef but a different locationKey\n      const conflictingKey = await checkLocationKeyConflict({\n        tx,\n        entityRef,\n        locationKey,\n      });\n      if (conflictingKey) {\n        this.options.logger.warn(\n          `Detected conflicting entityRef ${entityRef} already referenced by ${conflictingKey} and now also ${locationKey}`,\n        );\n        if (this.options.eventBroker && locationKey) {\n          const eventParams: EventParams<CatalogConflictEventPayload> = {\n            topic: CATALOG_CONFLICTS_TOPIC,\n            eventPayload: {\n              unprocessedEntity: entity,\n              entityRef,\n              newLocationKey: locationKey,\n              existingLocationKey: conflictingKey,\n              lastConflictAt: DateTime.now().toISO()!,\n            },\n          };\n          await this.options.eventBroker?.publish(eventParams);\n        }\n      }\n    }\n\n    // Replace all references for the originating entity or source and then create new ones\n    await tx<DbRefreshStateReferencesRow>('refresh_state_references')\n      .andWhere({ source_entity_ref: options.sourceEntityRef })\n      .delete();\n    await tx.batchInsert(\n      'refresh_state_references',\n      stateReferences.map(entityRef => ({\n        source_entity_ref: options.sourceEntityRef,\n        target_entity_ref: entityRef,\n      })),\n      BATCH_SIZE,\n    );\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { resolvePackagePath } from '@backstage/backend-common';\nimport { Knex } from 'knex';\n\nexport async function applyDatabaseMigrations(knex: Knex): Promise<void> {\n  const migrationsDir = resolvePackagePath(\n    '@backstage/plugin-catalog-backend',\n    'migrations',\n  );\n\n  await knex.migrate.latest({\n    directory: migrationsDir,\n  });\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { HumanDuration } from '@backstage/types';\n\n/**\n * Performs the act of stitching - to take all of the various outputs from the\n * ingestion process, and stitching them together into the final entity JSON\n * shape.\n */\nexport interface Stitcher {\n  stitch(options: {\n    entityRefs?: Iterable<string>;\n    entityIds?: Iterable<string>;\n  }): Promise<void>;\n}\n\n/**\n * The strategies supported by the stitching process, in terms of when to\n * perform stitching.\n *\n * @remarks\n *\n * In immediate mode, stitching happens \"in-band\" (blocking) immediately when\n * each processing task finishes. When set to `'deferred'`, stitching is instead\n * deferred to happen on a separate asynchronous worker queue just like\n * processing.\n *\n * Deferred stitching should make performance smoother when ingesting large\n * amounts of entities, and reduce p99 processing times and repeated\n * over-stitching of hot spot entities when fan-out/fan-in in terms of relations\n * is very large. It does however also come with some performance cost due to\n * the queuing with how much wall-clock time some types of task take.\n */\nexport type StitchingStrategy =\n  | {\n      mode: 'immediate';\n    }\n  | {\n      mode: 'deferred';\n      pollingInterval: HumanDuration;\n      stitchTimeout: HumanDuration;\n    };\n\nexport function stitchingStrategyFromConfig(config: Config): StitchingStrategy {\n  const strategyMode = config.getOptionalString(\n    'catalog.stitchingStrategy.mode',\n  );\n\n  if (strategyMode === undefined || strategyMode === 'immediate') {\n    return {\n      mode: 'immediate',\n    };\n  } else if (strategyMode === 'deferred') {\n    // TODO(freben): Make parameters configurable\n    return {\n      mode: 'deferred',\n      pollingInterval: { seconds: 1 },\n      stitchTimeout: { seconds: 60 },\n    };\n  }\n\n  throw new Error(\n    `Invalid stitching strategy mode '${strategyMode}', expected one of 'immediate' or 'deferred'`,\n  );\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Span, SpanOptions, SpanStatusCode, Tracer } from '@opentelemetry/api';\nimport { Entity } from '@backstage/catalog-model';\n\nexport const TRACER_ID = 'backstage-plugin-catalog-backend';\n\nfunction setAttributeIfDefined(span: Span, attribute: string, value?: string) {\n  if (value !== null && value !== undefined) {\n    span.setAttribute(attribute, value);\n  }\n}\n\nexport function addEntityAttributes(span: Span, entity: Entity) {\n  setAttributeIfDefined(span, 'backstage.entity.apiVersion', entity.apiVersion);\n  setAttributeIfDefined(span, 'backstage.entity.kind', entity.kind);\n  setAttributeIfDefined(\n    span,\n    'backstage.entity.metadata.namespace',\n    entity.metadata?.namespace,\n  );\n  setAttributeIfDefined(\n    span,\n    'backstage.entity.metadata.name',\n    entity.metadata?.name,\n  );\n}\n\n// Adapted from https://github.com/open-telemetry/opentelemetry-js/blob/359fbcc40a859057a02b14e84599eac399b8dba7/api/src/trace/SugaredTracer.ts\n// While waiting for something like https://github.com/open-telemetry/opentelemetry-js/pull/3317 to land upstream\n\nconst onException = (e: Error, span: Span) => {\n  span.recordException(e);\n  span.setStatus({\n    code: SpanStatusCode.ERROR,\n  });\n};\n\nfunction isPromiseLike<T, S>(obj: PromiseLike<T> | S): obj is PromiseLike<T> {\n  return (\n    !!obj &&\n    (typeof obj === 'object' || typeof obj === 'function') &&\n    'then' in obj &&\n    typeof obj.then === 'function'\n  );\n}\n\nfunction handleFn<F extends (span: Span) => ReturnType<F>>(\n  span: Span,\n  fn: F,\n): ReturnType<F> {\n  try {\n    const ret = fn(span);\n\n    // if fn is an async function attach a recordException and spanEnd callback to the promise\n    if (isPromiseLike(ret)) {\n      ret.then(\n        () => {\n          span.end();\n        },\n        e => {\n          onException(e, span);\n          span.end();\n        },\n      );\n    } else {\n      span.end();\n    }\n\n    return ret;\n  } catch (e) {\n    onException(e, span);\n    span.end();\n    throw e;\n  }\n}\n\nexport function withActiveSpan<F extends (span: Span) => ReturnType<F>>(\n  tracer: Tracer,\n  name: string,\n  fn: F,\n  spanOptions: SpanOptions = {},\n): ReturnType<F> {\n  return tracer.startActiveSpan(name, spanOptions, (span: Span) => {\n    return handleFn(span, fn);\n  });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { TRACER_ID, withActiveSpan } from '../util/opentelemetry';\nimport { trace } from '@opentelemetry/api';\n\nconst DEFAULT_POLLING_INTERVAL_MS = 1000;\nconst tracer = trace.getTracer(TRACER_ID);\n\ntype Options<T> = {\n  /**\n   * The callback used to load in new tasks. The number of items returned\n   * in the array must be at most `count` number of items, but may be lower.\n   *\n   * Any error thrown from this method fill be treated as an unhandled rejection.\n   */\n  loadTasks: (count: number) => Promise<Array<T>>;\n\n  /**\n   * The callback used to process a single item.\n   *\n   * Any error thrown from this method fill be treated as an unhandled rejection.\n   */\n  processTask: (item: T) => Promise<void>;\n\n  /**\n   * The target minimum number of items to process in parallel. Once the number\n   * of in-flight tasks reaches this count, more tasks will be loaded in.\n   */\n  lowWatermark: number;\n\n  /**\n   * The maximum number of items to process in parallel.\n   */\n  highWatermark: number;\n\n  /**\n   * The interval at which tasks are polled for in the background when\n   * there aren't enough tasks to load to satisfy the low watermark.\n   *\n   * @default 1000\n   */\n  pollingIntervalMs?: number;\n};\n\n/**\n * Creates a task processing pipeline which continuously loads in tasks to\n * keep the number of parallel in-flight tasks between a low and high watermark.\n *\n * @param options - The options for the pipeline.\n * @returns A stop function which when called halts all processing.\n */\nexport function startTaskPipeline<T>(options: Options<T>) {\n  const {\n    loadTasks,\n    processTask,\n    lowWatermark,\n    highWatermark,\n    pollingIntervalMs = DEFAULT_POLLING_INTERVAL_MS,\n  } = options;\n\n  if (lowWatermark >= highWatermark) {\n    throw new Error('lowWatermark must be lower than highWatermark');\n  }\n\n  // State is in an object so that it can be stably referenced from within\n  // callbacks below\n  const state = { inFlightCount: 0 };\n  const abortController = new AbortController();\n  const abortSignal = abortController.signal;\n\n  const barrier = createBarrier({\n    waitTimeoutMillis: pollingIntervalMs,\n    signal: abortSignal,\n  });\n\n  async function pipelineLoop() {\n    while (!abortSignal.aborted) {\n      if (state.inFlightCount <= lowWatermark) {\n        await withActiveSpan(tracer, 'TaskPipelineLoop', async span => {\n          const loadCount = highWatermark - state.inFlightCount;\n          const loadedItems = await Promise.resolve()\n            .then(() => loadTasks(loadCount))\n            .catch(() => {\n              // Silently swallow errors and go back to sleep to try again; we\n              // delegate to the loadTasks function itself to catch errors and log\n              // if it so desires\n              return [];\n            });\n          span.setAttribute('itemCount', loadedItems.length);\n          if (loadedItems.length && !abortSignal.aborted) {\n            state.inFlightCount += loadedItems.length;\n            for (const item of loadedItems) {\n              Promise.resolve()\n                .then(() => processTask(item))\n                .catch(() => {\n                  // Silently swallow errors and go back to sleep to try again; we\n                  // delegate to the processTask function itself to catch errors\n                  // and log if it so desires\n                })\n                .finally(() => {\n                  state.inFlightCount -= 1;\n                  barrier.release();\n                });\n            }\n          }\n        });\n      }\n      await barrier.wait();\n    }\n  }\n\n  pipelineLoop().catch(error => {\n    // This should be impossible, but if it did happen, it would signal a\n    // programming error inside the loop (errors should definitely be caught\n    // inside of it). Let's rethrow with more information, and let it be caught\n    // by the process' uncaught exception handler, which will log the occurrence\n    // at a high level.\n    throw new Error(`Unexpected error in processing pipeline loop`, error);\n  });\n\n  return () => {\n    abortController.abort();\n    barrier.destroy();\n  };\n}\n\n/**\n * Creates a barrier with a timeout, that can be awaited or prematurely\n * released either manually or by an abort signal.\n */\nexport function createBarrier(options: {\n  waitTimeoutMillis: number;\n  signal: AbortSignal;\n}): {\n  wait: () => Promise<void>;\n  release: () => void;\n  destroy: () => void;\n} {\n  const { waitTimeoutMillis, signal } = options;\n  const resolvers = new Set<() => void>();\n\n  function wait() {\n    if (signal.aborted || !(waitTimeoutMillis > 0)) {\n      return Promise.resolve();\n    }\n\n    return new Promise<void>(resolve => {\n      const timeoutHandle = setTimeout(done, waitTimeoutMillis);\n\n      function done() {\n        resolvers.delete(done);\n        clearTimeout(timeoutHandle);\n        resolve();\n      }\n\n      resolvers.add(done);\n    });\n  }\n\n  function release() {\n    const resolversToCall = new Set(resolvers);\n    resolvers.clear();\n    for (const resolver of resolversToCall) {\n      resolver();\n    }\n  }\n\n  signal.addEventListener('abort', release);\n\n  return {\n    wait,\n    release,\n    destroy: () => signal.removeEventListener('abort', release),\n  };\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport splitToChunks from 'lodash/chunk';\nimport { v4 as uuid } from 'uuid';\nimport { StitchingStrategy } from '../../../stitching/types';\nimport { DbFinalEntitiesRow, DbRefreshStateRow } from '../../tables';\n\n/**\n * Marks a number of entities for stitching some time in the near\n * future.\n *\n * @remarks\n */\nexport async function markForStitching(options: {\n  knex: Knex | Knex.Transaction;\n  strategy: StitchingStrategy;\n  entityRefs?: Iterable<string>;\n  entityIds?: Iterable<string>;\n}): Promise<void> {\n  // Splitting to chunks just to cover pathological cases that upset the db\n  const entityRefs = split(options.entityRefs);\n  const entityIds = split(options.entityIds);\n  const knex = options.knex;\n  const mode = options.strategy.mode;\n\n  if (mode === 'immediate') {\n    for (const chunk of entityRefs) {\n      await knex\n        .table<DbFinalEntitiesRow>('final_entities')\n        .update({\n          hash: 'force-stitching',\n        })\n        .whereIn(\n          'entity_id',\n          knex<DbRefreshStateRow>('refresh_state')\n            .select('entity_id')\n            .whereIn('entity_ref', chunk),\n        );\n      await knex\n        .table<DbRefreshStateRow>('refresh_state')\n        .update({\n          result_hash: 'force-stitching',\n          next_update_at: knex.fn.now(),\n        })\n        .whereIn('entity_ref', chunk);\n    }\n\n    for (const chunk of entityIds) {\n      await knex\n        .table<DbFinalEntitiesRow>('final_entities')\n        .update({\n          hash: 'force-stitching',\n        })\n        .whereIn('entity_id', chunk);\n      await knex\n        .table<DbRefreshStateRow>('refresh_state')\n        .update({\n          result_hash: 'force-stitching',\n          next_update_at: knex.fn.now(),\n        })\n        .whereIn('entity_id', chunk);\n    }\n  } else if (mode === 'deferred') {\n    // It's OK that this is shared across refresh state rows; it just needs to\n    // be uniquely generated for every new stitch request.\n    const ticket = uuid();\n\n    for (const chunk of entityRefs) {\n      await knex<DbRefreshStateRow>('refresh_state')\n        .update({\n          next_stitch_at: knex.fn.now(),\n          next_stitch_ticket: ticket,\n        })\n        .whereIn('entity_ref', chunk);\n    }\n\n    for (const chunk of entityIds) {\n      await knex<DbRefreshStateRow>('refresh_state')\n        .update({\n          next_stitch_at: knex.fn.now(),\n          next_stitch_ticket: ticket,\n        })\n        .whereIn('entity_id', chunk);\n    }\n  } else {\n    throw new Error(`Unknown stitching strategy mode ${mode}`);\n  }\n}\n\nfunction split(input: Iterable<string> | undefined): string[][] {\n  if (!input) {\n    return [];\n  }\n  return splitToChunks(Array.isArray(input) ? input : [...input], 200);\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport uniq from 'lodash/uniq';\nimport { StitchingStrategy } from '../../../stitching/types';\nimport { DbRefreshStateRow } from '../../tables';\nimport { markForStitching } from '../stitcher/markForStitching';\n\n/**\n * Finds and deletes all orphaned entities, i.e. entities that do not have any\n * incoming references to them, and also eagerly deletes all of their children\n * that would otherwise become orphaned.\n */\nexport async function deleteOrphanedEntities(options: {\n  knex: Knex.Transaction | Knex;\n  strategy: StitchingStrategy;\n}): Promise<number> {\n  const { knex, strategy } = options;\n\n  let total = 0;\n\n  // Limit iterations for sanity\n  for (let i = 0; i < 100; ++i) {\n    const candidates = await knex\n      .with('orphans', ['entity_id', 'entity_ref'], orphans =>\n        orphans\n          .from('refresh_state')\n          .select('refresh_state.entity_id', 'refresh_state.entity_ref')\n          .leftOuterJoin(\n            'refresh_state_references',\n            'refresh_state_references.target_entity_ref',\n            'refresh_state.entity_ref',\n          )\n          .whereNull('refresh_state_references.target_entity_ref'),\n      )\n      .select({\n        entityId: 'orphans.entity_id',\n        relationSourceId: 'refresh_state.entity_id',\n      })\n      .from('orphans')\n      .leftOuterJoin(\n        'relations',\n        'relations.target_entity_ref',\n        'orphans.entity_ref',\n      )\n      .leftOuterJoin(\n        'refresh_state',\n        'refresh_state.entity_ref',\n        'relations.source_entity_ref',\n      );\n\n    if (!candidates.length) {\n      break;\n    }\n\n    const orphanIds: string[] = uniq(candidates.map(r => r.entityId));\n    const orphanRelationIds: string[] = uniq(\n      candidates.map(r => r.relationSourceId).filter(Boolean),\n    );\n\n    total += orphanIds.length;\n\n    // Delete the orphans themselves\n    await knex\n      .table<DbRefreshStateRow>('refresh_state')\n      .delete()\n      .whereIn('entity_id', orphanIds);\n\n    // Mark all of the things that the orphans had relations to for stitching\n    await markForStitching({\n      knex,\n      strategy,\n      entityIds: orphanRelationIds,\n    });\n  }\n\n  return total;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ANNOTATION_LOCATION,\n  Entity,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { assertError, serializeError, stringifyError } from '@backstage/errors';\nimport { Hash } from 'crypto';\nimport stableStringify from 'fast-json-stable-stringify';\nimport { Knex } from 'knex';\nimport { metrics, trace } from '@opentelemetry/api';\nimport { ProcessingDatabase, RefreshStateItem } from '../database/types';\nimport { createCounterMetric, createSummaryMetric } from '../util/metrics';\nimport { CatalogProcessingOrchestrator, EntityProcessingResult } from './types';\nimport { Stitcher, stitchingStrategyFromConfig } from '../stitching/types';\nimport { startTaskPipeline } from './TaskPipeline';\nimport { PluginTaskScheduler } from '@backstage/backend-tasks';\nimport { Config } from '@backstage/config';\nimport {\n  addEntityAttributes,\n  TRACER_ID,\n  withActiveSpan,\n} from '../util/opentelemetry';\nimport { deleteOrphanedEntities } from '../database/operations/util/deleteOrphanedEntities';\nimport { EventBroker } from '@backstage/plugin-events-node';\nimport { CATALOG_ERRORS_TOPIC } from '../constants';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nconst CACHE_TTL = 5;\n\nconst tracer = trace.getTracer(TRACER_ID);\n\nexport type ProgressTracker = ReturnType<typeof progressTracker>;\n\n// NOTE(freben): Perhaps surprisingly, this class does not implement the\n// CatalogProcessingEngine type. That type is externally visible and its name is\n// the way it is for historic reasons. This class has no particular reason to\n// implement that precise interface; nowadays there are several different\n// engines \"hiding\" behind the CatalogProcessingEngine interface, of which this\n// is just one.\nexport class DefaultCatalogProcessingEngine {\n  private readonly config: Config;\n  private readonly scheduler?: PluginTaskScheduler;\n  private readonly logger: LoggerService;\n  private readonly knex: Knex;\n  private readonly processingDatabase: ProcessingDatabase;\n  private readonly orchestrator: CatalogProcessingOrchestrator;\n  private readonly stitcher: Stitcher;\n  private readonly createHash: () => Hash;\n  private readonly pollingIntervalMs: number;\n  private readonly orphanCleanupIntervalMs: number;\n  private readonly onProcessingError?: (event: {\n    unprocessedEntity: Entity;\n    errors: Error[];\n  }) => Promise<void> | void;\n  private readonly tracker: ProgressTracker;\n  private readonly eventBroker?: EventBroker;\n\n  private stopFunc?: () => void;\n\n  constructor(options: {\n    config: Config;\n    scheduler?: PluginTaskScheduler;\n    logger: LoggerService;\n    knex: Knex;\n    processingDatabase: ProcessingDatabase;\n    orchestrator: CatalogProcessingOrchestrator;\n    stitcher: Stitcher;\n    createHash: () => Hash;\n    pollingIntervalMs?: number;\n    orphanCleanupIntervalMs?: number;\n    onProcessingError?: (event: {\n      unprocessedEntity: Entity;\n      errors: Error[];\n    }) => Promise<void> | void;\n    tracker?: ProgressTracker;\n    eventBroker?: EventBroker;\n  }) {\n    this.config = options.config;\n    this.scheduler = options.scheduler;\n    this.logger = options.logger;\n    this.knex = options.knex;\n    this.processingDatabase = options.processingDatabase;\n    this.orchestrator = options.orchestrator;\n    this.stitcher = options.stitcher;\n    this.createHash = options.createHash;\n    this.pollingIntervalMs = options.pollingIntervalMs ?? 1_000;\n    this.orphanCleanupIntervalMs = options.orphanCleanupIntervalMs ?? 30_000;\n    this.onProcessingError = options.onProcessingError;\n    this.tracker = options.tracker ?? progressTracker();\n    this.eventBroker = options.eventBroker;\n\n    this.stopFunc = undefined;\n  }\n\n  async start() {\n    if (this.stopFunc) {\n      throw new Error('Processing engine is already started');\n    }\n\n    const stopPipeline = this.startPipeline();\n    const stopCleanup = this.startOrphanCleanup();\n\n    this.stopFunc = () => {\n      stopPipeline();\n      stopCleanup();\n    };\n  }\n\n  async stop() {\n    if (this.stopFunc) {\n      this.stopFunc();\n      this.stopFunc = undefined;\n    }\n  }\n\n  private startPipeline(): () => void {\n    return startTaskPipeline<RefreshStateItem>({\n      lowWatermark: 5,\n      highWatermark: 10,\n      pollingIntervalMs: this.pollingIntervalMs,\n      loadTasks: async count => {\n        try {\n          const { items } = await this.processingDatabase.transaction(\n            async tx => {\n              return this.processingDatabase.getProcessableEntities(tx, {\n                processBatchSize: count,\n              });\n            },\n          );\n          return items;\n        } catch (error) {\n          this.logger.warn('Failed to load processing items', error);\n          return [];\n        }\n      },\n      processTask: async item => {\n        await withActiveSpan(tracer, 'ProcessingRun', async span => {\n          const track = this.tracker.processStart(item, this.logger);\n          addEntityAttributes(span, item.unprocessedEntity);\n\n          try {\n            const {\n              id,\n              state,\n              unprocessedEntity,\n              entityRef,\n              locationKey,\n              resultHash: previousResultHash,\n            } = item;\n            const result = await this.orchestrator.process({\n              entity: unprocessedEntity,\n              state,\n            });\n\n            track.markProcessorsCompleted(result);\n\n            if (result.ok) {\n              const { ttl: _, ...stateWithoutTtl } = state ?? {};\n              if (\n                stableStringify(stateWithoutTtl) !==\n                stableStringify(result.state)\n              ) {\n                await this.processingDatabase.transaction(async tx => {\n                  await this.processingDatabase.updateEntityCache(tx, {\n                    id,\n                    state: {\n                      ttl: CACHE_TTL,\n                      ...result.state,\n                    },\n                  });\n                });\n              }\n            } else {\n              const maybeTtl = state?.ttl;\n              const ttl = Number.isInteger(maybeTtl) ? (maybeTtl as number) : 0;\n              await this.processingDatabase.transaction(async tx => {\n                await this.processingDatabase.updateEntityCache(tx, {\n                  id,\n                  state: ttl > 0 ? { ...state, ttl: ttl - 1 } : {},\n                });\n              });\n            }\n\n            const location =\n              unprocessedEntity?.metadata?.annotations?.[ANNOTATION_LOCATION];\n            if (result.errors.length) {\n              this.eventBroker?.publish({\n                topic: CATALOG_ERRORS_TOPIC,\n                eventPayload: {\n                  entity: entityRef,\n                  location,\n                  errors: result.errors,\n                },\n              });\n            }\n            const errorsString = JSON.stringify(\n              result.errors.map(e => serializeError(e)),\n            );\n\n            let hashBuilder = this.createHash().update(errorsString);\n\n            if (result.ok) {\n              const { entityRefs: parents } =\n                await this.processingDatabase.transaction(tx =>\n                  this.processingDatabase.listParents(tx, {\n                    entityRef,\n                  }),\n                );\n\n              hashBuilder = hashBuilder\n                .update(stableStringify({ ...result.completedEntity }))\n                .update(stableStringify([...result.deferredEntities]))\n                .update(stableStringify([...result.relations]))\n                .update(stableStringify([...result.refreshKeys]))\n                .update(stableStringify([...parents]));\n            }\n\n            const resultHash = hashBuilder.digest('hex');\n            if (resultHash === previousResultHash) {\n              // If nothing changed in our produced outputs, we cannot have any\n              // significant effect on our surroundings; therefore, we just abort\n              // without any updates / stitching.\n              track.markSuccessfulWithNoChanges();\n              return;\n            }\n\n            // If the result was marked as not OK, it signals that some part of the\n            // processing pipeline threw an exception. This can happen both as part of\n            // non-catastrophic things such as due to validation errors, as well as if\n            // something fatal happens inside the processing for other reasons. In any\n            // case, this means we can't trust that anything in the output is okay. So\n            // just store the errors and trigger a stich so that they become visible to\n            // the outside.\n            if (!result.ok) {\n              // notify the error listener if the entity can not be processed.\n              Promise.resolve(undefined)\n                .then(() =>\n                  this.onProcessingError?.({\n                    unprocessedEntity,\n                    errors: result.errors,\n                  }),\n                )\n                .catch(error => {\n                  this.logger.debug(\n                    `Processing error listener threw an exception, ${stringifyError(\n                      error,\n                    )}`,\n                  );\n                });\n\n              await this.processingDatabase.transaction(async tx => {\n                await this.processingDatabase.updateProcessedEntityErrors(tx, {\n                  id,\n                  errors: errorsString,\n                  resultHash,\n                });\n              });\n\n              await this.stitcher.stitch({\n                entityRefs: [stringifyEntityRef(unprocessedEntity)],\n              });\n\n              track.markSuccessfulWithErrors();\n              return;\n            }\n\n            result.completedEntity.metadata.uid = id;\n            let oldRelationSources: Map<string, string>;\n            await this.processingDatabase.transaction(async tx => {\n              const { previous } =\n                await this.processingDatabase.updateProcessedEntity(tx, {\n                  id,\n                  processedEntity: result.completedEntity,\n                  resultHash,\n                  errors: errorsString,\n                  relations: result.relations,\n                  deferredEntities: result.deferredEntities,\n                  locationKey,\n                  refreshKeys: result.refreshKeys,\n                });\n              oldRelationSources = new Map(\n                previous.relations.map(r => [\n                  `${r.source_entity_ref}:${r.type}`,\n                  r.source_entity_ref,\n                ]),\n              );\n            });\n\n            const newRelationSources = new Map<string, string>(\n              result.relations.map(relation => {\n                const sourceEntityRef = stringifyEntityRef(relation.source);\n                return [`${sourceEntityRef}:${relation.type}`, sourceEntityRef];\n              }),\n            );\n\n            const setOfThingsToStitch = new Set<string>([\n              stringifyEntityRef(result.completedEntity),\n            ]);\n            newRelationSources.forEach((sourceEntityRef, uniqueKey) => {\n              if (!oldRelationSources.has(uniqueKey)) {\n                setOfThingsToStitch.add(sourceEntityRef);\n              }\n            });\n            oldRelationSources!.forEach((sourceEntityRef, uniqueKey) => {\n              if (!newRelationSources.has(uniqueKey)) {\n                setOfThingsToStitch.add(sourceEntityRef);\n              }\n            });\n\n            await this.stitcher.stitch({\n              entityRefs: setOfThingsToStitch,\n            });\n\n            track.markSuccessfulWithChanges();\n          } catch (error) {\n            assertError(error);\n            track.markFailed(error);\n          }\n        });\n      },\n    });\n  }\n\n  private startOrphanCleanup(): () => void {\n    const orphanStrategy =\n      this.config.getOptionalString('catalog.orphanStrategy') ?? 'keep';\n    if (orphanStrategy !== 'delete') {\n      return () => {};\n    }\n\n    const stitchingStrategy = stitchingStrategyFromConfig(this.config);\n\n    const runOnce = async () => {\n      try {\n        const n = await deleteOrphanedEntities({\n          knex: this.knex,\n          strategy: stitchingStrategy,\n        });\n        if (n > 0) {\n          this.logger.info(`Deleted ${n} orphaned entities`);\n        }\n      } catch (error) {\n        this.logger.warn(`Failed to delete orphaned entities`, error);\n      }\n    };\n\n    if (this.scheduler) {\n      const abortController = new AbortController();\n\n      this.scheduler.scheduleTask({\n        id: 'catalog_orphan_cleanup',\n        frequency: { milliseconds: this.orphanCleanupIntervalMs },\n        timeout: { milliseconds: this.orphanCleanupIntervalMs * 0.8 },\n        fn: runOnce,\n        signal: abortController.signal,\n      });\n\n      return () => {\n        abortController.abort();\n      };\n    }\n\n    const intervalKey = setInterval(runOnce, this.orphanCleanupIntervalMs);\n    return () => {\n      clearInterval(intervalKey);\n    };\n  }\n}\n\n// Helps wrap the timing and logging behaviors\nfunction progressTracker() {\n  // prom-client metrics are deprecated in favour of OpenTelemetry metrics.\n  const promProcessedEntities = createCounterMetric({\n    name: 'catalog_processed_entities_count',\n    help: 'Amount of entities processed, DEPRECATED, use OpenTelemetry metrics instead',\n    labelNames: ['result'],\n  });\n  const promProcessingDuration = createSummaryMetric({\n    name: 'catalog_processing_duration_seconds',\n    help: 'Time spent executing the full processing flow, DEPRECATED, use OpenTelemetry metrics instead',\n    labelNames: ['result'],\n  });\n  const promProcessorsDuration = createSummaryMetric({\n    name: 'catalog_processors_duration_seconds',\n    help: 'Time spent executing catalog processors, DEPRECATED, use OpenTelemetry metrics instead',\n    labelNames: ['result'],\n  });\n  const promProcessingQueueDelay = createSummaryMetric({\n    name: 'catalog_processing_queue_delay_seconds',\n    help: 'The amount of delay between being scheduled for processing, and the start of actually being processed, DEPRECATED, use OpenTelemetry metrics instead',\n  });\n\n  const meter = metrics.getMeter('default');\n  const processedEntities = meter.createCounter(\n    'catalog.processed.entities.count',\n    { description: 'Amount of entities processed' },\n  );\n\n  const processingDuration = meter.createHistogram(\n    'catalog.processing.duration',\n    {\n      description: 'Time spent executing the full processing flow',\n      unit: 'seconds',\n    },\n  );\n\n  const processorsDuration = meter.createHistogram(\n    'catalog.processors.duration',\n    {\n      description: 'Time spent executing catalog processors',\n      unit: 'seconds',\n    },\n  );\n\n  const processingQueueDelay = meter.createHistogram(\n    'catalog.processing.queue.delay',\n    {\n      description:\n        'The amount of delay between being scheduled for processing, and the start of actually being processed',\n      unit: 'seconds',\n    },\n  );\n\n  function processStart(item: RefreshStateItem, logger: LoggerService) {\n    const startTime = process.hrtime();\n    const endOverallTimer = promProcessingDuration.startTimer();\n    const endProcessorsTimer = promProcessorsDuration.startTimer();\n\n    logger.debug(`Processing ${item.entityRef}`);\n\n    if (item.nextUpdateAt) {\n      const seconds = -item.nextUpdateAt.diffNow().as('seconds');\n      promProcessingQueueDelay.observe(seconds);\n      processingQueueDelay.record(seconds);\n    }\n\n    function endTime() {\n      const delta = process.hrtime(startTime);\n      return delta[0] + delta[1] / 1e9;\n    }\n\n    function markProcessorsCompleted(result: EntityProcessingResult) {\n      endProcessorsTimer({ result: result.ok ? 'ok' : 'failed' });\n      processorsDuration.record(endTime(), {\n        result: result.ok ? 'ok' : 'failed',\n      });\n    }\n\n    function markSuccessfulWithNoChanges() {\n      endOverallTimer({ result: 'unchanged' });\n      promProcessedEntities.inc({ result: 'unchanged' }, 1);\n\n      processingDuration.record(endTime(), { result: 'unchanged' });\n      processedEntities.add(1, { result: 'unchanged' });\n    }\n\n    function markSuccessfulWithErrors() {\n      endOverallTimer({ result: 'errors' });\n      promProcessedEntities.inc({ result: 'errors' }, 1);\n\n      processingDuration.record(endTime(), { result: 'errors' });\n      processedEntities.add(1, { result: 'errors' });\n    }\n\n    function markSuccessfulWithChanges() {\n      endOverallTimer({ result: 'changed' });\n      promProcessedEntities.inc({ result: 'changed' }, 1);\n\n      processingDuration.record(endTime(), { result: 'changed' });\n      processedEntities.add(1, { result: 'changed' });\n    }\n\n    function markFailed(error: Error) {\n      promProcessedEntities.inc({ result: 'failed' }, 1);\n      processedEntities.add(1, { result: 'failed' });\n      logger.warn(`Processing of ${item.entityRef} failed`, error);\n    }\n\n    return {\n      markProcessorsCompleted,\n      markSuccessfulWithNoChanges,\n      markSuccessfulWithErrors,\n      markSuccessfulWithChanges,\n      markFailed,\n    };\n  }\n\n  return { processStart };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  stringifyEntityRef,\n  CompoundEntityRef,\n  parseEntityRef,\n} from '@backstage/catalog-model';\nimport { Location } from '@backstage/catalog-client';\nimport { CatalogProcessingOrchestrator } from '../processing/types';\nimport { LocationInput, LocationService, LocationStore } from './types';\nimport { locationSpecToMetadataName } from '../util/conversion';\nimport { InputError } from '@backstage/errors';\nimport { DeferredEntity } from '@backstage/plugin-catalog-node';\n\nexport type DefaultLocationServiceOptions = {\n  allowedLocationTypes: string[];\n};\n\nexport class DefaultLocationService implements LocationService {\n  constructor(\n    private readonly store: LocationStore,\n    private readonly orchestrator: CatalogProcessingOrchestrator,\n    private readonly options: DefaultLocationServiceOptions = {\n      allowedLocationTypes: ['url'],\n    },\n  ) {}\n\n  async createLocation(\n    input: LocationInput,\n    dryRun: boolean,\n  ): Promise<{ location: Location; entities: Entity[]; exists?: boolean }> {\n    if (!this.options.allowedLocationTypes.includes(input.type)) {\n      throw new InputError(\n        `Registered locations must be of an allowed type ${JSON.stringify(\n          this.options.allowedLocationTypes,\n        )}`,\n      );\n    }\n    if (dryRun) {\n      return this.dryRunCreateLocation(input);\n    }\n    const location = await this.store.createLocation(input);\n    return { location, entities: [] };\n  }\n\n  listLocations(): Promise<Location[]> {\n    return this.store.listLocations();\n  }\n  getLocation(id: string): Promise<Location> {\n    return this.store.getLocation(id);\n  }\n  deleteLocation(id: string): Promise<void> {\n    return this.store.deleteLocation(id);\n  }\n\n  getLocationByEntity(\n    entityRef: CompoundEntityRef | string,\n  ): Promise<Location> {\n    return this.store.getLocationByEntity(parseEntityRef(entityRef));\n  }\n\n  private async processEntities(\n    unprocessedEntities: DeferredEntity[],\n  ): Promise<Entity[]> {\n    const entities: Entity[] = [];\n    while (unprocessedEntities.length) {\n      const currentEntity = unprocessedEntities.pop();\n      if (!currentEntity) {\n        continue;\n      }\n      const processed = await this.orchestrator.process({\n        entity: currentEntity.entity,\n        state: {}, // we process without the existing cache\n      });\n\n      if (processed.ok) {\n        if (\n          entities.some(\n            e =>\n              stringifyEntityRef(e) ===\n              stringifyEntityRef(processed.completedEntity),\n          )\n        ) {\n          throw new InputError(\n            `Duplicate nested entity: ${stringifyEntityRef(\n              processed.completedEntity,\n            )}`,\n          );\n        }\n        unprocessedEntities.push(...processed.deferredEntities);\n        entities.push(processed.completedEntity);\n      } else {\n        throw new InputError(processed.errors.map(String).join(', '));\n      }\n    }\n    return entities;\n  }\n\n  private async dryRunCreateLocation(\n    spec: LocationInput,\n  ): Promise<{ location: Location; entities: Entity[]; exists?: boolean }> {\n    // Run the existence check in parallel with the processing\n    const existsPromise = this.store\n      .listLocations()\n      .then(locations =>\n        locations.some(l => l.type === spec.type && l.target === spec.target),\n      );\n\n    const entity = {\n      apiVersion: 'backstage.io/v1alpha1',\n      kind: 'Location',\n      metadata: {\n        name: locationSpecToMetadataName({\n          type: spec.type,\n          target: spec.target,\n        }),\n        namespace: 'default',\n        annotations: {\n          [ANNOTATION_LOCATION]: `${spec.type}:${spec.target}`,\n          [ANNOTATION_ORIGIN_LOCATION]: `${spec.type}:${spec.target}`,\n        },\n      },\n      spec: {\n        type: spec.type,\n        target: spec.target,\n      },\n    };\n    const unprocessedEntities: DeferredEntity[] = [\n      { entity, locationKey: `${spec.type}:${spec.target}` },\n    ];\n    const entities: Entity[] = await this.processEntities(unprocessedEntities);\n\n    return {\n      exists: await existsPromise,\n      location: { ...spec, id: `${spec.type}:${spec.target}` },\n      entities,\n    };\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError, NotAllowedError } from '@backstage/errors';\nimport { Request } from 'express';\nimport lodash from 'lodash';\nimport { z } from 'zod';\nimport {\n  Cursor,\n  QueryEntitiesCursorRequest,\n  QueryEntitiesInitialRequest,\n  QueryEntitiesRequest,\n} from '../catalog/types';\nimport { EntityFilter } from '@backstage/plugin-catalog-node';\n\nexport async function requireRequestBody(req: Request): Promise<unknown> {\n  const contentType = req.header('content-type');\n  if (!contentType) {\n    throw new InputError('Content-Type missing');\n  } else if (!contentType.match(/^application\\/json($|;)/)) {\n    throw new InputError('Illegal Content-Type');\n  }\n\n  const body = req.body;\n  if (!body) {\n    throw new InputError('Missing request body');\n  } else if (!lodash.isPlainObject(body)) {\n    throw new InputError('Expected body to be a JSON object');\n  } else if (Object.keys(body).length === 0) {\n    // Because of how express.json() translates the empty body to {}\n    throw new InputError('Empty request body');\n  }\n\n  return body;\n}\n\nexport const locationInput = z\n  .object({\n    type: z.string(),\n    target: z.string(),\n    presence: z.literal('required').or(z.literal('optional')).optional(),\n  })\n  .strict(); // no unknown keys;\n\nexport async function validateRequestBody<T>(\n  req: Request,\n  schema: z.Schema<T>,\n): Promise<T> {\n  const body = await requireRequestBody(req);\n  try {\n    return await schema.parse(body);\n  } catch (e) {\n    throw new InputError(`Malformed request: ${e}`);\n  }\n}\n\nexport function disallowReadonlyMode(readonly: boolean) {\n  if (readonly) {\n    throw new NotAllowedError('This operation not allowed in readonly mode');\n  }\n}\n\nexport function isQueryEntitiesInitialRequest(\n  input: QueryEntitiesRequest | undefined,\n): input is QueryEntitiesInitialRequest {\n  if (!input) {\n    return false;\n  }\n  return !isQueryEntitiesCursorRequest(input);\n}\n\nexport function isQueryEntitiesCursorRequest(\n  input: QueryEntitiesRequest | undefined,\n): input is QueryEntitiesCursorRequest {\n  if (!input) {\n    return false;\n  }\n  return !!(input as QueryEntitiesCursorRequest).cursor;\n}\n\nconst entityFilterParser: z.ZodSchema<EntityFilter> = z.lazy(() =>\n  z\n    .object({\n      key: z.string(),\n      values: z.array(z.string()).optional(),\n    })\n    .or(z.object({ not: entityFilterParser }))\n    .or(z.object({ anyOf: z.array(entityFilterParser) }))\n    .or(z.object({ allOf: z.array(entityFilterParser) })),\n);\n\nexport const cursorParser: z.ZodSchema<Cursor> = z.object({\n  orderFields: z.array(\n    z.object({ field: z.string(), order: z.enum(['asc', 'desc']) }),\n  ),\n  fullTextFilter: z\n    .object({\n      term: z.string(),\n      fields: z.array(z.string()).optional(),\n    })\n    .optional(),\n  orderFieldValues: z.array(z.string().or(z.null())),\n  filter: entityFilterParser.optional(),\n  isPrevious: z.boolean(),\n  query: z.string().optional(),\n  firstSortFieldValues: z.array(z.string().or(z.null())).optional(),\n  totalItems: z.number().optional(),\n});\n\nexport function encodeCursor(cursor: Cursor) {\n  const json = JSON.stringify(cursor);\n  return Buffer.from(json, 'utf8').toString('base64');\n}\n\nexport function decodeCursor(encodedCursor: string) {\n  try {\n    const data = Buffer.from(encodedCursor, 'base64').toString('utf8');\n    const result = cursorParser.safeParse(JSON.parse(data));\n\n    if (!result.success) {\n      throw new InputError(`Malformed cursor: ${result.error}`);\n    }\n    return result.data;\n  } catch (e) {\n    throw new InputError(`Malformed cursor: ${e}`);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  parseEntityRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { InputError, NotFoundError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport { chunk as lodashChunk, isEqual } from 'lodash';\nimport { z } from 'zod';\nimport {\n  Cursor,\n  EntitiesBatchRequest,\n  EntitiesBatchResponse,\n  EntitiesCatalog,\n  EntitiesRequest,\n  EntitiesResponse,\n  EntityAncestryResponse,\n  EntityFacetsRequest,\n  EntityFacetsResponse,\n  EntityOrder,\n  EntityPagination,\n  QueryEntitiesRequest,\n  QueryEntitiesResponse,\n} from '../catalog/types';\nimport {\n  DbFinalEntitiesRow,\n  DbPageInfo,\n  DbRefreshStateReferencesRow,\n  DbRefreshStateRow,\n  DbRelationsRow,\n  DbSearchRow,\n} from '../database/tables';\nimport { Stitcher } from '../stitching/types';\n\nimport {\n  isQueryEntitiesCursorRequest,\n  isQueryEntitiesInitialRequest,\n} from './util';\nimport {\n  EntitiesSearchFilter,\n  EntityFilter,\n} from '@backstage/plugin-catalog-node';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nconst defaultSortField: EntityOrder = {\n  field: 'metadata.uid',\n  order: 'asc',\n};\n\nconst DEFAULT_LIMIT = 20;\n\nfunction parsePagination(input?: EntityPagination): EntityPagination {\n  if (!input) {\n    return {};\n  }\n\n  let { limit, offset } = input;\n\n  if (input.after === undefined) {\n    return { limit, offset };\n  }\n\n  let cursor;\n  try {\n    const json = Buffer.from(input.after, 'base64').toString('utf8');\n    cursor = JSON.parse(json);\n  } catch {\n    throw new InputError('Malformed after cursor, could not be parsed');\n  }\n\n  if (cursor.limit !== undefined) {\n    if (!Number.isInteger(cursor.limit)) {\n      throw new InputError('Malformed after cursor, limit was not an number');\n    }\n    limit = cursor.limit;\n  }\n\n  if (cursor.offset !== undefined) {\n    if (!Number.isInteger(cursor.offset)) {\n      throw new InputError('Malformed after cursor, offset was not a number');\n    }\n    offset = cursor.offset;\n  }\n\n  return { limit, offset };\n}\n\nfunction stringifyPagination(\n  input: Required<Omit<EntityPagination, 'after'>>,\n): string {\n  const { limit, offset } = input;\n  const json = JSON.stringify({ limit, offset });\n  const base64 = Buffer.from(json, 'utf8').toString('base64');\n  return base64;\n}\n\nfunction addCondition(\n  queryBuilder: Knex.QueryBuilder,\n  db: Knex,\n  filter: EntitiesSearchFilter,\n  negate: boolean = false,\n  entityIdField = 'entity_id',\n): void {\n  const key = filter.key.toLowerCase();\n  const values = filter.values?.map(v => v.toLowerCase());\n\n  // NOTE(freben): This used to be a set of OUTER JOIN, which may seem to\n  // make a lot of sense. However, it had abysmal performance on sqlite\n  // when datasets grew large, so we're using IN instead.\n  const matchQuery = db<DbSearchRow>('search')\n    .select('search.entity_id')\n    .where({ key })\n    .andWhere(function keyFilter() {\n      if (values?.length === 1) {\n        this.where({ value: values.at(0) });\n      } else if (values) {\n        this.andWhere('value', 'in', values);\n      }\n    });\n  queryBuilder.andWhere(entityIdField, negate ? 'not in' : 'in', matchQuery);\n}\n\nfunction isEntitiesSearchFilter(\n  filter: EntitiesSearchFilter | EntityFilter,\n): filter is EntitiesSearchFilter {\n  return filter.hasOwnProperty('key');\n}\n\nfunction isOrEntityFilter(\n  filter: { anyOf: EntityFilter[] } | EntityFilter,\n): filter is { anyOf: EntityFilter[] } {\n  return filter.hasOwnProperty('anyOf');\n}\n\nfunction isNegationEntityFilter(\n  filter: { not: EntityFilter } | EntityFilter,\n): filter is { not: EntityFilter } {\n  return filter.hasOwnProperty('not');\n}\n\nfunction parseFilter(\n  filter: EntityFilter,\n  query: Knex.QueryBuilder,\n  db: Knex,\n  negate: boolean = false,\n  entityIdField = 'entity_id',\n): Knex.QueryBuilder {\n  if (isNegationEntityFilter(filter)) {\n    return parseFilter(filter.not, query, db, !negate, entityIdField);\n  }\n\n  if (isEntitiesSearchFilter(filter)) {\n    return query.andWhere(function filterFunction() {\n      addCondition(this, db, filter, negate, entityIdField);\n    });\n  }\n\n  return query[negate ? 'andWhereNot' : 'andWhere'](function filterFunction() {\n    if (isOrEntityFilter(filter)) {\n      for (const subFilter of filter.anyOf ?? []) {\n        this.orWhere(subQuery =>\n          parseFilter(subFilter, subQuery, db, false, entityIdField),\n        );\n      }\n    } else {\n      for (const subFilter of filter.allOf ?? []) {\n        this.andWhere(subQuery =>\n          parseFilter(subFilter, subQuery, db, false, entityIdField),\n        );\n      }\n    }\n  });\n}\n\nexport class DefaultEntitiesCatalog implements EntitiesCatalog {\n  private readonly database: Knex;\n  private readonly logger: LoggerService;\n  private readonly stitcher: Stitcher;\n\n  constructor(options: {\n    database: Knex;\n    logger: LoggerService;\n    stitcher: Stitcher;\n  }) {\n    this.database = options.database;\n    this.logger = options.logger;\n    this.stitcher = options.stitcher;\n  }\n\n  async entities(request?: EntitiesRequest): Promise<EntitiesResponse> {\n    const db = this.database;\n\n    let entitiesQuery =\n      db<DbFinalEntitiesRow>('final_entities').select('final_entities.*');\n\n    request?.order?.forEach(({ field }, index) => {\n      const alias = `order_${index}`;\n      entitiesQuery = entitiesQuery.leftOuterJoin(\n        { [alias]: 'search' },\n        function search(inner) {\n          inner\n            .on(`${alias}.entity_id`, 'final_entities.entity_id')\n            .andOn(`${alias}.key`, db.raw('?', [field]));\n        },\n      );\n    });\n\n    entitiesQuery = entitiesQuery.whereNotNull('final_entities.final_entity');\n\n    if (request?.filter) {\n      entitiesQuery = parseFilter(\n        request.filter,\n        entitiesQuery,\n        db,\n        false,\n        'final_entities.entity_id',\n      );\n    }\n\n    request?.order?.forEach(({ order }, index) => {\n      if (db.client.config.client === 'pg') {\n        // pg correctly orders by the column value and handling nulls in one go\n        entitiesQuery = entitiesQuery.orderBy([\n          { column: `order_${index}.value`, order, nulls: 'last' },\n        ]);\n      } else {\n        // sqlite and mysql translate the above statement ONLY into \"order by (value is null) asc\"\n        // no matter what the order is, for some reason, so we have to manually add back the statement\n        // that translates to \"order by value <order>\" while avoiding to give an order\n        entitiesQuery = entitiesQuery.orderBy([\n          { column: `order_${index}.value`, order: undefined, nulls: 'last' },\n          { column: `order_${index}.value`, order },\n        ]);\n      }\n    });\n    entitiesQuery = entitiesQuery.orderBy('final_entities.entity_id', 'asc'); // stable sort\n\n    const { limit, offset } = parsePagination(request?.pagination);\n    if (limit !== undefined) {\n      entitiesQuery = entitiesQuery.limit(limit + 1);\n    }\n    if (offset !== undefined) {\n      entitiesQuery = entitiesQuery.offset(offset);\n    }\n\n    let rows = await entitiesQuery;\n    let pageInfo: DbPageInfo;\n    if (limit === undefined || rows.length <= limit) {\n      pageInfo = { hasNextPage: false };\n    } else {\n      rows = rows.slice(0, -1);\n      pageInfo = {\n        hasNextPage: true,\n        endCursor: stringifyPagination({\n          limit,\n          offset: (offset ?? 0) + limit,\n        }),\n      };\n    }\n\n    let entities: Entity[] = rows.map(e => JSON.parse(e.final_entity!));\n\n    if (request?.fields) {\n      entities = entities.map(e => request.fields!(e));\n    }\n\n    // TODO(freben): This is added as a compatibility guarantee, until we can be\n    // sure that all adopters have re-stitched their entities so that the new\n    // targetRef field is present on them, and that they have stopped consuming\n    // the now-removed old field\n    // TODO(jhaals): Remove this in April 2022\n    for (const entity of entities) {\n      if (entity.relations) {\n        for (const relation of entity.relations as any) {\n          if (!relation.targetRef && relation.target) {\n            // This is the case where an old-form entity, not yet stitched with\n            // the updated code, was in the database\n            relation.targetRef = stringifyEntityRef(relation.target);\n          } else if (!relation.target && relation.targetRef) {\n            // This is the case where a new-form entity, stitched with the\n            // updated code, was in the database but we still want to produce\n            // the old data shape as well for compatibility reasons\n            relation.target = parseEntityRef(relation.targetRef);\n          }\n        }\n      }\n    }\n\n    return {\n      entities,\n      pageInfo,\n    };\n  }\n\n  async entitiesBatch(\n    request: EntitiesBatchRequest,\n  ): Promise<EntitiesBatchResponse> {\n    const lookup = new Map<string, Entity>();\n\n    for (const chunk of lodashChunk(request.entityRefs, 200)) {\n      let query = this.database<DbFinalEntitiesRow>('final_entities')\n        .innerJoin<DbRefreshStateRow>(\n          'refresh_state',\n          'refresh_state.entity_id',\n          'final_entities.entity_id',\n        )\n        .select({\n          entityRef: 'refresh_state.entity_ref',\n          entity: 'final_entities.final_entity',\n        })\n        .whereIn('refresh_state.entity_ref', chunk);\n\n      if (request?.filter) {\n        query = parseFilter(\n          request.filter,\n          query,\n          this.database,\n          false,\n          'refresh_state.entity_id',\n        );\n      }\n\n      for (const row of await query) {\n        lookup.set(row.entityRef, row.entity ? JSON.parse(row.entity) : null);\n      }\n    }\n\n    let items = request.entityRefs.map(ref => lookup.get(ref) ?? null);\n\n    if (request.fields) {\n      items = items.map(e => e && request.fields!(e));\n    }\n\n    return { items };\n  }\n\n  async queryEntities(\n    request: QueryEntitiesRequest,\n  ): Promise<QueryEntitiesResponse> {\n    const db = this.database;\n\n    const limit = request.limit ?? DEFAULT_LIMIT;\n\n    const cursor: Omit<Cursor, 'orderFieldValues'> & {\n      orderFieldValues?: (string | null)[];\n    } = {\n      orderFields: [defaultSortField],\n      isPrevious: false,\n      ...parseCursorFromRequest(request),\n    };\n\n    const isFetchingBackwards = cursor.isPrevious;\n\n    if (cursor.orderFields.length > 1) {\n      this.logger.warn(`Only one sort field is supported, ignoring the rest`);\n    }\n\n    const sortField: EntityOrder = {\n      ...defaultSortField,\n      ...cursor.orderFields[0],\n    };\n\n    const [prevItemOrderFieldValue, prevItemUid] =\n      cursor.orderFieldValues || [];\n\n    const dbQuery = db('search')\n      .join('final_entities', 'search.entity_id', 'final_entities.entity_id')\n      .where('search.key', sortField.field);\n\n    if (cursor.filter) {\n      parseFilter(cursor.filter, dbQuery, db, false, 'search.entity_id');\n    }\n\n    const normalizedFullTextFilterTerm = cursor.fullTextFilter?.term?.trim();\n    const textFilterFields = cursor.fullTextFilter?.fields ?? [sortField.field];\n    if (normalizedFullTextFilterTerm) {\n      if (\n        textFilterFields.length === 1 &&\n        textFilterFields[0] === sortField.field\n      ) {\n        // If there is one item, apply the like query to the top level query which is already\n        //   filtered based on the singular sortField.\n        dbQuery.andWhereRaw(\n          'value like ?',\n          `%${normalizedFullTextFilterTerm.toLocaleLowerCase('en-US')}%`,\n        );\n      } else {\n        const matchQuery = db<DbSearchRow>('search')\n          .select('search.entity_id')\n          .whereIn('key', textFilterFields)\n          .andWhere(function keyFilter() {\n            this.andWhereRaw(\n              'value like ?',\n              `%${normalizedFullTextFilterTerm.toLocaleLowerCase('en-US')}%`,\n            );\n          });\n        dbQuery.andWhere('search.entity_id', 'in', matchQuery);\n      }\n    }\n\n    const countQuery = dbQuery.clone();\n\n    const isOrderingDescending = sortField.order === 'desc';\n\n    if (prevItemOrderFieldValue) {\n      dbQuery.andWhere(function nested() {\n        this.where(\n          'value',\n          isFetchingBackwards !== isOrderingDescending ? '<' : '>',\n          prevItemOrderFieldValue,\n        )\n          .orWhere('value', '=', prevItemOrderFieldValue)\n          .andWhere(\n            'search.entity_id',\n            isFetchingBackwards !== isOrderingDescending ? '<' : '>',\n            prevItemUid,\n          );\n      });\n    }\n\n    dbQuery\n      .orderBy([\n        {\n          column: 'value',\n          order: isFetchingBackwards\n            ? invertOrder(sortField.order)\n            : sortField.order,\n        },\n        {\n          column: 'search.entity_id',\n          order: isFetchingBackwards\n            ? invertOrder(sortField.order)\n            : sortField.order,\n        },\n      ])\n      // fetch an extra item to check if there are more items.\n      .limit(isFetchingBackwards ? limit : limit + 1);\n\n    countQuery.count('search.entity_id', { as: 'count' });\n\n    const [rows, [{ count }]] = await Promise.all([\n      limit > 0 ? dbQuery : [],\n      // for performance reasons we invoke the countQuery\n      // only on the first request.\n      // The result is then embedded into the cursor\n      // for subsequent requests.\n      typeof cursor.totalItems === 'undefined'\n        ? countQuery\n        : [{ count: cursor.totalItems }],\n    ]);\n\n    const totalItems = Number(count);\n\n    if (isFetchingBackwards) {\n      rows.reverse();\n    }\n    const hasMoreResults =\n      limit > 0 && (isFetchingBackwards || rows.length > limit);\n\n    // discard the extra item only when fetching forward.\n    if (rows.length > limit) {\n      rows.length -= 1;\n    }\n\n    const isInitialRequest = cursor.firstSortFieldValues === undefined;\n\n    const firstRow = rows[0];\n    const lastRow = rows[rows.length - 1];\n\n    const firstSortFieldValues = cursor.firstSortFieldValues || [\n      firstRow?.value,\n      firstRow?.entity_id,\n    ];\n\n    const nextCursor: Cursor | undefined = hasMoreResults\n      ? {\n          ...cursor,\n          orderFieldValues: sortFieldsFromRow(lastRow),\n          firstSortFieldValues,\n          isPrevious: false,\n          totalItems,\n        }\n      : undefined;\n\n    const prevCursor: Cursor | undefined =\n      !isInitialRequest &&\n      rows.length > 0 &&\n      !isEqual(sortFieldsFromRow(firstRow), cursor.firstSortFieldValues)\n        ? {\n            ...cursor,\n            orderFieldValues: sortFieldsFromRow(firstRow),\n            firstSortFieldValues: cursor.firstSortFieldValues,\n            isPrevious: true,\n            totalItems,\n          }\n        : undefined;\n\n    const items = rows\n      .map(e => JSON.parse(e.final_entity!))\n      .map(e => (request.fields ? request.fields(e) : e));\n\n    return {\n      items,\n      pageInfo: {\n        ...(!!prevCursor && { prevCursor }),\n        ...(!!nextCursor && { nextCursor }),\n      },\n      totalItems,\n    };\n  }\n\n  async removeEntityByUid(uid: string): Promise<void> {\n    const dbConfig = this.database.client.config;\n\n    // Clear the hashed state of the immediate parents of the deleted entity.\n    // This makes sure that when they get reprocessed, their output is written\n    // down again. The reason for wanting to do this, is that if the user\n    // deletes entities that ARE still emitted by the parent, the parent\n    // processing will still generate the same output hash as always, which\n    // means it'll never try to write down the children again (it assumes that\n    // they already exist). This means that without the code below, the database\n    // never \"heals\" from accidental deletes.\n    if (dbConfig.client.includes('mysql')) {\n      // MySQL doesn't support the syntax we need to do this in a single query,\n      // http://dev.mysql.com/doc/refman/5.6/en/update.html\n      const results = await this.database<DbRefreshStateRow>('refresh_state')\n        .select('entity_id')\n        .whereIn('entity_ref', function parents(builder) {\n          return builder\n            .from<DbRefreshStateRow>('refresh_state')\n            .innerJoin<DbRefreshStateReferencesRow>(\n              'refresh_state_references',\n              {\n                'refresh_state_references.target_entity_ref':\n                  'refresh_state.entity_ref',\n              },\n            )\n            .where('refresh_state.entity_id', '=', uid)\n            .select('refresh_state_references.source_entity_ref');\n        });\n      await this.database<DbRefreshStateRow>('refresh_state')\n        .update({\n          result_hash: 'child-was-deleted',\n          next_update_at: this.database.fn.now(),\n        })\n        .whereIn(\n          'entity_id',\n          results.map(key => key.entity_id),\n        );\n    } else {\n      await this.database<DbRefreshStateRow>('refresh_state')\n        .update({\n          result_hash: 'child-was-deleted',\n          next_update_at: this.database.fn.now(),\n        })\n        .whereIn('entity_ref', function parents(builder) {\n          return builder\n            .from<DbRefreshStateRow>('refresh_state')\n            .innerJoin<DbRefreshStateReferencesRow>(\n              'refresh_state_references',\n              {\n                'refresh_state_references.target_entity_ref':\n                  'refresh_state.entity_ref',\n              },\n            )\n            .where('refresh_state.entity_id', '=', uid)\n            .select('refresh_state_references.source_entity_ref');\n        });\n    }\n\n    // Stitch the entities that the deleted one had relations to. If we do not\n    // do this, the entities in the other end of the relations will still look\n    // like they have a relation to the entity that was deleted, despite not\n    // having any corresponding rows in the relations table.\n    const relationPeers = await this.database\n      .from<DbRelationsRow>('relations')\n      .innerJoin<DbRefreshStateReferencesRow>('refresh_state', {\n        'refresh_state.entity_ref': 'relations.target_entity_ref',\n      })\n      .where('relations.originating_entity_id', '=', uid)\n      .andWhere('refresh_state.entity_id', '!=', uid)\n      .select({ ref: 'relations.target_entity_ref' })\n      .union(other =>\n        other\n          .from<DbRelationsRow>('relations')\n          .innerJoin<DbRefreshStateReferencesRow>('refresh_state', {\n            'refresh_state.entity_ref': 'relations.source_entity_ref',\n          })\n          .where('relations.originating_entity_id', '=', uid)\n          .andWhere('refresh_state.entity_id', '!=', uid)\n          .select({ ref: 'relations.source_entity_ref' }),\n      );\n\n    await this.database<DbRefreshStateRow>('refresh_state')\n      .where('entity_id', uid)\n      .delete();\n\n    await this.stitcher.stitch({\n      entityRefs: new Set(relationPeers.map(p => p.ref)),\n    });\n  }\n\n  async entityAncestry(rootRef: string): Promise<EntityAncestryResponse> {\n    const [rootRow] = await this.database<DbRefreshStateRow>('refresh_state')\n      .leftJoin<DbFinalEntitiesRow>('final_entities', {\n        'refresh_state.entity_id': 'final_entities.entity_id',\n      })\n      .where('refresh_state.entity_ref', '=', rootRef)\n      .select({\n        entityJson: 'final_entities.final_entity',\n      });\n\n    if (!rootRow) {\n      throw new NotFoundError(`No such entity ${rootRef}`);\n    }\n\n    const rootEntity = JSON.parse(rootRow.entityJson) as Entity;\n    const seenEntityRefs = new Set<string>();\n    const todo = new Array<Entity>();\n    const items = new Array<{ entity: Entity; parentEntityRefs: string[] }>();\n\n    for (\n      let current: Entity | undefined = rootEntity;\n      current;\n      current = todo.pop()\n    ) {\n      const currentRef = stringifyEntityRef(current);\n      seenEntityRefs.add(currentRef);\n\n      const parentRows = await this.database<DbRefreshStateReferencesRow>(\n        'refresh_state_references',\n      )\n        .innerJoin<DbRefreshStateRow>('refresh_state', {\n          'refresh_state_references.source_entity_ref':\n            'refresh_state.entity_ref',\n        })\n        .innerJoin<DbFinalEntitiesRow>('final_entities', {\n          'refresh_state.entity_id': 'final_entities.entity_id',\n        })\n        .where('refresh_state_references.target_entity_ref', '=', currentRef)\n        .select({\n          parentEntityRef: 'refresh_state.entity_ref',\n          parentEntityJson: 'final_entities.final_entity',\n        });\n\n      const parentRefs: string[] = [];\n      for (const { parentEntityRef, parentEntityJson } of parentRows) {\n        parentRefs.push(parentEntityRef);\n        if (!seenEntityRefs.has(parentEntityRef)) {\n          seenEntityRefs.add(parentEntityRef);\n          todo.push(JSON.parse(parentEntityJson));\n        }\n      }\n\n      items.push({\n        entity: current,\n        parentEntityRefs: parentRefs,\n      });\n    }\n\n    return {\n      rootEntityRef: stringifyEntityRef(rootEntity),\n      items,\n    };\n  }\n\n  async facets(request: EntityFacetsRequest): Promise<EntityFacetsResponse> {\n    const facets: EntityFacetsResponse['facets'] = {};\n    const db = this.database;\n\n    for (const facet of request.facets) {\n      const dbQuery = db<DbSearchRow>('search')\n        .where('search.key', facet.toLocaleLowerCase('en-US'))\n        .whereNotNull('search.original_value')\n        .select({ value: 'search.original_value', count: db.raw('count(*)') })\n        .groupBy('search.original_value');\n\n      if (request?.filter) {\n        parseFilter(request.filter, dbQuery, db, false, 'search.entity_id');\n      }\n\n      const result = await dbQuery;\n\n      facets[facet] = result.map(data => ({\n        value: String(data.value),\n        count: Number(data.count),\n      }));\n    }\n\n    return { facets };\n  }\n}\n\nconst entityFilterParser: z.ZodSchema<EntityFilter> = z.lazy(() =>\n  z\n    .object({\n      key: z.string(),\n      values: z.array(z.string()).optional(),\n    })\n    .or(z.object({ not: entityFilterParser }))\n    .or(z.object({ anyOf: z.array(entityFilterParser) }))\n    .or(z.object({ allOf: z.array(entityFilterParser) })),\n);\n\nexport const cursorParser: z.ZodSchema<Cursor> = z.object({\n  orderFields: z.array(\n    z.object({ field: z.string(), order: z.enum(['asc', 'desc']) }),\n  ),\n  orderFieldValues: z.array(z.string().or(z.null())),\n  filter: entityFilterParser.optional(),\n  isPrevious: z.boolean(),\n  query: z.string().optional(),\n  firstSortFieldValues: z.array(z.string().or(z.null())).optional(),\n  totalItems: z.number().optional(),\n});\n\nfunction parseCursorFromRequest(\n  request?: QueryEntitiesRequest,\n): Partial<Cursor> {\n  if (isQueryEntitiesInitialRequest(request)) {\n    const {\n      filter,\n      orderFields: sortFields = [defaultSortField],\n      fullTextFilter,\n    } = request;\n    return { filter, orderFields: sortFields, fullTextFilter };\n  }\n  if (isQueryEntitiesCursorRequest(request)) {\n    return request.cursor;\n  }\n  return {};\n}\n\nfunction invertOrder(order: EntityOrder['order']) {\n  return order === 'asc' ? 'desc' : 'asc';\n}\n\nfunction sortFieldsFromRow(row: DbSearchRow) {\n  return [row.value, row.entity_id];\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  Entity,\n  stringifyEntityRef,\n  stringifyLocationRef,\n} from '@backstage/catalog-model';\nimport { assertError } from '@backstage/errors';\nimport {\n  CatalogProcessor,\n  CatalogProcessorResult,\n  DeferredEntity,\n  EntityRelationSpec,\n} from '@backstage/plugin-catalog-node';\nimport { locationSpecToLocationEntity } from '../util/conversion';\nimport {\n  getEntityLocationRef,\n  getEntityOriginLocationRef,\n  validateEntityEnvelope,\n} from './util';\nimport { RefreshKeyData } from './types';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\n/**\n * Helper class for aggregating all of the emitted data from processors.\n */\nexport class ProcessorOutputCollector {\n  private readonly errors = new Array<Error>();\n  private readonly relations = new Array<EntityRelationSpec>();\n  private readonly deferredEntities = new Array<DeferredEntity>();\n  private readonly refreshKeys = new Array<RefreshKeyData>();\n  private done = false;\n\n  constructor(\n    private readonly logger: LoggerService,\n    private readonly parentEntity: Entity,\n  ) {}\n\n  generic(): (i: CatalogProcessorResult) => void {\n    return i => this.receive(this.logger, i);\n  }\n\n  forProcessor(\n    processor: CatalogProcessor,\n  ): (i: CatalogProcessorResult) => void {\n    const logger = this.logger.child({\n      processor: processor.getProcessorName(),\n    });\n    return i => this.receive(logger, i);\n  }\n\n  results() {\n    this.done = true;\n    return {\n      errors: this.errors,\n      relations: this.relations,\n      refreshKeys: this.refreshKeys,\n      deferredEntities: this.deferredEntities,\n    };\n  }\n\n  private receive(logger: LoggerService, i: CatalogProcessorResult) {\n    if (this.done) {\n      logger.warn(\n        `Item of type \"${\n          i.type\n        }\" was emitted after processing had completed. Stack trace: ${\n          new Error().stack\n        }`,\n      );\n      return;\n    }\n\n    if (i.type === 'entity') {\n      let entity: Entity;\n      const location = stringifyLocationRef(i.location);\n\n      try {\n        entity = validateEntityEnvelope(i.entity);\n      } catch (e) {\n        assertError(e);\n        logger.debug(`Envelope validation failed at ${location}, ${e}`);\n        this.errors.push(e);\n        return;\n      }\n\n      // The processor contract says you should return the \"trunk\" (current)\n      // entity, not emit it. But it happens that this is misunderstood or\n      // accidentally forgotten. This can lead to circular references which at\n      // best is wasteful, so we try to be helpful by ignoring such emitted\n      // entities.\n      const entityRef = stringifyEntityRef(entity);\n      if (entityRef === stringifyEntityRef(this.parentEntity)) {\n        logger.warn(\n          `Ignored emitted entity ${entityRef} whose ref was identical to the one being processed. This commonly indicates mistakenly emitting the input entity instead of returning it.`,\n        );\n        return;\n      }\n\n      // Note that at this point, we have only validated the envelope part of\n      // the entity data. Annotations are not part of that, so we have to be\n      // defensive. If the annotations were malformed (e.g. were not a valid\n      // object), we just skip over this step and let the full entity\n      // validation at the next step of processing catch that.\n      const annotations = entity.metadata.annotations || {};\n      if (typeof annotations === 'object' && !Array.isArray(annotations)) {\n        const originLocation = getEntityOriginLocationRef(this.parentEntity);\n        entity = {\n          ...entity,\n          metadata: {\n            ...entity.metadata,\n            annotations: {\n              ...annotations,\n              [ANNOTATION_ORIGIN_LOCATION]: originLocation,\n              [ANNOTATION_LOCATION]: location,\n            },\n          },\n        };\n      }\n\n      this.deferredEntities.push({ entity, locationKey: location });\n    } else if (i.type === 'location') {\n      const entity = locationSpecToLocationEntity({\n        location: i.location,\n        parentEntity: this.parentEntity,\n      });\n      const locationKey = getEntityLocationRef(entity);\n      this.deferredEntities.push({ entity, locationKey });\n    } else if (i.type === 'relation') {\n      this.relations.push(i.relation);\n    } else if (i.type === 'error') {\n      this.errors.push(i.error);\n    } else if (i.type === 'refresh') {\n      this.refreshKeys.push({ key: i.key });\n    }\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { JsonObject, JsonValue } from '@backstage/types';\nimport {\n  CatalogProcessor,\n  CatalogProcessorCache,\n} from '@backstage/plugin-catalog-node';\nimport { isObject } from './util';\n\nclass SingleProcessorSubCache implements CatalogProcessorCache {\n  private newState?: JsonObject;\n\n  constructor(private readonly existingState?: JsonObject) {}\n\n  async get<ItemType extends JsonValue>(\n    key: string,\n  ): Promise<ItemType | undefined> {\n    return this.existingState?.[key] as ItemType | undefined;\n  }\n\n  async set<ItemType extends JsonValue>(\n    key: string,\n    value: ItemType,\n  ): Promise<void> {\n    if (!this.newState) {\n      this.newState = {};\n    }\n\n    this.newState[key] = value;\n  }\n\n  collect(): JsonObject | undefined {\n    return this.newState ?? this.existingState;\n  }\n}\n\nclass SingleProcessorCache implements CatalogProcessorCache {\n  private newState?: JsonObject;\n  private subCaches: Map<string, SingleProcessorSubCache> = new Map();\n\n  constructor(private readonly existingState?: JsonObject) {}\n\n  async get<ItemType extends JsonValue>(\n    key: string,\n  ): Promise<ItemType | undefined> {\n    return this.existingState?.[key] as ItemType | undefined;\n  }\n\n  async set<ItemType extends JsonValue>(\n    key: string,\n    value: ItemType,\n  ): Promise<void> {\n    if (!this.newState) {\n      this.newState = {};\n    }\n\n    this.newState[key] = value;\n  }\n\n  withKey(key: string) {\n    const existingSubCache = this.subCaches.get(key);\n    if (existingSubCache) {\n      return existingSubCache;\n    }\n    const existing = this.existingState?.[key];\n    const subCache = new SingleProcessorSubCache(\n      isObject(existing) ? existing : undefined,\n    );\n    this.subCaches.set(key, subCache);\n    return subCache;\n  }\n\n  collect(): JsonObject | undefined {\n    let obj = this.newState ?? this.existingState;\n    for (const [key, subCache] of this.subCaches) {\n      const subCacheValue = subCache.collect();\n      if (subCacheValue) {\n        obj = { ...obj, [key]: subCacheValue };\n      }\n    }\n    return obj;\n  }\n}\n\nexport class ProcessorCacheManager {\n  private caches = new Map<string, SingleProcessorCache>();\n\n  constructor(private readonly existingState: JsonObject) {}\n\n  forProcessor(\n    processor: CatalogProcessor,\n    key?: string,\n  ): CatalogProcessorCache {\n    // constructor name will be deprecated in the future when we make `getProcessorName` required in the implementation\n    const name = processor.getProcessorName();\n    const cache = this.caches.get(name);\n    if (cache) {\n      return key ? cache.withKey(key) : cache;\n    }\n\n    const existing = this.existingState[name];\n\n    const newCache = new SingleProcessorCache(\n      isObject(existing) ? existing : undefined,\n    );\n    this.caches.set(name, newCache);\n    return key ? newCache.withKey(key) : newCache;\n  }\n\n  collect(): JsonObject {\n    const result: JsonObject = {};\n    for (const [key, value] of this.caches.entries()) {\n      result[key] = value.collect();\n    }\n\n    return result;\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Span, trace } from '@opentelemetry/api';\nimport {\n  Entity,\n  EntityPolicy,\n  LocationEntity,\n  parseLocationRef,\n  stringifyEntityRef,\n  stringifyLocationRef,\n} from '@backstage/catalog-model';\nimport {\n  assertError,\n  ConflictError,\n  InputError,\n  NotAllowedError,\n} from '@backstage/errors';\nimport { JsonValue } from '@backstage/types';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport path from 'path';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport {\n  CatalogProcessor,\n  CatalogProcessorParser,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\nimport {\n  CatalogProcessingOrchestrator,\n  EntityProcessingRequest,\n  EntityProcessingResult,\n} from './types';\nimport { ProcessorOutputCollector } from './ProcessorOutputCollector';\nimport {\n  getEntityLocationRef,\n  getEntityOriginLocationRef,\n  isLocationEntity,\n  isObject,\n  toAbsoluteUrl,\n  validateEntity,\n  validateEntityEnvelope,\n} from './util';\nimport { CatalogRulesEnforcer } from '../ingestion/CatalogRules';\nimport { ProcessorCacheManager } from './ProcessorCacheManager';\nimport {\n  addEntityAttributes,\n  TRACER_ID,\n  withActiveSpan,\n} from '../util/opentelemetry';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nconst tracer = trace.getTracer(TRACER_ID);\n\ntype Context = {\n  entityRef: string;\n  location: LocationSpec;\n  originLocation: LocationSpec;\n  collector: ProcessorOutputCollector;\n  cache: ProcessorCacheManager;\n};\n\nfunction addProcessorAttributes(\n  span: Span,\n  stage: string,\n  processor: CatalogProcessor,\n) {\n  span.setAttribute('backstage.catalog.processor.stage', stage);\n  span.setAttribute(\n    'backstage.catalog.processor.name',\n    processor.getProcessorName(),\n  );\n}\n\n/** @public */\nexport class DefaultCatalogProcessingOrchestrator\n  implements CatalogProcessingOrchestrator\n{\n  constructor(\n    private readonly options: {\n      processors: CatalogProcessor[];\n      integrations: ScmIntegrationRegistry;\n      logger: LoggerService;\n      parser: CatalogProcessorParser;\n      policy: EntityPolicy;\n      rulesEnforcer: CatalogRulesEnforcer;\n      legacySingleProcessorValidation: boolean;\n    },\n  ) {}\n\n  async process(\n    request: EntityProcessingRequest,\n  ): Promise<EntityProcessingResult> {\n    return this.processSingleEntity(request.entity, request.state);\n  }\n\n  private async processSingleEntity(\n    unprocessedEntity: Entity,\n    state: JsonValue | undefined,\n  ): Promise<EntityProcessingResult> {\n    const collector = new ProcessorOutputCollector(\n      this.options.logger,\n      unprocessedEntity,\n    );\n\n    // Cache that is scoped to the entity and processor\n    const cache = new ProcessorCacheManager(\n      isObject(state) && isObject(state.cache) ? state.cache : {},\n    );\n\n    try {\n      // This will be checked and mutated step by step below\n      let entity: Entity = unprocessedEntity;\n\n      // NOTE: At this early point, we can only rely on the envelope having to\n      // be valid; full entity + kind validation happens after the (potentially\n      // mutative) pre-steps. This means that the code below can't make a lot\n      // of assumptions about the data despite it using the Entity type.\n      try {\n        validateEntityEnvelope(entity);\n      } catch (e) {\n        throw new InputError(\n          `Entity envelope failed validation before processing`,\n          e,\n        );\n      }\n\n      // TODO: which one do we actually use for the location?\n      // source-location? - maybe probably doesn't exist yet?\n      const context: Context = {\n        entityRef: stringifyEntityRef(entity),\n        location: parseLocationRef(getEntityLocationRef(entity)),\n        originLocation: parseLocationRef(getEntityOriginLocationRef(entity)),\n        cache,\n        collector,\n      };\n\n      // Run the steps\n      entity = await this.runPreProcessStep(entity, context);\n      entity = await this.runPolicyStep(entity);\n      await this.runValidateStep(entity, context);\n      if (isLocationEntity(entity)) {\n        await this.runSpecialLocationStep(entity, context);\n      }\n      entity = await this.runPostProcessStep(entity, context);\n\n      // Check that any emitted entities are permitted to originate from that\n      // particular location according to the catalog rules\n      const collectorResults = context.collector.results();\n      for (const deferredEntity of collectorResults.deferredEntities) {\n        if (\n          !this.options.rulesEnforcer.isAllowed(\n            deferredEntity.entity,\n            context.originLocation,\n          )\n        ) {\n          throw new NotAllowedError(\n            `Entity ${stringifyEntityRef(\n              deferredEntity.entity,\n            )} at ${stringifyLocationRef(\n              context.location,\n            )}, originated at ${stringifyLocationRef(\n              context.originLocation,\n            )}, is not of an allowed kind for that location`,\n          );\n        }\n      }\n\n      return {\n        ...collectorResults,\n        completedEntity: entity,\n        state: { cache: cache.collect() },\n        ok: collectorResults.errors.length === 0,\n      };\n    } catch (error) {\n      assertError(error);\n      return {\n        ok: false,\n        errors: collector.results().errors.concat(error),\n      };\n    }\n  }\n\n  // Pre-process phase, used to populate entities with data that is required\n  // during the main processing step\n  private async runPreProcessStep(\n    entity: Entity,\n    context: Context,\n  ): Promise<Entity> {\n    return await withActiveSpan(tracer, 'ProcessingStage', async stageSpan => {\n      addEntityAttributes(stageSpan, entity);\n      stageSpan.setAttribute('backstage.catalog.processor.stage', 'preProcess');\n      let res = entity;\n\n      for (const processor of this.options.processors) {\n        if (processor.preProcessEntity) {\n          let innerRes = res;\n          res = await withActiveSpan(tracer, 'ProcessingStep', async span => {\n            addEntityAttributes(span, entity);\n            addProcessorAttributes(span, 'preProcessEntity', processor);\n            try {\n              innerRes = await processor.preProcessEntity!(\n                innerRes,\n                context.location,\n                context.collector.forProcessor(processor),\n                context.originLocation,\n                context.cache.forProcessor(processor),\n              );\n            } catch (e) {\n              throw new InputError(\n                `Processor ${processor.constructor.name} threw an error while preprocessing`,\n                e,\n              );\n            }\n            return innerRes;\n          });\n        }\n      }\n\n      return res;\n    });\n  }\n\n  /**\n   * Enforce entity policies making sure that entities conform to a general schema\n   */\n  private async runPolicyStep(entity: Entity): Promise<Entity> {\n    return await withActiveSpan(tracer, 'ProcessingStage', async stageSpan => {\n      addEntityAttributes(stageSpan, entity);\n      stageSpan.setAttribute(\n        'backstage.catalog.processor.stage',\n        'enforcePolicy',\n      );\n      let policyEnforcedEntity: Entity | undefined;\n\n      try {\n        policyEnforcedEntity = await this.options.policy.enforce(entity);\n      } catch (e) {\n        throw new InputError(\n          `Policy check failed for ${stringifyEntityRef(entity)}`,\n          e,\n        );\n      }\n\n      if (!policyEnforcedEntity) {\n        throw new Error(\n          `Policy unexpectedly returned no data for ${stringifyEntityRef(\n            entity,\n          )}`,\n        );\n      }\n\n      return policyEnforcedEntity;\n    });\n  }\n\n  /**\n   * Validate the given entity\n   */\n  private async runValidateStep(\n    entity: Entity,\n    context: Context,\n  ): Promise<void> {\n    return await withActiveSpan(tracer, 'ProcessingStage', async stageSpan => {\n      addEntityAttributes(stageSpan, entity);\n      stageSpan.setAttribute('backstage.catalog.processor.stage', 'validate');\n      // Double check that none of the previous steps tried to change something\n      // related to the entity ref, which would break downstream\n      if (stringifyEntityRef(entity) !== context.entityRef) {\n        throw new ConflictError(\n          'Fatal: The entity kind, namespace, or name changed during processing',\n        );\n      }\n\n      // Validate that the end result is a valid Entity at all\n      try {\n        validateEntity(entity);\n      } catch (e) {\n        throw new ConflictError(\n          `Entity envelope for ${context.entityRef} failed validation after preprocessing`,\n          e,\n        );\n      }\n\n      let valid = false;\n\n      for (const processor of this.options.processors) {\n        if (processor.validateEntityKind) {\n          try {\n            const thisValid = await withActiveSpan(\n              tracer,\n              'ProcessingStep',\n              async span => {\n                addEntityAttributes(span, entity);\n                addProcessorAttributes(span, 'validateEntityKind', processor);\n                return await processor.validateEntityKind!(entity);\n              },\n            );\n            if (thisValid) {\n              valid = true;\n              if (this.options.legacySingleProcessorValidation) {\n                break;\n              }\n            }\n          } catch (e) {\n            throw new InputError(\n              `Processor ${processor.constructor.name} threw an error while validating the entity ${context.entityRef}`,\n              e,\n            );\n          }\n        }\n      }\n\n      if (!valid) {\n        throw new InputError(\n          `No processor recognized the entity ${context.entityRef} as valid, possibly caused by a foreign kind or apiVersion`,\n        );\n      }\n    });\n  }\n\n  /**\n   * Backwards compatible processing of location entities\n   */\n  private async runSpecialLocationStep(\n    entity: LocationEntity,\n    context: Context,\n  ): Promise<void> {\n    return await withActiveSpan(tracer, 'ProcessingStage', async stageSpan => {\n      addEntityAttributes(stageSpan, entity);\n      stageSpan.setAttribute(\n        'backstage.catalog.processor.stage',\n        'readLocation',\n      );\n      const { type = context.location.type, presence = 'required' } =\n        entity.spec;\n      const targets = new Array<string>();\n      if (entity.spec.target) {\n        targets.push(entity.spec.target);\n      }\n      if (entity.spec.targets) {\n        targets.push(...entity.spec.targets);\n      }\n\n      for (const maybeRelativeTarget of targets) {\n        if (type === 'file' && maybeRelativeTarget.endsWith(path.sep)) {\n          context.collector.generic()(\n            processingResult.inputError(\n              context.location,\n              `LocationEntityProcessor cannot handle ${type} type location with target ${context.location.target} that ends with a path separator`,\n            ),\n          );\n          continue;\n        }\n        const target = toAbsoluteUrl(\n          this.options.integrations,\n          context.location,\n          type,\n          maybeRelativeTarget,\n        );\n\n        let didRead = false;\n        for (const processor of this.options.processors) {\n          if (processor.readLocation) {\n            try {\n              const read = await withActiveSpan(\n                tracer,\n                'ProcessingStep',\n                async span => {\n                  addEntityAttributes(span, entity);\n                  addProcessorAttributes(span, 'readLocation', processor);\n                  return await processor.readLocation!(\n                    {\n                      type,\n                      target,\n                      presence,\n                    },\n                    presence === 'optional',\n                    context.collector.forProcessor(processor),\n                    this.options.parser,\n                    context.cache.forProcessor(processor, target),\n                  );\n                },\n              );\n              if (read) {\n                didRead = true;\n                break;\n              }\n            } catch (e) {\n              throw new InputError(\n                `Processor ${processor.constructor.name} threw an error while reading ${type}:${target}`,\n                e,\n              );\n            }\n          }\n        }\n        if (!didRead) {\n          throw new InputError(\n            `No processor was able to handle reading of ${type}:${target}`,\n          );\n        }\n      }\n    });\n  }\n\n  /**\n   * Main processing step of the entity\n   */\n  private async runPostProcessStep(\n    entity: Entity,\n    context: Context,\n  ): Promise<Entity> {\n    return await withActiveSpan(tracer, 'ProcessingStage', async stageSpan => {\n      addEntityAttributes(stageSpan, entity);\n      stageSpan.setAttribute(\n        'backstage.catalog.processor.stage',\n        'postProcessEntity',\n      );\n      let res = entity;\n\n      for (const processor of this.options.processors) {\n        if (processor.postProcessEntity) {\n          let innerRes = res;\n          res = await withActiveSpan(tracer, 'ProcessingStep', async span => {\n            addEntityAttributes(span, entity);\n            addProcessorAttributes(span, 'postProcessEntity', processor);\n            try {\n              innerRes = await processor.postProcessEntity!(\n                innerRes,\n                context.location,\n                context.collector.forProcessor(processor),\n                context.cache.forProcessor(processor),\n              );\n            } catch (e) {\n              throw new InputError(\n                `Processor ${processor.constructor.name} threw an error while postprocessing`,\n                e,\n              );\n            }\n            return innerRes;\n          });\n        }\n      }\n\n      return res;\n    });\n  }\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { durationToMilliseconds, HumanDuration } from '@backstage/types';\nimport { Knex } from 'knex';\nimport { DateTime } from 'luxon';\nimport { timestampToDateTime } from '../../conversion';\nimport { DbRefreshStateRow } from '../../tables';\n\n// TODO(freben): There is no retry counter or similar. If items start\n// perpetually crashing during stitching, they'll just get silently retried over\n// and over again, for better or worse. This will be visible in metrics though.\n\n/**\n * Finds entities that are marked for deferred stitching.\n *\n * @remarks\n *\n * This assumes that the stitching strategy is set to deferred.\n *\n * They are expected to already have the next_stitch_ticket set (by\n * markForStitching) so that their tickets can be returned with each item.\n *\n * All returned items have their next_stitch_at updated to be moved forward by\n * the given timeout duration. This has the effect that they will be picked up\n * for stitching again in the future, if it hasn't completed by that point for\n * some reason (restarts, crashes, etc).\n */\nexport async function getDeferredStitchableEntities(options: {\n  knex: Knex | Knex.Transaction;\n  batchSize: number;\n  stitchTimeout: HumanDuration;\n}): Promise<\n  Array<{\n    entityRef: string;\n    stitchTicket: string;\n    stitchRequestedAt: DateTime; // the time BEFORE moving it forward by the timeout\n  }>\n> {\n  const { knex, batchSize, stitchTimeout } = options;\n\n  let itemsQuery = knex<DbRefreshStateRow>('refresh_state').select(\n    'entity_ref',\n    'next_stitch_at',\n    'next_stitch_ticket',\n  );\n\n  // This avoids duplication of work because of race conditions and is\n  // also fast because locked rows are ignored rather than blocking.\n  // It's only available in MySQL and PostgreSQL\n  if (['mysql', 'mysql2', 'pg'].includes(knex.client.config.client)) {\n    itemsQuery = itemsQuery.forUpdate().skipLocked();\n  }\n\n  const items = await itemsQuery\n    .whereNotNull('next_stitch_at')\n    .whereNotNull('next_stitch_ticket')\n    .where('next_stitch_at', '<=', knex.fn.now())\n    .orderBy('next_stitch_at', 'asc')\n    .limit(batchSize);\n\n  if (!items.length) {\n    return [];\n  }\n\n  await knex<DbRefreshStateRow>('refresh_state')\n    .whereIn(\n      'entity_ref',\n      items.map(i => i.entity_ref),\n    )\n    // avoid race condition where someone completes a stitch right between these statements\n    .whereNotNull('next_stitch_ticket')\n    .update({\n      next_stitch_at: nowPlus(knex, stitchTimeout),\n    });\n\n  return items.map(i => ({\n    entityRef: i.entity_ref,\n    stitchTicket: i.next_stitch_ticket!,\n    stitchRequestedAt: timestampToDateTime(i.next_stitch_at!),\n  }));\n}\n\nfunction nowPlus(knex: Knex, duration: HumanDuration): Knex.Raw {\n  const seconds = durationToMilliseconds(duration) / 1000;\n  if (knex.client.config.client.includes('sqlite3')) {\n    return knex.raw(`datetime('now', ?)`, [`${seconds} seconds`]);\n  } else if (knex.client.config.client.includes('mysql')) {\n    return knex.raw(`now() + interval ${seconds} second`);\n  }\n  return knex.raw(`now() + interval '${seconds} seconds'`);\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_NAMESPACE, Entity } from '@backstage/catalog-model';\nimport { InputError } from '@backstage/errors';\nimport { DbSearchRow } from '../../tables';\n\n// These are excluded in the generic loop, either because they do not make sense\n// to index, or because they are special-case always inserted whether they are\n// null or not\nconst SPECIAL_KEYS = [\n  'attachments',\n  'relations',\n  'status',\n  'metadata.name',\n  'metadata.namespace',\n  'metadata.uid',\n  'metadata.etag',\n];\n\n// The maximum length allowed for search values. These columns are indexed, and\n// database engines do not like to index on massive values. For example,\n// postgres will balk after 8191 byte line sizes.\nconst MAX_KEY_LENGTH = 200;\nconst MAX_VALUE_LENGTH = 200;\n\ntype Kv = {\n  key: string;\n  value: unknown;\n};\n\n// Helper for traversing through a nested structure and outputting a list of\n// path->value entries of the leaves.\n//\n// For example, this yaml structure\n//\n// a: 1\n// b:\n//   c: null\n//   e: [f, g]\n// h:\n//  - i: 1\n//    j: k\n//  - i: 2\n//    j: l\n//\n// will result in\n//\n// \"a\", 1\n// \"b.c\", null\n// \"b.e\": \"f\"\n// \"b.e.f\": true\n// \"b.e\": \"g\"\n// \"b.e.g\": true\n// \"h.i\": 1\n// \"h.j\": \"k\"\n// \"h.i\": 2\n// \"h.j\": \"l\"\nexport function traverse(root: unknown): Kv[] {\n  const output: Kv[] = [];\n\n  function visit(path: string, current: unknown) {\n    if (SPECIAL_KEYS.includes(path)) {\n      return;\n    }\n\n    // empty or scalar\n    if (\n      current === undefined ||\n      current === null ||\n      ['string', 'number', 'boolean'].includes(typeof current)\n    ) {\n      output.push({ key: path, value: current });\n      return;\n    }\n\n    // unknown\n    if (typeof current !== 'object') {\n      return;\n    }\n\n    // array\n    if (Array.isArray(current)) {\n      for (const item of current) {\n        // NOTE(freben): The reason that these are output in two different ways,\n        // is to support use cases where you want to express that MORE than one\n        // tag is present in a list. Since the EntityFilters structure is a\n        // record, you can't have several entries of the same key. Therefore\n        // you will have to match on\n        //\n        // { \"a.b\": [\"true\"], \"a.c\": [\"true\"] }\n        //\n        // rather than\n        //\n        // { \"a\": [\"b\", \"c\"] }\n        //\n        // because the latter means EITHER b or c has to be present.\n        visit(path, item);\n        if (typeof item === 'string') {\n          output.push({ key: `${path}.${item}`, value: true });\n        }\n      }\n      return;\n    }\n\n    // object\n    for (const [key, value] of Object.entries(current!)) {\n      visit(path ? `${path}.${key}` : key, value);\n    }\n  }\n\n  visit('', root);\n\n  return output;\n}\n\n// Translates a number of raw data rows to search table rows\nexport function mapToRows(input: Kv[], entityId: string): DbSearchRow[] {\n  const result: DbSearchRow[] = [];\n\n  for (const { key: rawKey, value: rawValue } of input) {\n    const key = rawKey.toLocaleLowerCase('en-US');\n    if (key.length > MAX_KEY_LENGTH) {\n      continue;\n    }\n    if (rawValue === undefined || rawValue === null) {\n      result.push({\n        entity_id: entityId,\n        key,\n        original_value: null,\n        value: null,\n      });\n    } else {\n      const value = String(rawValue).toLocaleLowerCase('en-US');\n      if (value.length <= MAX_VALUE_LENGTH) {\n        result.push({\n          entity_id: entityId,\n          key,\n          original_value: String(rawValue),\n          value: value,\n        });\n      } else {\n        result.push({\n          entity_id: entityId,\n          key,\n          original_value: null,\n          value: null,\n        });\n      }\n    }\n  }\n\n  return result;\n}\n\n/**\n * Generates all of the search rows that are relevant for this entity.\n *\n * @param entityId - The uid of the entity\n * @param entity - The entity\n * @returns A list of entity search rows\n */\nexport function buildEntitySearch(\n  entityId: string,\n  entity: Entity,\n): DbSearchRow[] {\n  // Visit the base structure recursively\n  const raw = traverse(entity);\n\n  // Start with some special keys that are always present because you want to\n  // be able to easily search for null specifically\n  raw.push({ key: 'metadata.name', value: entity.metadata.name });\n  raw.push({ key: 'metadata.namespace', value: entity.metadata.namespace });\n  raw.push({ key: 'metadata.uid', value: entity.metadata.uid });\n\n  // Namespace not specified has the default value \"default\", so we want to\n  // match on that as well\n  if (!entity.metadata.namespace) {\n    raw.push({ key: 'metadata.namespace', value: DEFAULT_NAMESPACE });\n  }\n\n  // Visit relations\n  for (const relation of entity.relations ?? []) {\n    raw.push({\n      key: `relations.${relation.type}`,\n      value: relation.targetRef,\n    });\n  }\n\n  // This validates that there are no keys that vary only in casing, such\n  // as `spec.foo` and `spec.Foo`.\n  const keys = new Set(raw.map(r => r.key));\n  const lowerKeys = new Set(raw.map(r => r.key.toLocaleLowerCase('en-US')));\n  if (keys.size !== lowerKeys.size) {\n    const difference = [];\n    for (const key of keys) {\n      const lower = key.toLocaleLowerCase('en-US');\n      if (!lowerKeys.delete(lower)) {\n        difference.push(lower);\n      }\n    }\n    const badKeys = `'${difference.join(\"', '\")}'`;\n    throw new InputError(\n      `Entity has duplicate keys that vary only in casing, ${badKeys}`,\n    );\n  }\n\n  return mapToRows(raw, entityId);\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { DbRefreshStateRow } from '../../tables';\n\n/**\n * Marks a single entity as having been stitched.\n *\n * @remarks\n *\n * This assumes that the stitching strategy is set to deferred.\n *\n * The timestamp and ticket are only reset if the ticket hasn't changed. If it\n * has, it means that a new stitch request has been made, and the entity should\n * be stitched once more some time in the future - or is indeed already being\n * stitched concurrently with ourselves.\n */\nexport async function markDeferredStitchCompleted(option: {\n  knex: Knex | Knex.Transaction;\n  entityRef: string;\n  stitchTicket: string;\n}): Promise<void> {\n  const { knex, entityRef, stitchTicket } = option;\n\n  await knex<DbRefreshStateRow>('refresh_state')\n    .update({\n      next_stitch_at: null,\n      next_stitch_ticket: null,\n    })\n    .where('entity_ref', '=', entityRef)\n    .andWhere('next_stitch_ticket', '=', stitchTicket);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { createHash } from 'crypto';\nimport stableStringify from 'fast-json-stable-stringify';\n\n// The number of items that are sent per batch to the database layer, when\n// doing .batchInsert calls to knex. This needs to be low enough to not cause\n// errors in the underlying engine due to exceeding query limits, but large\n// enough to get the speed benefits.\nexport const BATCH_SIZE = 50;\n\nexport function generateStableHash(entity: Entity) {\n  return createHash('sha1')\n    .update(stableStringify({ ...entity }))\n    .digest('hex');\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ENTITY_STATUS_CATALOG_PROCESSING_TYPE } from '@backstage/catalog-client';\nimport {\n  ANNOTATION_EDIT_URL,\n  ANNOTATION_VIEW_URL,\n  EntityRelation,\n} from '@backstage/catalog-model';\nimport { AlphaEntity, EntityStatusItem } from '@backstage/catalog-model/alpha';\nimport { SerializedError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport { v4 as uuid } from 'uuid';\nimport { StitchingStrategy } from '../../../stitching/types';\nimport {\n  DbFinalEntitiesRow,\n  DbRefreshStateRow,\n  DbSearchRow,\n} from '../../tables';\nimport { buildEntitySearch } from './buildEntitySearch';\nimport { markDeferredStitchCompleted } from './markDeferredStitchCompleted';\nimport { BATCH_SIZE, generateStableHash } from './util';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\n// See https://github.com/facebook/react/blob/f0cf832e1d0c8544c36aa8b310960885a11a847c/packages/react-dom-bindings/src/shared/sanitizeURL.js\nconst scriptProtocolPattern =\n  // eslint-disable-next-line no-control-regex\n  /^[\\u0000-\\u001F ]*j[\\r\\n\\t]*a[\\r\\n\\t]*v[\\r\\n\\t]*a[\\r\\n\\t]*s[\\r\\n\\t]*c[\\r\\n\\t]*r[\\r\\n\\t]*i[\\r\\n\\t]*p[\\r\\n\\t]*t[\\r\\n\\t]*\\:/i;\n\n/**\n * Performs the act of stitching - to take all of the various outputs from the\n * ingestion process, and stitching them together into the final entity JSON\n * shape.\n */\nexport async function performStitching(options: {\n  knex: Knex | Knex.Transaction;\n  logger: LoggerService;\n  strategy: StitchingStrategy;\n  entityRef: string;\n  stitchTicket?: string;\n}): Promise<'changed' | 'unchanged' | 'abandoned'> {\n  const { knex, logger, entityRef } = options;\n  const stitchTicket = options.stitchTicket ?? uuid();\n\n  const entityResult = await knex<DbRefreshStateRow>('refresh_state')\n    .where({ entity_ref: entityRef })\n    .limit(1)\n    .select('entity_id');\n  if (!entityResult.length) {\n    // Entity does no exist in refresh state table, no stitching required.\n    return 'abandoned';\n  }\n\n  // Insert stitching ticket that will be compared before inserting the final entity.\n  await knex<DbFinalEntitiesRow>('final_entities')\n    .insert({\n      entity_id: entityResult[0].entity_id,\n      hash: '',\n      stitch_ticket: stitchTicket,\n    })\n    .onConflict('entity_id')\n    .merge(['stitch_ticket']);\n\n  // Selecting from refresh_state and final_entities should yield exactly\n  // one row (except in abnormal cases where the stitch was invoked for\n  // something that didn't exist at all, in which case it's zero rows).\n  // The join with the temporary incoming_references still gives one row.\n  const [processedResult, relationsResult] = await Promise.all([\n    knex\n      .with('incoming_references', function incomingReferences(builder) {\n        return builder\n          .from('refresh_state_references')\n          .where({ target_entity_ref: entityRef })\n          .count({ count: '*' });\n      })\n      .select({\n        entityId: 'refresh_state.entity_id',\n        processedEntity: 'refresh_state.processed_entity',\n        errors: 'refresh_state.errors',\n        incomingReferenceCount: 'incoming_references.count',\n        previousHash: 'final_entities.hash',\n      })\n      .from('refresh_state')\n      .where({ 'refresh_state.entity_ref': entityRef })\n      .crossJoin(knex.raw('incoming_references'))\n      .leftOuterJoin('final_entities', {\n        'final_entities.entity_id': 'refresh_state.entity_id',\n      }),\n    knex\n      .distinct({\n        relationType: 'type',\n        relationTarget: 'target_entity_ref',\n      })\n      .from('relations')\n      .where({ source_entity_ref: entityRef })\n      .orderBy('relationType', 'asc')\n      .orderBy('relationTarget', 'asc'),\n  ]);\n\n  // If there were no rows returned, it would mean that there was no\n  // matching row even in the refresh_state. This can happen for example\n  // if we emit a relation to something that hasn't been ingested yet.\n  // It's safe to ignore this stitch attempt in that case.\n  if (!processedResult.length) {\n    logger.debug(\n      `Unable to stitch ${entityRef}, item does not exist in refresh state table`,\n    );\n    return 'abandoned';\n  }\n\n  const {\n    entityId,\n    processedEntity,\n    errors,\n    incomingReferenceCount,\n    previousHash,\n  } = processedResult[0];\n\n  // If there was no processed entity in place, the target hasn't been\n  // through the processing steps yet. It's safe to ignore this stitch\n  // attempt in that case, since another stitch will be triggered when\n  // that processing has finished.\n  if (!processedEntity) {\n    logger.debug(\n      `Unable to stitch ${entityRef}, the entity has not yet been processed`,\n    );\n    return 'abandoned';\n  }\n\n  // Grab the processed entity and stitch all of the relevant data into\n  // it\n  const entity = JSON.parse(processedEntity) as AlphaEntity;\n  const isOrphan = Number(incomingReferenceCount) === 0;\n  let statusItems: EntityStatusItem[] = [];\n\n  if (isOrphan) {\n    logger.debug(`${entityRef} is an orphan`);\n    entity.metadata.annotations = {\n      ...entity.metadata.annotations,\n      ['backstage.io/orphan']: 'true',\n    };\n  }\n  if (errors) {\n    const parsedErrors = JSON.parse(errors) as SerializedError[];\n    if (Array.isArray(parsedErrors) && parsedErrors.length) {\n      statusItems = parsedErrors.map(e => ({\n        type: ENTITY_STATUS_CATALOG_PROCESSING_TYPE,\n        level: 'error',\n        message: `${e.name}: ${e.message}`,\n        error: e,\n      }));\n    }\n  }\n  // We opt to do this check here as we otherwise can't guarantee that it will be run after all processors\n  for (const annotation of [ANNOTATION_VIEW_URL, ANNOTATION_EDIT_URL]) {\n    const value = entity.metadata.annotations?.[annotation];\n    if (typeof value === 'string' && scriptProtocolPattern.test(value)) {\n      entity.metadata.annotations![annotation] =\n        'https://backstage.io/annotation-rejected-for-security-reasons';\n    }\n  }\n\n  // TODO: entityRef is lower case and should be uppercase in the final\n  // result\n  entity.relations = relationsResult\n    .filter(row => row.relationType /* exclude null row, if relevant */)\n    .map<EntityRelation>(row => ({\n      type: row.relationType!,\n      targetRef: row.relationTarget!,\n    }));\n  if (statusItems.length) {\n    entity.status = {\n      ...entity.status,\n      items: [...(entity.status?.items ?? []), ...statusItems],\n    };\n  }\n\n  // If the output entity was actually not changed, just abort\n  const hash = generateStableHash(entity);\n  if (hash === previousHash) {\n    logger.debug(`Skipped stitching of ${entityRef}, no changes`);\n    return 'unchanged';\n  }\n\n  entity.metadata.uid = entityId;\n  if (!entity.metadata.etag) {\n    // If the original data source did not have its own etag handling,\n    // use the hash as a good-quality etag\n    entity.metadata.etag = hash;\n  }\n\n  // This may throw if the entity is invalid, so we call it before\n  // the final_entities write, even though we may end up not needing\n  // to write the search index.\n  const searchEntries = buildEntitySearch(entityId, entity);\n\n  const amountOfRowsChanged = await knex<DbFinalEntitiesRow>('final_entities')\n    .update({\n      final_entity: JSON.stringify(entity),\n      hash,\n      last_updated_at: knex.fn.now(),\n    })\n    .where('entity_id', entityId)\n    .where('stitch_ticket', stitchTicket)\n    .onConflict('entity_id')\n    .merge(['final_entity', 'hash', 'last_updated_at']);\n\n  if (options.strategy.mode === 'deferred') {\n    await markDeferredStitchCompleted({\n      knex: knex,\n      entityRef,\n      stitchTicket,\n    });\n  }\n\n  if (amountOfRowsChanged === 0) {\n    logger.debug(`Entity ${entityRef} is already stitched, skipping write.`);\n    return 'abandoned';\n  }\n\n  // TODO(freben): Search will probably need a similar safeguard against\n  // race conditions like the final_entities ticket handling above.\n  // Otherwise, it can be the case that:\n  // A writes the entity ->\n  // B writes the entity ->\n  // B writes search ->\n  // A writes search\n  await knex<DbSearchRow>('search').where({ entity_id: entityId }).delete();\n  await knex.batchInsert('search', searchEntries, BATCH_SIZE);\n\n  return 'changed';\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringifyError } from '@backstage/errors';\nimport { metrics } from '@opentelemetry/api';\nimport { Knex } from 'knex';\nimport { DateTime } from 'luxon';\nimport { DbRefreshStateRow } from '../database/tables';\nimport { createCounterMetric } from '../util/metrics';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\n// Helps wrap the timing and logging behaviors\nexport function progressTracker(knex: Knex, logger: LoggerService) {\n  // prom-client metrics are deprecated in favour of OpenTelemetry metrics.\n  const promStitchedEntities = createCounterMetric({\n    name: 'catalog_stitched_entities_count',\n    help: 'Amount of entities stitched. DEPRECATED, use OpenTelemetry metrics instead',\n  });\n\n  const meter = metrics.getMeter('default');\n\n  const stitchedEntities = meter.createCounter(\n    'catalog.stitched.entities.count',\n    {\n      description: 'Amount of entities stitched',\n    },\n  );\n\n  const stitchingDuration = meter.createHistogram(\n    'catalog.stitching.duration',\n    {\n      description: 'Time spent executing the full stitching flow',\n      unit: 'seconds',\n    },\n  );\n\n  const stitchingQueueCount = meter.createObservableGauge(\n    'catalog.stitching.queue.length',\n    { description: 'Number of entities currently in the stitching queue' },\n  );\n  stitchingQueueCount.addCallback(async result => {\n    const total = await knex<DbRefreshStateRow>('refresh_state')\n      .count({ count: '*' })\n      .whereNotNull('next_stitch_at');\n    result.observe(Number(total[0].count));\n  });\n\n  const stitchingQueueDelay = meter.createHistogram(\n    'catalog.stitching.queue.delay',\n    {\n      description:\n        'The amount of delay between being scheduled for stitching, and the start of actually being stitched',\n      unit: 'seconds',\n    },\n  );\n\n  function stitchStart(item: {\n    entityRef: string;\n    stitchRequestedAt?: DateTime;\n  }) {\n    logger.debug(`Stitching ${item.entityRef}`);\n\n    const startTime = process.hrtime();\n    if (item.stitchRequestedAt) {\n      stitchingQueueDelay.record(\n        -item.stitchRequestedAt.diffNow().as('seconds'),\n      );\n    }\n\n    function endTime() {\n      const delta = process.hrtime(startTime);\n      return delta[0] + delta[1] / 1e9;\n    }\n\n    function markComplete(result: string) {\n      promStitchedEntities.inc(1);\n      stitchedEntities.add(1, { result });\n      stitchingDuration.record(endTime(), { result });\n    }\n\n    function markFailed(error: Error) {\n      promStitchedEntities.inc(1);\n      stitchedEntities.add(1, { result: 'error' });\n      stitchingDuration.record(endTime(), { result: 'error' });\n      logger.error(\n        `Failed to stitch ${item.entityRef}, ${stringifyError(error)}`,\n      );\n    }\n\n    return {\n      markComplete,\n      markFailed,\n    };\n  }\n\n  return { stitchStart };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { durationToMilliseconds, HumanDuration } from '@backstage/types';\nimport { Knex } from 'knex';\nimport splitToChunks from 'lodash/chunk';\nimport { DateTime } from 'luxon';\nimport { getDeferredStitchableEntities } from '../database/operations/stitcher/getDeferredStitchableEntities';\nimport { markForStitching } from '../database/operations/stitcher/markForStitching';\nimport { performStitching } from '../database/operations/stitcher/performStitching';\nimport { DbRefreshStateRow } from '../database/tables';\nimport { startTaskPipeline } from '../processing/TaskPipeline';\nimport { progressTracker } from './progressTracker';\nimport {\n  Stitcher,\n  StitchingStrategy,\n  stitchingStrategyFromConfig,\n} from './types';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\ntype DeferredStitchItem = Awaited<\n  ReturnType<typeof getDeferredStitchableEntities>\n>[0];\n\ntype StitchProgressTracker = ReturnType<typeof progressTracker>;\n\n/**\n * Performs the act of stitching - to take all of the various outputs from the\n * ingestion process, and stitching them together into the final entity JSON\n * shape.\n */\nexport class DefaultStitcher implements Stitcher {\n  private readonly knex: Knex;\n  private readonly logger: LoggerService;\n  private readonly strategy: StitchingStrategy;\n  private readonly tracker: StitchProgressTracker;\n  private stopFunc?: () => void;\n\n  static fromConfig(\n    config: Config,\n    options: {\n      knex: Knex;\n      logger: LoggerService;\n    },\n  ): DefaultStitcher {\n    return new DefaultStitcher({\n      knex: options.knex,\n      logger: options.logger,\n      strategy: stitchingStrategyFromConfig(config),\n    });\n  }\n\n  constructor(options: {\n    knex: Knex;\n    logger: LoggerService;\n    strategy: StitchingStrategy;\n  }) {\n    this.knex = options.knex;\n    this.logger = options.logger;\n    this.strategy = options.strategy;\n    this.tracker = progressTracker(options.knex, options.logger);\n  }\n\n  async stitch(options: {\n    entityRefs?: Iterable<string>;\n    entityIds?: Iterable<string>;\n  }) {\n    const { entityRefs, entityIds } = options;\n\n    if (this.strategy.mode === 'deferred') {\n      await markForStitching({\n        knex: this.knex,\n        strategy: this.strategy,\n        entityRefs,\n        entityIds,\n      });\n      return;\n    }\n\n    if (entityRefs) {\n      for (const entityRef of entityRefs) {\n        await this.#stitchOne({ entityRef });\n      }\n    }\n\n    if (entityIds) {\n      const chunks = splitToChunks(\n        Array.isArray(entityIds) ? entityIds : [...entityIds],\n        100,\n      );\n      for (const chunk of chunks) {\n        const rows = await this.knex<DbRefreshStateRow>('refresh_state')\n          .select('entity_ref')\n          .whereIn('entity_id', chunk);\n        for (const row of rows) {\n          await this.#stitchOne({ entityRef: row.entity_ref });\n        }\n      }\n    }\n  }\n\n  async start() {\n    if (this.strategy.mode === 'deferred') {\n      if (this.stopFunc) {\n        throw new Error('Processing engine is already started');\n      }\n\n      const { pollingInterval, stitchTimeout } = this.strategy;\n\n      const stopPipeline = startTaskPipeline<DeferredStitchItem>({\n        lowWatermark: 2,\n        highWatermark: 5,\n        pollingIntervalMs: durationToMilliseconds(pollingInterval),\n        loadTasks: async count => {\n          return await this.#getStitchableEntities(count, stitchTimeout);\n        },\n        processTask: async item => {\n          return await this.#stitchOne({\n            entityRef: item.entityRef,\n            stitchTicket: item.stitchTicket,\n            stitchRequestedAt: item.stitchRequestedAt,\n          });\n        },\n      });\n\n      this.stopFunc = () => {\n        stopPipeline();\n      };\n    }\n  }\n\n  async stop() {\n    if (this.strategy.mode === 'deferred') {\n      if (this.stopFunc) {\n        this.stopFunc();\n        this.stopFunc = undefined;\n      }\n    }\n  }\n\n  async #getStitchableEntities(count: number, stitchTimeout: HumanDuration) {\n    try {\n      return await getDeferredStitchableEntities({\n        knex: this.knex,\n        batchSize: count,\n        stitchTimeout: stitchTimeout,\n      });\n    } catch (error) {\n      this.logger.warn('Failed to load stitchable entities', error);\n      return [];\n    }\n  }\n\n  async #stitchOne(options: {\n    entityRef: string;\n    stitchTicket?: string;\n    stitchRequestedAt?: DateTime;\n  }) {\n    const track = this.tracker.stitchStart({\n      entityRef: options.entityRef,\n      stitchRequestedAt: options.stitchRequestedAt,\n    });\n\n    try {\n      const result = await performStitching({\n        knex: this.knex,\n        logger: this.logger,\n        strategy: this.strategy,\n        entityRef: options.entityRef,\n        stitchTicket: options.stitchTicket,\n      });\n      track.markComplete(result);\n    } catch (error) {\n      track.markFailed(error);\n    }\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { Request } from 'express';\nimport { z } from 'zod';\n\nconst schema = z.object({\n  entityRefs: z.array(z.string()),\n  fields: z.array(z.string()).optional(),\n});\n\nexport function entitiesBatchRequest(req: Request): z.infer<typeof schema> {\n  try {\n    return schema.parse(req.body);\n  } catch (error) {\n    throw new InputError(\n      `Malformed request body (did you remember to specify an application/json content type?), ${error.message}`,\n    );\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  EntitiesSearchFilter,\n  EntityFilter,\n} from '@backstage/plugin-catalog-node';\n\n/**\n * Forms a full EntityFilter based on a single key-value(s) object.\n */\nexport function basicEntityFilter(\n  items: Record<string, string | string[]>,\n): EntityFilter {\n  const filtersByKey: Record<string, EntitiesSearchFilter> = {};\n\n  for (const [key, value] of Object.entries(items)) {\n    const values = [value].flat();\n\n    const f =\n      key in filtersByKey\n        ? filtersByKey[key]\n        : (filtersByKey[key] = { key, values: [] });\n\n    f.values!.push(...values);\n  }\n\n  return { anyOf: [{ allOf: Object.values(filtersByKey) }] };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\n\n/**\n * Takes a single unknown parameter and makes sure that it's a string that can\n * be parsed as an integer.\n */\nexport function parseIntegerParam(\n  param: unknown,\n  ctx: string,\n): number | undefined {\n  if (param === undefined) {\n    return undefined;\n  }\n\n  if (typeof param !== 'string') {\n    throw new InputError(`Invalid ${ctx}, not an integer on string form`);\n  }\n\n  const parsed = parseInt(param, 10);\n  if (!Number.isInteger(parsed) || String(parsed) !== param) {\n    throw new InputError(`Invalid ${ctx}, not an integer`);\n  }\n\n  return parsed;\n}\n\n/**\n * Takes a single unknown parameter and makes sure that it's a string.\n */\nexport function parseStringParam(\n  param: unknown,\n  ctx: string,\n): string | undefined {\n  if (param === undefined) {\n    return undefined;\n  }\n\n  if (typeof param !== 'string') {\n    throw new InputError(`Invalid ${ctx}, not a string`);\n  }\n\n  return param;\n}\n\n/**\n * Takes a single unknown parameter and makes sure that it's a single string or\n * an array of strings, and returns as an array.\n */\nexport function parseStringsParam(\n  param: unknown,\n  ctx: string,\n): string[] | undefined {\n  if (param === undefined) {\n    return undefined;\n  }\n\n  const array = [param].flat();\n  if (array.some(p => typeof p !== 'string')) {\n    throw new InputError(`Invalid ${ctx}, not a string`);\n  }\n\n  return array as string[];\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { parseStringsParam } from './common';\nimport {\n  EntitiesSearchFilter,\n  EntityFilter,\n} from '@backstage/plugin-catalog-node';\n\n/**\n * Parses the filtering part of a query, like\n * /entities?filter=metadata.namespace=default,kind=Component\n */\nexport function parseEntityFilterParams(\n  params: Record<string, unknown>,\n): EntityFilter | undefined {\n  // Each filter string is on the form a=b,c=d\n  const filterStrings = parseStringsParam(params.filter, 'filter');\n  if (!filterStrings) {\n    return undefined;\n  }\n\n  // Outer array: \"any of the inner ones\"\n  // Inner arrays: \"all of these must match\"\n  const filters = filterStrings.map(parseEntityFilterString).filter(Boolean);\n  if (!filters.length) {\n    return undefined;\n  }\n\n  return { anyOf: filters.map(f => ({ allOf: f! })) };\n}\n\n/**\n * Parses a single filter string as seen in a filter query, for example\n * metadata.namespace=default,kind=Component\n */\nexport function parseEntityFilterString(\n  filterString: string,\n): EntitiesSearchFilter[] | undefined {\n  const statements = filterString\n    .split(',')\n    .map(s => s.trim())\n    .filter(Boolean);\n\n  if (!statements.length) {\n    return undefined;\n  }\n\n  const filtersByKey: Record<string, EntitiesSearchFilter> = {};\n\n  for (const statement of statements) {\n    const equalsIndex = statement.indexOf('=');\n\n    const key =\n      equalsIndex === -1\n        ? statement\n        : statement.substring(0, equalsIndex).trim();\n    const value =\n      equalsIndex === -1\n        ? undefined\n        : statement.substring(equalsIndex + 1).trim();\n    if (!key) {\n      throw new InputError(\n        `Invalid filter, '${statement}' is not a valid statement (expected a string on the form a=b or a= or a)`,\n      );\n    }\n\n    const f =\n      key in filtersByKey ? filtersByKey[key] : (filtersByKey[key] = { key });\n\n    if (value !== undefined) {\n      f.values = f.values || [];\n      f.values.push(value);\n    }\n  }\n\n  return Object.values(filtersByKey);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { InputError } from '@backstage/errors';\nimport lodash from 'lodash';\nimport { RecursivePartial } from '../../util/RecursivePartial';\nimport { parseStringsParam } from './common';\n\nfunction getPathArrayAndValue(input: Entity, field: string) {\n  return field.split('.').reduce(\n    ([pathArray, inputSubset], pathPart, index, fieldParts) => {\n      if (lodash.hasIn(inputSubset, pathPart)) {\n        return [pathArray.concat(pathPart), inputSubset[pathPart]];\n      } else if (fieldParts[index + 1] !== undefined) {\n        fieldParts[index + 1] = `${pathPart}.${fieldParts[index + 1]}`;\n        return [pathArray, inputSubset];\n      }\n\n      return [pathArray, undefined];\n    },\n    [[] as string[], input as any],\n  );\n}\n\nexport function parseEntityTransformParams(\n  params: Record<string, unknown>,\n  extra?: string[],\n): ((entity: Entity) => Entity) | undefined {\n  const queryFields = parseStringsParam(params.fields, 'fields');\n\n  const fields = Array.from(\n    new Set(\n      [...(extra ?? []), ...(queryFields?.map(s => s.split(',')) ?? [])]\n        .flat()\n        .map(s => s.trim())\n        .filter(Boolean),\n    ),\n  );\n\n  if (!fields.length) {\n    return undefined;\n  }\n\n  const arrayTypeField = fields.find(f => f.includes('['));\n  if (arrayTypeField) {\n    throw new InputError(\n      `Invalid field \"${arrayTypeField}\", array type fields are not supported`,\n    );\n  }\n\n  return input => {\n    const output: RecursivePartial<Entity> = {};\n\n    for (const field of fields) {\n      const [pathArray, value] = getPathArrayAndValue(input, field);\n\n      if (value !== undefined) {\n        lodash.set(output, pathArray, value);\n      }\n    }\n\n    return output as Entity;\n  };\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { EntityOrder } from '../../catalog/types';\nimport { parseStringsParam } from './common';\n\nexport function parseEntityOrderFieldParams(\n  params: Record<string, unknown>,\n): EntityOrder[] | undefined {\n  const orderFieldStrings = parseStringsParam(params.orderField, 'orderField');\n  if (!orderFieldStrings) {\n    return undefined;\n  }\n\n  return orderFieldStrings.map(orderFieldString => {\n    const [field, order] = orderFieldString.split(',');\n\n    if (order !== undefined && !isOrder(order)) {\n      throw new InputError('Invalid order field order, must be asc or desc');\n    }\n    return { field, order };\n  });\n}\n\nexport function isOrder(order: string): order is 'asc' | 'desc' {\n  return ['asc', 'desc'].includes(order);\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  QueryEntitiesCursorRequest,\n  QueryEntitiesInitialRequest,\n  QueryEntitiesRequest,\n} from '../../catalog/types';\nimport { decodeCursor } from '../util';\nimport { parseEntityFilterParams } from './parseEntityFilterParams';\nimport { parseEntityOrderFieldParams } from './parseEntityOrderFieldParams';\nimport { parseEntityTransformParams } from './parseEntityTransformParams';\nimport { spec } from '../../schema/openapi.generated';\nimport { internal } from '@backstage/backend-openapi-utils';\n\nexport function parseQueryEntitiesParams(\n  params: internal.QuerySchema<typeof spec, '/entities/by-query', 'get'>,\n): Omit<QueryEntitiesRequest, 'credentials' | 'limit'> {\n  const fields = parseEntityTransformParams(params);\n\n  if (params.cursor) {\n    const decodedCursor = decodeCursor(params.cursor);\n    const response: Omit<QueryEntitiesCursorRequest, 'credentials'> = {\n      cursor: decodedCursor,\n      fields,\n    };\n    return response;\n  }\n\n  const filter = parseEntityFilterParams(params);\n  const orderFields = parseEntityOrderFieldParams(params);\n\n  const response: Omit<QueryEntitiesInitialRequest, 'credentials'> = {\n    fields,\n    filter,\n    orderFields,\n    fullTextFilter: {\n      term: params.fullTextFilterTerm || '',\n      fields: params.fullTextFilterFields,\n    },\n  };\n\n  return response;\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { parseStringsParam } from './common';\n\n/**\n * Parses the facets part of a facet query, like\n * /entity-facets?filter=metadata.namespace=default,kind=Component&facet=metadata.namespace\n */\nexport function parseEntityFacetParams(\n  params: Record<string, unknown>,\n): string[] {\n  // Each facet string is on the form a.b.c\n  const facetStrings = parseStringsParam(params.facet, 'facet');\n  if (facetStrings) {\n    const filtered = facetStrings.filter(Boolean);\n    if (filtered.length) {\n      return filtered;\n    }\n  }\n\n  throw new InputError('Missing facet parameter');\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { EntityOrder } from '../../catalog/types';\nimport { parseStringsParam } from './common';\n\nexport function parseEntityOrderParams(\n  params: Record<string, unknown>,\n): EntityOrder[] | undefined {\n  return parseStringsParam(params.order, 'order')?.map(item => {\n    const match = item.match(/^(asc|desc):(.+)$/);\n    if (!match) {\n      throw new InputError(\n        `Invalid order parameter \"${item}\", expected \"<asc or desc>:<field name>\"`,\n      );\n    }\n\n    return {\n      order: match[1] as 'asc' | 'desc',\n      field: match[2],\n    };\n  });\n}\n","/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// ******************************************************************\n// * THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY. *\n// ******************************************************************\nimport { createValidatedOpenApiRouter } from '@backstage/backend-openapi-utils';\n\nexport const spec = {\n  openapi: '3.0.3',\n  info: {\n    title: 'catalog',\n    version: '1',\n    description:\n      'The Backstage backend plugin that provides the Backstage catalog',\n    license: {\n      name: 'Apache-2.0',\n      url: 'http://www.apache.org/licenses/LICENSE-2.0.html',\n    },\n    contact: {},\n  },\n  servers: [\n    {\n      url: '/',\n    },\n  ],\n  components: {\n    examples: {},\n    headers: {},\n    parameters: {\n      kind: {\n        name: 'kind',\n        in: 'path',\n        required: true,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n        },\n      },\n      namespace: {\n        name: 'namespace',\n        in: 'path',\n        required: true,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n        },\n      },\n      name: {\n        name: 'name',\n        in: 'path',\n        required: true,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n        },\n      },\n      uid: {\n        name: 'uid',\n        in: 'path',\n        required: true,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n        },\n      },\n      cursor: {\n        name: 'cursor',\n        in: 'query',\n        description: 'Cursor to a set page of results.',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n          minLength: 1,\n        },\n      },\n      after: {\n        name: 'after',\n        in: 'query',\n        description: 'Pointer to the previous page of results.',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'string',\n          minLength: 1,\n        },\n      },\n      fields: {\n        name: 'fields',\n        in: 'query',\n        description: 'Restrict to just these fields in the response.',\n        required: false,\n        allowReserved: true,\n        explode: false,\n        schema: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        examples: {\n          'Get name and the entire relations collection': {\n            value: ['metadata.name', 'relations'],\n          },\n          'Get kind, name and namespace': {\n            value: ['kind', 'metadata.name', 'metadata.namespace'],\n          },\n        },\n      },\n      filter: {\n        name: 'filter',\n        in: 'query',\n        description: 'Filter for just the entities defined by this filter.',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'array',\n          items: {\n            type: 'string',\n          },\n        },\n        examples: {\n          'Get groups': {\n            value: ['kind=group'],\n          },\n          'Get orphaned components': {\n            value: [\n              'kind=component,metadata.annotations.backstage.io/orphan=true',\n            ],\n          },\n        },\n      },\n      offset: {\n        name: 'offset',\n        in: 'query',\n        description: 'Number of records to skip in the query page.',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'integer',\n          minimum: 0,\n        },\n      },\n      limit: {\n        name: 'limit',\n        in: 'query',\n        description: 'Number of records to return in the response.',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'integer',\n          minimum: 0,\n        },\n      },\n      orderField: {\n        name: 'orderField',\n        in: 'query',\n        description: 'The fields to sort returned results by.',\n        required: false,\n        allowReserved: true,\n        schema: {\n          type: 'array',\n          items: {\n            type: 'string',\n            description: 'A two-item tuple of [field, order].',\n          },\n        },\n        explode: true,\n        style: 'form',\n        examples: {\n          'Order ascending by name': {\n            value: ['metadata.name,asc'],\n          },\n          'Order descending by owner': {\n            value: ['spec.owner,desc'],\n          },\n        },\n      },\n    },\n    requestBodies: {},\n    responses: {\n      ErrorResponse: {\n        description: 'An error response from the backend.',\n        content: {\n          'application/json': {\n            schema: {\n              $ref: '#/components/schemas/Error',\n            },\n          },\n        },\n      },\n    },\n    schemas: {\n      Error: {\n        type: 'object',\n        properties: {\n          error: {\n            type: 'object',\n            properties: {\n              name: {\n                type: 'string',\n              },\n              message: {\n                type: 'string',\n              },\n              stack: {\n                type: 'string',\n              },\n              code: {\n                type: 'string',\n              },\n            },\n            required: ['name', 'message'],\n          },\n          request: {\n            type: 'object',\n            properties: {\n              method: {\n                type: 'string',\n              },\n              url: {\n                type: 'string',\n              },\n            },\n            required: ['method', 'url'],\n          },\n          response: {\n            type: 'object',\n            properties: {\n              statusCode: {\n                type: 'number',\n              },\n            },\n            required: ['statusCode'],\n          },\n        },\n        required: ['error', 'response'],\n        additionalProperties: {},\n      },\n      JsonObject: {\n        type: 'object',\n        properties: {},\n        description: 'A type representing all allowed JSON object values.',\n        additionalProperties: {},\n      },\n      MapStringString: {\n        type: 'object',\n        properties: {},\n        additionalProperties: {\n          type: 'string',\n        },\n        description: 'Construct a type with a set of properties K of type T',\n      },\n      EntityLink: {\n        type: 'object',\n        properties: {\n          type: {\n            type: 'string',\n            description:\n              'An optional value to categorize links into specific groups',\n          },\n          icon: {\n            type: 'string',\n            description:\n              'An optional semantic key that represents a visual icon.',\n          },\n          title: {\n            type: 'string',\n            description: 'An optional descriptive title for the link.',\n          },\n          url: {\n            type: 'string',\n            description: 'The url to the external site, document, etc.',\n          },\n        },\n        required: ['url'],\n        description:\n          'A link to external information that is related to the entity.',\n        additionalProperties: false,\n      },\n      EntityMeta: {\n        type: 'object',\n        properties: {\n          links: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/EntityLink',\n            },\n            description: 'A list of external hyperlinks related to the entity.',\n          },\n          tags: {\n            type: 'array',\n            items: {\n              type: 'string',\n            },\n            description:\n              'A list of single-valued strings, to for example classify catalog entities in\\nvarious ways.',\n          },\n          annotations: {\n            $ref: '#/components/schemas/MapStringString',\n          },\n          labels: {\n            $ref: '#/components/schemas/MapStringString',\n          },\n          description: {\n            type: 'string',\n            description:\n              'A short (typically relatively few words, on one line) description of the\\nentity.',\n          },\n          title: {\n            type: 'string',\n            description:\n              'A display name of the entity, to be presented in user interfaces instead\\nof the `name` property above, when available.\\nThis field is sometimes useful when the `name` is cumbersome or ends up\\nbeing perceived as overly technical. The title generally does not have\\nas stringent format requirements on it, so it may contain special\\ncharacters and be more explanatory. Do keep it very short though, and\\navoid situations where a title can be confused with the name of another\\nentity, or where two entities share a title.\\nNote that this is only for display purposes, and may be ignored by some\\nparts of the code. Entity references still always make use of the `name`\\nproperty, not the title.',\n          },\n          namespace: {\n            type: 'string',\n            description: 'The namespace that the entity belongs to.',\n          },\n          name: {\n            type: 'string',\n            description:\n              'The name of the entity.\\nMust be unique within the catalog at any given point in time, for any\\ngiven namespace + kind pair. This value is part of the technical\\nidentifier of the entity, and as such it will appear in URLs, database\\ntables, entity references, and similar. It is subject to restrictions\\nregarding what characters are allowed.\\nIf you want to use a different, more human readable string with fewer\\nrestrictions on it in user interfaces, see the `title` field below.',\n          },\n          etag: {\n            type: 'string',\n            description:\n              'An opaque string that changes for each update operation to any part of\\nthe entity, including metadata.\\nThis field can not be set by the user at creation time, and the server\\nwill reject an attempt to do so. The field will be populated in read\\noperations. The field can (optionally) be specified when performing\\nupdate or delete operations, and the server will then reject the\\noperation if it does not match the current stored value.',\n          },\n          uid: {\n            type: 'string',\n            description:\n              'A globally unique ID for the entity.\\nThis field can not be set by the user at creation time, and the server\\nwill reject an attempt to do so. The field will be populated in read\\noperations. The field can (optionally) be specified when performing\\nupdate or delete operations, but the server is free to reject requests\\nthat do so in such a way that it breaks semantics.',\n          },\n        },\n        required: ['name'],\n        description: 'Metadata fields common to all versions/kinds of entity.',\n        additionalProperties: {},\n      },\n      EntityRelation: {\n        type: 'object',\n        properties: {\n          targetRef: {\n            type: 'string',\n            description: 'The entity ref of the target of this relation.',\n          },\n          type: {\n            type: 'string',\n            description: 'The type of the relation.',\n          },\n        },\n        required: ['targetRef', 'type'],\n        description:\n          'A relation of a specific type to another entity in the catalog.',\n        additionalProperties: false,\n      },\n      Entity: {\n        type: 'object',\n        properties: {\n          relations: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/EntityRelation',\n            },\n            description:\n              'The relations that this entity has with other entities.',\n          },\n          spec: {\n            $ref: '#/components/schemas/JsonObject',\n          },\n          metadata: {\n            $ref: '#/components/schemas/EntityMeta',\n          },\n          kind: {\n            type: 'string',\n            description: 'The high level entity type being described.',\n          },\n          apiVersion: {\n            type: 'string',\n            description:\n              'The version of specification format for this particular entity that\\nthis is written against.',\n          },\n        },\n        required: ['metadata', 'kind', 'apiVersion'],\n        description:\n          \"The parts of the format that's common to all versions/kinds of entity.\",\n      },\n      NullableEntity: {\n        type: 'object',\n        properties: {\n          relations: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/EntityRelation',\n            },\n            description:\n              'The relations that this entity has with other entities.',\n          },\n          spec: {\n            $ref: '#/components/schemas/JsonObject',\n          },\n          metadata: {\n            $ref: '#/components/schemas/EntityMeta',\n          },\n          kind: {\n            type: 'string',\n            description: 'The high level entity type being described.',\n          },\n          apiVersion: {\n            type: 'string',\n            description:\n              'The version of specification format for this particular entity that\\nthis is written against.',\n          },\n        },\n        required: ['metadata', 'kind', 'apiVersion'],\n        description:\n          \"The parts of the format that's common to all versions/kinds of entity.\",\n        nullable: true,\n      },\n      EntityAncestryResponse: {\n        type: 'object',\n        properties: {\n          items: {\n            type: 'array',\n            items: {\n              type: 'object',\n              properties: {\n                parentEntityRefs: {\n                  items: {\n                    type: 'string',\n                  },\n                  type: 'array',\n                },\n                entity: {\n                  $ref: '#/components/schemas/Entity',\n                },\n              },\n              required: ['parentEntityRefs', 'entity'],\n            },\n          },\n          rootEntityRef: {\n            type: 'string',\n          },\n        },\n        required: ['items', 'rootEntityRef'],\n        additionalProperties: false,\n      },\n      EntitiesBatchResponse: {\n        type: 'object',\n        properties: {\n          items: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/NullableEntity',\n            },\n            description:\n              'The list of entities, in the same order as the refs in the request. Entries\\nthat are null signify that no entity existed with that ref.',\n          },\n        },\n        required: ['items'],\n        additionalProperties: false,\n      },\n      EntityFacet: {\n        type: 'object',\n        properties: {\n          value: {\n            type: 'string',\n          },\n          count: {\n            type: 'number',\n          },\n        },\n        required: ['value', 'count'],\n        additionalProperties: false,\n      },\n      EntityFacetsResponse: {\n        type: 'object',\n        properties: {\n          facets: {\n            type: 'object',\n            additionalProperties: {\n              type: 'array',\n              items: {\n                $ref: '#/components/schemas/EntityFacet',\n              },\n            },\n          },\n        },\n        required: ['facets'],\n        additionalProperties: false,\n      },\n      Location: {\n        type: 'object',\n        properties: {\n          target: {\n            type: 'string',\n          },\n          type: {\n            type: 'string',\n          },\n          id: {\n            type: 'string',\n          },\n        },\n        required: ['target', 'type', 'id'],\n        description: 'Entity location for a specific entity.',\n        additionalProperties: false,\n      },\n      LocationSpec: {\n        type: 'object',\n        properties: {\n          target: {\n            type: 'string',\n          },\n          type: {\n            type: 'string',\n          },\n        },\n        required: ['target', 'type'],\n        description: 'Holds the entity location information.',\n        additionalProperties: false,\n      },\n      AnalyzeLocationExistingEntity: {\n        type: 'object',\n        properties: {\n          entity: {\n            $ref: '#/components/schemas/Entity',\n          },\n          isRegistered: {\n            type: 'boolean',\n          },\n          location: {\n            $ref: '#/components/schemas/LocationSpec',\n          },\n        },\n        required: ['entity', 'isRegistered', 'location'],\n        description:\n          \"If the folder pointed to already contained catalog info yaml files, they are\\nread and emitted like this so that the frontend can inform the user that it\\nlocated them and can make sure to register them as well if they weren't\\nalready\",\n        additionalProperties: false,\n      },\n      RecursivePartialEntityRelation: {\n        type: 'object',\n        properties: {\n          targetRef: {\n            type: 'string',\n            description: 'The entity ref of the target of this relation.',\n          },\n          type: {\n            type: 'string',\n            description: 'The type of the relation.',\n          },\n        },\n        description:\n          'A relation of a specific type to another entity in the catalog.',\n        additionalProperties: false,\n      },\n      RecursivePartialEntityMeta: {\n        allOf: [\n          {\n            $ref: '#/components/schemas/JsonObject',\n          },\n          {\n            type: 'object',\n            properties: {\n              links: {\n                type: 'array',\n                items: {\n                  $ref: '#/components/schemas/EntityLink',\n                },\n                description:\n                  'A list of external hyperlinks related to the entity.',\n              },\n              tags: {\n                type: 'array',\n                items: {\n                  type: 'string',\n                },\n                description:\n                  'A list of single-valued strings, to for example classify catalog entities in\\nvarious ways.',\n              },\n              annotations: {\n                $ref: '#/components/schemas/MapStringString',\n              },\n              labels: {\n                $ref: '#/components/schemas/MapStringString',\n              },\n              description: {\n                type: 'string',\n                description:\n                  'A short (typically relatively few words, on one line) description of the\\nentity.',\n              },\n              title: {\n                type: 'string',\n                description:\n                  'A display name of the entity, to be presented in user interfaces instead\\nof the `name` property above, when available.\\nThis field is sometimes useful when the `name` is cumbersome or ends up\\nbeing perceived as overly technical. The title generally does not have\\nas stringent format requirements on it, so it may contain special\\ncharacters and be more explanatory. Do keep it very short though, and\\navoid situations where a title can be confused with the name of another\\nentity, or where two entities share a title.\\nNote that this is only for display purposes, and may be ignored by some\\nparts of the code. Entity references still always make use of the `name`\\nproperty, not the title.',\n              },\n              namespace: {\n                type: 'string',\n                description: 'The namespace that the entity belongs to.',\n              },\n              name: {\n                type: 'string',\n                description:\n                  'The name of the entity.\\nMust be unique within the catalog at any given point in time, for any\\ngiven namespace + kind pair. This value is part of the technical\\nidentifier of the entity, and as such it will appear in URLs, database\\ntables, entity references, and similar. It is subject to restrictions\\nregarding what characters are allowed.\\nIf you want to use a different, more human readable string with fewer\\nrestrictions on it in user interfaces, see the `title` field below.',\n              },\n              etag: {\n                type: 'string',\n                description:\n                  'An opaque string that changes for each update operation to any part of\\nthe entity, including metadata.\\nThis field can not be set by the user at creation time, and the server\\nwill reject an attempt to do so. The field will be populated in read\\noperations. The field can (optionally) be specified when performing\\nupdate or delete operations, and the server will then reject the\\noperation if it does not match the current stored value.',\n              },\n              uid: {\n                type: 'string',\n                description:\n                  'A globally unique ID for the entity.\\nThis field can not be set by the user at creation time, and the server\\nwill reject an attempt to do so. The field will be populated in read\\noperations. The field can (optionally) be specified when performing\\nupdate or delete operations, but the server is free to reject requests\\nthat do so in such a way that it breaks semantics.',\n              },\n            },\n            description:\n              'Metadata fields common to all versions/kinds of entity.',\n          },\n        ],\n        additionalProperties: false,\n      },\n      RecursivePartialEntity: {\n        type: 'object',\n        properties: {\n          apiVersion: {\n            type: 'string',\n            description:\n              'The version of specification format for this particular entity that\\nthis is written against.',\n          },\n          kind: {\n            type: 'string',\n            description: 'The high level entity type being described.',\n          },\n          metadata: {\n            $ref: '#/components/schemas/RecursivePartialEntityMeta',\n          },\n          spec: {\n            $ref: '#/components/schemas/JsonObject',\n          },\n          relations: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/RecursivePartialEntityRelation',\n            },\n            description:\n              'The relations that this entity has with other entities.',\n          },\n        },\n        description: 'Makes all keys of an entire hierarchy optional.',\n        additionalProperties: false,\n      },\n      AnalyzeLocationEntityField: {\n        type: 'object',\n        properties: {\n          description: {\n            type: 'string',\n            description:\n              'A text to show to the user to inform about the choices made. Like, it could say\\n\"Found a CODEOWNERS file that covers this target, so we suggest leaving this\\nfield empty; which would currently make it owned by X\" where X is taken from the\\ncodeowners file.',\n          },\n          value: {\n            type: 'string',\n            nullable: true,\n          },\n          state: {\n            type: 'string',\n            enum: [\n              'analysisSuggestedValue',\n              'analysisSuggestedNoValue',\n              'needsUserInput',\n            ],\n            description:\n              'The outcome of the analysis for this particular field',\n          },\n          field: {\n            type: 'string',\n            description:\n              'e.g. \"spec.owner\"? The frontend needs to know how to \"inject\" the field into the\\nentity again if the user wants to change it',\n          },\n        },\n        required: ['description', 'value', 'state', 'field'],\n        additionalProperties: false,\n      },\n      AnalyzeLocationGenerateEntity: {\n        type: 'object',\n        properties: {\n          fields: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/AnalyzeLocationEntityField',\n            },\n          },\n          entity: {\n            $ref: '#/components/schemas/RecursivePartialEntity',\n          },\n        },\n        required: ['fields', 'entity'],\n        description:\n          \"This is some form of representation of what the analyzer could deduce.\\nWe should probably have a chat about how this can best be conveyed to\\nthe frontend. It'll probably contain a (possibly incomplete) entity, plus\\nenough info for the frontend to know what form data to show to the user\\nfor overriding/completing the info.\",\n        additionalProperties: false,\n      },\n      AnalyzeLocationResponse: {\n        type: 'object',\n        properties: {\n          generateEntities: {\n            items: {\n              $ref: '#/components/schemas/AnalyzeLocationGenerateEntity',\n            },\n            type: 'array',\n          },\n          existingEntityFiles: {\n            items: {\n              $ref: '#/components/schemas/AnalyzeLocationExistingEntity',\n            },\n            type: 'array',\n          },\n        },\n        required: ['generateEntities', 'existingEntityFiles'],\n        additionalProperties: false,\n      },\n      LocationInput: {\n        type: 'object',\n        properties: {\n          type: {\n            type: 'string',\n          },\n          target: {\n            type: 'string',\n          },\n        },\n        required: ['type', 'target'],\n        additionalProperties: false,\n      },\n      EntitiesQueryResponse: {\n        type: 'object',\n        properties: {\n          items: {\n            type: 'array',\n            items: {\n              $ref: '#/components/schemas/Entity',\n            },\n            description: 'The list of entities paginated by a specific filter.',\n          },\n          totalItems: {\n            type: 'number',\n          },\n          pageInfo: {\n            type: 'object',\n            properties: {\n              nextCursor: {\n                type: 'string',\n                description: 'The cursor for the next batch of entities.',\n              },\n              prevCursor: {\n                type: 'string',\n                description: 'The cursor for the previous batch of entities.',\n              },\n            },\n          },\n        },\n        required: ['items', 'totalItems', 'pageInfo'],\n        additionalProperties: false,\n      },\n    },\n    securitySchemes: {\n      JWT: {\n        type: 'http',\n        scheme: 'bearer',\n        bearerFormat: 'JWT',\n      },\n    },\n  },\n  paths: {\n    '/refresh': {\n      post: {\n        operationId: 'RefreshEntity',\n        description: 'Refresh the entity related to entityRef.',\n        responses: {\n          '200': {\n            description: 'Refreshed',\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [],\n        requestBody: {\n          required: true,\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                properties: {\n                  authorizationToken: {\n                    type: 'string',\n                  },\n                  entityRef: {\n                    type: 'string',\n                    description:\n                      'The reference to a single entity that should be refreshed',\n                  },\n                },\n                required: ['entityRef'],\n                description:\n                  'Options for requesting a refresh of entities in the catalog.',\n                additionalProperties: false,\n              },\n            },\n          },\n        },\n      },\n    },\n    '/entities': {\n      get: {\n        operationId: 'GetEntities',\n        description: 'Get all entities matching a given filter.',\n        responses: {\n          '200': {\n            description: '',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'array',\n                  items: {\n                    $ref: '#/components/schemas/Entity',\n                  },\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/fields',\n          },\n          {\n            $ref: '#/components/parameters/limit',\n          },\n          {\n            $ref: '#/components/parameters/filter',\n          },\n          {\n            $ref: '#/components/parameters/offset',\n          },\n          {\n            $ref: '#/components/parameters/after',\n          },\n          {\n            name: 'order',\n            in: 'query',\n            allowReserved: true,\n            required: false,\n            schema: {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n            },\n          },\n        ],\n      },\n    },\n    '/entities/by-uid/{uid}': {\n      get: {\n        operationId: 'GetEntityByUid',\n        description: 'Get a single entity by the UID.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/Entity',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/uid',\n          },\n        ],\n      },\n      delete: {\n        operationId: 'DeleteEntityByUid',\n        description: 'Delete a single entity by UID.',\n        responses: {\n          '204': {\n            description: 'Deleted successfully.',\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/uid',\n          },\n        ],\n      },\n    },\n    '/entities/by-name/{kind}/{namespace}/{name}': {\n      get: {\n        operationId: 'GetEntityByName',\n        description: 'Get an entity by an entity ref.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/Entity',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/kind',\n          },\n          {\n            $ref: '#/components/parameters/namespace',\n          },\n          {\n            $ref: '#/components/parameters/name',\n          },\n        ],\n      },\n    },\n    '/entities/by-name/{kind}/{namespace}/{name}/ancestry': {\n      get: {\n        operationId: 'GetEntityAncestryByName',\n        description: \"Get an entity's ancestry by entity ref.\",\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/EntityAncestryResponse',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/kind',\n          },\n          {\n            $ref: '#/components/parameters/namespace',\n          },\n          {\n            $ref: '#/components/parameters/name',\n          },\n        ],\n      },\n    },\n    '/entities/by-refs': {\n      post: {\n        operationId: 'GetEntitiesByRefs',\n        description:\n          'Get a batch set of entities given an array of entityRefs.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/EntitiesBatchResponse',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        requestBody: {\n          required: false,\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                required: ['entityRefs'],\n                properties: {\n                  entityRefs: {\n                    type: 'array',\n                    items: {\n                      type: 'string',\n                    },\n                  },\n                  fields: {\n                    type: 'array',\n                    items: {\n                      type: 'string',\n                    },\n                  },\n                },\n              },\n              examples: {\n                'Fetch Backstage entities': {\n                  value: {\n                    entityRefs: [\n                      'component:default/backstage',\n                      'api:default/backstage',\n                    ],\n                  },\n                },\n                'Fetch annotations for backstage entity': {\n                  value: {\n                    entityRefs: ['component:default/backstage'],\n                    fields: ['metadata.annotations'],\n                  },\n                },\n              },\n            },\n          },\n        },\n        parameters: [\n          {\n            $ref: '#/components/parameters/filter',\n          },\n        ],\n      },\n    },\n    '/entities/by-query': {\n      get: {\n        operationId: 'GetEntitiesByQuery',\n        description: 'Search for entities by a given query.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/EntitiesQueryResponse',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            $ref: '#/components/parameters/fields',\n          },\n          {\n            $ref: '#/components/parameters/limit',\n          },\n          {\n            $ref: '#/components/parameters/orderField',\n          },\n          {\n            $ref: '#/components/parameters/cursor',\n          },\n          {\n            $ref: '#/components/parameters/filter',\n          },\n          {\n            name: 'fullTextFilterTerm',\n            in: 'query',\n            description: 'Text search term.',\n            required: false,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n          {\n            name: 'fullTextFilterFields',\n            in: 'query',\n            description:\n              'A comma separated list of fields to sort returned results by.',\n            required: false,\n            allowReserved: true,\n            schema: {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n            },\n            explode: false,\n            style: 'form',\n          },\n        ],\n      },\n    },\n    '/entity-facets': {\n      get: {\n        operationId: 'GetEntityFacets',\n        description: 'Get all entity facets that match the given filters.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/EntityFacetsResponse',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            in: 'query',\n            name: 'facet',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'array',\n              items: {\n                type: 'string',\n              },\n            },\n            examples: {\n              'Entities by kind': {\n                value: ['kind'],\n              },\n              'Entities by spec type': {\n                value: ['spec.type'],\n              },\n            },\n          },\n          {\n            $ref: '#/components/parameters/filter',\n          },\n        ],\n      },\n    },\n    '/locations': {\n      post: {\n        operationId: 'CreateLocation',\n        description: 'Create a location for a given target.',\n        responses: {\n          '201': {\n            description: 'Created',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    exists: {\n                      type: 'boolean',\n                    },\n                    entities: {\n                      items: {\n                        $ref: '#/components/schemas/Entity',\n                      },\n                      type: 'array',\n                    },\n                    location: {\n                      $ref: '#/components/schemas/Location',\n                    },\n                  },\n                  required: ['entities', 'location'],\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            in: 'query',\n            name: 'dryRun',\n            required: false,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n        ],\n        requestBody: {\n          required: true,\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                properties: {\n                  target: {\n                    type: 'string',\n                  },\n                  type: {\n                    type: 'string',\n                  },\n                },\n                required: ['target', 'type'],\n              },\n            },\n          },\n        },\n      },\n      get: {\n        operationId: 'GetLocations',\n        description: 'Get all locations',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'array',\n                  items: {\n                    type: 'object',\n                    properties: {\n                      data: {\n                        $ref: '#/components/schemas/Location',\n                      },\n                    },\n                    required: ['data'],\n                  },\n                },\n              },\n            },\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [],\n      },\n    },\n    '/locations/{id}': {\n      get: {\n        operationId: 'GetLocation',\n        description: 'Get a location by id.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/Location',\n                },\n              },\n            },\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            in: 'path',\n            name: 'id',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n        ],\n      },\n      delete: {\n        operationId: 'DeleteLocation',\n        description: 'Delete a location by id.',\n        responses: {\n          '204': {\n            description: 'No content',\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            in: 'path',\n            name: 'id',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n        ],\n      },\n    },\n    '/locations/by-entity/{kind}/{namespace}/{name}': {\n      get: {\n        operationId: 'getLocationByEntity',\n        description: 'Get a location for entity.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/Location',\n                },\n              },\n            },\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [\n          {\n            in: 'path',\n            name: 'kind',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n          {\n            in: 'path',\n            name: 'namespace',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n          {\n            in: 'path',\n            name: 'name',\n            required: true,\n            allowReserved: true,\n            schema: {\n              type: 'string',\n            },\n          },\n        ],\n      },\n    },\n    '/analyze-location': {\n      post: {\n        operationId: 'AnalyzeLocation',\n        description: 'Validate a given location.',\n        responses: {\n          '200': {\n            description: 'Ok',\n            content: {\n              'application/json': {\n                schema: {\n                  $ref: '#/components/schemas/AnalyzeLocationResponse',\n                },\n              },\n            },\n          },\n          '400': {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n          default: {\n            $ref: '#/components/responses/ErrorResponse',\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [],\n        requestBody: {\n          required: true,\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                properties: {\n                  catalogFileName: {\n                    type: 'string',\n                  },\n                  location: {\n                    $ref: '#/components/schemas/LocationInput',\n                  },\n                },\n                required: ['location'],\n              },\n            },\n          },\n        },\n      },\n    },\n    '/validate-entity': {\n      post: {\n        operationId: 'ValidateEntity',\n        description:\n          'Validate that a passed in entity has no errors in schema.',\n        responses: {\n          '200': {\n            description: 'Ok',\n          },\n          '400': {\n            description: 'Validation errors.',\n            content: {\n              'application/json': {\n                schema: {\n                  type: 'object',\n                  properties: {\n                    errors: {\n                      type: 'array',\n                      items: {\n                        type: 'object',\n                        properties: {\n                          name: {\n                            type: 'string',\n                          },\n                          message: {\n                            type: 'string',\n                          },\n                        },\n                        required: ['name', 'message'],\n                        additionalProperties: {},\n                      },\n                    },\n                  },\n                  required: ['errors'],\n                },\n              },\n            },\n          },\n        },\n        security: [\n          {},\n          {\n            JWT: [],\n          },\n        ],\n        parameters: [],\n        requestBody: {\n          required: true,\n          content: {\n            'application/json': {\n              schema: {\n                type: 'object',\n                properties: {\n                  location: {\n                    type: 'string',\n                  },\n                  entity: {\n                    type: 'object',\n                    additionalProperties: {},\n                  },\n                },\n                required: ['location', 'entity'],\n              },\n            },\n          },\n        },\n      },\n    },\n  },\n} as const;\nexport const createOpenApiRouter = async (\n  options?: Parameters<typeof createValidatedOpenApiRouter>['1'],\n) => createValidatedOpenApiRouter<typeof spec>(spec, options);\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { InputError } from '@backstage/errors';\nimport { EntityPagination } from '../../catalog/types';\n\n/**\n * Parses the pagination related parameters out of a query, e.g.\n * /entities?offset=100&limit=10\n */\nexport function parseEntityPaginationParams({\n  limit,\n  offset,\n  after,\n}: {\n  offset?: number;\n  limit?: number;\n  after?: string;\n}): EntityPagination | undefined {\n  if (offset === undefined && limit === undefined && after === undefined) {\n    return undefined;\n  }\n\n  if (offset !== undefined && offset < 0) {\n    throw new InputError(`Invalid offset, must be zero or greater`);\n  }\n  if (limit !== undefined && limit <= 0) {\n    throw new InputError(`Invalid limit, must be greater than zero`);\n  }\n  if (after !== undefined && !after) {\n    throw new InputError(`Invalid after, must not be empty`);\n  }\n\n  return {\n    ...(offset !== undefined ? { offset } : {}),\n    ...(limit !== undefined ? { limit } : {}),\n    ...(after !== undefined ? { after } : {}),\n  };\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { errorHandler } from '@backstage/backend-common';\nimport {\n  ANNOTATION_LOCATION,\n  ANNOTATION_ORIGIN_LOCATION,\n  Entity,\n  parseLocationRef,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport { InputError, NotFoundError, serializeError } from '@backstage/errors';\nimport express from 'express';\nimport yn from 'yn';\nimport { z } from 'zod';\nimport { EntitiesCatalog } from '../catalog/types';\nimport { LocationAnalyzer } from '../ingestion';\nimport { CatalogProcessingOrchestrator } from '../processing/types';\nimport { validateEntityEnvelope } from '../processing/util';\nimport {\n  basicEntityFilter,\n  entitiesBatchRequest,\n  parseEntityFilterParams,\n  parseEntityTransformParams,\n  parseQueryEntitiesParams,\n} from './request';\nimport { parseEntityFacetParams } from './request/parseEntityFacetParams';\nimport { parseEntityOrderParams } from './request/parseEntityOrderParams';\nimport { LocationService, RefreshService } from './types';\nimport {\n  disallowReadonlyMode,\n  encodeCursor,\n  locationInput,\n  validateRequestBody,\n} from './util';\nimport { createOpenApiRouter } from '../schema/openapi.generated';\nimport { PluginTaskScheduler } from '@backstage/backend-tasks';\nimport { parseEntityPaginationParams } from './request/parseEntityPaginationParams';\nimport {\n  AuthService,\n  HttpAuthService,\n  LoggerService,\n} from '@backstage/backend-plugin-api';\n\nimport { DefaultAuditLogger } from '@janus-idp/backstage-plugin-audit-log-node';\n\n/**\n * Options used by {@link createRouter}.\n *\n * @public\n */\nexport interface RouterOptions {\n  entitiesCatalog?: EntitiesCatalog;\n  locationAnalyzer?: LocationAnalyzer;\n  locationService: LocationService;\n  orchestrator?: CatalogProcessingOrchestrator;\n  refreshService?: RefreshService;\n  scheduler?: PluginTaskScheduler;\n  logger: LoggerService;\n  config: Config;\n  permissionIntegrationRouter?: express.Router;\n  auth: AuthService;\n  httpAuth: HttpAuthService;\n}\n\n/**\n * Creates a catalog router.\n *\n * @public\n */\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const router = await createOpenApiRouter({\n    validatorOptions: {\n      // We want the spec to be up to date with the expected value, but the return type needs\n      //  to be controlled by the router implementation not the request validator.\n      ignorePaths: /^\\/validate-entity\\/?$/,\n    },\n  });\n  const {\n    entitiesCatalog,\n    locationAnalyzer,\n    locationService,\n    orchestrator,\n    refreshService,\n    config,\n    logger,\n    permissionIntegrationRouter,\n    auth,\n    httpAuth,\n  } = options;\n\n  const auditLogger = new DefaultAuditLogger({\n    logger,\n    authService: auth,\n    httpAuthService: httpAuth,\n  });\n  const readonlyEnabled =\n    config.getOptionalBoolean('catalog.readonly') || false;\n  if (readonlyEnabled) {\n    logger.info('Catalog is running in readonly mode');\n  }\n\n  if (refreshService) {\n    // TODO: Potentially find a way to track the ancestor that gets refreshed to refresh this entity (as well as the child of that ancestor?)\n    router.post('/refresh', async (req, res) => {\n      const { authorizationToken, ...restBody } = req.body;\n      const actorId = await auditLogger.getActorId(req);\n      try {\n        await auditLogger.auditLog({\n          eventName: 'CatalogEntityRefresh',\n          actorId,\n          status: 'succeeded',\n          stage: 'initiation',\n          metadata: {\n            entityRef: restBody.entityRef,\n          },\n          request: req,\n          message: `Refresh attempt for ${restBody.entityRef} initiated by ${actorId}`,\n        });\n\n        const credentials = authorizationToken\n          ? await auth.authenticate(authorizationToken)\n          : await httpAuth.credentials(req);\n\n        await refreshService.refresh({\n          ...restBody,\n          credentials,\n        });\n        await auditLogger.auditLog({\n          eventName: 'CatalogEntityRefresh',\n          actorId,\n          status: 'succeeded',\n          stage: 'completion',\n          metadata: {\n            entityRef: restBody.entityRef,\n          },\n          response: {\n            status: 200,\n          },\n          request: req,\n          message: `Refresh attempt for ${restBody.entityRef} triggered by ${actorId}`,\n        });\n        res.status(200).end();\n      } catch (err) {\n        await auditLogger.auditLog({\n          eventName: 'CatalogEntityRefresh',\n          actorId,\n          status: 'failed',\n          stage: 'completion',\n          level: 'error',\n          errors: [\n            {\n              name: err.name,\n              message: err.message,\n              stack: err.stack,\n            },\n          ],\n          metadata: {\n            entityRef: restBody.entityRef,\n          },\n          request: req,\n          message: `Refresh attempt for ${restBody.entityRef} by ${actorId} failed`,\n        });\n        throw err;\n      }\n    });\n  }\n\n  if (permissionIntegrationRouter) {\n    router.use(permissionIntegrationRouter);\n  }\n\n  if (entitiesCatalog) {\n    router\n      .get('/entities', async (req, res) => {\n        const actorId = await auditLogger.getActorId(\n          req as unknown as express.Request,\n        );\n        try {\n          await auditLogger.auditLog({\n            eventName: 'CatalogEntityFetch',\n            actorId,\n            status: 'succeeded',\n            stage: 'initiation',\n            request: req as unknown as express.Request,\n            message: `Entity fetch attempt initiated by ${actorId}`,\n          });\n          const { entities, pageInfo } = await entitiesCatalog.entities({\n            filter: parseEntityFilterParams(req.query),\n            fields: parseEntityTransformParams(req.query),\n            order: parseEntityOrderParams(req.query),\n            pagination: parseEntityPaginationParams(req.query),\n            credentials: await httpAuth.credentials(req),\n          });\n\n          // Add a Link header to the next page\n          if (pageInfo.hasNextPage) {\n            const url = new URL(`http://ignored${req.url}`);\n            url.searchParams.delete('offset');\n            url.searchParams.set('after', pageInfo.endCursor);\n            res.setHeader('link', `<${url.pathname}${url.search}>; rel=\"next\"`);\n          }\n\n          await auditLogger.auditLog({\n            eventName: 'CatalogEntityFetch',\n            actorId,\n            status: 'succeeded',\n            stage: 'completion',\n            request: req as unknown as express.Request,\n            // Let's not log out the entities since this can make the log very big due to it not being paged?\n            response: {\n              status: 200,\n            },\n            message: `Entity fetch attempt by ${actorId} succeeded`,\n          });\n\n          // TODO(freben): encode the pageInfo in the response\n          res.json(entities);\n        } catch (err) {\n          await auditLogger.auditLog({\n            eventName: 'CatalogEntityFetch',\n            status: 'failed',\n            stage: 'completion',\n            level: 'error',\n            request: req as unknown as express.Request,\n            errors: [\n              {\n                name: err.name,\n                message: err.message,\n                stack: err.stack,\n              },\n            ],\n            message: `Entity fetch attempt by ${actorId} failed`,\n          });\n          throw err;\n        }\n      })\n      .get('/entities/by-query', async (req, res) => {\n        const actorId = await auditLogger.getActorId(\n          req as unknown as express.Request,\n        );\n        try {\n          await auditLogger.auditLog({\n            eventName: 'QueriedCatalogEntityFetch',\n            actorId,\n            status: 'succeeded',\n            stage: 'initiation',\n            request: req as unknown as express.Request,\n            message: `Queried entity fetch attempt initiated by ${actorId}`,\n          });\n          const { items, pageInfo, totalItems } =\n            await entitiesCatalog.queryEntities({\n              limit: req.query.limit,\n              ...parseQueryEntitiesParams(req.query),\n              credentials: await httpAuth.credentials(req),\n            });\n\n          res.json({\n            items,\n            totalItems,\n            pageInfo: {\n              ...(pageInfo.nextCursor && {\n                nextCursor: encodeCursor(pageInfo.nextCursor),\n              }),\n              ...(pageInfo.prevCursor && {\n                prevCursor: encodeCursor(pageInfo.prevCursor),\n              }),\n            },\n          });\n          await auditLogger.auditLog({\n            eventName: 'QueriedCatalogEntityFetch',\n            actorId,\n            status: 'succeeded',\n            stage: 'completion',\n            request: req as unknown as express.Request,\n            metadata: {\n              totalEntities: totalItems,\n              pageInfo: {\n                ...(pageInfo.nextCursor && {\n                  nextCursor: encodeCursor(pageInfo.nextCursor),\n                }),\n                ...(pageInfo.prevCursor && {\n                  prevCursor: encodeCursor(pageInfo.prevCursor),\n                }),\n              },\n            },\n            // Let's not log out the entities since this can make the log very big\n            response: {\n              status: 200,\n            },\n            message: `Queried entity fetch attempt by ${actorId} succeeded`,\n          });\n        } catch (err) {\n          await auditLogger.auditLog({\n            eventName: 'QueriedCatalogEntityFetch',\n            actorId,\n            status: 'failed',\n            stage: 'completion',\n            level: 'error',\n            request: req as unknown as express.Request,\n            errors: [\n              {\n                name: err.name,\n                message: err.message,\n                stack: err.stack,\n              },\n            ],\n            message: `Queried entity fetch attempt by ${actorId} failed`,\n          });\n          throw err;\n        }\n      })\n      .get('/entities/by-uid/:uid', async (req, res) => {\n        const { uid } = req.params;\n        const actorId = await auditLogger.getActorId(req);\n        try {\n          await auditLogger.auditLog({\n            eventName: 'CatalogEntityFetchByUid',\n            actorId,\n            status: 'succeeded',\n            stage: 'initiation',\n            request: req,\n            metadata: {\n              uid: uid,\n            },\n            message: `Fetch attempt for entity with uid ${uid} initiated by ${actorId}`,\n          });\n          const { entities } = await entitiesCatalog.entities({\n            filter: basicEntityFilter({ 'metadata.uid': uid }),\n            credentials: await httpAuth.credentials(req),\n          });\n          if (!entities.length) {\n            throw new NotFoundError(`No entity with uid ${uid}`);\n          }\n          res.status(200).json(entities[0]);\n          await auditLogger.auditLog({\n            eventName: 'CatalogEntityFetchByUid',\n            actorId,\n            status: 'succeeded',\n            stage: 'completion',\n            request: req,\n            metadata: {\n              uid: uid,\n              entityRef: stringifyEntityRef(entities[0]),\n            },\n            response: {\n              status: 200,\n            },\n            message: `Fetch attempt for entity with uid ${uid} by ${actorId} succeeded`,\n          });\n        } catch (err) {\n          await auditLogger.auditLog({\n            eventName: 'CatalogEntityFetchByUid',\n            actorId,\n            status: 'failed',\n            stage: 'completion',\n            level: 'error',\n            request: req,\n            metadata: {\n              uid: uid,\n            },\n            errors: [\n              {\n                name: err.name,\n                message: err.message,\n                stack: err.stack,\n              },\n            ],\n            message: `Fetch attempt for entity with uid ${uid} by ${actorId} failed`,\n          });\n          throw err;\n        }\n      })\n      .delete('/entities/by-uid/:uid', async (req, res) => {\n        const { uid } = req.params;\n        const actorId = await auditLogger.getActorId(req);\n        let entityRef: string | undefined;\n        try {\n          // Get the entityRef of the UID so users can more easily identity the entity\n          const { entities } = await entitiesCatalog.entities({\n            filter: basicEntityFilter({ 'metadata.uid': uid }),\n            credentials: await httpAuth.credentials(req),\n          });\n          if (entities.length) {\n            entityRef = stringifyEntityRef(entities[0]);\n          }\n          await auditLogger.auditLog({\n            eventName: 'CatalogEntityDeletion',\n            actorId,\n            status: 'succeeded',\n            stage: 'initiation',\n            request: req,\n            metadata: {\n              uid: uid,\n              entityRef: entityRef,\n            },\n            message: `Deletion attempt for entity with uid ${uid} initiated by ${actorId}`,\n          });\n          await entitiesCatalog.removeEntityByUid(uid, {\n            credentials: await httpAuth.credentials(req),\n          });\n          await auditLogger.auditLog({\n            eventName: 'CatalogEntityDeletion',\n            actorId,\n            status: 'succeeded',\n            stage: 'completion',\n            request: req,\n            metadata: {\n              uid: uid,\n              entityRef: entityRef,\n            },\n            response: {\n              status: 204,\n            },\n            message: `Deletion attempt for entity with uid ${uid} by ${actorId} succeeded`,\n          });\n          res.status(204).end();\n        } catch (err) {\n          await auditLogger.auditLog({\n            eventName: 'CatalogEntityDeletion',\n            actorId,\n            status: 'failed',\n            stage: 'completion',\n            level: 'error',\n            request: req,\n            errors: [\n              {\n                name: err.name,\n                message: err.message,\n                stack: err.stack,\n              },\n            ],\n            message: `Deletion attempt for entity with uid ${uid} by ${actorId} failed`,\n          });\n          throw err;\n        }\n      })\n      .get('/entities/by-name/:kind/:namespace/:name', async (req, res) => {\n        const { kind, namespace, name } = req.params;\n        const entityRef = stringifyEntityRef({ kind, namespace, name });\n        const actorId = await auditLogger.getActorId(req);\n        try {\n          await auditLogger.auditLog({\n            eventName: 'CatalogEntityFetchByName',\n            actorId,\n            status: 'succeeded',\n            stage: 'initiation',\n            request: req,\n            metadata: {\n              entityRef: entityRef,\n            },\n            message: `Fetch attempt for entity with entityRef ${entityRef} initiated by ${actorId}`,\n          });\n          const { entities } = await entitiesCatalog.entities({\n            filter: basicEntityFilter({\n              kind: kind,\n              'metadata.namespace': namespace,\n              'metadata.name': name,\n            }),\n            credentials: await httpAuth.credentials(req),\n          });\n          if (!entities.length) {\n            throw new NotFoundError(\n              `No entity named '${name}' found, with kind '${kind}' in namespace '${namespace}'`,\n            );\n          }\n          res.status(200).json(entities[0]);\n          await auditLogger.auditLog({\n            eventName: 'CatalogEntityFetchByName',\n            actorId,\n            status: 'succeeded',\n            stage: 'completion',\n            request: req,\n            metadata: {\n              entityRef: entityRef,\n            },\n            response: {\n              status: 200,\n            },\n            message: `Fetch attempt for entity with entityRef ${entityRef} by ${actorId} succeeded`,\n          });\n        } catch (err) {\n          await auditLogger.auditLog({\n            eventName: 'CatalogEntityFetchByName',\n            actorId,\n            status: 'failed',\n            stage: 'completion',\n            level: 'error',\n            request: req,\n            metadata: {\n              entityRef: entityRef,\n            },\n            errors: [\n              {\n                name: err.name,\n                message: err.message,\n                stack: err.stack,\n              },\n            ],\n            message: `Fetch attempt for entity with entityRef ${entityRef} by ${actorId} failed`,\n          });\n          throw err;\n        }\n      })\n      .get(\n        '/entities/by-name/:kind/:namespace/:name/ancestry',\n        async (req, res) => {\n          const { kind, namespace, name } = req.params;\n          const entityRef = stringifyEntityRef({ kind, namespace, name });\n          const actorId = await auditLogger.getActorId(req);\n          try {\n            await auditLogger.auditLog({\n              eventName: 'CatalogEntityAncestryFetch',\n              actorId,\n              status: 'succeeded',\n              stage: 'initiation',\n              request: req,\n              metadata: {\n                entityRef: entityRef,\n              },\n              message: `Fetch attempt for entity ancestor of entity ${entityRef} initiated by ${actorId}`,\n            });\n            const response = await entitiesCatalog.entityAncestry(entityRef, {\n              credentials: await httpAuth.credentials(req),\n            });\n            res.status(200).json(response);\n            await auditLogger.auditLog({\n              eventName: 'CatalogEntityAncestryFetch',\n              actorId,\n              status: 'succeeded',\n              stage: 'completion',\n              request: req,\n              metadata: {\n                rootEntityRef: response.rootEntityRef,\n                ancestry: response.items.map(ancestryLink => {\n                  return {\n                    entityRef: stringifyEntityRef(ancestryLink.entity),\n                    parentEntityRefs: ancestryLink.parentEntityRefs,\n                  };\n                }),\n              },\n              response: {\n                status: 200,\n              },\n              message: `Fetch attempt for entity ancestor of entity ${entityRef} by ${actorId} succeeded`,\n            });\n          } catch (err) {\n            await auditLogger.auditLog({\n              eventName: 'CatalogEntityAncestryFetch',\n              actorId,\n              status: 'failed',\n              stage: 'completion',\n              level: 'error',\n              request: req,\n              metadata: {\n                entityRef: entityRef,\n              },\n              errors: [\n                {\n                  name: err.name,\n                  message: err.message,\n                  stack: err.stack,\n                },\n              ],\n              message: `Fetch attempt for entity ancestor of entity ${entityRef} by ${actorId} failed`,\n            });\n            throw err;\n          }\n        },\n      )\n      .post('/entities/by-refs', async (req, res) => {\n        const actorId = await auditLogger.getActorId(req);\n        try {\n          await auditLogger.auditLog({\n            eventName: 'CatalogEntityBatchFetch',\n            actorId,\n            status: 'succeeded',\n            stage: 'initiation',\n            request: req,\n            message: `Batch entity fetch attempt initiated by ${actorId}`,\n          });\n          const request = entitiesBatchRequest(req);\n          const response = await entitiesCatalog.entitiesBatch({\n            entityRefs: request.entityRefs,\n            filter: parseEntityFilterParams(req.query),\n            fields: parseEntityTransformParams(req.query, request.fields),\n            credentials: await httpAuth.credentials(req),\n          });\n          res.status(200).json(response);\n          await auditLogger.auditLog({\n            eventName: 'CatalogEntityBatchFetch',\n            actorId,\n            status: 'succeeded',\n            stage: 'completion',\n            request: req,\n            metadata: {\n              ...request,\n            },\n            response: {\n              status: 200,\n            },\n            message: `Batch entity fetch attempt by ${actorId} succeeded`,\n          });\n        } catch (err) {\n          await auditLogger.auditLog({\n            eventName: 'CatalogEntityBatchFetch',\n            actorId,\n            status: 'failed',\n            stage: 'completion',\n            level: 'error',\n            request: req,\n            errors: [\n              {\n                name: err.name,\n                message: err.message,\n                stack: err.stack,\n              },\n            ],\n            message: `Batch entity fetch attempt by ${actorId} failed`,\n          });\n          throw err;\n        }\n      })\n      .get('/entity-facets', async (req, res) => {\n        const actorId = await auditLogger.getActorId(req);\n        try {\n          await auditLogger.auditLog({\n            eventName: 'CatalogEntityFacetFetch',\n            actorId,\n            status: 'succeeded',\n            stage: 'initiation',\n            request: req,\n            message: `Entity facet fetch attempt initiated by ${actorId}`,\n          });\n          const response = await entitiesCatalog.facets({\n            filter: parseEntityFilterParams(req.query),\n            facets: parseEntityFacetParams(req.query),\n            credentials: await httpAuth.credentials(req),\n          });\n          res.status(200).json(response);\n          await auditLogger.auditLog({\n            eventName: 'CatalogEntityFacetFetch',\n            actorId,\n            status: 'succeeded',\n            stage: 'completion',\n            request: req,\n            response: { status: 200 },\n            message: `Entity facet fetch attempt by ${actorId} succeeded`,\n          });\n        } catch (err) {\n          await auditLogger.auditLog({\n            eventName: 'CatalogEntityFacetFetch',\n            actorId,\n            status: 'failed',\n            stage: 'completion',\n            request: req,\n            errors: [\n              {\n                name: err.name,\n                message: err.message,\n                stack: err.stack,\n              },\n            ],\n            message: `Entity facet fetch attempt by ${actorId} failed`,\n          });\n          throw err;\n        }\n      });\n  }\n\n  if (locationService) {\n    router\n      .post('/locations', async (req, res) => {\n        const credentials = await httpAuth.credentials(req);\n        const actorId = await auditLogger.getActorId(req);\n        const location = await validateRequestBody(req, locationInput);\n        const dryRun = yn(req.query.dryRun, { default: false });\n\n        try {\n          await auditLogger.auditLog({\n            eventName: 'CatalogLocationCreation',\n            status: 'succeeded',\n            stage: 'initiation',\n            actorId,\n            metadata: {\n              location: location,\n              isDryRun: dryRun,\n            },\n            request: req,\n            message: `Creation attempt of location entity for ${location.target} initiated by ${actorId}`,\n          });\n\n          // when in dryRun addLocation is effectively a read operation so we don't\n          // need to disallow readonly\n          if (!dryRun) {\n            disallowReadonlyMode(readonlyEnabled);\n          }\n\n          const output = await locationService.createLocation(\n            location,\n            dryRun,\n            {\n              credentials,\n            },\n          );\n          await auditLogger.auditLog({\n            eventName: 'CatalogLocationCreation',\n            status: 'succeeded',\n            stage: 'completion',\n            actorId,\n            metadata: {\n              location: output.location,\n              isDryRun: dryRun,\n            },\n            request: req,\n            response: {\n              status: 201,\n            },\n            message: `Creation of location entity for ${location.target} initiated by ${actorId} succeeded`,\n          });\n          res.status(201).json(output);\n        } catch (err) {\n          await auditLogger.auditLog({\n            eventName: 'CatalogLocationCreation',\n            status: 'failed',\n            stage: 'completion',\n            level: 'error',\n            actorId,\n            metadata: {\n              location: location,\n              isDryRun: dryRun,\n            },\n            errors: [\n              {\n                name: err.name,\n                message: err.message,\n                stack: err.stack,\n              },\n            ],\n            request: req,\n            message: `Creation of location entity for ${location.target} initiated by ${actorId} failed`,\n          });\n          throw err;\n        }\n      })\n      .get('/locations', async (req, res) => {\n        const actorId = await auditLogger.getActorId(req);\n        try {\n          await auditLogger.auditLog({\n            eventName: 'CatalogLocationFetch',\n            status: 'succeeded',\n            stage: 'initiation',\n            actorId,\n            request: req,\n            message: `Fetch attempt of locations initiated by ${actorId}`,\n          });\n          const locations = await locationService.listLocations({\n            credentials: await httpAuth.credentials(req),\n          });\n          res.status(200).json(locations.map(l => ({ data: l })));\n          await auditLogger.auditLog({\n            eventName: 'CatalogLocationFetch',\n            status: 'succeeded',\n            stage: 'completion',\n            actorId,\n            request: req,\n            response: {\n              status: 200,\n            },\n            message: `Fetch attempt of locations by ${actorId} succeeded`,\n          });\n        } catch (err) {\n          await auditLogger.auditLog({\n            eventName: 'CatalogLocationFetch',\n            status: 'failed',\n            stage: 'completion',\n            level: 'error',\n            actorId,\n            request: req,\n            errors: [\n              {\n                name: err.name,\n                message: err.message,\n                stack: err.stack,\n              },\n            ],\n            message: `Fetch attempt of locations by ${actorId} failed`,\n          });\n          throw err;\n        }\n      })\n\n      .get('/locations/:id', async (req, res) => {\n        const { id } = req.params;\n        const actorId = await auditLogger.getActorId(req);\n        try {\n          await auditLogger.auditLog({\n            eventName: 'CatalogLocationFetchById',\n            status: 'succeeded',\n            stage: 'initiation',\n            actorId,\n            metadata: {\n              id: id,\n            },\n            request: req,\n            message: `Fetch attempt of location with id: ${id} initiated by ${actorId}`,\n          });\n          const output = await locationService.getLocation(id, {\n            credentials: await httpAuth.credentials(req),\n          });\n          res.status(200).json(output);\n          await auditLogger.auditLog({\n            eventName: 'CatalogLocationFetchById',\n            status: 'succeeded',\n            stage: 'completion',\n            actorId,\n            metadata: {\n              id: id,\n            },\n            response: {\n              status: 200,\n              body: output,\n            },\n            request: req,\n            message: `Fetch attempt of location with id: ${id} by ${actorId} succeeded`,\n          });\n        } catch (err) {\n          await auditLogger.auditLog({\n            eventName: 'CatalogLocationFetchById',\n            status: 'failed',\n            stage: 'completion',\n            level: 'error',\n            actorId,\n            metadata: {\n              id: id,\n            },\n            errors: [\n              {\n                name: err.name,\n                message: err.message,\n                stack: err.stack,\n              },\n            ],\n            request: req,\n            message: `Fetch attempt of location with id: ${id} by ${actorId} failed`,\n          });\n          throw err;\n        }\n      })\n      .delete('/locations/:id', async (req, res) => {\n        const actorId = await auditLogger.getActorId(req);\n        const { id } = req.params;\n        try {\n          await auditLogger.auditLog({\n            eventName: 'CatalogLocationDeletion',\n            status: 'succeeded',\n            stage: 'initiation',\n            actorId,\n            metadata: {\n              id: id,\n            },\n            request: req,\n            message: `Deletion attempt of location with id: ${id} initiated by ${actorId}`,\n          });\n          disallowReadonlyMode(readonlyEnabled);\n          // Grabbing the information of the location begin deleted\n          const location = await locationService.getLocation(id, {\n            credentials: await httpAuth.credentials(req),\n          });\n          await locationService.deleteLocation(id, {\n            credentials: await httpAuth.credentials(req),\n          });\n          await auditLogger.auditLog({\n            eventName: 'CatalogLocationDeletion',\n            status: 'succeeded',\n            stage: 'completion',\n            actorId,\n            metadata: {\n              location,\n            },\n            response: {\n              status: 204,\n            },\n            request: req,\n            message: `Deletion attempt of location with id: ${id} by ${actorId} succeeded`,\n          });\n          res.status(204).end();\n        } catch (err) {\n          await auditLogger.auditLog({\n            eventName: 'CatalogLocationDeletion',\n            status: 'failed',\n            stage: 'completion',\n            level: 'error',\n            actorId,\n            metadata: {\n              id: id,\n            },\n            errors: [\n              {\n                name: err.name,\n                message: err.message,\n                stack: err.stack,\n              },\n            ],\n            request: req,\n            message: `Deletion attempt of location with id: ${id} by ${actorId} failed`,\n          });\n          throw err;\n        }\n      })\n      .get('/locations/by-entity/:kind/:namespace/:name', async (req, res) => {\n        const { kind, namespace, name } = req.params;\n        const actorId = await auditLogger.getActorId(req);\n        const locationRef = `${kind}:${namespace}/${name}`;\n\n        try {\n          await auditLogger.auditLog({\n            eventName: 'CatalogLocationFetchByEntityRef',\n            status: 'succeeded',\n            stage: 'initiation',\n            actorId,\n            metadata: {\n              locationRef: locationRef,\n            },\n            request: req,\n            message: `Fetch attempt for location ${locationRef} initiated by ${actorId}`,\n          });\n\n          const output = await locationService.getLocationByEntity(\n            { kind, namespace, name },\n            { credentials: await httpAuth.credentials(req) },\n          );\n          res.status(200).json(output);\n          await auditLogger.auditLog({\n            eventName: 'CatalogLocationFetchByEntityRef',\n            status: 'succeeded',\n            stage: 'completion',\n            actorId,\n            metadata: {\n              locationRef: locationRef,\n            },\n            response: {\n              status: 200,\n              body: output,\n            },\n            request: req,\n            message: `Fetch attempt for location ${locationRef} by ${actorId} succeeded`,\n          });\n        } catch (err) {\n          await auditLogger.auditLog({\n            eventName: 'CatalogLocationFetchByEntityRef',\n            status: 'failed',\n            stage: 'completion',\n            level: 'error',\n            actorId,\n            metadata: {\n              locationRef: locationRef,\n            },\n            errors: [\n              {\n                name: err.name,\n                message: err.message,\n                stack: err.stack,\n              },\n            ],\n            request: req,\n            message: `Fetch attempt for location ${locationRef} by ${actorId} failed`,\n          });\n          throw err;\n        }\n      });\n  }\n\n  if (locationAnalyzer) {\n    router.post('/analyze-location', async (req, res) => {\n      const actorId = await auditLogger.getActorId(req);\n\n      try {\n        await auditLogger.auditLog({\n          eventName: 'CatalogLocationAnalyze',\n          status: 'succeeded',\n          stage: 'initiation',\n          actorId,\n          request: req,\n          message: `Analyze location for location initiated by ${actorId}`,\n        });\n        const body = await validateRequestBody(\n          req,\n          z.object({\n            location: locationInput,\n            catalogFilename: z.string().optional(),\n          }),\n        );\n        const schema = z.object({\n          location: locationInput,\n          catalogFilename: z.string().optional(),\n        });\n        const parsedBody = schema.parse(body);\n        try {\n          const output = await locationAnalyzer.analyzeLocation(parsedBody);\n          res.status(200).json(output);\n          await auditLogger.auditLog({\n            eventName: 'CatalogLocationAnalyze',\n            status: 'succeeded',\n            stage: 'completion',\n            actorId,\n            request: req,\n            response: {\n              status: 200,\n              body: output,\n            },\n            message: `Analyze location for location by ${actorId} succeeded`,\n          });\n        } catch (err) {\n          if (\n            // Catch errors from parse-url library.\n            err.name === 'Error' &&\n            'subject_url' in err\n          ) {\n            throw new InputError('The given location.target is not a URL');\n          }\n          throw err;\n        }\n      } catch (err) {\n        await auditLogger.auditLog({\n          eventName: 'CatalogLocationAnalyze',\n          status: 'failed',\n          stage: 'completion',\n          level: 'error',\n          actorId,\n          errors: [\n            {\n              name: err.name,\n              message: err.message,\n              stack: err.stack,\n            },\n          ],\n          request: req,\n          message: `Analyze location for location by ${actorId} failed`,\n        });\n        throw err;\n      }\n    });\n  }\n\n  if (orchestrator) {\n    router.post('/validate-entity', async (req, res) => {\n      const actorId = await auditLogger.getActorId(req);\n\n      try {\n        await auditLogger.auditLog({\n          eventName: 'CatalogEntityValidate',\n          status: 'succeeded',\n          stage: 'initiation',\n          actorId,\n          request: req,\n          message: `Entity validation for entity initiated by ${actorId}`,\n        });\n        const bodySchema = z.object({\n          entity: z.unknown(),\n          location: z.string(),\n        });\n\n        let body: z.infer<typeof bodySchema>;\n        let entity: Entity;\n        let location: { type: string; target: string };\n        try {\n          body = await validateRequestBody(req, bodySchema);\n          entity = validateEntityEnvelope(body.entity);\n          location = parseLocationRef(body.location);\n          if (location.type !== 'url')\n            throw new TypeError(\n              `Invalid location ref ${body.location}, only 'url:<target>' is supported, e.g. url:https://host/path`,\n            );\n        } catch (err) {\n          return res.status(400).json({\n            errors: [serializeError(err)],\n          });\n        }\n\n        const processingResult = await orchestrator.process({\n          entity: {\n            ...entity,\n            metadata: {\n              ...entity.metadata,\n              annotations: {\n                [ANNOTATION_LOCATION]: body.location,\n                [ANNOTATION_ORIGIN_LOCATION]: body.location,\n                ...entity.metadata.annotations,\n              },\n            },\n          },\n        });\n\n        if (!processingResult.ok) {\n          const errors = processingResult.errors.map(e => serializeError(e));\n          await auditLogger.auditLog({\n            eventName: 'CatalogEntityValidate',\n            status: 'failed',\n            stage: 'completion',\n            level: 'error',\n            errors: errors,\n            response: {\n              status: 400,\n            },\n            actorId,\n            request: req,\n            message: `Entity validation for entity initiated by ${actorId} failed`,\n          });\n          return res.status(400).json({\n            errors,\n          });\n        }\n        await auditLogger.auditLog({\n          eventName: 'CatalogEntityValidate',\n          status: 'succeeded',\n          stage: 'completion',\n          actorId,\n          response: {\n            status: 200,\n          },\n          request: req,\n          message: `Entity validation for entity by ${actorId} succeeded`,\n        });\n        return res.status(200).end();\n      } catch (err) {\n        await auditLogger.auditLog({\n          eventName: 'CatalogEntityValidate',\n          status: 'failed',\n          stage: 'completion',\n          level: 'error',\n          errors: [\n            {\n              name: err.name,\n              message: err.message,\n              stack: err.stack,\n            },\n          ],\n          actorId,\n          request: req,\n          message: `Entity validation for entity initiated by ${actorId} failed`,\n        });\n        throw err;\n      }\n    });\n  }\n\n  router.use(errorHandler());\n  return router;\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DefaultCatalogDatabase } from '../database/DefaultCatalogDatabase';\nimport { RefreshOptions, RefreshService } from './types';\n\nexport class DefaultRefreshService implements RefreshService {\n  private database: DefaultCatalogDatabase;\n\n  constructor(options: { database: DefaultCatalogDatabase }) {\n    this.database = options.database;\n  }\n\n  async refresh(options: RefreshOptions) {\n    await this.database.transaction(async tx => {\n      const { entityRefs } = await this.database.listAncestors(tx, {\n        entityRef: options.entityRef,\n      });\n      const locationAncestor = entityRefs.find(ref =>\n        ref.startsWith('location:'),\n      );\n\n      // TODO: Refreshes are currently scheduled(as soon as possible) for execution and will therefore happen in the future.\n      // There's room for improvements here where the refresh could potentially hang or return an ID so that the user can check progress.\n      if (locationAncestor) {\n        await this.database.refresh(tx, {\n          entityRef: locationAncestor,\n        });\n      }\n      await this.database.refresh(tx, {\n        entityRef: options.entityRef,\n      });\n    });\n  }\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NotAllowedError } from '@backstage/errors';\nimport { catalogEntityRefreshPermission } from '@backstage/plugin-catalog-common/alpha';\nimport { AuthorizeResult } from '@backstage/plugin-permission-common';\nimport { RefreshOptions, RefreshService } from './types';\nimport { PermissionsService } from '@backstage/backend-plugin-api';\n\nexport class AuthorizedRefreshService implements RefreshService {\n  constructor(\n    private readonly service: RefreshService,\n    private readonly permissionApi: PermissionsService,\n  ) {}\n\n  async refresh(options: RefreshOptions) {\n    const authorizeDecision = (\n      await this.permissionApi.authorize(\n        [\n          {\n            permission: catalogEntityRefreshPermission,\n            resourceRef: options.entityRef,\n          },\n        ],\n        { credentials: options.credentials },\n      )\n    )[0];\n    if (authorizeDecision.result !== AuthorizeResult.ALLOW) {\n      throw new NotAllowedError();\n    }\n    await this.service.refresh(options);\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Config } from '@backstage/config';\nimport { Entity } from '@backstage/catalog-model';\nimport path from 'path';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport { minimatch } from 'minimatch';\n\n/**\n * Rules to apply to catalog entities.\n *\n * An undefined list of matchers means match all, an empty list of matchers means match none.\n */\nexport type CatalogRule = {\n  allow: Array<{\n    kind: string;\n  }>;\n  locations?: Array<{\n    exact?: string;\n    type: string;\n    pattern?: string;\n  }>;\n};\n\n/**\n * Decides whether an entity from a given location is allowed to enter the\n * catalog, according to some rule set.\n */\nexport type CatalogRulesEnforcer = {\n  isAllowed(entity: Entity, location: LocationSpec): boolean;\n};\n\n/**\n * Implements the default catalog rule set, consuming the config keys\n * `catalog.rules` and `catalog.locations.[].rules`.\n */\nexport class DefaultCatalogRulesEnforcer implements CatalogRulesEnforcer {\n  /**\n   * Default rules used by the catalog.\n   *\n   * Denies any location from specifying user or group entities.\n   */\n  static readonly defaultRules: CatalogRule[] = [\n    {\n      allow: ['Component', 'API', 'Location'].map(kind => ({ kind })),\n    },\n  ];\n\n  /**\n   * Loads catalog rules from config.\n   *\n   * This reads `catalog.rules` and defaults to the default rules if no value is present.\n   * The value of the config should be a list of config objects, each with a single `allow`\n   * field which in turn is a list of entity kinds to allow.\n   *\n   * If there is no matching rule to allow an ingested entity, it will be rejected by the catalog.\n   *\n   * It also reads in rules from `catalog.locations`, where each location can have a list\n   * of rules for that specific location, specified in a `rules` field.\n   *\n   * For example:\n   *\n   * ```yaml\n   * catalog:\n   *   rules:\n   *   - allow: [Component, API]\n   *   - allow: [Template]\n   *     locations:\n   *       - type: url\n   *         pattern: https://github.com/org/*\\/blob/master/template.yaml\n   *   - allow: [Location]\n   *     locations:\n   *       - type: url\n   *         pattern: https://github.com/org/repo/blob/master/location.yaml\n   *\n   *   locations:\n   *   - type: url\n   *     target: https://github.com/org/repo/blob/master/users.yaml\n   *     rules:\n   *       - allow: [User, Group]\n   *   - type: url\n   *     target: https://github.com/org/repo/blob/master/systems.yaml\n   *     rules:\n   *       - allow: [System]\n   * ```\n   */\n  static fromConfig(config: Config) {\n    const rules = new Array<CatalogRule>();\n\n    if (config.has('catalog.rules')) {\n      const globalRules = config\n        .getConfigArray('catalog.rules')\n        .map(ruleConf => ({\n          allow: ruleConf.getStringArray('allow').map(kind => ({ kind })),\n          locations: ruleConf\n            .getOptionalConfigArray('locations')\n            ?.map(locationConfig => {\n              const location = {\n                pattern: locationConfig.getOptionalString('pattern'),\n                type: locationConfig.getString('type'),\n                exact: locationConfig.getOptionalString('exact'),\n              };\n              if (location.pattern && location.exact) {\n                throw new Error(\n                  'A catalog rule location cannot have both exact and pattern values',\n                );\n              }\n              return location;\n            }),\n        }));\n      rules.push(...globalRules);\n    } else {\n      rules.push(...DefaultCatalogRulesEnforcer.defaultRules);\n    }\n\n    if (config.has('catalog.locations')) {\n      const locationRules = config\n        .getConfigArray('catalog.locations')\n        .flatMap(locConf => {\n          if (!locConf.has('rules')) {\n            return [];\n          }\n          const type = locConf.getString('type');\n          const exact = resolveTarget(type, locConf.getString('target'));\n\n          return locConf.getConfigArray('rules').map(ruleConf => ({\n            allow: ruleConf.getStringArray('allow').map(kind => ({ kind })),\n            locations: [{ type, exact }],\n          }));\n        });\n\n      rules.push(...locationRules);\n    }\n\n    return new DefaultCatalogRulesEnforcer(rules);\n  }\n\n  constructor(private readonly rules: CatalogRule[]) {}\n\n  /**\n   * Checks whether a specific entity/location combination is allowed\n   * according to the configured rules.\n   */\n  isAllowed(entity: Entity, location: LocationSpec) {\n    for (const rule of this.rules) {\n      if (!this.matchLocation(location, rule.locations)) {\n        continue;\n      }\n\n      if (this.matchEntity(entity, rule.allow)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  private matchLocation(\n    location: LocationSpec,\n    matchers?: { exact?: string; type: string; pattern?: string }[],\n  ): boolean {\n    if (!matchers) {\n      return true;\n    }\n\n    for (const matcher of matchers) {\n      if (matcher.type !== location?.type) {\n        continue;\n      }\n      if (matcher.exact && matcher.exact !== location?.target) {\n        continue;\n      }\n      if (\n        matcher.pattern &&\n        !minimatch(location?.target, matcher.pattern, {\n          nocase: true,\n          dot: true,\n        })\n      ) {\n        continue;\n      }\n      return true;\n    }\n\n    return false;\n  }\n\n  private matchEntity(entity: Entity, matchers?: { kind: string }[]): boolean {\n    if (!matchers) {\n      return true;\n    }\n\n    for (const matcher of matchers) {\n      if (entity?.kind?.toLowerCase() !== matcher.kind.toLowerCase()) {\n        continue;\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n}\n\nfunction resolveTarget(type: string, target: string): string {\n  if (type !== 'file') {\n    return target;\n  }\n\n  return path.resolve(target);\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Entity,\n  entityEnvelopeSchemaValidator,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { ProviderDatabase } from '../database/types';\nimport {\n  EntityProvider,\n  EntityProviderConnection,\n  EntityProviderRefreshOptions,\n  EntityProviderMutation,\n} from '@backstage/plugin-catalog-node';\n\nclass Connection implements EntityProviderConnection {\n  readonly validateEntityEnvelope = entityEnvelopeSchemaValidator();\n\n  constructor(\n    private readonly config: {\n      id: string;\n      providerDatabase: ProviderDatabase;\n    },\n  ) {}\n\n  async applyMutation(mutation: EntityProviderMutation): Promise<void> {\n    const db = this.config.providerDatabase;\n\n    if (mutation.type === 'full') {\n      this.check(mutation.entities.map(e => e.entity));\n      await db.transaction(async tx => {\n        await db.replaceUnprocessedEntities(tx, {\n          sourceKey: this.config.id,\n          type: 'full',\n          items: mutation.entities,\n        });\n      });\n    } else if (mutation.type === 'delta') {\n      this.check(mutation.added.map(e => e.entity));\n      this.check(\n        mutation.removed\n          .map(e => ('entity' in e ? e.entity : undefined))\n          .filter((e): e is Entity => Boolean(e)),\n      );\n      await db.transaction(async tx => {\n        await db.replaceUnprocessedEntities(tx, {\n          sourceKey: this.config.id,\n          type: 'delta',\n          added: mutation.added,\n          removed: mutation.removed.map(r =>\n            'entityRef' in r\n              ? r\n              : {\n                  entityRef: stringifyEntityRef(r.entity),\n                  locationKey: r.locationKey,\n                },\n          ),\n        });\n      });\n    }\n  }\n\n  async refresh(options: EntityProviderRefreshOptions): Promise<void> {\n    const db = this.config.providerDatabase;\n\n    await db.transaction(async (tx: any) => {\n      return db.refreshByRefreshKeys(tx, {\n        keys: options.keys,\n      });\n    });\n  }\n\n  private check(entities: Entity[]) {\n    for (const entity of entities) {\n      try {\n        this.validateEntityEnvelope(entity);\n      } catch (e) {\n        throw new TypeError(`Malformed entity envelope, ${e}`);\n      }\n    }\n  }\n}\n\nexport async function connectEntityProviders(\n  db: ProviderDatabase,\n  providers: EntityProvider[],\n) {\n  await Promise.all(\n    providers.map(async provider => {\n      const connection = new Connection({\n        id: provider.getProviderName(),\n        providerDatabase: db,\n      });\n      return provider.connect(connection);\n    }),\n  );\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { RESOURCE_TYPE_CATALOG_ENTITY } from '@backstage/plugin-catalog-common/alpha';\nimport { EntitiesSearchFilter } from '@backstage/plugin-catalog-node';\nimport { PermissionRuleParams } from '@backstage/plugin-permission-common';\nimport {\n  makeCreatePermissionRule,\n  PermissionRule,\n} from '@backstage/plugin-permission-node';\n\n/**\n * Convenience type for {@link @backstage/plugin-permission-node#PermissionRule}\n * instances with the correct resource type, resource, and filter to work with\n * the catalog.\n *\n * @alpha\n */\nexport type CatalogPermissionRule<\n  TParams extends PermissionRuleParams = PermissionRuleParams,\n> = PermissionRule<Entity, EntitiesSearchFilter, 'catalog-entity', TParams>;\n\n/**\n * Helper function for creating correctly-typed\n * {@link @backstage/plugin-permission-node#PermissionRule}s for the\n * catalog-backend.\n *\n * @alpha\n */\nexport const createCatalogPermissionRule = makeCreatePermissionRule<\n  Entity,\n  EntitiesSearchFilter,\n  typeof RESOURCE_TYPE_CATALOG_ENTITY\n>();\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RESOURCE_TYPE_CATALOG_ENTITY } from '@backstage/plugin-catalog-common/alpha';\nimport { z } from 'zod';\nimport { createCatalogPermissionRule } from './util';\n\n/**\n * A catalog {@link @backstage/plugin-permission-node#PermissionRule} which\n * filters for the presence of an annotation on a given entity.\n *\n * If a value is given, it filters for the annotation value, too.\n *\n * @alpha\n */\nexport const hasAnnotation = createCatalogPermissionRule({\n  name: 'HAS_ANNOTATION',\n  description: 'Allow entities with the specified annotation',\n  resourceType: RESOURCE_TYPE_CATALOG_ENTITY,\n  paramsSchema: z.object({\n    annotation: z.string().describe('Name of the annotation to match on'),\n    value: z\n      .string()\n      .optional()\n      .describe('Value of the annotation to match on'),\n  }),\n  apply: (resource, { annotation, value }) =>\n    !!resource.metadata.annotations?.hasOwnProperty(annotation) &&\n    (value === undefined\n      ? true\n      : resource.metadata.annotations?.[annotation] === value),\n  toQuery: ({ annotation, value }) =>\n    value === undefined\n      ? {\n          key: `metadata.annotations.${annotation}`,\n        }\n      : {\n          key: `metadata.annotations.${annotation}`,\n          values: [value],\n        },\n});\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RESOURCE_TYPE_CATALOG_ENTITY } from '@backstage/plugin-catalog-common/alpha';\nimport { z } from 'zod';\nimport { createCatalogPermissionRule } from './util';\n\n/**\n * A catalog {@link @backstage/plugin-permission-node#PermissionRule} which\n * filters for entities with a specified kind.\n * @alpha\n */\nexport const isEntityKind = createCatalogPermissionRule({\n  name: 'IS_ENTITY_KIND',\n  description: 'Allow entities matching a specified kind',\n  resourceType: RESOURCE_TYPE_CATALOG_ENTITY,\n  paramsSchema: z.object({\n    kinds: z\n      .array(z.string())\n      .describe('List of kinds to match at least one of'),\n  }),\n  apply(resource, { kinds }) {\n    const resourceKind = resource.kind.toLocaleLowerCase('en-US');\n    return kinds.some(kind => kind.toLocaleLowerCase('en-US') === resourceKind);\n  },\n  toQuery({ kinds }) {\n    return {\n      key: 'kind',\n      values: kinds.map(kind => kind.toLocaleLowerCase('en-US')),\n    };\n  },\n});\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RELATION_OWNED_BY } from '@backstage/catalog-model';\nimport { RESOURCE_TYPE_CATALOG_ENTITY } from '@backstage/plugin-catalog-common/alpha';\nimport { z } from 'zod';\nimport { createCatalogPermissionRule } from './util';\n\n/**\n * A catalog {@link @backstage/plugin-permission-node#PermissionRule} which\n * filters for entities with a specified owner.\n *\n * @alpha\n */\nexport const isEntityOwner = createCatalogPermissionRule({\n  name: 'IS_ENTITY_OWNER',\n  description: 'Allow entities owned by a specified claim',\n  resourceType: RESOURCE_TYPE_CATALOG_ENTITY,\n  paramsSchema: z.object({\n    claims: z\n      .array(z.string())\n      .describe(\n        `List of claims to match at least one on within ${RELATION_OWNED_BY}`,\n      ),\n  }),\n  apply: (resource, { claims }) => {\n    if (!resource.relations) {\n      return false;\n    }\n\n    return resource.relations\n      .filter(relation => relation.type === RELATION_OWNED_BY)\n      .some(relation => claims.includes(relation.targetRef));\n  },\n  toQuery: ({ claims }) => ({\n    key: 'relations.ownedBy',\n    values: claims,\n  }),\n});\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { RESOURCE_TYPE_CATALOG_ENTITY } from '@backstage/plugin-catalog-common/alpha';\nimport { z } from 'zod';\nimport { createCatalogPermissionRule } from './util';\n\n/**\n * A catalog {@link @backstage/plugin-permission-node#PermissionRule} which\n * filters for entities with a specified label in its metadata.\n * @alpha\n */\nexport const hasLabel = createCatalogPermissionRule({\n  name: 'HAS_LABEL',\n  description: 'Allow entities with the specified label',\n  resourceType: RESOURCE_TYPE_CATALOG_ENTITY,\n  paramsSchema: z.object({\n    label: z.string().describe('Name of the label to match on'),\n  }),\n  apply: (resource, { label }) =>\n    !!resource.metadata.labels?.hasOwnProperty(label),\n  toQuery: ({ label }) => ({\n    key: `metadata.labels.${label}`,\n  }),\n});\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { get } from 'lodash';\nimport { RESOURCE_TYPE_CATALOG_ENTITY } from '@backstage/plugin-catalog-common/alpha';\nimport { createCatalogPermissionRule } from './util';\nimport { z } from 'zod';\n\nexport const createPropertyRule = (propertyType: 'metadata' | 'spec') =>\n  createCatalogPermissionRule({\n    name: `HAS_${propertyType.toUpperCase()}`,\n    description: `Allow entities with the specified ${propertyType} subfield`,\n    resourceType: RESOURCE_TYPE_CATALOG_ENTITY,\n    paramsSchema: z.object({\n      key: z\n        .string()\n        .describe(`Property within the entities ${propertyType} to match on`),\n      value: z\n        .string()\n        .optional()\n        .describe(`Value of the given property to match on`),\n    }),\n    apply: (resource, { key, value }) => {\n      const foundValue = get(resource[propertyType], key);\n\n      if (Array.isArray(foundValue)) {\n        if (value !== undefined) {\n          return foundValue.includes(value);\n        }\n        return foundValue.length > 0;\n      }\n      if (value !== undefined) {\n        return value === foundValue;\n      }\n      return !!foundValue;\n    },\n    toQuery: ({ key, value }) => ({\n      key: `${propertyType}.${key}`,\n      ...(value !== undefined && { values: [value] }),\n    }),\n  });\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createPropertyRule } from './createPropertyRule';\n\n/**\n * A catalog {@link @backstage/plugin-permission-node#PermissionRule} which\n * filters for entities with the specified metadata subfield. Also matches on\n * values if value is provided.\n *\n * The key argument to the `apply` and `toQuery` methods can be nested, such as\n * 'field.nestedfield'.\n * @alpha\n */\nexport const hasMetadata = createPropertyRule('metadata');\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { createPropertyRule } from './createPropertyRule';\n\n/**\n * A catalog {@link @backstage/plugin-permission-node#PermissionRule} which\n * filters for entities with the specified spec subfield. Also matches on values\n * if value is provided.\n *\n * The key argument to the `apply` and `toQuery` methods can be nested, such as\n * 'field.nestedfield'.\n * @alpha\n */\nexport const hasSpec = createPropertyRule('spec');\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { hasAnnotation } from './hasAnnotation';\nimport { isEntityKind } from './isEntityKind';\nimport { isEntityOwner } from './isEntityOwner';\nimport { hasLabel } from './hasLabel';\nimport { hasMetadata } from './hasMetadata';\nimport { hasSpec } from './hasSpec';\n\n/**\n * These permission rules can be used to conditionally filter catalog entities\n * or describe a user's access to the entities.\n *\n * @alpha\n */\nexport const permissionRules = {\n  hasAnnotation,\n  hasLabel,\n  hasMetadata,\n  hasSpec,\n  isEntityKind,\n  isEntityOwner,\n};\n\nexport type { CatalogPermissionRule } from './util';\nexport { createCatalogPermissionRule } from './util';\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NotAllowedError } from '@backstage/errors';\nimport {\n  catalogEntityDeletePermission,\n  catalogEntityReadPermission,\n} from '@backstage/plugin-catalog-common/alpha';\nimport { Entity, stringifyEntityRef } from '@backstage/catalog-model';\nimport { AuthorizeResult } from '@backstage/plugin-permission-common';\nimport { ConditionTransformer } from '@backstage/plugin-permission-node';\nimport {\n  Cursor,\n  EntitiesBatchRequest,\n  EntitiesBatchResponse,\n  EntitiesCatalog,\n  EntitiesRequest,\n  EntitiesResponse,\n  EntityAncestryResponse,\n  EntityFacetsRequest,\n  EntityFacetsResponse,\n  QueryEntitiesRequest,\n  QueryEntitiesResponse,\n} from '../catalog/types';\nimport { basicEntityFilter } from './request';\nimport { isQueryEntitiesCursorRequest } from './util';\nimport { EntityFilter } from '@backstage/plugin-catalog-node';\nimport {\n  BackstageCredentials,\n  PermissionsService,\n} from '@backstage/backend-plugin-api';\n\nexport class AuthorizedEntitiesCatalog implements EntitiesCatalog {\n  constructor(\n    private readonly entitiesCatalog: EntitiesCatalog,\n    private readonly permissionApi: PermissionsService,\n    private readonly transformConditions: ConditionTransformer<EntityFilter>,\n  ) {}\n\n  async entities(request: EntitiesRequest): Promise<EntitiesResponse> {\n    const authorizeDecision = (\n      await this.permissionApi.authorizeConditional(\n        [{ permission: catalogEntityReadPermission }],\n        { credentials: request.credentials },\n      )\n    )[0];\n\n    if (authorizeDecision.result === AuthorizeResult.DENY) {\n      return {\n        entities: [],\n        pageInfo: { hasNextPage: false },\n      };\n    }\n\n    if (authorizeDecision.result === AuthorizeResult.CONDITIONAL) {\n      const permissionFilter: EntityFilter = this.transformConditions(\n        authorizeDecision.conditions,\n      );\n      return this.entitiesCatalog.entities({\n        ...request,\n        filter: request?.filter\n          ? { allOf: [permissionFilter, request.filter] }\n          : permissionFilter,\n      });\n    }\n\n    return this.entitiesCatalog.entities(request);\n  }\n\n  async entitiesBatch(\n    request: EntitiesBatchRequest,\n  ): Promise<EntitiesBatchResponse> {\n    const authorizeDecision = (\n      await this.permissionApi.authorizeConditional(\n        [{ permission: catalogEntityReadPermission }],\n        { credentials: request.credentials },\n      )\n    )[0];\n\n    if (authorizeDecision.result === AuthorizeResult.DENY) {\n      return {\n        items: new Array(request.entityRefs.length).fill(null),\n      };\n    }\n\n    if (authorizeDecision.result === AuthorizeResult.CONDITIONAL) {\n      const permissionFilter: EntityFilter = this.transformConditions(\n        authorizeDecision.conditions,\n      );\n      return this.entitiesCatalog.entitiesBatch({\n        ...request,\n        filter: request?.filter\n          ? { allOf: [permissionFilter, request.filter] }\n          : permissionFilter,\n      });\n    }\n\n    return this.entitiesCatalog.entitiesBatch(request);\n  }\n\n  async queryEntities(\n    request: QueryEntitiesRequest,\n  ): Promise<QueryEntitiesResponse> {\n    const authorizeDecision = (\n      await this.permissionApi.authorizeConditional(\n        [{ permission: catalogEntityReadPermission }],\n        { credentials: request.credentials },\n      )\n    )[0];\n\n    if (authorizeDecision.result === AuthorizeResult.DENY) {\n      return {\n        items: [],\n        pageInfo: {},\n        totalItems: 0,\n      };\n    }\n\n    if (authorizeDecision.result === AuthorizeResult.CONDITIONAL) {\n      const permissionFilter: EntityFilter = this.transformConditions(\n        authorizeDecision.conditions,\n      );\n\n      let permissionedRequest: QueryEntitiesRequest;\n      let requestFilter: EntityFilter | undefined;\n\n      if (isQueryEntitiesCursorRequest(request)) {\n        requestFilter = request.cursor.filter;\n\n        permissionedRequest = {\n          ...request,\n          cursor: {\n            ...request.cursor,\n            filter: request.cursor.filter\n              ? { allOf: [permissionFilter, request.cursor.filter] }\n              : permissionFilter,\n          },\n        };\n      } else {\n        permissionedRequest = {\n          ...request,\n          filter: request.filter\n            ? { allOf: [permissionFilter, request.filter] }\n            : permissionFilter,\n        };\n        requestFilter = request.filter;\n      }\n\n      const response = await this.entitiesCatalog.queryEntities(\n        permissionedRequest,\n      );\n\n      const prevCursor: Cursor | undefined = response.pageInfo.prevCursor && {\n        ...response.pageInfo.prevCursor,\n        filter: requestFilter,\n      };\n\n      const nextCursor: Cursor | undefined = response.pageInfo.nextCursor && {\n        ...response.pageInfo.nextCursor,\n        filter: requestFilter,\n      };\n\n      return {\n        ...response,\n        pageInfo: {\n          prevCursor,\n          nextCursor,\n        },\n      };\n    }\n\n    return this.entitiesCatalog.queryEntities(request);\n  }\n\n  async removeEntityByUid(\n    uid: string,\n    options: { credentials: BackstageCredentials },\n  ): Promise<void> {\n    const authorizeResponse = (\n      await this.permissionApi.authorizeConditional(\n        [{ permission: catalogEntityDeletePermission }],\n        { credentials: options.credentials },\n      )\n    )[0];\n    if (authorizeResponse.result === AuthorizeResult.DENY) {\n      throw new NotAllowedError();\n    }\n    if (authorizeResponse.result === AuthorizeResult.CONDITIONAL) {\n      const permissionFilter: EntityFilter = this.transformConditions(\n        authorizeResponse.conditions,\n      );\n      const { entities } = await this.entitiesCatalog.entities({\n        credentials: options.credentials,\n        filter: {\n          allOf: [permissionFilter, basicEntityFilter({ 'metadata.uid': uid })],\n        },\n      });\n      if (entities.length === 0) {\n        throw new NotAllowedError();\n      }\n    }\n    return this.entitiesCatalog.removeEntityByUid(uid, {\n      credentials: options.credentials,\n    });\n  }\n\n  async entityAncestry(\n    entityRef: string,\n    options: { credentials: BackstageCredentials },\n  ): Promise<EntityAncestryResponse> {\n    const rootEntityAuthorizeResponse = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogEntityReadPermission, resourceRef: entityRef }],\n        { credentials: options.credentials },\n      )\n    )[0];\n    if (rootEntityAuthorizeResponse.result === AuthorizeResult.DENY) {\n      throw new NotAllowedError();\n    }\n\n    const ancestryResult = await this.entitiesCatalog.entityAncestry(\n      entityRef,\n      { credentials: options.credentials },\n    );\n    const authorizeResponse = await this.permissionApi.authorize(\n      ancestryResult.items.map(item => ({\n        permission: catalogEntityReadPermission,\n        resourceRef: stringifyEntityRef(item.entity),\n      })),\n      { credentials: options.credentials },\n    );\n    const unauthorizedAncestryItems = ancestryResult.items.filter(\n      (_, index) => authorizeResponse[index].result === AuthorizeResult.DENY,\n    );\n    if (unauthorizedAncestryItems.length === 0) {\n      return ancestryResult;\n    }\n    const rootUnauthorizedEntityRefs = unauthorizedAncestryItems.map(\n      ancestryItem => stringifyEntityRef(ancestryItem.entity),\n    );\n    const allUnauthorizedEntityRefs = new Set(\n      rootUnauthorizedEntityRefs.flatMap(rootEntityRef =>\n        this.findParents(\n          rootEntityRef,\n          ancestryResult.items,\n          new Set(rootUnauthorizedEntityRefs),\n        ),\n      ),\n    );\n    return {\n      rootEntityRef: ancestryResult.rootEntityRef,\n      items: ancestryResult.items.filter(\n        ancestryItem =>\n          !allUnauthorizedEntityRefs.has(\n            stringifyEntityRef(ancestryItem.entity),\n          ),\n      ),\n    };\n  }\n\n  async facets(request: EntityFacetsRequest): Promise<EntityFacetsResponse> {\n    const authorizeDecision = (\n      await this.permissionApi.authorizeConditional(\n        [{ permission: catalogEntityReadPermission }],\n        { credentials: request.credentials },\n      )\n    )[0];\n\n    if (authorizeDecision.result === AuthorizeResult.DENY) {\n      return {\n        facets: Object.fromEntries(request.facets.map(f => [f, []])),\n      };\n    }\n\n    if (authorizeDecision.result === AuthorizeResult.CONDITIONAL) {\n      const permissionFilter: EntityFilter = this.transformConditions(\n        authorizeDecision.conditions,\n      );\n      return this.entitiesCatalog.facets({\n        ...request,\n        filter: request?.filter\n          ? { allOf: [permissionFilter, request.filter] }\n          : permissionFilter,\n      });\n    }\n\n    return this.entitiesCatalog.facets(request);\n  }\n\n  private findParents(\n    entityRef: string,\n    allAncestryItems: { entity: Entity; parentEntityRefs: string[] }[],\n    seenEntityRefs: Set<string>,\n  ): string[] {\n    const entity = allAncestryItems.find(\n      ancestryItem => stringifyEntityRef(ancestryItem.entity) === entityRef,\n    );\n    if (!entity) return [];\n\n    const newSeenEntityRefs = new Set(seenEntityRefs);\n    entity.parentEntityRefs.forEach(parentRef =>\n      newSeenEntityRefs.add(parentRef),\n    );\n\n    return [\n      entityRef,\n      ...entity.parentEntityRefs.flatMap(parentRef =>\n        seenEntityRefs.has(parentRef)\n          ? []\n          : this.findParents(parentRef, allAncestryItems, newSeenEntityRefs),\n      ),\n    ];\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Location } from '@backstage/catalog-client';\nimport { CompoundEntityRef, Entity } from '@backstage/catalog-model';\nimport { NotAllowedError, NotFoundError } from '@backstage/errors';\nimport {\n  catalogLocationCreatePermission,\n  catalogLocationDeletePermission,\n  catalogLocationReadPermission,\n} from '@backstage/plugin-catalog-common/alpha';\nimport { AuthorizeResult } from '@backstage/plugin-permission-common';\nimport { LocationInput, LocationService } from './types';\nimport {\n  BackstageCredentials,\n  PermissionsService,\n} from '@backstage/backend-plugin-api';\n\nexport class AuthorizedLocationService implements LocationService {\n  constructor(\n    private readonly locationService: LocationService,\n    private readonly permissionApi: PermissionsService,\n  ) {}\n\n  async createLocation(\n    spec: LocationInput,\n    dryRun: boolean,\n    options: {\n      credentials: BackstageCredentials;\n    },\n  ): Promise<{\n    location: Location;\n    entities: Entity[];\n    exists?: boolean | undefined;\n  }> {\n    const authorizationResponse = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogLocationCreatePermission }],\n        { credentials: options.credentials },\n      )\n    )[0];\n\n    if (authorizationResponse.result === AuthorizeResult.DENY) {\n      throw new NotAllowedError();\n    }\n\n    return this.locationService.createLocation(spec, dryRun, options);\n  }\n\n  async listLocations(options: {\n    credentials: BackstageCredentials;\n  }): Promise<Location[]> {\n    const authorizationResponse = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogLocationReadPermission }],\n        { credentials: options.credentials },\n      )\n    )[0];\n\n    if (authorizationResponse.result === AuthorizeResult.DENY) {\n      return [];\n    }\n\n    return this.locationService.listLocations(options);\n  }\n\n  async getLocation(\n    id: string,\n    options: { credentials: BackstageCredentials },\n  ): Promise<Location> {\n    const authorizationResponse = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogLocationReadPermission }],\n        { credentials: options.credentials },\n      )\n    )[0];\n\n    if (authorizationResponse.result === AuthorizeResult.DENY) {\n      throw new NotFoundError(`Found no location with ID ${id}`);\n    }\n\n    return this.locationService.getLocation(id, options);\n  }\n\n  async deleteLocation(\n    id: string,\n    options: { credentials: BackstageCredentials },\n  ): Promise<void> {\n    const authorizationResponse = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogLocationDeletePermission }],\n        { credentials: options.credentials },\n      )\n    )[0];\n\n    if (authorizationResponse.result === AuthorizeResult.DENY) {\n      throw new NotAllowedError();\n    }\n\n    return this.locationService.deleteLocation(id, options);\n  }\n\n  async getLocationByEntity(\n    entityRef: CompoundEntityRef | string,\n    options: { credentials: BackstageCredentials },\n  ): Promise<Location> {\n    const authorizationResponse = (\n      await this.permissionApi.authorize(\n        [{ permission: catalogLocationReadPermission }],\n        { credentials: options.credentials },\n      )\n    )[0];\n\n    if (authorizationResponse.result === AuthorizeResult.DENY) {\n      throw new NotFoundError();\n    }\n    return this.locationService.getLocationByEntity(entityRef, options);\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport lodash from 'lodash';\nimport {\n  DbFinalEntitiesRow,\n  DbRefreshStateReferencesRow,\n  DbRefreshStateRow,\n} from '../../tables';\n\n/**\n * Given a number of entity refs originally created by a given entity provider\n * (source key), remove those entities from the refresh state, and at the same\n * time recursively remove every child that is a direct or indirect result of\n * processing those entities, if they would have otherwise become orphaned by\n * the removal of their parents.\n */\nexport async function deleteWithEagerPruningOfChildren(options: {\n  knex: Knex | Knex.Transaction;\n  entityRefs: string[];\n  sourceKey: string;\n}): Promise<number> {\n  const { knex, entityRefs, sourceKey } = options;\n\n  // Split up the operation by (large) chunks, so that we do not hit database\n  // limits for the number of permitted bindings on a precompiled statement\n  let removedCount = 0;\n  for (const refs of lodash.chunk(entityRefs, 1000)) {\n    const { orphanEntityRefs } =\n      await findDescendantsThatWouldHaveBeenOrphanedByDeletion({\n        knex: options.knex,\n        refs,\n        sourceKey,\n      });\n\n    // Chunk again - these can be many more than the outer chunk size\n    for (const refsToDelete of lodash.chunk(orphanEntityRefs, 1000)) {\n      await markEntitiesAffectedByDeletionForStitching({\n        knex: options.knex,\n        entityRefs: refsToDelete,\n      });\n      await knex\n        .delete()\n        .from('refresh_state')\n        .whereIn('entity_ref', refsToDelete);\n    }\n\n    // Delete the references that originate only from this entity provider. Note\n    // that there may be more than one entity provider making a \"claim\" for a\n    // given root entity, if they emit with the same location key.\n    await knex<DbRefreshStateReferencesRow>('refresh_state_references')\n      .where('source_key', '=', sourceKey)\n      .whereIn('target_entity_ref', refs)\n      .delete();\n\n    removedCount += orphanEntityRefs.length;\n  }\n\n  return removedCount;\n}\n\nasync function findDescendantsThatWouldHaveBeenOrphanedByDeletion(options: {\n  knex: Knex | Knex.Transaction;\n  refs: string[];\n  sourceKey: string;\n}): Promise<{ orphanEntityRefs: string[] }> {\n  const { knex, refs, sourceKey } = options;\n\n  const orphans: string[] =\n    // First find all nodes that can be reached downwards from the roots\n    // (deletion targets), including the roots themselves, by traversing\n    // down the refresh_state_references table. Note that this query\n    // starts with a condition that source_key = our source key, and\n    // target_entity_ref is one of the deletion targets. This has two\n    // effects: it won't match attempts at deleting something that didn't\n    // originate from us in the first place, and also won't match non-root\n    // entities (source_key would be null for those).\n    //\n    //   KeyA - R1 - R2        Legend:\n    //                 \\       -----------------------------------------\n    //                  R3     Key*    Source key\n    //                 /       R*      Entity ref\n    //   KeyA - R4 - R5        lines   Individual references; sources to\n    //              /                  the left and targets to the right\n    //   KeyB --- R6\n    //\n    // The scenario is that KeyA wants to delete R1.\n    //\n    // The query starts with the KeyA-R1 reference, and then traverses\n    // down to also find R2 and R3. It uses union instead of union all,\n    // because it wants to find the set of unique descendants even if\n    // the tree has unexpected loops etc.\n    await knex\n      .withRecursive('descendants', ['entity_ref'], initial =>\n        initial\n          .select('target_entity_ref')\n          .from('refresh_state_references')\n          .where('source_key', '=', sourceKey)\n          .whereIn('target_entity_ref', refs)\n          .union(recursive =>\n            recursive\n              .select('refresh_state_references.target_entity_ref')\n              .from('descendants')\n              .join(\n                'refresh_state_references',\n                'descendants.entity_ref',\n                'refresh_state_references.source_entity_ref',\n              ),\n          ),\n      )\n      // Then for each descendant, traverse all the way back upwards through\n      // the refresh_state_references table to get an exhaustive list of all\n      // references that are part of keeping that particular descendant\n      // alive.\n      //\n      // Continuing the scenario from above, starting from R3, it goes\n      // upwards to find every pair along every relation line.\n      //\n      //   Top branch:     R2-R3, R1-R2, KeyA-R1\n      //   Middle branch:  R5-R3, R4-R5, KeyA-R4\n      //   Bottom branch:  R6-R5, KeyB-R6\n      //\n      // Note that this all applied to the subject R3. The exact same thing\n      // will be done starting from each other descendant (R2 and R1). They\n      // only have one and two references to find, respectively.\n      //\n      // This query also uses union instead of union all, to get the set of\n      // distinct relations even if the tree has unexpected loops etc.\n      .withRecursive(\n        'ancestors',\n        ['source_key', 'source_entity_ref', 'target_entity_ref', 'subject'],\n        initial =>\n          initial\n            .select(\n              'refresh_state_references.source_key',\n              'refresh_state_references.source_entity_ref',\n              'refresh_state_references.target_entity_ref',\n              'descendants.entity_ref',\n            )\n            .from('descendants')\n            .join(\n              'refresh_state_references',\n              'refresh_state_references.target_entity_ref',\n              'descendants.entity_ref',\n            )\n            .union(recursive =>\n              recursive\n                .select(\n                  'refresh_state_references.source_key',\n                  'refresh_state_references.source_entity_ref',\n                  'refresh_state_references.target_entity_ref',\n                  'ancestors.subject',\n                )\n                .from('ancestors')\n                .join(\n                  'refresh_state_references',\n                  'refresh_state_references.target_entity_ref',\n                  'ancestors.source_entity_ref',\n                ),\n            ),\n      )\n      // Finally, from that list of ancestor relations per descendant, pick\n      // out the ones that are roots (have a source_key). Specifically, find\n      // ones that seem to be be either (1) from another source, or (2)\n      // aren't part of the deletion targets. Those are markers that tell us\n      // that the corresponding descendant should be kept alive and NOT\n      // subject to eager deletion, because there's \"something else\" (not\n      // targeted for deletion) that has references down through the tree to\n      // it.\n      //\n      // Continuing the scenario from above, for R3 we have\n      //\n      //   KeyA-R1, KeyA-R4, KeyB-R6\n      //\n      // This tells us that R3 should be kept alive for two reasons: it's\n      // referenced by a node that isn't being deleted (R4), and also by\n      // another source (KeyB). What about R1 and R2? They both have\n      //\n      //   KeyA-R1\n      //\n      // So those should be deleted, since they are definitely only being\n      // kept alive by something that's about to be deleted.\n      //\n      // Final shape of the tree:\n      //\n      //                  R3\n      //                 /\n      //   KeyA - R4 - R5\n      //              /\n      //   KeyB --- R6\n      .with('retained', ['entity_ref'], notPartOfDeletion =>\n        notPartOfDeletion\n          .select('subject')\n          .from('ancestors')\n          .whereNotNull('ancestors.source_key')\n          .where(foreignKeyOrRef =>\n            foreignKeyOrRef\n              .where('ancestors.source_key', '!=', sourceKey)\n              .orWhereNotIn('ancestors.target_entity_ref', refs),\n          ),\n      )\n      // Return all descendants minus the retained ones\n      .select('descendants.entity_ref AS entity_ref')\n      .from('descendants')\n      .leftOuterJoin(\n        'retained',\n        'retained.entity_ref',\n        'descendants.entity_ref',\n      )\n      .whereNull('retained.entity_ref')\n      .then(rows => rows.map(row => row.entity_ref));\n\n  return { orphanEntityRefs: orphans };\n}\n\nasync function markEntitiesAffectedByDeletionForStitching(options: {\n  knex: Knex | Knex.Transaction;\n  entityRefs: string[];\n}) {\n  const { knex, entityRefs } = options;\n\n  // We want to re-stitch anything that has a relation pointing to the\n  // soon-to-be-deleted entity. In many circumstances we also re-stitch children\n  // in the refresh_state_references graph because their orphan state might\n  // change, but not here - this code by its very definition is meant to not\n  // leave any orphans behind, so we can simplify away that.\n  const affectedIds = await knex\n    .select('refresh_state.entity_id AS entity_id')\n    .from('relations')\n    .join(\n      'refresh_state',\n      'relations.source_entity_ref',\n      'refresh_state.entity_ref',\n    )\n    .whereIn('relations.target_entity_ref', entityRefs)\n    .then(rows => rows.map(row => row.entity_id));\n\n  for (const ids of lodash.chunk(affectedIds, 1000)) {\n    await knex\n      .table<DbFinalEntitiesRow>('final_entities')\n      .update({\n        hash: 'force-stitching',\n      })\n      .whereIn('entity_id', ids);\n    await knex\n      .table<DbRefreshStateRow>('refresh_state')\n      .update({\n        result_hash: 'force-stitching',\n        next_update_at: knex.fn.now(),\n      })\n      .whereIn('entity_id', ids);\n  }\n}\n","/*\n * Copyright 2022 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Knex } from 'knex';\nimport { DbRefreshStateRow } from '../../tables';\n\n/**\n * Schedules a future refresh of entities, by so called \"refresh keys\" that may\n * be associated with one or more entities. Note that this does not mean that\n * the refresh happens immediately, but rather that their scheduling time gets\n * moved up the queue and will get picked up eventually by the regular\n * processing loop.\n */\nexport async function refreshByRefreshKeys(options: {\n  tx: Knex.Transaction;\n  keys: string[];\n}): Promise<void> {\n  const { tx, keys } = options;\n\n  await tx<DbRefreshStateRow>('refresh_state')\n    .whereIn('entity_id', function selectEntityRefs(inner) {\n      inner\n        .whereIn('key', keys)\n        .select({\n          entity_id: 'refresh_keys.entity_id',\n        })\n        .from('refresh_keys');\n    })\n    .update({ next_update_at: tx.fn.now() });\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isDatabaseConflictError } from '@backstage/backend-common';\nimport { stringifyEntityRef } from '@backstage/catalog-model';\nimport { DeferredEntity } from '@backstage/plugin-catalog-node';\nimport { Knex } from 'knex';\nimport lodash from 'lodash';\nimport { v4 as uuid } from 'uuid';\nimport { rethrowError } from './conversion';\nimport { deleteWithEagerPruningOfChildren } from './operations/provider/deleteWithEagerPruningOfChildren';\nimport { refreshByRefreshKeys } from './operations/provider/refreshByRefreshKeys';\nimport { checkLocationKeyConflict } from './operations/refreshState/checkLocationKeyConflict';\nimport { insertUnprocessedEntity } from './operations/refreshState/insertUnprocessedEntity';\nimport { updateUnprocessedEntity } from './operations/refreshState/updateUnprocessedEntity';\nimport { DbRefreshStateReferencesRow, DbRefreshStateRow } from './tables';\nimport {\n  ProviderDatabase,\n  RefreshByKeyOptions,\n  ReplaceUnprocessedEntitiesOptions,\n  Transaction,\n} from './types';\nimport { generateStableHash } from './util';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\n// The number of items that are sent per batch to the database layer, when\n// doing .batchInsert calls to knex. This needs to be low enough to not cause\n// errors in the underlying engine due to exceeding query limits, but large\n// enough to get the speed benefits.\nconst BATCH_SIZE = 50;\n\nexport class DefaultProviderDatabase implements ProviderDatabase {\n  constructor(\n    private readonly options: {\n      database: Knex;\n      logger: LoggerService;\n    },\n  ) {}\n\n  async transaction<T>(fn: (tx: Transaction) => Promise<T>): Promise<T> {\n    try {\n      let result: T | undefined = undefined;\n      await this.options.database.transaction(\n        async tx => {\n          // We can't return here, as knex swallows the return type in case the\n          // transaction is rolled back:\n          // https://github.com/knex/knex/blob/e37aeaa31c8ef9c1b07d2e4d3ec6607e557d800d/lib/transaction.js#L136\n          result = await fn(tx);\n        },\n        {\n          // If we explicitly trigger a rollback, don't fail.\n          doNotRejectOnRollback: true,\n        },\n      );\n      return result!;\n    } catch (e) {\n      this.options.logger.debug(`Error during transaction, ${e}`);\n      throw rethrowError(e);\n    }\n  }\n\n  async replaceUnprocessedEntities(\n    txOpaque: Transaction,\n    options: ReplaceUnprocessedEntitiesOptions,\n  ): Promise<void> {\n    const tx = txOpaque as Knex.Transaction;\n    const { toAdd, toUpsert, toRemove } = await this.createDelta(tx, options);\n\n    if (toRemove.length) {\n      const removedCount = await deleteWithEagerPruningOfChildren({\n        knex: tx,\n        entityRefs: toRemove,\n        sourceKey: options.sourceKey,\n      });\n      this.options.logger.debug(\n        `removed, ${removedCount} entities: ${JSON.stringify(toRemove)}`,\n      );\n    }\n\n    if (toAdd.length) {\n      // The reason for this chunking, rather than just massively batch\n      // inserting the entire payload, is that we fall back to the individual\n      // upsert mechanism below on conflicts. That path is massively slower than\n      // the fast batch path, so we don't want to end up accidentally having to\n      // for example item-by-item upsert tens of thousands of entities in a\n      // large initial delivery dump. The implication is that the size of these\n      // chunks needs to weigh the benefit of fast successful inserts, against\n      // the drawback of super slow but more rare fallbacks. There's quickly\n      // diminishing returns though with turning up this value way high.\n      for (const chunk of lodash.chunk(toAdd, 50)) {\n        try {\n          await tx.batchInsert(\n            'refresh_state',\n            chunk.map(item => ({\n              entity_id: uuid(),\n              entity_ref: stringifyEntityRef(item.deferred.entity),\n              unprocessed_entity: JSON.stringify(item.deferred.entity),\n              unprocessed_hash: item.hash,\n              errors: '',\n              location_key: item.deferred.locationKey,\n              next_update_at: tx.fn.now(),\n              last_discovery_at: tx.fn.now(),\n            })),\n            BATCH_SIZE,\n          );\n          await tx.batchInsert(\n            'refresh_state_references',\n            chunk.map(item => ({\n              source_key: options.sourceKey,\n              target_entity_ref: stringifyEntityRef(item.deferred.entity),\n            })),\n            BATCH_SIZE,\n          );\n        } catch (error) {\n          if (!isDatabaseConflictError(error)) {\n            throw error;\n          } else {\n            this.options.logger.debug(\n              `Fast insert path failed, falling back to slow path, ${error}`,\n            );\n            toUpsert.push(...chunk);\n          }\n        }\n      }\n    }\n\n    if (toUpsert.length) {\n      for (const {\n        deferred: { entity, locationKey },\n        hash,\n      } of toUpsert) {\n        const entityRef = stringifyEntityRef(entity);\n\n        try {\n          let ok = await updateUnprocessedEntity({\n            tx,\n            entity,\n            hash,\n            locationKey,\n          });\n          if (!ok) {\n            ok = await insertUnprocessedEntity({\n              tx,\n              entity,\n              hash,\n              locationKey,\n              logger: this.options.logger,\n            });\n          }\n\n          await tx<DbRefreshStateReferencesRow>('refresh_state_references')\n            .where('target_entity_ref', entityRef)\n            .andWhere({ source_key: options.sourceKey })\n            .delete();\n\n          if (ok) {\n            await tx<DbRefreshStateReferencesRow>(\n              'refresh_state_references',\n            ).insert({\n              source_key: options.sourceKey,\n              target_entity_ref: entityRef,\n            });\n          } else {\n            const conflictingKey = await checkLocationKeyConflict({\n              tx,\n              entityRef,\n              locationKey,\n            });\n            if (conflictingKey) {\n              this.options.logger.warn(\n                `Source ${options.sourceKey} detected conflicting entityRef ${entityRef} already referenced by ${conflictingKey} and now also ${locationKey}`,\n              );\n            }\n          }\n        } catch (error) {\n          this.options.logger.error(\n            `Failed to add '${entityRef}' from source '${options.sourceKey}', ${error}`,\n          );\n        }\n      }\n    }\n  }\n\n  async refreshByRefreshKeys(\n    txOpaque: Transaction,\n    options: RefreshByKeyOptions,\n  ) {\n    const tx = txOpaque as Knex.Transaction;\n    await refreshByRefreshKeys({ tx, keys: options.keys });\n  }\n\n  private async createDelta(\n    tx: Knex.Transaction,\n    options: ReplaceUnprocessedEntitiesOptions,\n  ): Promise<{\n    toAdd: { deferred: DeferredEntity; hash: string }[];\n    toUpsert: { deferred: DeferredEntity; hash: string }[];\n    toRemove: string[];\n  }> {\n    if (options.type === 'delta') {\n      return {\n        toAdd: [],\n        toUpsert: options.added.map(e => ({\n          deferred: e,\n          hash: generateStableHash(e.entity),\n        })),\n        toRemove: options.removed.map(e => e.entityRef),\n      };\n    }\n\n    // Grab all of the existing references from the same source, and their locationKeys as well\n    const oldRefs = await tx<DbRefreshStateReferencesRow>(\n      'refresh_state_references',\n    )\n      .leftJoin<DbRefreshStateRow>('refresh_state', {\n        target_entity_ref: 'entity_ref',\n      })\n      .where({ source_key: options.sourceKey })\n      .select({\n        target_entity_ref: 'refresh_state_references.target_entity_ref',\n        location_key: 'refresh_state.location_key',\n        unprocessed_hash: 'refresh_state.unprocessed_hash',\n      });\n\n    const items = options.items.map(deferred => ({\n      deferred,\n      ref: stringifyEntityRef(deferred.entity),\n      hash: generateStableHash(deferred.entity),\n    }));\n\n    const oldRefsSet = new Map(\n      oldRefs.map(r => [\n        r.target_entity_ref,\n        {\n          locationKey: r.location_key,\n          oldEntityHash: r.unprocessed_hash,\n        },\n      ]),\n    );\n    const newRefsSet = new Set(items.map(item => item.ref));\n\n    const toAdd = new Array<{ deferred: DeferredEntity; hash: string }>();\n    const toUpsert = new Array<{ deferred: DeferredEntity; hash: string }>();\n    const toRemove = oldRefs\n      .map(row => row.target_entity_ref)\n      .filter(ref => !newRefsSet.has(ref));\n\n    for (const item of items) {\n      const oldRef = oldRefsSet.get(item.ref);\n      const upsertItem = { deferred: item.deferred, hash: item.hash };\n      if (!oldRef) {\n        // Add any entity that does not exist in the database\n        toAdd.push(upsertItem);\n      } else if (\n        (oldRef?.locationKey ?? undefined) !==\n        (item.deferred.locationKey ?? undefined)\n      ) {\n        // Remove and then re-add any entity that exists, but with a different location key\n        toRemove.push(item.ref);\n        toAdd.push(upsertItem);\n      } else if (oldRef.oldEntityHash !== item.hash) {\n        // Entities with modifications should be pushed through too\n        toUpsert.push(upsertItem);\n      }\n    }\n\n    return { toAdd, toUpsert, toRemove };\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { NotFoundError } from '@backstage/errors';\nimport { Knex } from 'knex';\nimport {\n  CatalogDatabase,\n  ListAncestorsOptions,\n  ListAncestorsResult,\n  RefreshOptions,\n  Transaction,\n} from './types';\nimport { DbRefreshStateReferencesRow, DbRefreshStateRow } from './tables';\nimport { rethrowError } from './conversion';\nimport { LoggerService } from '@backstage/backend-plugin-api';\n\nconst MAX_ANCESTOR_DEPTH = 32;\n\nexport class DefaultCatalogDatabase implements CatalogDatabase {\n  constructor(\n    private readonly options: {\n      database: Knex;\n      logger: LoggerService;\n    },\n  ) {}\n\n  async transaction<T>(fn: (tx: Transaction) => Promise<T>): Promise<T> {\n    try {\n      let result: T | undefined = undefined;\n\n      await this.options.database.transaction(\n        async tx => {\n          // We can't return here, as knex swallows the return type in case the transaction is rolled back:\n          // https://github.com/knex/knex/blob/e37aeaa31c8ef9c1b07d2e4d3ec6607e557d800d/lib/transaction.js#L136\n          result = await fn(tx);\n        },\n        {\n          // If we explicitly trigger a rollback, don't fail.\n          doNotRejectOnRollback: true,\n        },\n      );\n\n      return result!;\n    } catch (e) {\n      this.options.logger.debug(`Error during transaction, ${e}`);\n      throw rethrowError(e);\n    }\n  }\n\n  async listAncestors(\n    txOpaque: Transaction,\n    options: ListAncestorsOptions,\n  ): Promise<ListAncestorsResult> {\n    const tx = txOpaque as Knex.Transaction;\n    const { entityRef } = options;\n    const entityRefs = new Array<string>();\n\n    let currentRef = entityRef.toLocaleLowerCase('en-US');\n    for (let depth = 1; depth <= MAX_ANCESTOR_DEPTH; depth += 1) {\n      const rows = await tx<DbRefreshStateReferencesRow>(\n        'refresh_state_references',\n      )\n        .where({ target_entity_ref: currentRef })\n        .select();\n\n      if (rows.length === 0) {\n        if (depth === 1) {\n          throw new NotFoundError(`Entity ${currentRef} not found`);\n        }\n        throw new NotFoundError(\n          `Entity ${entityRef} has a broken parent reference chain at ${currentRef}`,\n        );\n      }\n\n      const parentRef = rows.find(r => r.source_entity_ref)?.source_entity_ref;\n      if (!parentRef) {\n        // We've reached the top of the tree which is the entityProvider.\n        // In this case we refresh the entity itself.\n        return { entityRefs };\n      }\n      entityRefs.push(parentRef);\n      currentRef = parentRef;\n    }\n    throw new Error(\n      `Unable receive ancestors for ${entityRef}, reached maximum depth of ${MAX_ANCESTOR_DEPTH}`,\n    );\n  }\n\n  async refresh(txOpaque: Transaction, options: RefreshOptions): Promise<void> {\n    const tx = txOpaque as Knex.Transaction;\n    const { entityRef } = options;\n\n    const updateResult = await tx<DbRefreshStateRow>('refresh_state')\n      .where({ entity_ref: entityRef.toLocaleLowerCase('en-US') })\n      .update({ next_update_at: tx.fn.now() });\n    if (updateResult === 0) {\n      throw new NotFoundError(`Failed to schedule ${entityRef} for refresh`);\n    }\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  createLegacyAuthAdapters,\n  HostDiscovery,\n  PluginDatabaseManager,\n  UrlReader,\n} from '@backstage/backend-common';\nimport { PluginTaskScheduler } from '@backstage/backend-tasks';\nimport {\n  DefaultNamespaceEntityPolicy,\n  Entity,\n  EntityPolicies,\n  EntityPolicy,\n  FieldFormatEntityPolicy,\n  makeValidator,\n  NoForeignRootFieldsEntityPolicy,\n  parseEntityRef,\n  SchemaValidEntityPolicy,\n  stringifyEntityRef,\n  Validators,\n} from '@backstage/catalog-model';\nimport { ScmIntegrations } from '@backstage/integration';\nimport { createHash } from 'crypto';\nimport { Router } from 'express';\nimport lodash, { keyBy } from 'lodash';\n\nimport {\n  CatalogProcessor,\n  CatalogProcessorParser,\n  EntitiesSearchFilter,\n  EntityProvider,\n  PlaceholderResolver,\n  ScmLocationAnalyzer,\n} from '@backstage/plugin-catalog-node';\nimport {\n  AnnotateLocationEntityProcessor,\n  BuiltinKindsEntityProcessor,\n  CodeOwnersProcessor,\n  FileReaderProcessor,\n  PlaceholderProcessor,\n  UrlReaderProcessor,\n} from '../modules';\nimport { ConfigLocationEntityProvider } from '../modules/core/ConfigLocationEntityProvider';\nimport { DefaultLocationStore } from '../modules/core/DefaultLocationStore';\nimport { RepoLocationAnalyzer } from '../ingestion/LocationAnalyzer';\nimport {\n  jsonPlaceholderResolver,\n  textPlaceholderResolver,\n  yamlPlaceholderResolver,\n} from '../modules/core/PlaceholderProcessor';\nimport { defaultEntityDataParser } from '../modules/util/parse';\nimport { LocationAnalyzer } from '../ingestion';\nimport {\n  CatalogProcessingEngine,\n  createRandomProcessingInterval,\n  ProcessingIntervalFunction,\n} from '../processing';\nimport { DefaultProcessingDatabase } from '../database/DefaultProcessingDatabase';\nimport { applyDatabaseMigrations } from '../database/migrations';\nimport { DefaultCatalogProcessingEngine } from '../processing/DefaultCatalogProcessingEngine';\nimport { DefaultLocationService } from './DefaultLocationService';\nimport { DefaultEntitiesCatalog } from './DefaultEntitiesCatalog';\nimport { DefaultCatalogProcessingOrchestrator } from '../processing/DefaultCatalogProcessingOrchestrator';\nimport { DefaultStitcher } from '../stitching/DefaultStitcher';\nimport { createRouter } from './createRouter';\nimport { DefaultRefreshService } from './DefaultRefreshService';\nimport { AuthorizedRefreshService } from './AuthorizedRefreshService';\nimport { DefaultCatalogRulesEnforcer } from '../ingestion/CatalogRules';\nimport { Config, readDurationFromConfig } from '@backstage/config';\nimport { connectEntityProviders } from '../processing/connectEntityProviders';\nimport {\n  Permission,\n  PermissionAuthorizer,\n  PermissionRuleParams,\n  toPermissionEvaluator,\n} from '@backstage/plugin-permission-common';\nimport { permissionRules as catalogPermissionRules } from '../permissions/rules';\nimport {\n  createConditionTransformer,\n  createPermissionIntegrationRouter,\n  PermissionRule,\n} from '@backstage/plugin-permission-node';\nimport { AuthorizedEntitiesCatalog } from './AuthorizedEntitiesCatalog';\nimport { basicEntityFilter } from './request';\nimport {\n  catalogPermissions,\n  RESOURCE_TYPE_CATALOG_ENTITY,\n} from '@backstage/plugin-catalog-common/alpha';\nimport { AuthorizedLocationService } from './AuthorizedLocationService';\nimport { DefaultProviderDatabase } from '../database/DefaultProviderDatabase';\nimport { DefaultCatalogDatabase } from '../database/DefaultCatalogDatabase';\nimport { EventBroker } from '@backstage/plugin-events-node';\nimport { durationToMilliseconds } from '@backstage/types';\nimport {\n  AuthService,\n  DiscoveryService,\n  HttpAuthService,\n  LoggerService,\n  PermissionsService,\n} from '@backstage/backend-plugin-api';\n\n/**\n * This is a duplicate of the alpha `CatalogPermissionRule` type, for use in the stable API.\n *\n * @public\n */\nexport type CatalogPermissionRuleInput<\n  TParams extends PermissionRuleParams = PermissionRuleParams,\n> = PermissionRule<Entity, EntitiesSearchFilter, 'catalog-entity', TParams>;\n\n/** @public */\nexport type CatalogEnvironment = {\n  logger: LoggerService;\n  database: PluginDatabaseManager;\n  config: Config;\n  reader: UrlReader;\n  permissions: PermissionsService | PermissionAuthorizer;\n  scheduler?: PluginTaskScheduler;\n  discovery?: DiscoveryService;\n  auth?: AuthService;\n  httpAuth?: HttpAuthService;\n};\n\n/**\n * A builder that helps wire up all of the component parts of the catalog.\n *\n * The touch points where you can replace or extend behavior are as follows:\n *\n * - Entity policies can be added or replaced. These are automatically run\n *   after the processors' pre-processing steps. All policies are given the\n *   chance to inspect the entity, and all of them have to pass in order for\n *   the entity to be considered valid from an overall point of view.\n * - Location analyzers can be added. These are responsible for analyzing\n *   repositories when onboarding them into the catalog, by finding\n *   catalog-info.yaml files and other artifacts that can help automatically\n *   register or create catalog data on the user's behalf.\n * - Placeholder resolvers can be replaced or added. These run on the raw\n *   structured data between the parsing and pre-processing steps, to replace\n *   dollar-prefixed entries with their actual values (like $file).\n * - Field format validators can be replaced. These check the format of\n *   individual core fields such as metadata.name, to ensure that they adhere\n *   to certain rules.\n * - Processors can be added or replaced. These implement the functionality of\n *   reading, parsing, validating, and processing the entity data before it is\n *   persisted in the catalog.\n *\n * @public\n */\nexport class CatalogBuilder {\n  private readonly env: CatalogEnvironment;\n  private entityPolicies: EntityPolicy[];\n  private entityPoliciesReplace: boolean;\n  private placeholderResolvers: Record<string, PlaceholderResolver>;\n  private fieldFormatValidators: Partial<Validators>;\n  private entityProviders: EntityProvider[];\n  private processors: CatalogProcessor[];\n  private locationAnalyzers: ScmLocationAnalyzer[];\n  private processorsReplace: boolean;\n  private parser: CatalogProcessorParser | undefined;\n  private onProcessingError?: (event: {\n    unprocessedEntity: Entity;\n    errors: Error[];\n  }) => Promise<void> | void;\n  private processingInterval: ProcessingIntervalFunction;\n  private locationAnalyzer: LocationAnalyzer | undefined = undefined;\n  private readonly permissions: Permission[];\n  private readonly permissionRules: CatalogPermissionRuleInput[];\n  private allowedLocationType: string[];\n  private legacySingleProcessorValidation = false;\n  private eventBroker?: EventBroker;\n\n  /**\n   * Creates a catalog builder.\n   */\n  static create(env: CatalogEnvironment): CatalogBuilder {\n    return new CatalogBuilder(env);\n  }\n\n  private constructor(env: CatalogEnvironment) {\n    this.env = env;\n    this.entityPolicies = [];\n    this.entityPoliciesReplace = false;\n    this.placeholderResolvers = {};\n    this.fieldFormatValidators = {};\n    this.entityProviders = [];\n    this.processors = [];\n    this.locationAnalyzers = [];\n    this.processorsReplace = false;\n    this.parser = undefined;\n    this.permissions = [...catalogPermissions];\n    this.permissionRules = Object.values(catalogPermissionRules);\n    this.allowedLocationType = ['url'];\n\n    this.processingInterval = CatalogBuilder.getDefaultProcessingInterval(\n      env.config,\n    );\n  }\n\n  /**\n   * Adds policies that are used to validate entities between the pre-\n   * processing and post-processing stages. All such policies must pass for the\n   * entity to be considered valid.\n   *\n   * If what you want to do is to replace the rules for what format is allowed\n   * in various core entity fields (such as metadata.name), you may want to use\n   * {@link CatalogBuilder#setFieldFormatValidators} instead.\n   *\n   * @param policies - One or more policies\n   */\n  addEntityPolicy(\n    ...policies: Array<EntityPolicy | Array<EntityPolicy>>\n  ): CatalogBuilder {\n    this.entityPolicies.push(...policies.flat());\n    return this;\n  }\n\n  /**\n   * Processing interval determines how often entities should be processed.\n   * Seconds provided will be multiplied by 1.5\n   * The default processing interval is 100-150 seconds.\n   * setting this too low will potentially deplete request quotas to upstream services.\n   */\n  setProcessingIntervalSeconds(seconds: number): CatalogBuilder {\n    this.processingInterval = createRandomProcessingInterval({\n      minSeconds: seconds,\n      maxSeconds: seconds * 1.5,\n    });\n    return this;\n  }\n\n  /**\n   * Overwrites the default processing interval function used to spread\n   * entity updates in the catalog.\n   */\n  setProcessingInterval(\n    processingInterval: ProcessingIntervalFunction,\n  ): CatalogBuilder {\n    this.processingInterval = processingInterval;\n    return this;\n  }\n\n  /**\n   * Overwrites the default location analyzer.\n   */\n  setLocationAnalyzer(locationAnalyzer: LocationAnalyzer): CatalogBuilder {\n    this.locationAnalyzer = locationAnalyzer;\n    return this;\n  }\n\n  /**\n   * Sets what policies to use for validation of entities between the pre-\n   * processing and post-processing stages. All such policies must pass for the\n   * entity to be considered valid.\n   *\n   * If what you want to do is to replace the rules for what format is allowed\n   * in various core entity fields (such as metadata.name), you may want to use\n   * {@link CatalogBuilder#setFieldFormatValidators} instead.\n   *\n   * This function replaces the default set of policies; use with care.\n   *\n   * @param policies - One or more policies\n   */\n  replaceEntityPolicies(policies: EntityPolicy[]): CatalogBuilder {\n    this.entityPolicies = [...policies];\n    this.entityPoliciesReplace = true;\n    return this;\n  }\n\n  /**\n   * Adds, or overwrites, a handler for placeholders (e.g. $file) in entity\n   * definition files.\n   *\n   * @param key - The key that identifies the placeholder, e.g. \"file\"\n   * @param resolver - The resolver that gets values for this placeholder\n   */\n  setPlaceholderResolver(\n    key: string,\n    resolver: PlaceholderResolver,\n  ): CatalogBuilder {\n    this.placeholderResolvers[key] = resolver;\n    return this;\n  }\n\n  /**\n   * Sets the validator function to use for one or more special fields of an\n   * entity. This is useful if the default rules for formatting of fields are\n   * not sufficient.\n   *\n   * This function has no effect if used together with\n   * {@link CatalogBuilder#replaceEntityPolicies}.\n   *\n   * @param validators - The (subset of) validators to set\n   */\n  setFieldFormatValidators(validators: Partial<Validators>): CatalogBuilder {\n    lodash.merge(this.fieldFormatValidators, validators);\n    return this;\n  }\n\n  /**\n   * Adds or replaces entity providers. These are responsible for bootstrapping\n   * the list of entities out of original data sources. For example, there is\n   * one entity source for the config locations, and one for the database\n   * stored locations. If you ingest entities out of a third party system, you\n   * may want to implement that in terms of an entity provider as well.\n   *\n   * @param providers - One or more entity providers\n   */\n  addEntityProvider(\n    ...providers: Array<EntityProvider | Array<EntityProvider>>\n  ): CatalogBuilder {\n    this.entityProviders.push(...providers.flat());\n    return this;\n  }\n\n  /**\n   * Adds entity processors. These are responsible for reading, parsing, and\n   * processing entities before they are persisted in the catalog.\n   *\n   * @param processors - One or more processors\n   */\n  addProcessor(\n    ...processors: Array<CatalogProcessor | Array<CatalogProcessor>>\n  ): CatalogBuilder {\n    this.processors.push(...processors.flat());\n    return this;\n  }\n\n  /**\n   * Sets what entity processors to use. These are responsible for reading,\n   * parsing, and processing entities before they are persisted in the catalog.\n   *\n   * This function replaces the default set of processors, consider using with\n   * {@link CatalogBuilder#getDefaultProcessors}; use with care.\n   *\n   * @param processors - One or more processors\n   */\n  replaceProcessors(processors: CatalogProcessor[]): CatalogBuilder {\n    this.processors = [...processors];\n    this.processorsReplace = true;\n    return this;\n  }\n\n  /**\n   * Returns the default list of entity processors. These are responsible for reading,\n   * parsing, and processing entities before they are persisted in the catalog. Changing\n   * the order of processing can give more control to custom processors.\n   *\n   * Consider using with {@link CatalogBuilder#replaceProcessors}\n   *\n   */\n  getDefaultProcessors(): CatalogProcessor[] {\n    const { config, logger, reader } = this.env;\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    return [\n      new FileReaderProcessor(),\n      new UrlReaderProcessor({ reader, logger }),\n      CodeOwnersProcessor.fromConfig(config, { logger, reader }),\n      new AnnotateLocationEntityProcessor({ integrations }),\n    ];\n  }\n\n  /**\n   * Adds Location Analyzers. These are responsible for analyzing\n   * repositories when onboarding them into the catalog, by finding\n   * catalog-info.yaml files and other artifacts that can help automatically\n   * register or create catalog data on the user's behalf.\n   *\n   * @param locationAnalyzers - One or more location analyzers\n   */\n  addLocationAnalyzers(\n    ...analyzers: Array<ScmLocationAnalyzer | Array<ScmLocationAnalyzer>>\n  ): CatalogBuilder {\n    this.locationAnalyzers.push(...analyzers.flat());\n    return this;\n  }\n\n  /**\n   * Sets up the catalog to use a custom parser for entity data.\n   *\n   * This is the function that gets called immediately after some raw entity\n   * specification data has been read from a remote source, and needs to be\n   * parsed and emitted as structured data.\n   *\n   * @param parser - The custom parser\n   */\n  setEntityDataParser(parser: CatalogProcessorParser): CatalogBuilder {\n    this.parser = parser;\n    return this;\n  }\n\n  /**\n   * Adds additional permissions. See\n   * {@link @backstage/plugin-permission-node#Permission}.\n   *\n   * @param permissions - Additional permissions\n   */\n  addPermissions(...permissions: Array<Permission | Array<Permission>>) {\n    this.permissions.push(...permissions.flat());\n    return this;\n  }\n\n  /**\n   * Adds additional permission rules. Permission rules are used to evaluate\n   * catalog resources against queries. See\n   * {@link @backstage/plugin-permission-node#PermissionRule}.\n   *\n   * @param permissionRules - Additional permission rules\n   */\n  addPermissionRules(\n    ...permissionRules: Array<\n      CatalogPermissionRuleInput | Array<CatalogPermissionRuleInput>\n    >\n  ) {\n    this.permissionRules.push(...permissionRules.flat());\n    return this;\n  }\n\n  /**\n   * Sets up the allowed location types from being registered via the location service.\n   *\n   * @param allowedLocationTypes - the allowed location types\n   */\n  setAllowedLocationTypes(allowedLocationTypes: string[]): CatalogBuilder {\n    this.allowedLocationType = allowedLocationTypes;\n    return this;\n  }\n\n  /**\n   * Enables the legacy behaviour of canceling validation early whenever only a\n   * single processor declares an entity kind to be valid.\n   */\n  useLegacySingleProcessorValidation(): this {\n    this.legacySingleProcessorValidation = true;\n    return this;\n  }\n\n  /**\n   * Enables the publishing of events for conflicts in the DefaultProcessingDatabase\n   */\n  setEventBroker(broker: EventBroker): CatalogBuilder {\n    this.eventBroker = broker;\n    return this;\n  }\n\n  /**\n   * Wires up and returns all of the component parts of the catalog\n   */\n  async build(): Promise<{\n    processingEngine: CatalogProcessingEngine;\n    router: Router;\n  }> {\n    const {\n      config,\n      database,\n      logger,\n      permissions,\n      scheduler,\n      discovery = HostDiscovery.fromConfig(config),\n    } = this.env;\n\n    const { auth, httpAuth } = createLegacyAuthAdapters({\n      ...this.env,\n      discovery,\n    });\n\n    const policy = this.buildEntityPolicy();\n    const processors = this.buildProcessors();\n    const parser = this.parser || defaultEntityDataParser;\n\n    const dbClient = await database.getClient();\n    if (!database.migrations?.skip) {\n      logger.info('Performing database migration');\n      await applyDatabaseMigrations(dbClient);\n    }\n\n    const stitcher = DefaultStitcher.fromConfig(config, {\n      knex: dbClient,\n      logger,\n    });\n\n    const processingDatabase = new DefaultProcessingDatabase({\n      database: dbClient,\n      logger,\n      refreshInterval: this.processingInterval,\n      eventBroker: this.eventBroker,\n    });\n    const providerDatabase = new DefaultProviderDatabase({\n      database: dbClient,\n      logger,\n    });\n    const catalogDatabase = new DefaultCatalogDatabase({\n      database: dbClient,\n      logger,\n    });\n    const integrations = ScmIntegrations.fromConfig(config);\n    const rulesEnforcer = DefaultCatalogRulesEnforcer.fromConfig(config);\n    const orchestrator = new DefaultCatalogProcessingOrchestrator({\n      processors,\n      integrations,\n      rulesEnforcer,\n      logger,\n      parser,\n      policy,\n      legacySingleProcessorValidation: this.legacySingleProcessorValidation,\n    });\n    const unauthorizedEntitiesCatalog = new DefaultEntitiesCatalog({\n      database: dbClient,\n      logger,\n      stitcher,\n    });\n\n    let permissionsService: PermissionsService;\n    if ('authorizeConditional' in permissions) {\n      permissionsService = permissions as PermissionsService;\n    } else {\n      logger.warn(\n        'PermissionAuthorizer is deprecated. Please use an instance of PermissionEvaluator instead of PermissionAuthorizer in PluginEnvironment#permissions',\n      );\n      permissionsService = toPermissionEvaluator(permissions);\n    }\n\n    const entitiesCatalog = new AuthorizedEntitiesCatalog(\n      unauthorizedEntitiesCatalog,\n      permissionsService,\n      createConditionTransformer(this.permissionRules),\n    );\n    const permissionIntegrationRouter = createPermissionIntegrationRouter({\n      resourceType: RESOURCE_TYPE_CATALOG_ENTITY,\n      getResources: async (resourceRefs: string[]) => {\n        const { entities } = await unauthorizedEntitiesCatalog.entities({\n          credentials: await auth.getOwnServiceCredentials(),\n          filter: {\n            anyOf: resourceRefs.map(resourceRef => {\n              const { kind, namespace, name } = parseEntityRef(resourceRef);\n\n              return basicEntityFilter({\n                kind,\n                'metadata.namespace': namespace,\n                'metadata.name': name,\n              });\n            }),\n          },\n        });\n\n        const entitiesByRef = keyBy(entities, stringifyEntityRef);\n\n        return resourceRefs.map(\n          resourceRef =>\n            entitiesByRef[stringifyEntityRef(parseEntityRef(resourceRef))],\n        );\n      },\n      permissions: this.permissions,\n      rules: this.permissionRules,\n    });\n\n    const locationStore = new DefaultLocationStore(dbClient);\n    const configLocationProvider = new ConfigLocationEntityProvider(config);\n    const entityProviders = lodash.uniqBy(\n      [...this.entityProviders, locationStore, configLocationProvider],\n      provider => provider.getProviderName(),\n    );\n\n    const processingEngine = new DefaultCatalogProcessingEngine({\n      config,\n      scheduler,\n      logger,\n      knex: dbClient,\n      processingDatabase,\n      orchestrator,\n      stitcher,\n      createHash: () => createHash('sha1'),\n      pollingIntervalMs: 1000,\n      onProcessingError: event => {\n        this.onProcessingError?.(event);\n      },\n      eventBroker: this.eventBroker,\n    });\n\n    const locationAnalyzer =\n      this.locationAnalyzer ??\n      new RepoLocationAnalyzer(logger, integrations, this.locationAnalyzers);\n    const locationService = new AuthorizedLocationService(\n      new DefaultLocationService(locationStore, orchestrator, {\n        allowedLocationTypes: this.allowedLocationType,\n      }),\n      permissionsService,\n    );\n    const refreshService = new AuthorizedRefreshService(\n      new DefaultRefreshService({ database: catalogDatabase }),\n      permissionsService,\n    );\n\n    const router = await createRouter({\n      entitiesCatalog,\n      locationAnalyzer,\n      locationService,\n      orchestrator,\n      refreshService,\n      logger,\n      config,\n      permissionIntegrationRouter,\n      auth,\n      httpAuth,\n    });\n\n    await connectEntityProviders(providerDatabase, entityProviders);\n\n    return {\n      processingEngine: {\n        async start() {\n          await processingEngine.start();\n          await stitcher.start();\n        },\n        async stop() {\n          await processingEngine.stop();\n          await stitcher.stop();\n        },\n      },\n      router,\n    };\n  }\n\n  subscribe(options: {\n    onProcessingError: (event: {\n      unprocessedEntity: Entity;\n      errors: Error[];\n    }) => Promise<void> | void;\n  }) {\n    this.onProcessingError = options.onProcessingError;\n  }\n\n  private buildEntityPolicy(): EntityPolicy {\n    const entityPolicies: EntityPolicy[] = this.entityPoliciesReplace\n      ? [new SchemaValidEntityPolicy(), ...this.entityPolicies]\n      : [\n          new SchemaValidEntityPolicy(),\n          new DefaultNamespaceEntityPolicy(),\n          new NoForeignRootFieldsEntityPolicy(),\n          new FieldFormatEntityPolicy(\n            makeValidator(this.fieldFormatValidators),\n          ),\n          ...this.entityPolicies,\n        ];\n\n    return EntityPolicies.allOf(entityPolicies);\n  }\n\n  private buildProcessors(): CatalogProcessor[] {\n    const { config, reader } = this.env;\n    const integrations = ScmIntegrations.fromConfig(config);\n\n    this.checkDeprecatedReaderProcessors();\n\n    const placeholderResolvers: Record<string, PlaceholderResolver> = {\n      json: jsonPlaceholderResolver,\n      yaml: yamlPlaceholderResolver,\n      text: textPlaceholderResolver,\n      ...this.placeholderResolvers,\n    };\n\n    // The placeholder is always there no matter what\n    const processors: CatalogProcessor[] = [\n      new PlaceholderProcessor({\n        resolvers: placeholderResolvers,\n        reader,\n        integrations,\n      }),\n    ];\n\n    const builtinKindsEntityProcessor = new BuiltinKindsEntityProcessor();\n    // If the user adds a processor named 'BuiltinKindsEntityProcessor',\n    //   skip inclusion of the catalog-backend version.\n    if (\n      !this.processors.some(\n        processor =>\n          processor.getProcessorName() ===\n          builtinKindsEntityProcessor.getProcessorName(),\n      )\n    ) {\n      processors.push(builtinKindsEntityProcessor);\n    }\n\n    // These are only added unless the user replaced them all\n    if (!this.processorsReplace) {\n      processors.push(...this.getDefaultProcessors());\n    }\n\n    // Add the ones (if any) that the user added\n    processors.push(...this.processors);\n\n    this.checkMissingExternalProcessors(processors);\n\n    return processors;\n  }\n\n  // TODO(Rugvip): These old processors are removed, for a while we'll be throwing\n  //               errors here to make sure people know where to move the config\n  private checkDeprecatedReaderProcessors() {\n    const pc = this.env.config.getOptionalConfig('catalog.processors');\n    if (pc?.has('github')) {\n      throw new Error(\n        `Using deprecated configuration for catalog.processors.github, move to using integrations.github instead`,\n      );\n    }\n    if (pc?.has('gitlabApi')) {\n      throw new Error(\n        `Using deprecated configuration for catalog.processors.gitlabApi, move to using integrations.gitlab instead`,\n      );\n    }\n    if (pc?.has('bitbucketApi')) {\n      throw new Error(\n        `Using deprecated configuration for catalog.processors.bitbucketApi, move to using integrations.bitbucket instead`,\n      );\n    }\n    if (pc?.has('azureApi')) {\n      throw new Error(\n        `Using deprecated configuration for catalog.processors.azureApi, move to using integrations.azure instead`,\n      );\n    }\n  }\n\n  // TODO(freben): This can be removed no sooner than June 2022, after adopters have had some time to adapt to the new package structure\n  private checkMissingExternalProcessors(processors: CatalogProcessor[]) {\n    const skipCheckVarName = 'BACKSTAGE_CATALOG_SKIP_MISSING_PROCESSORS_CHECK';\n    if (process.env[skipCheckVarName]) {\n      return;\n    }\n\n    const locationTypes = new Set(\n      this.env.config\n        .getOptionalConfigArray('catalog.locations')\n        ?.map(l => l.getString('type')) ?? [],\n    );\n    const processorNames = new Set(processors.map(p => p.getProcessorName()));\n\n    function check(\n      locationType: string,\n      processorName: string,\n      installationUrl: string,\n    ) {\n      if (\n        locationTypes.has(locationType) &&\n        !processorNames.has(processorName)\n      ) {\n        throw new Error(\n          [\n            `Your config contains a \"catalog.locations\" entry of type ${locationType},`,\n            `but does not have the corresponding catalog processor ${processorName} installed.`,\n            `This processor used to be built into the catalog itself, but is now moved to an`,\n            `external module that has to be installed manually. Please follow the installation`,\n            `instructions at ${installationUrl} if you are using this ability, or remove the`,\n            `location from your app config if you do not. You can also silence this check entirely`,\n            `by setting the environment variable ${skipCheckVarName} to 'true'.`,\n          ].join(' '),\n        );\n      }\n    }\n\n    check(\n      'aws-cloud-accounts',\n      'AwsOrganizationCloudAccountProcessor',\n      'https://backstage.io/docs/integrations',\n    );\n    check(\n      's3-discovery',\n      'AwsS3DiscoveryProcessor',\n      'https://backstage.io/docs/integrations/aws-s3/discovery',\n    );\n    check(\n      'azure-discovery',\n      'AzureDevOpsDiscoveryProcessor',\n      'https://backstage.io/docs/integrations/azure/discovery',\n    );\n    check(\n      'bitbucket-discovery',\n      'BitbucketDiscoveryProcessor',\n      'https://backstage.io/docs/integrations/bitbucket/discovery',\n    );\n    check(\n      'github-discovery',\n      'GithubDiscoveryProcessor',\n      'https://backstage.io/docs/integrations/github/discovery',\n    );\n    check(\n      'github-org',\n      'GithubOrgReaderProcessor',\n      'https://backstage.io/docs/integrations/github/org',\n    );\n    check(\n      'gitlab-discovery',\n      'GitLabDiscoveryProcessor',\n      'https://backstage.io/docs/integrations/gitlab/discovery',\n    );\n    check(\n      'ldap-org',\n      'LdapOrgReaderProcessor',\n      'https://backstage.io/docs/integrations/ldap/org',\n    );\n    check(\n      'microsoft-graph-org',\n      'MicrosoftGraphOrgReaderProcessor',\n      'https://backstage.io/docs/integrations/azure/org',\n    );\n  }\n\n  private static getDefaultProcessingInterval(\n    config: Config,\n  ): ProcessingIntervalFunction {\n    const processingIntervalKey = 'catalog.processingInterval';\n\n    if (!config.has(processingIntervalKey)) {\n      return createRandomProcessingInterval({\n        minSeconds: 100,\n        maxSeconds: 150,\n      });\n    }\n\n    const duration = readDurationFromConfig(config, {\n      key: processingIntervalKey,\n    });\n    const seconds = Math.max(\n      1,\n      Math.round(durationToMilliseconds(duration) / 1000),\n    );\n\n    return createRandomProcessingInterval({\n      minSeconds: seconds,\n      maxSeconds: seconds * 1.5,\n    });\n  }\n}\n"],"names":["codeowners","parseGitUrl","NotFoundError","__publicField","ScmIntegrations","stringifyLocationRef","merge","pickBy","ANNOTATION_LOCATION","ANNOTATION_ORIGIN_LOCATION","ANNOTATION_VIEW_URL","ANNOTATION_EDIT_URL","ANNOTATION_SOURCE_LOCATION","identity","apiEntityV1alpha1Validator","componentEntityV1alpha1Validator","resourceEntityV1alpha1Validator","groupEntityV1alpha1Validator","locationEntityV1alpha1Validator","userEntityV1alpha1Validator","systemEntityV1alpha1Validator","domainEntityV1alpha1Validator","getCompoundEntityRef","parseEntityRef","processingResult","RELATION_OWNED_BY","RELATION_OWNER_OF","RELATION_PART_OF","RELATION_HAS_PART","RELATION_PROVIDES_API","RELATION_API_PROVIDED_BY","RELATION_CONSUMES_API","RELATION_API_CONSUMED_BY","RELATION_DEPENDS_ON","RELATION_DEPENDENCY_OF","RELATION_MEMBER_OF","RELATION_HAS_MEMBER","RELATION_CHILD_OF","RELATION_PARENT_OF","promisify","g","fs","path","yaml","assertError","limiterFactory","lodash","defaultEntityDataParser","stringifyEntityRef","InputError","entitySchemaValidator","entityEnvelopeSchemaValidator","createHash","ConflictError","uuid","parseLocationRef","DateTime","isDatabaseConflictError","register","Counter","Gauge","Summary","metrics","generateStableHash","stableStringify","BATCH_SIZE","errors","resolvePackagePath","SpanStatusCode","tracer","trace","splitToChunks","uniq","progressTracker","serializeError","_a","stringifyError","z","NotAllowedError","entityFilterParser","lodashChunk","isEqual","durationToMilliseconds","DEFAULT_NAMESPACE","ENTITY_STATUS_CATALOG_PROCESSING_TYPE","response","createValidatedOpenApiRouter","DefaultAuditLogger","yn","errorHandler","catalogEntityRefreshPermission","AuthorizeResult","minimatch","makeCreatePermissionRule","RESOURCE_TYPE_CATALOG_ENTITY","get","catalogEntityReadPermission","catalogEntityDeletePermission","catalogLocationCreatePermission","catalogLocationReadPermission","catalogLocationDeletePermission","catalogPermissions","catalogPermissionRules","HostDiscovery","createLegacyAuthAdapters","toPermissionEvaluator","createConditionTransformer","createPermissionIntegrationRouter","keyBy","SchemaValidEntityPolicy","DefaultNamespaceEntityPolicy","NoForeignRootFieldsEntityPolicy","FieldFormatEntityPolicy","makeValidator","EntityPolicies","config","readDurationFromConfig"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmBA,MAAM,YAAe,GAAA,MAAA,CAAA;AACrB,MAAM,aAAgB,GAAA,UAAA,CAAA;AACtB,MAAM,aAAgB,GAAA,aAAA,CAAA;AAEN,SAAA,gBAAA,CACd,UACA,kBACoB,EAAA;AACpB,EAAM,MAAA,gBAAA,GAAmBA,qBAAW,CAAA,KAAA,CAAM,QAAQ,CAAA,CAAA;AAElD,EAAA,MAAM,EAAE,QAAA,EAAa,GAAAC,4BAAA,CAAY,kBAAkB,CAAA,CAAA;AACnD,EAAA,MAAM,KAAQ,GAAAD,qBAAA,CAAW,SAAU,CAAA,QAAA,EAAU,gBAAgB,CAAA,CAAA;AAE7D,EAAA,OAAO,QAAQ,kBAAmB,CAAA,KAAA,CAAM,MAAO,CAAA,CAAC,CAAC,CAAI,GAAA,KAAA,CAAA,CAAA;AACvD,CAAA;AAEO,SAAS,mBAAmB,KAAe,EAAA;AAChD,EAAI,IAAA,KAAA,CAAM,KAAM,CAAA,aAAa,CAAG,EAAA;AAC9B,IAAA,OAAO,KAAM,CAAA,KAAA,CAAM,GAAG,CAAA,CAAE,CAAC,CAAA,CAAA;AAAA,GAChB,MAAA,IAAA,KAAA,CAAM,KAAM,CAAA,YAAY,CAAG,EAAA;AACpC,IAAA,OAAO,CAAQ,KAAA,EAAA,KAAA,CAAM,SAAU,CAAA,CAAC,CAAC,CAAA,CAAA,CAAA;AAAA,GACxB,MAAA,IAAA,KAAA,CAAM,KAAM,CAAA,aAAa,CAAG,EAAA;AACrC,IAAA,OAAO,KAAM,CAAA,KAAA,CAAM,GAAG,CAAA,CAAE,CAAC,CAAA,CAAA;AAAA,GAC3B;AAEA,EAAO,OAAA,KAAA,CAAA;AACT;;AC7BA,MAAM,UAAa,GAAA,YAAA,CAAA;AAEZ,MAAM,kBAA+C,GAAA;AAAA;AAAA,EAE1D,SAAW,EAAA,CAAC,UAAY,EAAA,CAAA,WAAA,EAAc,UAAU,CAAE,CAAA,CAAA;AAAA;AAAA,EAGlD,MAAA,EAAQ,CAAC,UAAY,EAAA,CAAA,QAAA,EAAW,UAAU,CAAI,CAAA,EAAA,CAAA,KAAA,EAAQ,UAAU,CAAE,CAAA,CAAA;AAAA;AAAA,EAGlE,MAAA,EAAQ,CAAC,UAAY,EAAA,CAAA,QAAA,EAAW,UAAU,CAAI,CAAA,EAAA,CAAA,KAAA,EAAQ,UAAU,CAAE,CAAA,CAAA;AACpE,CAAA;;ACJsB,eAAA,cAAA,CACpB,MACA,EAAA,SAAA,EACA,eAC6B,EAAA;AAC7B,EAAM,MAAA,iBAAA,GAAoB,OAAO,IAAkC,KAAA;AACjE,IAAA,MAAM,GAAM,GAAA,CAAA,EAAG,SAAS,CAAA,EAAG,IAAI,CAAA,CAAA,CAAA;AAC/B,IAAA,MAAM,IAAO,GAAA,MAAM,MAAO,CAAA,OAAA,CAAQ,GAAG,CAAA,CAAA;AACrC,IAAM,MAAA,MAAA,GAAS,MAAM,IAAA,CAAK,MAAO,EAAA,CAAA;AACjC,IAAA,OAAO,OAAO,QAAS,EAAA,CAAA;AAAA,GACzB,CAAA;AAEA,EAAM,MAAA,UAAA,GAAa,eAAgB,CAAA,GAAA,CAAI,iBAAiB,CAAA,CAAA;AAExD,EAAA,OAAO,QAAQ,GAAI,CAAA,UAAU,CAAE,CAAA,KAAA,CAAM,CAAC,cAAmC,KAAA;AACvE,IAAM,MAAA,SAAA,GAAY,eAAe,MAAO,CAAA,IAAA;AAAA,MACtC,CAAA,KAAA,KAAS,EAAE,KAAiB,YAAAE,oBAAA,CAAA;AAAA,KAC9B,CAAA;AAEA,IAAA,IAAI,SAAW,EAAA;AACb,MAAM,MAAA,SAAA,CAAA;AAAA,KACR;AAEA,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACR,CAAA,CAAA;AACH,CAAA;AAEsB,eAAA,qBAAA,CACpB,MACA,EAAA,SAAA,EACA,cAC6B,EAAA;AAtD/B,EAAA,IAAA,EAAA,CAAA;AAuDE,EAAA,MAAM,eAAkB,GAAA,kBAAA,CAAA,CAAmB,EAAgB,GAAA,cAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,cAAA,CAAA,IAAA,KAAhB,YAAwB,EAAE,CAAA,CAAA;AAErE,EAAM,MAAA,SAAA,GAAY,iDAAgB,UAAW,CAAA;AAAA,IAC3C,GAAK,EAAA,GAAA;AAAA,IACL,IAAM,EAAA,SAAA;AAAA,GACR,CAAA,CAAA;AAEA,EAAI,IAAA,CAAC,SAAa,IAAA,CAAC,eAAiB,EAAA;AAClC,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACT;AAEA,EAAA,MAAM,QAAW,GAAA,MAAM,cAAe,CAAA,MAAA,EAAQ,WAAW,eAAe,CAAA,CAAA;AAExE,EAAA,IAAI,CAAC,QAAU,EAAA;AACb,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACT;AAEA,EAAM,MAAA,KAAA,GAAQ,gBAAiB,CAAA,QAAA,EAAU,SAAS,CAAA,CAAA;AAElD,EAAO,OAAA,KAAA,CAAA;AACT;;;;;;;;AC/CA,MAAM,gBAAgB,CAAC,KAAA,EAAO,WAAa,EAAA,QAAA,EAAU,YAAY,QAAQ,CAAA,CAAA;AACzE,MAAM,sBAAA,GAAyB,CAAC,KAAK,CAAA,CAAA;AAG9B,MAAM,mBAAgD,CAAA;AAAA,EAiB3D,YAAY,OAIT,EAAA;AApBH,IAAiBC,eAAA,CAAA,IAAA,EAAA,cAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AAmBf,IAAA,IAAA,CAAK,eAAe,OAAQ,CAAA,YAAA,CAAA;AAC5B,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA,CAAA;AACtB,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA,CAAA;AAAA,GACxB;AAAA,EApBA,OAAO,UACL,CAAA,MAAA,EACA,OACA,EAAA;AACA,IAAM,MAAA,YAAA,GAAeC,2BAAgB,CAAA,UAAA,CAAW,MAAM,CAAA,CAAA;AAEtD,IAAA,OAAO,IAAI,mBAAoB,CAAA;AAAA,MAC7B,GAAG,OAAA;AAAA,MACH,YAAA;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAAA,EAYA,gBAA2B,GAAA;AACzB,IAAO,OAAA,qBAAA,CAAA;AAAA,GACT;AAAA,EAEA,MAAM,gBACJ,CAAA,MAAA,EACA,QACiB,EAAA;AAEjB,IAAA,IACE,CAAC,MACD,IAAA,CAAC,cAAc,QAAS,CAAA,MAAA,CAAO,IAAI,CACnC,IAAA,CAAC,sBAAuB,CAAA,QAAA,CAAS,SAAS,IAAI,CAAA,IAC7C,OAAO,IAAQ,IAAA,MAAA,CAAO,KAAK,KAC5B,EAAA;AACA,MAAO,OAAA,MAAA,CAAA;AAAA,KACT;AAEA,IAAA,MAAM,cAAiB,GAAA,IAAA,CAAK,YAAa,CAAA,KAAA,CAAM,SAAS,MAAM,CAAA,CAAA;AAC9D,IAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,MAAO,OAAA,MAAA,CAAA;AAAA,KACT;AAEA,IAAA,MAAM,QAAQ,MAAM,qBAAA;AAAA,MAClB,IAAK,CAAA,MAAA;AAAA,MACL,QAAS,CAAA,MAAA;AAAA,MACT,cAAA;AAAA,KACF,CAAA;AAEA,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAA,IAAA,CAAK,MAAO,CAAA,KAAA;AAAA,QACV,CAAA,+CAAA,EAAkD,SAAS,MAAM,CAAA,CAAA;AAAA,OACnE,CAAA;AACA,MAAO,OAAA,MAAA,CAAA;AAAA,KACT;AAEA,IAAO,OAAA;AAAA,MACL,GAAG,MAAA;AAAA,MACH,IAAM,EAAA,EAAE,GAAG,MAAA,CAAO,MAAM,KAAM,EAAA;AAAA,KAChC,CAAA;AAAA,GACF;AACF;;AClEO,MAAM,+BAA4D,CAAA;AAAA,EACvE,YACmB,OAGjB,EAAA;AAHiB,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;AAAA,GAGhB;AAAA,EAEH,gBAA2B,GAAA;AACzB,IAAO,OAAA,iCAAA,CAAA;AAAA,GACT;AAAA,EAEA,MAAM,gBAAA,CACJ,MACA,EAAA,QAAA,EACA,GACA,cACiB,EAAA;AACjB,IAAM,MAAA,EAAE,YAAa,EAAA,GAAI,IAAK,CAAA,OAAA,CAAA;AAC9B,IAAI,IAAA,OAAA,CAAA;AACJ,IAAI,IAAA,OAAA,CAAA;AACJ,IAAI,IAAA,cAAA,CAAA;AAEJ,IAAI,IAAA,QAAA,CAAS,SAAS,KAAO,EAAA;AAC3B,MAAA,MAAM,cAAiB,GAAA,YAAA,CAAa,KAAM,CAAA,QAAA,CAAS,MAAM,CAAA,CAAA;AAEzD,MAAA,OAAA,GAAU,QAAS,CAAA,MAAA,CAAA;AACnB,MAAU,OAAA,GAAA,cAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,cAAA,CAAgB,eAAe,QAAS,CAAA,MAAA,CAAA,CAAA;AAElD,MAAM,MAAA,SAAA,GAAY,iDAAgB,UAAW,CAAA;AAAA,QAC3C,GAAK,EAAA,IAAA;AAAA,QACL,MAAM,QAAS,CAAA,MAAA;AAAA,OACjB,CAAA,CAAA;AAEA,MAAA,IAAI,SAAW,EAAA;AACb,QAAA,cAAA,GAAiBC,iCAAqB,CAAA;AAAA,UACpC,IAAM,EAAA,KAAA;AAAA,UACN,MAAQ,EAAA,SAAA;AAAA,SACT,CAAA,CAAA;AAAA,OACH;AAAA,KACF;AAEA,IAAO,OAAAC,YAAA;AAAA,MACL;AAAA,QACE,QAAU,EAAA;AAAA,UACR,WAAa,EAAAC,aAAA;AAAA,YACX;AAAA,cACE,CAACC,gCAAmB,GAAGH,iCAAA,CAAqB,QAAQ,CAAA;AAAA,cACpD,CAACI,uCAA0B,GACzBJ,iCAAA,CAAqB,cAAc,CAAA;AAAA,cACrC,CAACK,gCAAmB,GAAG,OAAA;AAAA,cACvB,CAACC,gCAAmB,GAAG,OAAA;AAAA,cACvB,CAACC,uCAA0B,GAAG,cAAA;AAAA,aAChC;AAAA,YACAC,eAAA;AAAA,WACF;AAAA,SACF;AAAA,OACF;AAAA,MACA,MAAA;AAAA,KACF,CAAA;AAAA,GACF;AACF;;;;;;;;ACpCO,MAAM,2BAAwD,CAAA;AAAA,EAA9D,WAAA,GAAA;AACL,IAAAV,eAAA,CAAA,IAAA,EAAiB,YAAa,EAAA;AAAA,MAC5BW,uCAAA;AAAA,MACAC,6CAAA;AAAA,MACAC,4CAAA;AAAA,MACAC,yCAAA;AAAA,MACAC,4CAAA;AAAA,MACAC,wCAAA;AAAA,MACAC,0CAAA;AAAA,MACAC,0CAAA;AAAA,KACF,CAAA,CAAA;AAAA,GAAA;AAAA,EAEA,gBAA2B,GAAA;AACzB,IAAO,OAAA,6BAAA,CAAA;AAAA,GACT;AAAA,EAEA,MAAM,mBAAmB,MAAkC,EAAA;AACzD,IAAW,KAAA,MAAA,SAAA,IAAa,KAAK,UAAY,EAAA;AACvC,MAAA,MAAM,OAAU,GAAA,MAAM,SAAU,CAAA,KAAA,CAAM,MAAM,CAAA,CAAA;AAC5C,MAAA,IAAI,OAAS,EAAA;AACX,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA,KACF;AAEA,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AAAA,EAEA,MAAM,iBAAA,CACJ,MACA,EAAA,SAAA,EACA,IACiB,EAAA;AACjB,IAAM,MAAA,OAAA,GAAUC,kCAAqB,MAAM,CAAA,CAAA;AAM3C,IAAA,SAAS,MACP,CAAA,OAAA,EACA,OACA,EAAA,gBAAA,EACA,gBACM,EAAA;AACN,MAAA,IAAI,CAAC,OAAS,EAAA;AACZ,QAAA,OAAA;AAAA,OACF;AACA,MAAA,KAAA,MAAW,MAAU,IAAA,CAAC,OAAO,CAAA,CAAE,MAAQ,EAAA;AACrC,QAAM,MAAA,SAAA,GAAYC,2BAAe,CAAA,MAAA,EAAQ,OAAO,CAAA,CAAA;AAChD,QAAA,IAAA;AAAA,UACEC,mCAAiB,QAAS,CAAA;AAAA,YACxB,MAAQ,EAAA,OAAA;AAAA,YACR,IAAM,EAAA,gBAAA;AAAA,YACN,MAAQ,EAAA;AAAA,cACN,MAAM,SAAU,CAAA,IAAA;AAAA,cAChB,WAAW,SAAU,CAAA,SAAA;AAAA,cACrB,MAAM,SAAU,CAAA,IAAA;AAAA,aAClB;AAAA,WACD,CAAA;AAAA,SACH,CAAA;AACA,QAAA,IAAA;AAAA,UACEA,mCAAiB,QAAS,CAAA;AAAA,YACxB,MAAQ,EAAA;AAAA,cACN,MAAM,SAAU,CAAA,IAAA;AAAA,cAChB,WAAW,SAAU,CAAA,SAAA;AAAA,cACrB,MAAM,SAAU,CAAA,IAAA;AAAA,aAClB;AAAA,YACA,IAAM,EAAA,gBAAA;AAAA,YACN,MAAQ,EAAA,OAAA;AAAA,WACT,CAAA;AAAA,SACH,CAAA;AAAA,OACF;AAAA,KACF;AAMA,IAAI,IAAA,MAAA,CAAO,SAAS,WAAa,EAAA;AAC/B,MAAA,MAAM,SAAY,GAAA,MAAA,CAAA;AAClB,MAAA,MAAA;AAAA,QACE,UAAU,IAAK,CAAA,KAAA;AAAA,QACf,EAAE,WAAA,EAAa,OAAS,EAAA,gBAAA,EAAkB,QAAQ,SAAU,EAAA;AAAA,QAC5DC,8BAAA;AAAA,QACAC,8BAAA;AAAA,OACF,CAAA;AACA,MAAA,MAAA;AAAA,QACE,UAAU,IAAK,CAAA,cAAA;AAAA,QACf,EAAE,WAAA,EAAa,WAAa,EAAA,gBAAA,EAAkB,QAAQ,SAAU,EAAA;AAAA,QAChEC,6BAAA;AAAA,QACAC,8BAAA;AAAA,OACF,CAAA;AACA,MAAA,MAAA;AAAA,QACE,UAAU,IAAK,CAAA,YAAA;AAAA,QACf,EAAE,WAAA,EAAa,KAAO,EAAA,gBAAA,EAAkB,QAAQ,SAAU,EAAA;AAAA,QAC1DC,kCAAA;AAAA,QACAC,qCAAA;AAAA,OACF,CAAA;AACA,MAAA,MAAA;AAAA,QACE,UAAU,IAAK,CAAA,YAAA;AAAA,QACf,EAAE,WAAA,EAAa,KAAO,EAAA,gBAAA,EAAkB,QAAQ,SAAU,EAAA;AAAA,QAC1DC,kCAAA;AAAA,QACAC,qCAAA;AAAA,OACF,CAAA;AACA,MAAA,MAAA;AAAA,QACE,UAAU,IAAK,CAAA,SAAA;AAAA,QACf,EAAE,gBAAkB,EAAA,OAAA,CAAQ,SAAU,EAAA;AAAA,QACtCC,gCAAA;AAAA,QACAC,mCAAA;AAAA,OACF,CAAA;AACA,MAAA,MAAA;AAAA,QACE,UAAU,IAAK,CAAA,MAAA;AAAA,QACf,EAAE,WAAA,EAAa,QAAU,EAAA,gBAAA,EAAkB,QAAQ,SAAU,EAAA;AAAA,QAC7DP,6BAAA;AAAA,QACAC,8BAAA;AAAA,OACF,CAAA;AAAA,KACF;AAMA,IAAI,IAAA,MAAA,CAAO,SAAS,KAAO,EAAA;AACzB,MAAA,MAAM,GAAM,GAAA,MAAA,CAAA;AACZ,MAAA,MAAA;AAAA,QACE,IAAI,IAAK,CAAA,KAAA;AAAA,QACT,EAAE,WAAA,EAAa,OAAS,EAAA,gBAAA,EAAkB,QAAQ,SAAU,EAAA;AAAA,QAC5DH,8BAAA;AAAA,QACAC,8BAAA;AAAA,OACF,CAAA;AACA,MAAA,MAAA;AAAA,QACE,IAAI,IAAK,CAAA,MAAA;AAAA,QACT,EAAE,WAAA,EAAa,QAAU,EAAA,gBAAA,EAAkB,QAAQ,SAAU,EAAA;AAAA,QAC7DC,6BAAA;AAAA,QACAC,8BAAA;AAAA,OACF,CAAA;AAAA,KACF;AAMA,IAAI,IAAA,MAAA,CAAO,SAAS,UAAY,EAAA;AAC9B,MAAA,MAAM,QAAW,GAAA,MAAA,CAAA;AACjB,MAAA,MAAA;AAAA,QACE,SAAS,IAAK,CAAA,KAAA;AAAA,QACd,EAAE,WAAA,EAAa,OAAS,EAAA,gBAAA,EAAkB,QAAQ,SAAU,EAAA;AAAA,QAC5DH,8BAAA;AAAA,QACAC,8BAAA;AAAA,OACF,CAAA;AACA,MAAA,MAAA;AAAA,QACE,SAAS,IAAK,CAAA,SAAA;AAAA,QACd,EAAE,gBAAkB,EAAA,OAAA,CAAQ,SAAU,EAAA;AAAA,QACtCO,gCAAA;AAAA,QACAC,mCAAA;AAAA,OACF,CAAA;AACA,MAAA,MAAA;AAAA,QACE,SAAS,IAAK,CAAA,YAAA;AAAA,QACd,EAAE,gBAAkB,EAAA,OAAA,CAAQ,SAAU,EAAA;AAAA,QACtCA,mCAAA;AAAA,QACAD,gCAAA;AAAA,OACF,CAAA;AACA,MAAA,MAAA;AAAA,QACE,SAAS,IAAK,CAAA,MAAA;AAAA,QACd,EAAE,WAAA,EAAa,QAAU,EAAA,gBAAA,EAAkB,QAAQ,SAAU,EAAA;AAAA,QAC7DN,6BAAA;AAAA,QACAC,8BAAA;AAAA,OACF,CAAA;AAAA,KACF;AAMA,IAAI,IAAA,MAAA,CAAO,SAAS,MAAQ,EAAA;AAC1B,MAAA,MAAM,IAAO,GAAA,MAAA,CAAA;AACb,MAAA,MAAA;AAAA,QACE,KAAK,IAAK,CAAA,QAAA;AAAA,QACV,EAAE,WAAA,EAAa,OAAS,EAAA,gBAAA,EAAkB,QAAQ,SAAU,EAAA;AAAA,QAC5DO,+BAAA;AAAA,QACAC,gCAAA;AAAA,OACF,CAAA;AAAA,KACF;AAMA,IAAI,IAAA,MAAA,CAAO,SAAS,OAAS,EAAA;AAC3B,MAAA,MAAM,KAAQ,GAAA,MAAA,CAAA;AACd,MAAA,MAAA;AAAA,QACE,MAAM,IAAK,CAAA,MAAA;AAAA,QACX,EAAE,WAAA,EAAa,OAAS,EAAA,gBAAA,EAAkB,QAAQ,SAAU,EAAA;AAAA,QAC5DC,8BAAA;AAAA,QACAC,+BAAA;AAAA,OACF,CAAA;AACA,MAAA,MAAA;AAAA,QACE,MAAM,IAAK,CAAA,QAAA;AAAA,QACX,EAAE,WAAA,EAAa,OAAS,EAAA,gBAAA,EAAkB,QAAQ,SAAU,EAAA;AAAA,QAC5DA,+BAAA;AAAA,QACAD,8BAAA;AAAA,OACF,CAAA;AACA,MAAA,MAAA;AAAA,QACE,MAAM,IAAK,CAAA,OAAA;AAAA,QACX,EAAE,WAAA,EAAa,MAAQ,EAAA,gBAAA,EAAkB,QAAQ,SAAU,EAAA;AAAA,QAC3DD,gCAAA;AAAA,QACAD,+BAAA;AAAA,OACF,CAAA;AAAA,KACF;AAMA,IAAI,IAAA,MAAA,CAAO,SAAS,QAAU,EAAA;AAC5B,MAAA,MAAM,MAAS,GAAA,MAAA,CAAA;AACf,MAAA,MAAA;AAAA,QACE,OAAO,IAAK,CAAA,KAAA;AAAA,QACZ,EAAE,WAAA,EAAa,OAAS,EAAA,gBAAA,EAAkB,QAAQ,SAAU,EAAA;AAAA,QAC5DV,8BAAA;AAAA,QACAC,8BAAA;AAAA,OACF,CAAA;AACA,MAAA,MAAA;AAAA,QACE,OAAO,IAAK,CAAA,MAAA;AAAA,QACZ,EAAE,WAAA,EAAa,QAAU,EAAA,gBAAA,EAAkB,QAAQ,SAAU,EAAA;AAAA,QAC7DC,6BAAA;AAAA,QACAC,8BAAA;AAAA,OACF,CAAA;AAAA,KACF;AAMA,IAAI,IAAA,MAAA,CAAO,SAAS,QAAU,EAAA;AAC5B,MAAA,MAAM,MAAS,GAAA,MAAA,CAAA;AACf,MAAA,MAAA;AAAA,QACE,OAAO,IAAK,CAAA,KAAA;AAAA,QACZ,EAAE,WAAA,EAAa,OAAS,EAAA,gBAAA,EAAkB,QAAQ,SAAU,EAAA;AAAA,QAC5DH,8BAAA;AAAA,QACAC,8BAAA;AAAA,OACF,CAAA;AAAA,KACF;AAEA,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AACF;;ACpRA,MAAM,IAAA,GAAOa,eAAUC,kBAAC,CAAA,CAAA;AAExB,MAAM,aAAgB,GAAA,MAAA,CAAA;AAGf,MAAM,mBAAgD,CAAA;AAAA,EAC3D,gBAA2B,GAAA;AACzB,IAAO,OAAA,qBAAA,CAAA;AAAA,GACT;AAAA,EAEA,MAAM,YAAA,CACJ,QACA,EAAA,QAAA,EACA,MACA,MACkB,EAAA;AAClB,IAAI,IAAA,QAAA,CAAS,SAAS,aAAe,EAAA;AACnC,MAAO,OAAA,KAAA,CAAA;AAAA,KACT;AAEA,IAAI,IAAA;AACF,MAAA,MAAM,WAAc,GAAA,MAAM,IAAK,CAAA,QAAA,CAAS,MAAM,CAAA,CAAA;AAE9C,MAAI,IAAA,WAAA,CAAY,SAAS,CAAG,EAAA;AAC1B,QAAA,KAAA,MAAW,aAAa,WAAa,EAAA;AACnC,UAAA,MAAM,IAAO,GAAA,MAAMC,mBAAG,CAAA,QAAA,CAAS,SAAS,CAAA,CAAA;AACxC,UAAM,MAAA,kBAAA,GAAqBC,qBAAK,CAAA,SAAA,CAAU,SAAS,CAAA,CAAA;AAInD,UAAA,WAAA,MAAiB,eAAe,MAAO,CAAA;AAAA,YACrC,IAAA;AAAA,YACA,QAAU,EAAA;AAAA,cACR,IAAM,EAAA,aAAA;AAAA,cACN,MAAQ,EAAA,kBAAA;AAAA,aACV;AAAA,WACD,CAAG,EAAA;AACF,YAAA,IAAA,CAAK,WAAW,CAAA,CAAA;AAChB,YAAA,IAAA;AAAA,cACElB,kCAAiB,CAAA,OAAA;AAAA,gBACf,CAAA,EAAG,aAAa,CAAA,CAAA,EAAI,kBAAkB,CAAA,CAAA;AAAA,eACxC;AAAA,aACF,CAAA;AAAA,WACF;AAAA,SACF;AAAA,OACF,MAAA,IAAW,CAAC,QAAU,EAAA;AACpB,QAAA,MAAM,UAAU,CAAG,EAAA,QAAA,CAAS,IAAI,CAAA,CAAA,EAAI,SAAS,MAAM,CAAA,eAAA,CAAA,CAAA;AACnD,QAAA,IAAA,CAAKA,kCAAiB,CAAA,aAAA,CAAc,QAAU,EAAA,OAAO,CAAC,CAAA,CAAA;AAAA,OACxD;AAAA,aACO,CAAG,EAAA;AACV,MAAM,MAAA,OAAA,GAAU,GAAG,QAAS,CAAA,IAAI,IAAI,QAAS,CAAA,MAAM,uBAAuB,CAAC,CAAA,CAAA,CAAA;AAC3E,MAAA,IAAA,CAAKA,kCAAiB,CAAA,YAAA,CAAa,QAAU,EAAA,OAAO,CAAC,CAAA,CAAA;AAAA,KACvD;AAEA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AACF;;AC1CO,MAAM,oBAAiD,CAAA;AAAA,EAC5D,YAA6B,OAAsC,EAAA;AAAtC,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;AAAA,GAAuC;AAAA,EAEpE,gBAA2B,GAAA;AACzB,IAAO,OAAA,sBAAA,CAAA;AAAA,GACT;AAAA,EAEA,MAAM,gBAAA,CACJ,MACA,EAAA,QAAA,EACA,IACiB,EAAA;AACjB,IAAM,MAAA,OAAA,GAAU,OAAO,IAAuC,KAAA;AAC5D,MAAA,IAAI,CAAC,IAAA,IAAQ,EAAE,IAAA,YAAgB,MAAS,CAAA,EAAA;AAEtC,QAAO,OAAA,CAAC,MAAM,KAAK,CAAA,CAAA;AAAA,OACrB;AAEA,MAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,IAAI,CAAG,EAAA;AAEvB,QAAM,MAAA,KAAA,GAAQ,MAAM,OAAA,CAAQ,GAAI,CAAA,IAAA,CAAK,IAAI,CAAQ,IAAA,KAAA,OAAA,CAAQ,IAAI,CAAC,CAAC,CAAA,CAAA;AAC/D,QAAO,OAAA,KAAA,CAAM,MAAM,CAAC,GAAG,OAAO,CAAA,KAAM,CAAC,OAAO,CACxC,GAAA,CAAC,MAAM,KAAK,CAAA,GACZ,CAAC,KAAA,CAAM,GAAI,CAAA,CAAC,CAAC,IAAI,CAAA,KAAM,IAAI,CAAA,EAAG,IAAI,CAAA,CAAA;AAAA,OACxC;AAEA,MAAM,MAAA,IAAA,GAAO,MAAO,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAC7B,MAAI,IAAA,CAAC,KAAK,IAAK,CAAA,CAAA,CAAA,KAAK,EAAE,UAAW,CAAA,GAAG,CAAC,CAAG,EAAA;AAGtC,QAAM,MAAA,OAAA,GAAU,MAAM,OAAQ,CAAA,GAAA;AAAA,UAC5B,MAAA,CAAO,OAAQ,CAAA,IAAI,CAAE,CAAA,GAAA;AAAA,YAAI,CAAC,CAAC,CAAG,EAAA,CAAC,CAC7B,KAAA,OAAA,CAAQ,CAAC,CAAA,CAAE,IAAK,CAAA,CAAA,EAAA,KAAM,CAAC,CAAA,EAAG,EAAE,CAAU,CAAA;AAAA,WACxC;AAAA,SACF,CAAA;AACA,QAAA,OAAO,OAAQ,CAAA,KAAA,CAAM,CAAC,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC,OAAO,CAC9C,GAAA,CAAC,MAAM,KAAK,CAAA,GACZ,CAAC,MAAA,CAAO,YAAY,OAAQ,CAAA,GAAA,CAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAA,KAAM,CAAC,CAAG,EAAA,CAAC,CAAC,CAAC,GAAG,IAAI,CAAA,CAAA;AAAA,OAClE,MAAA,IAAW,IAAK,CAAA,MAAA,KAAW,CAAG,EAAA;AAI5B,QAAO,OAAA,CAAC,MAAM,KAAK,CAAA,CAAA;AAAA,OACrB;AAEA,MAAA,MAAM,WAAc,GAAA,IAAA,CAAK,CAAC,CAAA,CAAE,UAAU,CAAC,CAAA,CAAA;AACvC,MAAA,MAAM,aAAgB,GAAA,IAAA,CAAK,IAAK,CAAA,CAAC,CAAC,CAAA,CAAA;AAElC,MAAA,MAAM,QAAW,GAAA,IAAA,CAAK,OAAQ,CAAA,SAAA,CAAU,WAAW,CAAA,CAAA;AACnD,MAAA,IAAI,CAAC,QAAU,EAAA;AAKb,QAAO,OAAA,CAAC,MAAM,KAAK,CAAA,CAAA;AAAA,OACrB;AAEA,MAAM,MAAA,IAAA,GAAO,OAAO,GAAiC,KAAA;AACnD,QAAA,MAAM,WAAW,MAAM,IAAA,CAAK,OAAQ,CAAA,MAAA,CAAO,QAAQ,GAAG,CAAA,CAAA;AACtD,QAAM,MAAA,MAAA,GAAS,MAAM,QAAA,CAAS,MAAO,EAAA,CAAA;AACrC,QAAO,OAAA,MAAA,CAAA;AAAA,OACT,CAAA;AAEA,MAAA,MAAM,aAAa,CAAC,GAAA,EAAa,SAC/B,IAAK,CAAA,OAAA,CAAQ,aAAa,UAAW,CAAA;AAAA,QACnC,GAAA;AAAA,QACA,IAAA;AAAA,OACD,CAAA,CAAA;AAEH,MAAO,OAAA;AAAA,QACL,MAAM,QAAS,CAAA;AAAA,UACb,GAAK,EAAA,WAAA;AAAA,UACL,KAAO,EAAA,aAAA;AAAA,UACP,SAAS,QAAS,CAAA,MAAA;AAAA,UAClB,IAAA;AAAA,UACA,UAAA;AAAA,UACA,IAAA;AAAA,SACD,CAAA;AAAA,QACD,IAAA;AAAA,OACF,CAAA;AAAA,KACF,CAAA;AAEA,IAAA,MAAM,CAAC,MAAM,CAAI,GAAA,MAAM,QAAQ,MAAM,CAAA,CAAA;AACrC,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AACF,CAAA;AAMA,eAAsB,wBACpB,MACoB,EAAA;AAvItB,EAAA,IAAA,EAAA,CAAA;AAwIE,EAAA,MAAM,EAAE,OAAS,EAAA,GAAA,EAAQ,GAAA,MAAM,iBAAiB,MAAM,CAAA,CAAA;AAEtD,EAAA,MAAA,CAAO,KAAKA,kCAAiB,CAAA,OAAA,CAAQ,CAAO,IAAA,EAAA,GAAG,EAAE,CAAC,CAAA,CAAA;AAElD,EAAI,IAAA,SAAA,CAAA;AACJ,EAAI,IAAA;AACF,IAAA,SAAA,GAAYmB,sBAAK,iBAAkB,CAAA,OAAO,CAAE,CAAA,MAAA,CAAO,OAAK,CAAC,CAAA,CAAA;AAAA,WAClD,CAAG,EAAA;AACV,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,gBAAiB,MAAO,CAAA,GAAG,iCAAiC,MAAO,CAAA,KAAK,KAAK,CAAC,CAAA,CAAA;AAAA,KAChF,CAAA;AAAA,GACF;AAEA,EAAI,IAAA,SAAA,CAAU,WAAW,CAAG,EAAA;AAC1B,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,CAAA,aAAA,EAAiB,OAAO,GAAG,CAAA,kDAAA,EAAqD,OAAO,KAAK,CAAA,QAAA,EAAW,UAAU,MAAM,CAAA,CAAA;AAAA,KACzH,CAAA;AAAA,GACF;AAEA,EAAM,MAAA,QAAA,GAAW,UAAU,CAAC,CAAA,CAAA;AAE5B,EAAI,IAAA,CAAA,EAAA,GAAA,QAAA,CAAS,MAAT,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAiB,MAAQ,EAAA;AAC3B,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,CAAA,aAAA,EAAiB,MAAO,CAAA,GAAG,CAAkC,+BAAA,EAAA,MAAA,CAAO,KAAK,CAAK,EAAA,EAAA,QAAA,CAAS,MAAO,CAAA,CAAC,CAAC,CAAA,CAAA;AAAA,KAClG,CAAA;AAAA,GACF;AAEA,EAAA,OAAO,SAAS,MAAO,EAAA,CAAA;AACzB,CAAA;AAEA,eAAsB,wBACpB,MACoB,EAAA;AACpB,EAAA,MAAM,EAAE,OAAS,EAAA,GAAA,EAAQ,GAAA,MAAM,iBAAiB,MAAM,CAAA,CAAA;AAEtD,EAAA,MAAA,CAAO,KAAKnB,kCAAiB,CAAA,OAAA,CAAQ,CAAO,IAAA,EAAA,GAAG,EAAE,CAAC,CAAA,CAAA;AAElD,EAAI,IAAA;AACF,IAAO,OAAA,IAAA,CAAK,MAAM,OAAO,CAAA,CAAA;AAAA,WAClB,CAAG,EAAA;AACV,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,gBAAiB,MAAO,CAAA,GAAG,iCAAiC,MAAO,CAAA,KAAK,KAAK,CAAC,CAAA,CAAA;AAAA,KAChF,CAAA;AAAA,GACF;AACF,CAAA;AAEA,eAAsB,wBACpB,MACoB,EAAA;AACpB,EAAA,MAAM,EAAE,OAAS,EAAA,GAAA,EAAQ,GAAA,MAAM,iBAAiB,MAAM,CAAA,CAAA;AAEtD,EAAA,MAAA,CAAO,KAAKA,kCAAiB,CAAA,OAAA,CAAQ,CAAO,IAAA,EAAA,GAAG,EAAE,CAAC,CAAA,CAAA;AAElD,EAAO,OAAA,OAAA,CAAA;AACT,CAAA;AAMA,eAAe,iBACb,MAC2C,EAAA;AAC3C,EAAM,MAAA,MAAA,GAAS,YAAY,MAAM,CAAA,CAAA;AAEjC,EAAI,IAAA;AACF,IAAA,MAAM,IAAO,GAAA,MAAM,MAAO,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AACrC,IAAA,OAAO,EAAE,OAAS,EAAA,IAAA,CAAK,SAAS,OAAO,CAAA,EAAG,KAAK,MAAO,EAAA,CAAA;AAAA,WAC/C,CAAG,EAAA;AACV,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,gBAAiB,MAAO,CAAA,GAAG,4BAA4B,MAAO,CAAA,KAAK,KAAK,CAAC,CAAA,CAAA;AAAA,KAC3E,CAAA;AAAA,GACF;AACF,CAAA;AAEA,SAAS,WAAY,CAAA;AAAA,EACnB,GAAA;AAAA,EACA,KAAA;AAAA,EACA,OAAA;AAAA,EACA,UAAA;AACF,CAAsC,EAAA;AACpC,EAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,gBAAiB,GAAG,CAAA,qFAAA,CAAA;AAAA,KACtB,CAAA;AAAA,GACF;AAEA,EAAI,IAAA;AACF,IAAO,OAAA,UAAA,CAAW,OAAO,OAAO,CAAA,CAAA;AAAA,WACzB,CAAG,EAAA;AAKV,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,gBAAiB,GAAG,CAAA,6BAAA,EAAgC,OAAO,CAAQ,KAAA,EAAA,KAAK,KAAK,CAAC,CAAA,CAAA;AAAA,KAChF,CAAA;AAAA,GACF;AACF;;ACzMA,MAAM,SAAY,GAAA,IAAA,CAAA;AAaX,MAAM,kBAA+C,CAAA;AAAA,EAC1D,YACmB,OAIjB,EAAA;AAJiB,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;AAAA,GAIhB;AAAA,EAEH,gBAAmB,GAAA;AACjB,IAAO,OAAA,YAAA,CAAA;AAAA,GACT;AAAA,EAEA,MAAM,YACJ,CAAA,QAAA,EACA,QACA,EAAA,IAAA,EACA,QACA,KACkB,EAAA;AAClB,IAAI,IAAA,QAAA,CAAS,SAAS,KAAO,EAAA;AAC3B,MAAO,OAAA,KAAA,CAAA;AAAA,KACT;AAEA,IAAA,MAAM,SAAY,GAAA,MAAM,KAAM,CAAA,GAAA,CAAe,SAAS,CAAA,CAAA;AAEtD,IAAI,IAAA;AACF,MAAA,MAAM,EAAE,QAAU,EAAA,IAAA,EAAM,OAAQ,EAAA,GAAI,MAAM,IAAK,CAAA,MAAA;AAAA,QAC7C,QAAS,CAAA,MAAA;AAAA,QACT,SAAW,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,SAAA,CAAA,IAAA;AAAA,OACb,CAAA;AAEA,MAAA,MAAM,eAAyC,EAAC,CAAA;AAChD,MAAA,KAAA,MAAW,QAAQ,QAAU,EAAA;AAC3B,QAAA,WAAA,MAAiB,eAAe,MAAO,CAAA;AAAA,UACrC,MAAM,IAAK,CAAA,IAAA;AAAA,UACX,UAAU,EAAE,IAAA,EAAM,SAAS,IAAM,EAAA,MAAA,EAAQ,KAAK,GAAI,EAAA;AAAA,SACnD,CAAG,EAAA;AACF,UAAA,YAAA,CAAa,KAAK,WAAW,CAAA,CAAA;AAC7B,UAAA,IAAA,CAAK,WAAW,CAAA,CAAA;AAAA,SAClB;AAAA,OACF;AAEA,MAAA,MAAM,iBAAiB,YAAa,CAAA,KAAA,CAAM,CAAK,CAAA,KAAA,CAAA,CAAE,SAAS,QAAQ,CAAA,CAAA;AAClE,MAAA,IAAI,WAAW,cAAgB,EAAA;AAC7B,QAAM,MAAA,KAAA,CAAM,IAAe,SAAW,EAAA;AAAA,UACpC,IAAM,EAAA,OAAA;AAAA,UACN,KAAO,EAAA,YAAA;AAAA,SACR,CAAA,CAAA;AAAA,OACH;AAEA,MAAK,IAAA,CAAAA,kCAAA,CAAiB,QAAQ,CAAG,EAAA,QAAA,CAAS,IAAI,CAAI,CAAA,EAAA,QAAA,CAAS,MAAM,CAAA,CAAE,CAAC,CAAA,CAAA;AAAA,aAC7D,KAAO,EAAA;AACd,MAAAoB,kBAAA,CAAY,KAAK,CAAA,CAAA;AACjB,MAAA,MAAM,UAAU,CAAkB,eAAA,EAAA,QAAA,CAAS,IAAI,CAAA,EAAA,EAAK,KAAK,CAAG,CAAA,CAAA,SAAA;AAAA,QAC1D,CAAA;AAAA,QACA,GAAA;AAAA,OACF,CAAA;AACA,MAAI,IAAA,KAAA,CAAM,IAAS,KAAA,kBAAA,IAAsB,SAAW,EAAA;AAClD,QAAW,KAAA,MAAA,WAAA,IAAe,UAAU,KAAO,EAAA;AACzC,UAAA,IAAA,CAAK,WAAW,CAAA,CAAA;AAAA,SAClB;AACA,QAAK,IAAA,CAAApB,kCAAA,CAAiB,QAAQ,CAAG,EAAA,QAAA,CAAS,IAAI,CAAI,CAAA,EAAA,QAAA,CAAS,MAAM,CAAA,CAAE,CAAC,CAAA,CAAA;AAAA,OACtE,MAAA,IAAW,KAAM,CAAA,IAAA,KAAS,eAAiB,EAAA;AACzC,QAAA,IAAI,CAAC,QAAU,EAAA;AACb,UAAA,IAAA,CAAKA,kCAAiB,CAAA,aAAA,CAAc,QAAU,EAAA,OAAO,CAAC,CAAA,CAAA;AAAA,SACxD;AAAA,OACK,MAAA;AACL,QAAA,IAAA,CAAKA,kCAAiB,CAAA,YAAA,CAAa,QAAU,EAAA,OAAO,CAAC,CAAA,CAAA;AAAA,OACvD;AAAA,KACF;AAEA,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA,EAEA,MAAc,MACZ,CAAA,QAAA,EACA,IACuE,EAAA;AAIvE,IAAA,MAAM,EAAE,QAAA,EAAa,GAAAvB,4BAAA,CAAY,QAAQ,CAAA,CAAA;AACzC,IAAI,IAAA,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAU,MAAM,MAAS,CAAA,EAAA;AAC3B,MAAM,MAAA,OAAA,GAAU4C,gCAAe,CAAC,CAAA,CAAA;AAChC,MAAM,MAAA,QAAA,GAAW,MAAM,IAAK,CAAA,OAAA,CAAQ,OAAO,MAAO,CAAA,QAAA,EAAU,EAAE,IAAA,EAAM,CAAA,CAAA;AACpE,MAAA,MAAM,MAAS,GAAA,QAAA,CAAS,KAAM,CAAA,GAAA,CAAI,OAAM,IAAS,MAAA;AAAA,QAC/C,KAAK,IAAK,CAAA,GAAA;AAAA,QACV,IAAM,EAAA,MAAM,OAAQ,CAAA,IAAA,CAAK,OAAO,CAAA;AAAA,OAChC,CAAA,CAAA,CAAA;AACF,MAAO,OAAA,EAAE,UAAU,MAAM,OAAA,CAAQ,IAAI,MAAM,CAAA,EAAG,IAAM,EAAA,QAAA,CAAS,IAAK,EAAA,CAAA;AAAA,KACpE;AAEA,IAAM,MAAA,IAAA,GAAO,MAAM,IAAK,CAAA,OAAA,CAAQ,OAAO,OAAQ,CAAA,QAAA,EAAU,EAAE,IAAA,EAAM,CAAA,CAAA;AACjE,IAAO,OAAA;AAAA,MACL,QAAA,EAAU,CAAC,EAAE,GAAK,EAAA,QAAA,EAAU,MAAM,MAAM,IAAA,CAAK,MAAO,EAAA,EAAG,CAAA;AAAA,MACvD,MAAM,IAAK,CAAA,IAAA;AAAA,KACb,CAAA;AAAA,GACF;AACF;;ACrHiB,UAAA,eAAA,CACf,MACA,QACkC,EAAA;AA9BpC,EAAA,IAAA,EAAA,CAAA;AA+BE,EAAI,IAAA,SAAA,CAAA;AACJ,EAAI,IAAA;AACF,IAAY,SAAA,GAAAF,qBAAA,CAAK,kBAAkB,IAAK,CAAA,QAAA,CAAS,MAAM,CAAC,CAAA,CAAE,MAAO,CAAA,CAAA,CAAA,KAAK,CAAC,CAAA,CAAA;AAAA,WAChE,CAAG,EAAA;AACV,IAAM,MAAA,GAAA,GAAMtC,kCAAqB,QAAQ,CAAA,CAAA;AACzC,IAAA,MAAM,OAAU,GAAA,CAAA,wBAAA,EAA2B,GAAG,CAAA,EAAA,EAAK,CAAC,CAAA,CAAA,CAAA;AACpD,IAAM,MAAAmB,kCAAA,CAAiB,YAAa,CAAA,QAAA,EAAU,OAAO,CAAA,CAAA;AACrD,IAAA,OAAA;AAAA,GACF;AAEA,EAAA,KAAA,MAAW,YAAY,SAAW,EAAA;AAChC,IAAI,IAAA,CAAA,EAAA,GAAA,QAAA,CAAS,MAAT,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAiB,MAAQ,EAAA;AAC3B,MAAM,MAAA,GAAA,GAAMnB,kCAAqB,QAAQ,CAAA,CAAA;AACzC,MAAA,MAAM,UAAU,CAAiB,cAAA,EAAA,GAAG,KAAK,QAAS,CAAA,MAAA,CAAO,CAAC,CAAC,CAAA,CAAA,CAAA;AAC3D,MAAM,MAAAmB,kCAAA,CAAiB,YAAa,CAAA,QAAA,EAAU,OAAO,CAAA,CAAA;AAAA,KAChD,MAAA;AACL,MAAM,MAAA,IAAA,GAAO,SAAS,MAAO,EAAA,CAAA;AAC7B,MAAI,IAAAsB,uBAAA,CAAO,aAAc,CAAA,IAAI,CAAG,EAAA;AAC9B,QAAM,MAAAtB,kCAAA,CAAiB,MAAO,CAAA,QAAA,EAAU,IAAc,CAAA,CAAA;AAAA,OACxD,MAAA,IAAW,SAAS,IAAM,EAAA,CAGnB,MAAA;AACL,QAAM,MAAA,OAAA,GAAU,CAAgC,6BAAA,EAAA,OAAO,IAAI,CAAA,CAAA,CAAA;AAC3D,QAAM,MAAAA,kCAAA,CAAiB,YAAa,CAAA,QAAA,EAAU,OAAO,CAAA,CAAA;AAAA,OACvD;AAAA,KACF;AAAA,GACF;AACF,CAAA;AAEO,MAAM,0BACX,gBAAgBuB,wBAAAA,CAAwB,EAAE,IAAA,EAAM,UAAY,EAAA;AAC1D,EAAA,KAAA,MAAW,CAAK,IAAA,eAAA,CAAgB,IAAM,EAAA,QAAQ,CAAG,EAAA;AAC/C,IAAM,MAAA,CAAA,CAAA;AAAA,GACR;AACF,CAAA;;ACvCK,SAAS,+BAA+B,OAGhB,EAAA;AAC7B,EAAM,MAAA,EAAE,UAAY,EAAA,UAAA,EAAe,GAAA,OAAA,CAAA;AACnC,EAAA,OAAO,MAAM;AACX,IAAA,OAAO,IAAK,CAAA,MAAA,EAAY,IAAA,UAAA,GAAa,UAAc,CAAA,GAAA,UAAA,CAAA;AAAA,GACrD,CAAA;AACF;;ACJO,SAAS,iBAAiB,MAA0C,EAAA;AACzE,EAAA,OAAO,OAAO,IAAS,KAAA,UAAA,CAAA;AACzB,CAAA;AAEO,SAAS,qBAAqB,MAAwB,EAAA;AAnC7D,EAAA,IAAA,EAAA,CAAA;AAoCE,EAAA,MAAM,GAAM,GAAA,CAAA,EAAA,GAAA,MAAA,CAAO,QAAS,CAAA,WAAA,KAAhB,IAA8B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAAvC,gCAAA,CAAA,CAAA;AAC1C,EAAA,IAAI,CAAC,GAAK,EAAA;AACR,IAAM,MAAA,SAAA,GAAYwC,gCAAmB,MAAM,CAAA,CAAA;AAC3C,IAAA,MAAM,IAAIC,iBAAA;AAAA,MACR,CAAA,QAAA,EAAW,SAAS,CAAA,+BAAA,EAAkCzC,gCAAmB,CAAA,CAAA;AAAA,KAC3E,CAAA;AAAA,GACF;AACA,EAAO,OAAA,GAAA,CAAA;AACT,CAAA;AAEO,SAAS,2BAA2B,MAAwB,EAAA;AA9CnE,EAAA,IAAA,EAAA,CAAA;AA+CE,EAAA,MAAM,GAAM,GAAA,CAAA,EAAA,GAAA,MAAA,CAAO,QAAS,CAAA,WAAA,KAAhB,IAA8B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAAC,uCAAA,CAAA,CAAA;AAC1C,EAAA,IAAI,CAAC,GAAK,EAAA;AACR,IAAM,MAAA,SAAA,GAAYuC,gCAAmB,MAAM,CAAA,CAAA;AAC3C,IAAA,MAAM,IAAIC,iBAAA;AAAA,MACR,CAAA,QAAA,EAAW,SAAS,CAAA,+BAAA,EAAkCxC,uCAA0B,CAAA,CAAA;AAAA,KAClF,CAAA;AAAA,GACF;AACA,EAAO,OAAA,GAAA,CAAA;AACT,CAAA;AAEO,SAAS,aACd,CAAA,YAAA,EACA,IACA,EAAA,IAAA,EACA,MACQ,EAAA;AACR,EAAI,IAAA,IAAA,CAAK,SAAS,IAAM,EAAA;AACtB,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AACA,EAAI,IAAA;AACF,IAAA,IAAI,SAAS,MAAQ,EAAA;AACnB,MAAI,IAAA,MAAA,CAAO,UAAW,CAAA,GAAG,CAAG,EAAA;AAC1B,QAAA,OAAOiC,sBAAK,IAAK,CAAAA,qBAAA,CAAK,QAAQ,IAAK,CAAA,MAAM,GAAG,MAAM,CAAA,CAAA;AAAA,OACpD;AACA,MAAO,OAAA,MAAA,CAAA;AAAA,KACT,MAAA,IAAW,SAAS,KAAO,EAAA;AACzB,MAAO,OAAA,YAAA,CAAa,WAAW,EAAE,GAAA,EAAK,QAAQ,IAAM,EAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AAAA,KACnE;AACA,IAAO,OAAA,MAAA,CAAA;AAAA,WACA,CAAG,EAAA;AACV,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AACF,CAAA;AAEO,SAAS,SAAS,KAAmD,EAAA;AAC1E,EAAO,OAAA,OAAO,UAAU,QAAY,IAAA,KAAA,KAAU,QAAQ,CAAC,KAAA,CAAM,QAAQ,KAAK,CAAA,CAAA;AAC5E,CAAA;AAEO,MAAM,iBAAiBQ,kCAAsB,EAAA,CAAA;AAE7C,MAAM,yBAAyBC,0CAA8B,EAAA;;AC5D7D,SAAS,2BAA2B,QAAwB,EAAA;AACjE,EAAA,MAAM,IAAO,GAAAC,iBAAA,CAAW,MAAM,CAAA,CAC3B,OAAO,CAAG,EAAA,QAAA,CAAS,IAAI,CAAA,CAAA,EAAI,QAAS,CAAA,MAAM,CAAE,CAAA,CAAA,CAC5C,OAAO,KAAK,CAAA,CAAA;AACf,EAAA,OAAO,aAAa,IAAI,CAAA,CAAA,CAAA;AAC1B,CAAA;AAGO,SAAS,6BAA6B,IAGlB,EAAA;AAtC3B,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAuCE,EAAA,MAAM,WAAW,IAAK,CAAA,QAAA,CAAA;AACtB,EAAA,MAAM,eAAe,IAAK,CAAA,YAAA,CAAA;AAE1B,EAAI,IAAA,WAAA,CAAA;AACJ,EAAI,IAAA,cAAA,CAAA;AACJ,EAAA,IAAI,YAAc,EAAA;AAChB,IAAA,MAAM,gBACJ,GAAA,CAAA,EAAA,GAAA,YAAA,CAAa,QAAS,CAAA,WAAA,KAAtB,IAAoC,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA5C,gCAAA,CAAA,CAAA;AACtC,IAAA,IAAI,CAAC,gBAAkB,EAAA;AACrB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAkB,eAAA,EAAAwC,+BAAA;AAAA,UAChB,YAAA;AAAA,SACD,CAAkB,eAAA,EAAA3C,iCAAA;AAAA,UACjB,QAAA;AAAA,SACD,CAAA,qCAAA,CAAA;AAAA,OACH,CAAA;AAAA,KACF;AACA,IAAc,WAAA,GAAA,gBAAA,CAAA;AACd,IAAA,MAAM,mBACJ,GAAA,CAAA,EAAA,GAAA,YAAA,CAAa,QAAS,CAAA,WAAA,KAAtB,IAAoC,GAAA,KAAA,CAAA,GAAA,EAAA,CAAAI,uCAAA,CAAA,CAAA;AACtC,IAAA,IAAI,CAAC,mBAAqB,EAAA;AACxB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAkB,eAAA,EAAAuC,+BAAA;AAAA,UAChB,YAAA;AAAA,SACD,CAAkB,eAAA,EAAA3C,iCAAA;AAAA,UACjB,QAAA;AAAA,SACD,CAAA,6CAAA,CAAA;AAAA,OACH,CAAA;AAAA,KACF;AACA,IAAiB,cAAA,GAAA,mBAAA,CAAA;AAAA,GACZ,MAAA;AACL,IAAA,WAAA,GAAcA,kCAAqB,QAAQ,CAAA,CAAA;AAC3C,IAAiB,cAAA,GAAA,WAAA,CAAA;AAAA,GACnB;AAEA,EAAA,MAAM,MAAiC,GAAA;AAAA,IACrC,UAAY,EAAA,uBAAA;AAAA,IACZ,IAAM,EAAA,UAAA;AAAA,IACN,QAAU,EAAA;AAAA,MACR,IAAA,EAAM,2BAA2B,QAAQ,CAAA;AAAA,MACzC,WAAa,EAAA;AAAA,QACX,CAACG,gCAAmB,GAAG,WAAA;AAAA,QACvB,CAACC,uCAA0B,GAAG,cAAA;AAAA,OAChC;AAAA,KACF;AAAA,IACA,IAAM,EAAA;AAAA,MACJ,MAAM,QAAS,CAAA,IAAA;AAAA,MACf,QAAQ,QAAS,CAAA,MAAA;AAAA,MACjB,UAAU,QAAS,CAAA,QAAA;AAAA,KACrB;AAAA,GACF,CAAA;AAEA,EAAO,OAAA,MAAA,CAAA;AACT;;ACnEO,MAAM,4BAAuD,CAAA;AAAA,EAClE,YAA6B,MAAgB,EAAA;AAAhB,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA,CAAA;AAAA,GAAiB;AAAA,EAE9C,eAA0B,GAAA;AACxB,IAAO,OAAA,wBAAA,CAAA;AAAA,GACT;AAAA,EAEA,MAAM,QAAQ,UAAqD,EAAA;AACjE,IAAM,MAAA,QAAA,GAAW,KAAK,qBAAsB,EAAA,CAAA;AAC5C,IAAA,MAAM,WAAW,aAAc,CAAA;AAAA,MAC7B,IAAM,EAAA,MAAA;AAAA,MACN,QAAA;AAAA,KACD,CAAA,CAAA;AAED,IAAI,IAAA,IAAA,CAAK,OAAO,SAAW,EAAA;AACzB,MAAI,IAAA,UAAA,GAAa,IAAK,CAAA,SAAA,CAAU,QAAQ,CAAA,CAAA;AAExC,MAAK,IAAA,CAAA,MAAA,CAAO,UAAU,MAAM;AAC1B,QAAM,MAAA,WAAA,GAAc,KAAK,qBAAsB,EAAA,CAAA;AAC/C,QAAM,MAAA,MAAA,GAAS,IAAK,CAAA,SAAA,CAAU,WAAW,CAAA,CAAA;AAEzC,QAAA,IAAI,eAAe,MAAQ,EAAA;AACzB,UAAa,UAAA,GAAA,MAAA,CAAA;AACb,UAAA,UAAA,CAAW,aAAc,CAAA;AAAA,YACvB,IAAM,EAAA,MAAA;AAAA,YACN,QAAU,EAAA,WAAA;AAAA,WACX,CAAA,CAAA;AAAA,SACH;AAAA,OACD,CAAA,CAAA;AAAA,KACH;AAAA,GACF;AAAA,EAEQ,qBAAwB,GAAA;AAzDlC,IAAA,IAAA,EAAA,CAAA;AA0DI,IAAA,MAAM,mBACJ,EAAK,GAAA,IAAA,CAAA,MAAA,CAAO,uBAAuB,mBAAmB,CAAA,KAAtD,YAA2D,EAAC,CAAA;AAE9D,IAAO,OAAA,eAAA,CAAgB,IAAI,CAAY,QAAA,KAAA;AACrC,MAAM,MAAA,IAAA,GAAO,QAAS,CAAA,SAAA,CAAU,MAAM,CAAA,CAAA;AACtC,MAAM,MAAA,MAAA,GAAS,QAAS,CAAA,SAAA,CAAU,QAAQ,CAAA,CAAA;AAC1C,MAAA,MAAM,SAAS,4BAA6B,CAAA;AAAA,QAC1C,QAAU,EAAA;AAAA,UACR,IAAA;AAAA,UACA,QAAQ,IAAS,KAAA,MAAA,GAASiC,qBAAK,CAAA,OAAA,CAAQ,MAAM,CAAI,GAAA,MAAA;AAAA,SACnD;AAAA,OACD,CAAA,CAAA;AACD,MAAM,MAAA,WAAA,GAAc,qBAAqB,MAAM,CAAA,CAAA;AAC/C,MAAO,OAAA,EAAE,QAAQ,WAAY,EAAA,CAAA;AAAA,KAC9B,CAAA,CAAA;AAAA,GACH;AACF;;;;;;;;ACnCO,MAAM,oBAA8D,CAAA;AAAA,EAGzE,YAA6B,EAAU,EAAA;AAAV,IAAA,IAAA,CAAA,EAAA,GAAA,EAAA,CAAA;AAF7B,IAAQvC,eAAA,CAAA,IAAA,EAAA,aAAA,CAAA,CAAA;AAAA,GAEgC;AAAA,EAExC,eAA0B,GAAA;AACxB,IAAO,OAAA,sBAAA,CAAA;AAAA,GACT;AAAA,EAEA,MAAM,eAAe,KAAyC,EAAA;AAC5D,IAAA,MAAM,WAAW,MAAM,IAAA,CAAK,EAAG,CAAA,WAAA,CAAY,OAAM,EAAM,KAAA;AAErD,MAAA,MAAM,iBAAoB,GAAA,MAAM,IAAK,CAAA,SAAA,CAAU,EAAE,CAAA,CAAA;AAGjD,MAAA,MAAM,mBAAmB,iBAAkB,CAAA,IAAA;AAAA,QACzC,OAAK,KAAM,CAAA,IAAA,KAAS,EAAE,IAAQ,IAAA,KAAA,CAAM,WAAW,CAAE,CAAA,MAAA;AAAA,OACnD,CAAA;AACA,MAAA,IAAI,gBAAkB,EAAA;AACpB,QAAA,MAAM,IAAIkD,oBAAA;AAAA,UACR,CAAY,SAAA,EAAA,KAAA,CAAM,IAAI,CAAA,CAAA,EAAI,MAAM,MAAM,CAAA,eAAA,CAAA;AAAA,SACxC,CAAA;AAAA,OACF;AAEA,MAAA,MAAM,KAAwB,GAAA;AAAA,QAC5B,IAAIC,OAAK,EAAA;AAAA,QACT,MAAM,KAAM,CAAA,IAAA;AAAA,QACZ,QAAQ,KAAM,CAAA,MAAA;AAAA,OAChB,CAAA;AAEA,MAAA,MAAM,EAAmB,CAAA,WAAW,CAAE,CAAA,MAAA,CAAO,KAAK,CAAA,CAAA;AAElD,MAAO,OAAA,KAAA,CAAA;AAAA,KACR,CAAA,CAAA;AACD,IAAA,MAAM,MAAS,GAAA,4BAAA,CAA6B,EAAE,QAAA,EAAU,CAAA,CAAA;AACxD,IAAM,MAAA,IAAA,CAAK,WAAW,aAAc,CAAA;AAAA,MAClC,IAAM,EAAA,OAAA;AAAA,MACN,KAAA,EAAO,CAAC,EAAE,MAAA,EAAQ,aAAa,oBAAqB,CAAA,MAAM,GAAG,CAAA;AAAA,MAC7D,SAAS,EAAC;AAAA,KACX,CAAA,CAAA;AAED,IAAO,OAAA,QAAA,CAAA;AAAA,GACT;AAAA,EAEA,MAAM,aAAqC,GAAA;AACzC,IAAO,OAAA,MAAM,KAAK,SAAU,EAAA,CAAA;AAAA,GAC9B;AAAA,EAEA,MAAM,YAAY,EAA+B,EAAA;AAC/C,IAAM,MAAA,KAAA,GAAQ,MAAM,IAAA,CAAK,EAAmB,CAAA,WAAW,CACpD,CAAA,KAAA,CAAM,EAAE,EAAA,EAAI,CAAA,CACZ,MAAO,EAAA,CAAA;AAEV,IAAI,IAAA,CAAC,MAAM,MAAQ,EAAA;AACjB,MAAA,MAAM,IAAIpD,oBAAA,CAAc,CAA6B,0BAAA,EAAA,EAAE,CAAE,CAAA,CAAA,CAAA;AAAA,KAC3D;AACA,IAAA,OAAO,MAAM,CAAC,CAAA,CAAA;AAAA,GAChB;AAAA,EAEA,MAAM,eAAe,EAA2B,EAAA;AAC9C,IAAI,IAAA,CAAC,KAAK,UAAY,EAAA;AACpB,MAAM,MAAA,IAAI,MAAM,mCAAmC,CAAA,CAAA;AAAA,KACrD;AAEA,IAAA,MAAM,UAAU,MAAM,IAAA,CAAK,EAAG,CAAA,WAAA,CAAY,OAAM,EAAM,KAAA;AACpD,MAAA,MAAM,CAAC,QAAQ,CAAI,GAAA,MAAM,EAAmB,CAAA,WAAW,CACpD,CAAA,KAAA,CAAM,EAAE,EAAA,EAAI,CAAA,CACZ,MAAO,EAAA,CAAA;AAEV,MAAA,IAAI,CAAC,QAAU,EAAA;AACb,QAAA,MAAM,IAAIA,oBAAA,CAAc,CAA6B,0BAAA,EAAA,EAAE,CAAE,CAAA,CAAA,CAAA;AAAA,OAC3D;AAEA,MAAM,MAAA,EAAA,CAAmB,WAAW,CAAE,CAAA,KAAA,CAAM,EAAE,EAAG,EAAC,EAAE,GAAI,EAAA,CAAA;AACxD,MAAO,OAAA,QAAA,CAAA;AAAA,KACR,CAAA,CAAA;AACD,IAAA,MAAM,MAAS,GAAA,4BAAA,CAA6B,EAAE,QAAA,EAAU,SAAS,CAAA,CAAA;AACjE,IAAM,MAAA,IAAA,CAAK,WAAW,aAAc,CAAA;AAAA,MAClC,IAAM,EAAA,OAAA;AAAA,MACN,OAAO,EAAC;AAAA,MACR,OAAA,EAAS,CAAC,EAAE,MAAA,EAAQ,aAAa,oBAAqB,CAAA,MAAM,GAAG,CAAA;AAAA,KAChE,CAAA,CAAA;AAAA,GACH;AAAA,EAEA,MAAM,oBAAoB,SAAiD,EAAA;AACzE,IAAM,MAAA,eAAA,GAAkB8C,gCAAmB,SAAS,CAAA,CAAA;AAEpD,IAAA,MAAM,CAAC,MAAM,CAAA,GAAI,MAAM,IAAK,CAAA,EAAA,CAAsB,eAAe,CAC9D,CAAA,KAAA,CAAM,EAAE,UAAA,EAAY,iBAAiB,CAAA,CACrC,OAAO,WAAW,CAAA,CAClB,MAAM,CAAC,CAAA,CAAA;AACV,IAAA,IAAI,CAAC,MAAQ,EAAA;AACX,MAAA,MAAM,IAAI9C,oBAAA,CAAc,CAA2B,wBAAA,EAAA,eAAe,CAAE,CAAA,CAAA,CAAA;AAAA,KACtE;AAEA,IAAM,MAAA,CAAC,gBAAgB,CAAI,GAAA,MAAM,KAAK,EAAgB,CAAA,QAAQ,EAC3D,KAAM,CAAA;AAAA,MACL,WAAW,MAAO,CAAA,SAAA;AAAA,MAClB,GAAA,EAAK,wBAAwBO,uCAA0B,CAAA,CAAA;AAAA,KACxD,CACA,CAAA,MAAA,CAAO,OAAO,CAAA,CACd,MAAM,CAAC,CAAA,CAAA;AACV,IAAA,IAAI,CAAC,gBAAkB,EAAA;AACrB,MAAA,MAAM,IAAIP,oBAAA;AAAA,QACR,sCAAsC,eAAe,CAAA,CAAA;AAAA,OACvD,CAAA;AAAA,KACF;AAEA,IAAA,MAAM,EAAE,IAAA,EAAM,MAAO,EAAA,GAAIqD,8BAAiB,eAAe,CAAA,CAAA;AAEzD,IAAA,MAAM,CAAC,QAAQ,CAAA,GAAI,MAAM,IAAA,CAAK,GAAmB,WAAW,CAAA,CACzD,KAAM,CAAA,EAAE,MAAM,MAAO,EAAC,EACtB,MAAO,EAAA,CACP,MAAM,CAAC,CAAA,CAAA;AAGV,IAAA,IAAI,CAAC,QAAU,EAAA;AACb,MAAA,MAAM,IAAIrD,oBAAA;AAAA,QACR,CAAA,4BAAA,EAA+B,IAAI,CAAA,YAAA,EAAe,MAAM,CAAA,CAAA;AAAA,OAC1D,CAAA;AAAA,KACF;AACA,IAAO,OAAA,QAAA,CAAA;AAAA,GACT;AAAA,EAEA,IAAY,UAAuC,GAAA;AACjD,IAAI,IAAA,CAAC,KAAK,WAAa,EAAA;AACrB,MAAM,MAAA,IAAI,MAAM,mCAAmC,CAAA,CAAA;AAAA,KACrD;AAEA,IAAA,OAAO,IAAK,CAAA,WAAA,CAAA;AAAA,GACd;AAAA,EAEA,MAAM,QAAQ,UAAqD,EAAA;AACjE,IAAA,IAAA,CAAK,WAAc,GAAA,UAAA,CAAA;AAEnB,IAAM,MAAA,SAAA,GAAY,MAAM,IAAA,CAAK,SAAU,EAAA,CAAA;AAEvC,IAAM,MAAA,QAAA,GAAW,SAAU,CAAA,GAAA,CAAI,CAAY,QAAA,KAAA;AACzC,MAAA,MAAM,MAAS,GAAA,4BAAA,CAA6B,EAAE,QAAA,EAAU,CAAA,CAAA;AACxD,MAAA,OAAO,EAAE,MAAA,EAAQ,WAAa,EAAA,oBAAA,CAAqB,MAAM,CAAE,EAAA,CAAA;AAAA,KAC5D,CAAA,CAAA;AAED,IAAM,MAAA,IAAA,CAAK,WAAW,aAAc,CAAA;AAAA,MAClC,IAAM,EAAA,MAAA;AAAA,MACN,QAAA;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAAA,EAEA,MAAc,SAAA,CAAU,MAAkC,GAAA,IAAA,CAAK,EAAI,EAAA;AACjE,IAAA,MAAM,SAAY,GAAA,MAAM,MAAuB,CAAA,WAAW,EAAE,MAAO,EAAA,CAAA;AACnE,IACE,OAAA,SAAA,CAGG,MAAO,CAAA,CAAC,EAAE,IAAA,OAAW,IAAS,KAAA,WAAW,CACzC,CAAA,GAAA,CAAI,CAAS,IAAA,MAAA;AAAA,MACZ,IAAI,IAAK,CAAA,EAAA;AAAA,MACT,QAAQ,IAAK,CAAA,MAAA;AAAA,MACb,MAAM,IAAK,CAAA,IAAA;AAAA,KACX,CAAA,CAAA,CAAA;AAAA,GAER;AACF;;;;;;;;AC9KO,MAAM,oBAAiD,CAAA;AAAA,EAK5D,WAAA,CACE,MACA,EAAA,eAAA,EACA,SACA,EAAA;AARF,IAAiBC,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,iBAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,WAAA,CAAA,CAAA;AAOf,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AACd,IAAA,IAAA,CAAK,eAAkB,GAAA,eAAA,CAAA;AACvB,IAAA,IAAA,CAAK,SAAY,GAAA,SAAA,CAAA;AAAA,GACnB;AAAA,EACA,MAAM,gBACJ,OACkC,EAAA;AAClC,IAAA,MAAM,cAAc,IAAK,CAAA,eAAA,CAAgB,KAAM,CAAA,OAAA,CAAQ,SAAS,MAAM,CAAA,CAAA;AACtE,IAAA,MAAM,EAAE,KAAO,EAAA,IAAA,KAASF,4BAAY,CAAA,OAAA,CAAQ,SAAS,MAAM,CAAA,CAAA;AAE3D,IAAI,IAAA,gBAAA,CAAA;AACJ,IAAA,QAAQ,2CAAa,IAAM;AAAA,MACzB,KAAK,OAAA;AACH,QAAmB,gBAAA,GAAA,eAAA,CAAA;AACnB,QAAA,MAAA;AAAA,MACF,KAAK,WAAA;AACH,QAAmB,gBAAA,GAAA,eAAA,CAAA;AACnB,QAAA,MAAA;AAAA,MACF,KAAK,QAAA;AACH,QAAmB,gBAAA,GAAA,YAAA,CAAA;AACnB,QAAA,MAAA;AAAA,MACF,KAAK,QAAA;AACH,QAAmB,gBAAA,GAAA,YAAA,CAAA;AACnB,QAAA,MAAA;AAEA,KACJ;AAEA,IAAM,MAAA,QAAA,GAAW,KAAK,SAAU,CAAA,IAAA;AAAA,MAAK,CACnC,CAAA,KAAA,CAAA,CAAE,QAAS,CAAA,OAAA,CAAQ,SAAS,MAAM,CAAA;AAAA,KACpC,CAAA;AACA,IAAA,IAAI,QAAU,EAAA;AACZ,MAAM,MAAA,cAAA,GAAiB,MAAM,QAAA,CAAS,OAAQ,CAAA;AAAA,QAC5C,GAAA,EAAK,QAAQ,QAAS,CAAA,MAAA;AAAA,OACvB,CAAA,CAAA;AACD,MAAI,IAAA,cAAA,CAAe,QAAS,CAAA,MAAA,GAAS,CAAG,EAAA;AACtC,QAAA,IAAA,CAAK,MAAO,CAAA,KAAA;AAAA,UACV,CAAA,WAAA,EAAc,OAAQ,CAAA,QAAA,CAAS,MAAM,CAAA,gBAAA,CAAA;AAAA,SACvC,CAAA;AACA,QAAO,OAAA;AAAA,UACL,qBAAqB,cAAe,CAAA,QAAA;AAAA,UACpC,kBAAkB,EAAC;AAAA,SACrB,CAAA;AAAA,OACF;AAAA,KACF;AAEA,IAAA,MAAM,MAAiB,GAAA;AAAA,MACrB,UAAY,EAAA,uBAAA;AAAA,MACZ,IAAM,EAAA,WAAA;AAAA,MACN,QAAU,EAAA;AAAA,QACR,IAAA;AAAA,OACF;AAAA,MACA,IAAM,EAAA,EAAE,IAAM,EAAA,OAAA,EAAS,WAAW,SAAU,EAAA;AAAA,KAC9C,CAAA;AAEA,IAAA,IAAI,gBAAkB,EAAA;AACpB,MAAA,MAAA,CAAO,SAAS,WAAc,GAAA;AAAA,QAC5B,CAAC,GAAG,gBAAgB,CAAA,aAAA,CAAe,GAAG,CAAG,EAAA,KAAK,IAAI,IAAI,CAAA,CAAA;AAAA,OACxD,CAAA;AAAA,KACF;AAEA,IAAA,IAAA,CAAK,OAAO,KAAM,CAAA,CAAA,mBAAA,EAAsB,OAAQ,CAAA,QAAA,CAAS,MAAM,CAAE,CAAA,CAAA,CAAA;AACjE,IAAO,OAAA;AAAA,MACL,qBAAqB,EAAC;AAAA,MACtB,kBAAkB,CAAC,EAAE,QAAQ,MAAQ,EAAA,IAAI,CAAA;AAAA,KAC3C,CAAA;AAAA,GACF;AACF;;AC7EO,SAAS,oBAAoB,KAAgC,EAAA;AAClE,EAAI,IAAA;AACF,IAAI,IAAA,OAAO,UAAU,QAAU,EAAA;AAC7B,MAAA,OAAOuD,cAAS,CAAA,UAAA,CAAW,KAAK,CAAA,CAAE,KAAM,EAAA,CAAA;AAAA,KAC1C;AAEA,IAAA,MAAM,SAAS,KAAM,CAAA,QAAA,CAAS,GAAG,CAC7B,GAAAA,cAAA,CAAS,QAAQ,KAAO,EAAA,EAAE,MAAM,KAAM,EAAC,IACvCA,cAAS,CAAA,OAAA,CAAQ,OAAO,EAAE,IAAA,EAAM,OAAO,CAAA,CAAA;AAC3C,IAAI,IAAA,CAAC,OAAO,OAAS,EAAA;AACnB,MAAM,MAAA,IAAI,UAAU,WAAW,CAAA,CAAA;AAAA,KACjC;AAEA,IAAO,OAAA,MAAA,CAAA;AAAA,WACA,CAAG,EAAA;AACV,IAAA,MAAM,IAAIP,iBAAA,CAAW,CAAsC,mCAAA,EAAA,KAAK,IAAI,CAAC,CAAA,CAAA;AAAA,GACvE;AACF,CAAA;AAKO,SAAS,aAAa,CAAe,EAAA;AAC1C,EAAI,IAAAQ,qCAAA,CAAwB,CAAC,CAAG,EAAA;AAC9B,IAAM,MAAA,IAAIJ,oBAAc,CAAA,CAAA,oCAAA,CAAA,EAAwC,CAAC,CAAA,CAAA;AAAA,GACnE;AAEA,EAAM,MAAA,CAAA,CAAA;AACR;;AC3BO,SAAS,oBACd,MACY,EAAA;AACZ,EAAA,IAAI,MAAS,GAAAK,mBAAA,CAAS,eAAgB,CAAA,MAAA,CAAO,IAAI,CAAA,CAAA;AACjD,EAAA,IAAI,CAAC,MAAQ,EAAA;AACX,IAAS,MAAA,GAAA,IAAIC,mBAAW,MAAM,CAAA,CAAA;AAC9B,IAAAD,mBAAA,CAAS,eAAe,MAAM,CAAA,CAAA;AAAA,GAChC;AACA,EAAO,OAAA,MAAA,CAAA;AACT,CAAA;AAEO,SAAS,kBACd,MACU,EAAA;AACV,EAAA,IAAI,MAAS,GAAAA,mBAAA,CAAS,eAAgB,CAAA,MAAA,CAAO,IAAI,CAAA,CAAA;AACjD,EAAA,IAAI,CAAC,MAAQ,EAAA;AACX,IAAS,MAAA,GAAA,IAAIE,iBAAS,MAAM,CAAA,CAAA;AAC5B,IAAAF,mBAAA,CAAS,eAAe,MAAM,CAAA,CAAA;AAAA,GAChC;AACA,EAAO,OAAA,MAAA,CAAA;AACT,CAAA;AAEO,SAAS,oBACd,MACY,EAAA;AACZ,EAAA,IAAI,MAAS,GAAAA,mBAAA,CAAS,eAAgB,CAAA,MAAA,CAAO,IAAI,CAAA,CAAA;AACjD,EAAA,IAAI,CAAC,MAAQ,EAAA;AACX,IAAS,MAAA,GAAA,IAAIG,mBAAW,MAAM,CAAA,CAAA;AAC9B,IAAAH,mBAAA,CAAS,eAAe,MAAM,CAAA,CAAA;AAAA,GAChC;AAEA,EAAO,OAAA,MAAA,CAAA;AACT;;ACtCO,SAAS,oBAAoB,IAAY,EAAA;AAC9C,EAAM,MAAA,QAAA,uBAAe,GAAY,EAAA,CAAA;AACjC,EAAM,MAAA,IAAA,uBAAW,GAAY,EAAA,CAAA;AAC7B,EAAM,MAAA,KAAA,GAAQI,WAAQ,CAAA,QAAA,CAAS,SAAS,CAAA,CAAA;AACxC,EAAO,OAAA;AAAA,IACL,qBAAqB,iBAAkB,CAAA;AAAA,MACrC,IAAM,EAAA,wBAAA;AAAA,MACN,IAAM,EAAA,gGAAA;AAAA,MACN,UAAA,EAAY,CAAC,MAAM,CAAA;AAAA,MACnB,MAAM,OAAU,GAAA;AACd,QAAA,MAAM,MAAS,GAAA,MAAM,IAAwB,CAAA,eAAe,CAAE,CAAA,MAAA;AAAA,UAC5D,YAAA;AAAA,SACF,CAAA;AACA,QAAA,MAAM,OAAU,GAAA,MAAA,CACb,GAAI,CAAA,CAAA,GAAA,KAAO,GAAI,CAAA,UAAA,CAAW,KAAM,CAAA,GAAG,CAAE,CAAA,CAAC,CAAC,CAAA,CACvC,MAAO,CAAA,CAAC,GAAK,EAAA,CAAA,KAAM,GAAI,CAAA,GAAA,CAAI,CAAI,EAAA,CAAA,GAAA,CAAI,GAAI,CAAA,CAAC,CAAK,IAAA,CAAA,IAAK,CAAC,CAAA,kBAAO,IAAA,GAAA,EAAK,CAAA,CAAA;AAElE,QAAQ,OAAA,CAAA,OAAA,CAAQ,CAAC,KAAA,EAAO,GAAQ,KAAA;AAC9B,UAAA,QAAA,CAAS,IAAI,GAAG,CAAA,CAAA;AAChB,UAAA,IAAA,CAAK,GAAI,CAAA,EAAE,IAAM,EAAA,GAAA,IAAO,KAAK,CAAA,CAAA;AAAA,SAC9B,CAAA,CAAA;AAGD,QAAA,QAAA,CAAS,QAAQ,CAAO,GAAA,KAAA;AACtB,UAAA,IAAI,CAAC,OAAA,CAAQ,GAAI,CAAA,GAAG,CAAG,EAAA;AACrB,YAAA,IAAA,CAAK,GAAI,CAAA,EAAE,IAAM,EAAA,GAAA,IAAO,CAAC,CAAA,CAAA;AACzB,YAAA,QAAA,CAAS,OAAO,GAAG,CAAA,CAAA;AAAA,WACrB;AAAA,SACD,CAAA,CAAA;AAAA,OACH;AAAA,KACD,CAAA;AAAA,IACD,2BAA2B,iBAAkB,CAAA;AAAA,MAC3C,IAAM,EAAA,oCAAA;AAAA,MACN,IAAM,EAAA,4GAAA;AAAA,MACN,MAAM,OAAU,GAAA;AACd,QAAA,MAAM,KAAQ,GAAA,MAAM,IAAqB,CAAA,WAAW,EAAE,KAAM,CAAA;AAAA,UAC1D,KAAO,EAAA,GAAA;AAAA,SACR,CAAA,CAAA;AACD,QAAA,IAAA,CAAK,IAAI,MAAO,CAAA,KAAA,CAAM,CAAC,CAAA,CAAE,KAAK,CAAC,CAAA,CAAA;AAAA,OACjC;AAAA,KACD,CAAA;AAAA,IACD,gBAAgB,iBAAkB,CAAA;AAAA,MAChC,IAAM,EAAA,yBAAA;AAAA,MACN,IAAM,EAAA,mGAAA;AAAA,MACN,MAAM,OAAU,GAAA;AACd,QAAA,MAAM,KAAQ,GAAA,MAAM,IAAqB,CAAA,WAAW,EAAE,KAAM,CAAA;AAAA,UAC1D,KAAO,EAAA,GAAA;AAAA,SACR,CAAA,CAAA;AACD,QAAA,IAAA,CAAK,IAAI,MAAO,CAAA,KAAA,CAAM,CAAC,CAAA,CAAE,KAAK,CAAC,CAAA,CAAA;AAAA,OACjC;AAAA,KACD,CAAA;AAAA,IACD,cAAA,EAAgB,KACb,CAAA,qBAAA,CAAsB,wBAA0B,EAAA;AAAA,MAC/C,WAAa,EAAA,yCAAA;AAAA,KACd,CAAA,CACA,WAAY,CAAA,OAAM,KAAS,KAAA;AAC1B,MAAA,MAAM,MAAS,GAAA,MAAM,IAAwB,CAAA,eAAe,CAAE,CAAA,MAAA;AAAA,QAC5D,YAAA;AAAA,OACF,CAAA;AACA,MAAM,MAAA,OAAA,GAAU,MACb,CAAA,GAAA,CAAI,CAAO,GAAA,KAAAvC,2BAAA,CAAe,GAAI,CAAA,UAAU,CAAE,CAAA,IAAI,CAC9C,CAAA,MAAA,CAAO,CAAC,GAAA,EAAK,MAAM,GAAI,CAAA,GAAA,CAAI,CAAI,EAAA,CAAA,GAAA,CAAI,GAAI,CAAA,CAAC,CAAK,IAAA,CAAA,IAAK,CAAC,CAAA,kBAAO,IAAA,GAAA,EAAK,CAAA,CAAA;AAElE,MAAQ,OAAA,CAAA,OAAA,CAAQ,CAAC,KAAA,EAAO,GAAQ,KAAA;AAC9B,QAAA,IAAA,CAAK,IAAI,GAAG,CAAA,CAAA;AACZ,QAAA,KAAA,CAAM,OAAQ,CAAA,KAAA,EAAO,EAAE,IAAA,EAAM,KAAK,CAAA,CAAA;AAAA,OACnC,CAAA,CAAA;AAGD,MAAA,IAAA,CAAK,QAAQ,CAAO,GAAA,KAAA;AAClB,QAAA,IAAI,CAAC,OAAA,CAAQ,GAAI,CAAA,GAAG,CAAG,EAAA;AACrB,UAAA,KAAA,CAAM,OAAQ,CAAA,CAAA,EAAG,EAAE,IAAA,EAAM,KAAK,CAAA,CAAA;AAC9B,UAAA,IAAA,CAAK,OAAO,GAAG,CAAA,CAAA;AAAA,SACjB;AAAA,OACD,CAAA,CAAA;AAAA,KACF,CAAA;AAAA,IACH,oBAAA,EAAsB,KACnB,CAAA,qBAAA,CAAsB,oCAAsC,EAAA;AAAA,MAC3D,WAAa,EAAA,qDAAA;AAAA,KACd,CAAA,CACA,WAAY,CAAA,OAAM,KAAS,KAAA;AAC1B,MAAA,MAAM,KAAQ,GAAA,MAAM,IAAqB,CAAA,WAAW,EAAE,KAAM,CAAA;AAAA,QAC1D,KAAO,EAAA,GAAA;AAAA,OACR,CAAA,CAAA;AACD,MAAA,KAAA,CAAM,QAAQ,MAAO,CAAA,KAAA,CAAM,CAAC,CAAA,CAAE,KAAK,CAAC,CAAA,CAAA;AAAA,KACrC,CAAA;AAAA,IACH,SAAA,EAAW,KACR,CAAA,qBAAA,CAAsB,yBAA2B,EAAA;AAAA,MAChD,WAAa,EAAA,4CAAA;AAAA,KACd,CAAA,CACA,WAAY,CAAA,OAAM,KAAS,KAAA;AAC1B,MAAA,MAAM,KAAQ,GAAA,MAAM,IAAqB,CAAA,WAAW,EAAE,KAAM,CAAA;AAAA,QAC1D,KAAO,EAAA,GAAA;AAAA,OACR,CAAA,CAAA;AACD,MAAA,KAAA,CAAM,QAAQ,MAAO,CAAA,KAAA,CAAM,CAAC,CAAA,CAAE,KAAK,CAAC,CAAA,CAAA;AAAA,KACrC,CAAA;AAAA,GACL,CAAA;AACF;;AC9FA,eAAsB,yBAAyB,OAIf,EAAA;AAC9B,EAAA,MAAM,EAAE,EAAA,EAAI,SAAW,EAAA,WAAA,EAAgB,GAAA,OAAA,CAAA;AAEvC,EAAA,MAAM,GAAM,GAAA,MAAM,EAAsB,CAAA,eAAe,CACpD,CAAA,MAAA,CAAO,cAAc,CAAA,CACrB,KAAM,CAAA,YAAA,EAAc,SAAS,CAAA,CAC7B,KAAM,EAAA,CAAA;AAET,EAAA,MAAM,iBAAiB,GAAK,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,GAAA,CAAA,YAAA,CAAA;AAG5B,EAAA,IAAI,CAAC,cAAgB,EAAA;AACnB,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACT;AAEA,EAAA,IAAI,mBAAmB,WAAa,EAAA;AAClC,IAAO,OAAA,cAAA,CAAA;AAAA,GACT;AACA,EAAO,OAAA,KAAA,CAAA,CAAA;AACT;;ACrBA,eAAsB,wBAAwB,OAMzB,EAAA;AACnB,EAAA,MAAM,EAAE,EAAI,EAAA,MAAA,EAAQ,IAAM,EAAA,MAAA,EAAQ,aAAgB,GAAA,OAAA,CAAA;AAElD,EAAM,MAAA,SAAA,GAAYyB,gCAAmB,MAAM,CAAA,CAAA;AAC3C,EAAM,MAAA,gBAAA,GAAmB,IAAK,CAAA,SAAA,CAAU,MAAM,CAAA,CAAA;AAE9C,EAAI,IAAA;AACF,IAAA,IAAI,KAAQ,GAAA,EAAA,CAAsB,eAAe,CAAA,CAAE,MAAO,CAAA;AAAA,MACxD,WAAWM,OAAK,EAAA;AAAA,MAChB,UAAY,EAAA,SAAA;AAAA,MACZ,kBAAoB,EAAA,gBAAA;AAAA,MACpB,gBAAkB,EAAA,IAAA;AAAA,MAClB,MAAQ,EAAA,EAAA;AAAA,MACR,YAAc,EAAA,WAAA;AAAA,MACd,cAAA,EAAgB,EAAG,CAAA,EAAA,CAAG,GAAI,EAAA;AAAA,MAC1B,iBAAA,EAAmB,EAAG,CAAA,EAAA,CAAG,GAAI,EAAA;AAAA,KAC9B,CAAA,CAAA;AAMD,IAAA,IAAI,GAAG,MAAO,CAAA,MAAA,CAAO,MAAO,CAAA,QAAA,CAAS,IAAI,CAAG,EAAA;AAC1C,MAAA,KAAA,GAAQ,KAAM,CAAA,UAAA,CAAW,YAAY,CAAA,CAAE,MAAO,EAAA,CAAA;AAAA,KAChD;AAGA,IAAA,MAAM,SAAiD,MAAM,KAAA,CAAA;AAC7D,IAAA,OAAO,MAAO,CAAA,QAAA,KAAa,CAAK,IAAA,MAAA,CAAO,MAAW,KAAA,CAAA,CAAA;AAAA,WAC3C,KAAO,EAAA;AAEd,IAAI,IAAA,CAACG,qCAAwB,CAAA,KAAK,CAAG,EAAA;AACnC,MAAM,MAAA,KAAA,CAAA;AAAA,KACD,MAAA;AACL,MAAO,MAAA,CAAA,KAAA,CAAM,CAA6C,0CAAA,EAAA,KAAK,CAAE,CAAA,CAAA,CAAA;AACjE,MAAO,OAAA,KAAA,CAAA;AAAA,KACT;AAAA,GACF;AACF;;AC7CA,eAAsB,wBAAwB,OAKzB,EAAA;AACnB,EAAA,MAAM,EAAE,EAAA,EAAI,MAAQ,EAAA,IAAA,EAAM,aAAgB,GAAA,OAAA,CAAA;AAE1C,EAAM,MAAA,SAAA,GAAYT,gCAAmB,MAAM,CAAA,CAAA;AAC3C,EAAM,MAAA,gBAAA,GAAmB,IAAK,CAAA,SAAA,CAAU,MAAM,CAAA,CAAA;AAE9C,EAAA,MAAM,aAAgB,GAAA,MAAM,EAAsB,CAAA,eAAe,EAC9D,MAAO,CAAA;AAAA,IACN,kBAAoB,EAAA,gBAAA;AAAA,IACpB,gBAAkB,EAAA,IAAA;AAAA,IAClB,YAAc,EAAA,WAAA;AAAA,IACd,iBAAA,EAAmB,EAAG,CAAA,EAAA,CAAG,GAAI,EAAA;AAAA;AAAA;AAAA;AAAA,IAI7B,cAAA,EAAgB,EAAG,CAAA,EAAA,CAAG,GAAI,EAAA;AAAA,GAC3B,CACA,CAAA,KAAA,CAAM,cAAc,SAAS,CAAA,CAC7B,SAAS,CAAS,KAAA,KAAA;AACjB,IAAA,IAAI,CAAC,WAAa,EAAA;AAChB,MAAO,OAAA,KAAA,CAAM,UAAU,cAAc,CAAA,CAAA;AAAA,KACvC;AACA,IAAA,OAAO,MACJ,KAAM,CAAA,cAAA,EAAgB,WAAW,CAAA,CACjC,YAAY,cAAc,CAAA,CAAA;AAAA,GAC9B,CAAA,CAAA;AAEH,EAAA,OAAO,aAAkB,KAAA,CAAA,CAAA;AAC3B;;ACvCO,SAASe,qBAAmB,MAAgB,EAAA;AACjD,EAAA,OAAOX,iBAAW,CAAA,MAAM,CACrB,CAAA,MAAA,CAAOY,gCAAgB,CAAA,EAAE,GAAG,MAAA,EAAQ,CAAC,CACrC,CAAA,MAAA,CAAO,KAAK,CAAA,CAAA;AACjB;;ACPO,MAAM,uBAA0B,GAAA,gCAAA;AAEhC,MAAM,oBAAuB,GAAA;;ACmCpC,MAAMC,YAAa,GAAA,EAAA,CAAA;AAEZ,MAAM,yBAAwD,CAAA;AAAA,EACnE,YACmB,OAMjB,EAAA;AANiB,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;AAOjB,IAAA,mBAAA,CAAoB,QAAQ,QAAQ,CAAA,CAAA;AAAA,GACtC;AAAA,EAEA,MAAM,qBACJ,CAAA,QAAA,EACA,OACwD,EAAA;AACxD,IAAA,MAAM,EAAK,GAAA,QAAA,CAAA;AACX,IAAM,MAAA;AAAA,MACJ,EAAA;AAAA,MACA,eAAA;AAAA,MACA,UAAA;AAAA,cACAC,QAAA;AAAA,MACA,SAAA;AAAA,MACA,gBAAA;AAAA,MACA,WAAA;AAAA,MACA,WAAA;AAAA,KACE,GAAA,OAAA,CAAA;AACJ,IAAM,MAAA,YAAA,GAAe,EAAG,CAAA,MAAA,CAAO,MAAO,CAAA,MAAA,CAAA;AACtC,IAAA,MAAM,aAAgB,GAAA,MAAM,EAAsB,CAAA,eAAe,EAC9D,MAAO,CAAA;AAAA,MACN,gBAAA,EAAkB,IAAK,CAAA,SAAA,CAAU,eAAe,CAAA;AAAA,MAChD,WAAa,EAAA,UAAA;AAAA,cACbA,QAAA;AAAA,MACA,YAAc,EAAA,WAAA;AAAA,KACf,CACA,CAAA,KAAA,CAAM,aAAa,EAAE,CAAA,CACrB,SAAS,CAAS,KAAA,KAAA;AACjB,MAAA,IAAI,CAAC,WAAa,EAAA;AAChB,QAAO,OAAA,KAAA,CAAM,UAAU,cAAc,CAAA,CAAA;AAAA,OACvC;AACA,MAAA,OAAO,MACJ,KAAM,CAAA,cAAA,EAAgB,WAAW,CAAA,CACjC,YAAY,cAAc,CAAA,CAAA;AAAA,KAC9B,CAAA,CAAA;AACH,IAAA,IAAI,kBAAkB,CAAG,EAAA;AACvB,MAAA,MAAM,IAAIb,oBAAA;AAAA,QACR,CAAA,2CAAA,EAA8C,EAAE,CAAA,oBAAA,EAAuB,WAAW,CAAA,CAAA,CAAA;AAAA,OACpF,CAAA;AAAA,KACF;AACA,IAAM,MAAA,eAAA,GAAkBL,gCAAmB,eAAe,CAAA,CAAA;AAG1D,IAAM,MAAA,IAAA,CAAK,uBAAuB,EAAI,EAAA;AAAA,MACpC,QAAU,EAAA,gBAAA;AAAA,MACV,eAAA;AAAA,KACD,CAAA,CAAA;AAID,IAAI,IAAA,oBAAA,CAAA;AACJ,IAAA,IAAI,aAAa,QAAS,CAAA,SAAS,KAAK,YAAa,CAAA,QAAA,CAAS,OAAO,CAAG,EAAA;AACtE,MAAuB,oBAAA,GAAA,MAAM,EAAmB,CAAA,WAAW,CACxD,CAAA,MAAA,CAAO,GAAG,CAAA,CACV,KAAM,CAAA,EAAE,qBAAuB,EAAA,EAAA,EAAI,CAAA,CAAA;AACtC,MAAM,MAAA,EAAA,CAAmB,WAAW,CACjC,CAAA,KAAA,CAAM,EAAE,qBAAuB,EAAA,EAAA,EAAI,CAAA,CACnC,MAAO,EAAA,CAAA;AAAA,KACL,MAAA;AACL,MAAA,oBAAA,GAAuB,MAAM,EAAA,CAAmB,WAAW,CAAA,CACxD,KAAM,CAAA,EAAE,qBAAuB,EAAA,EAAA,EAAI,CAAA,CACnC,MAAO,EAAA,CACP,UAAU,GAAG,CAAA,CAAA;AAAA,KAClB;AAGA,IAAA,MAAM,eAAiC,SAAU,CAAA,GAAA;AAAA,MAC/C,CAAC,EAAE,MAAQ,EAAA,MAAA,EAAQ,MAAY,MAAA;AAAA,QAC7B,qBAAuB,EAAA,EAAA;AAAA,QACvB,iBAAA,EAAmBA,gCAAmB,MAAM,CAAA;AAAA,QAC5C,iBAAA,EAAmBA,gCAAmB,MAAM,CAAA;AAAA,QAC5C,IAAA;AAAA,OACF,CAAA;AAAA,KACF,CAAA;AAEA,IAAA,MAAM,EAAG,CAAA,WAAA;AAAA,MACP,WAAA;AAAA,MACA,IAAA,CAAK,qBAAqB,YAAY,CAAA;AAAA,MACtCiB,YAAA;AAAA,KACF,CAAA;AAGA,IAAM,MAAA,EAAA,CAAqB,cAAc,CACtC,CAAA,KAAA,CAAM,EAAE,SAAW,EAAA,EAAA,EAAI,CAAA,CACvB,MAAO,EAAA,CAAA;AAGV,IAAA,MAAM,EAAG,CAAA,WAAA;AAAA,MACP,cAAA;AAAA,MACA,WAAA,CAAY,IAAI,CAAM,CAAA,MAAA;AAAA,QACpB,SAAW,EAAA,EAAA;AAAA,QACX,KAAK,CAAE,CAAA,GAAA;AAAA,OACP,CAAA,CAAA;AAAA,MACFA,YAAA;AAAA,KACF,CAAA;AAEA,IAAO,OAAA;AAAA,MACL,QAAU,EAAA;AAAA,QACR,SAAW,EAAA,oBAAA;AAAA,OACb;AAAA,KACF,CAAA;AAAA,GACF;AAAA,EAEA,MAAM,2BACJ,CAAA,QAAA,EACA,OACe,EAAA;AACf,IAAA,MAAM,EAAK,GAAA,QAAA,CAAA;AACX,IAAA,MAAM,EAAE,EAAA,EAAI,MAAQ,EAAA,UAAA,EAAe,GAAA,OAAA,CAAA;AAEnC,IAAM,MAAA,EAAA,CAAsB,eAAe,CAAA,CACxC,MAAO,CAAA;AAAA,MACN,MAAA;AAAA,MACA,WAAa,EAAA,UAAA;AAAA,KACd,CAAA,CACA,KAAM,CAAA,WAAA,EAAa,EAAE,CAAA,CAAA;AAAA,GAC1B;AAAA,EAEA,MAAM,iBACJ,CAAA,QAAA,EACA,OACe,EAAA;AACf,IAAA,MAAM,EAAK,GAAA,QAAA,CAAA;AACX,IAAM,MAAA,EAAE,EAAI,EAAA,KAAA,EAAU,GAAA,OAAA,CAAA;AAEtB,IAAA,MAAM,GAAsB,eAAe,CAAA,CACxC,MAAO,CAAA,EAAE,OAAO,IAAK,CAAA,SAAA,CAAU,KAAS,IAAA,IAAA,GAAA,KAAA,GAAA,EAAE,CAAE,EAAC,CAC7C,CAAA,KAAA,CAAM,aAAa,EAAE,CAAA,CAAA;AAAA,GAC1B;AAAA,EAEA,MAAM,sBACJ,CAAA,QAAA,EACA,OACuC,EAAA;AACvC,IAAA,MAAM,EAAK,GAAA,QAAA,CAAA;AAEX,IAAA,IAAI,UAAa,GAAA,EAAA,CAAsB,eAAe,CAAA,CAAE,MAAO,EAAA,CAAA;AAK/D,IAAI,IAAA,CAAC,OAAS,EAAA,QAAA,EAAU,IAAI,CAAA,CAAE,SAAS,EAAG,CAAA,MAAA,CAAO,MAAO,CAAA,MAAM,CAAG,EAAA;AAC/D,MAAa,UAAA,GAAA,UAAA,CAAW,SAAU,EAAA,CAAE,UAAW,EAAA,CAAA;AAAA,KACjD;AAEA,IAAA,MAAM,QAAQ,MAAM,UAAA,CACjB,KAAM,CAAA,gBAAA,EAAkB,MAAM,EAAG,CAAA,EAAA,CAAG,GAAI,EAAC,EACzC,KAAM,CAAA,OAAA,CAAQ,gBAAgB,CAC9B,CAAA,OAAA,CAAQ,kBAAkB,KAAK,CAAA,CAAA;AAElC,IAAM,MAAA,QAAA,GAAW,IAAK,CAAA,OAAA,CAAQ,eAAgB,EAAA,CAAA;AAE9C,IAAM,MAAA,YAAA,GAAe,CAAC,eAA4B,KAAA;AAChD,MAAA,IAAI,GAAG,MAAO,CAAA,MAAA,CAAO,MAAO,CAAA,QAAA,CAAS,SAAS,CAAG,EAAA;AAC/C,QAAA,OAAO,GAAG,GAAI,CAAA,CAAA,kBAAA,CAAA,EAAsB,CAAC,CAAG,EAAA,eAAe,UAAU,CAAC,CAAA,CAAA;AAAA,OACpE;AAEA,MAAA,IAAI,GAAG,MAAO,CAAA,MAAA,CAAO,MAAO,CAAA,QAAA,CAAS,OAAO,CAAG,EAAA;AAC7C,QAAA,OAAO,EAAG,CAAA,GAAA,CAAI,CAAoB,iBAAA,EAAA,eAAe,CAAS,OAAA,CAAA,CAAA,CAAA;AAAA,OAC5D;AAEA,MAAA,OAAO,EAAG,CAAA,GAAA,CAAI,CAAqB,kBAAA,EAAA,eAAe,CAAW,SAAA,CAAA,CAAA,CAAA;AAAA,KAC/D,CAAA;AAEA,IAAM,MAAA,EAAA,CAAsB,eAAe,CACxC,CAAA,OAAA;AAAA,MACC,YAAA;AAAA,MACA,KAAM,CAAA,GAAA,CAAI,CAAK,CAAA,KAAA,CAAA,CAAE,UAAU,CAAA;AAAA,MAE5B,MAAO,CAAA;AAAA,MACN,cAAA,EAAgB,aAAa,QAAQ,CAAA;AAAA,KACtC,CAAA,CAAA;AAEH,IAAO,OAAA;AAAA,MACL,OAAO,KAAM,CAAA,GAAA;AAAA,QACX,CACG,CAAA,MAAA;AAAA,UACC,IAAI,CAAE,CAAA,SAAA;AAAA,UACN,WAAW,CAAE,CAAA,UAAA;AAAA,UACb,iBAAmB,EAAA,IAAA,CAAK,KAAM,CAAA,CAAA,CAAE,kBAAkB,CAAA;AAAA,UAClD,iBAAiB,CAAE,CAAA,gBAAA,GACd,KAAK,KAAM,CAAA,CAAA,CAAE,gBAAgB,CAC9B,GAAA,KAAA,CAAA;AAAA,UACJ,UAAA,EAAY,EAAE,WAAe,IAAA,EAAA;AAAA,UAC7B,YAAA,EAAc,mBAAoB,CAAA,CAAA,CAAE,cAAc,CAAA;AAAA,UAClD,eAAA,EAAiB,mBAAoB,CAAA,CAAA,CAAE,iBAAiB,CAAA;AAAA,UACxD,OAAO,CAAE,CAAA,KAAA,GAAQ,KAAK,KAAM,CAAA,CAAA,CAAE,KAAK,CAAI,GAAA,KAAA,CAAA;AAAA,UACvC,QAAQ,CAAE,CAAA,MAAA;AAAA,UACV,aAAa,CAAE,CAAA,YAAA;AAAA,SACjB,CAAA;AAAA,OACJ;AAAA,KACF,CAAA;AAAA,GACF;AAAA,EAEA,MAAM,WACJ,CAAA,QAAA,EACA,OAC4B,EAAA;AAC5B,IAAA,MAAM,EAAK,GAAA,QAAA,CAAA;AAEX,IAAA,MAAM,OAAO,MAAM,EAAA;AAAA,MACjB,0BAAA;AAAA,KACF,CACG,MAAM,EAAE,iBAAA,EAAmB,QAAQ,SAAU,EAAC,EAC9C,MAAO,EAAA,CAAA;AAEV,IAAM,MAAA,UAAA,GAAa,KAAK,GAAI,CAAA,CAAA,CAAA,KAAK,EAAE,iBAAkB,CAAA,CAAE,OAAO,OAAO,CAAA,CAAA;AAErE,IAAA,OAAO,EAAE,UAAW,EAAA,CAAA;AAAA,GACtB;AAAA,EAEA,MAAM,YAAe,EAAiD,EAAA;AACpE,IAAI,IAAA;AACF,MAAA,IAAI,MAAwB,GAAA,KAAA,CAAA,CAAA;AAE5B,MAAM,MAAA,IAAA,CAAK,QAAQ,QAAS,CAAA,WAAA;AAAA,QAC1B,OAAM,EAAM,KAAA;AAGV,UAAS,MAAA,GAAA,MAAM,GAAG,EAAE,CAAA,CAAA;AAAA,SACtB;AAAA,QACA;AAAA;AAAA,UAEE,qBAAuB,EAAA,IAAA;AAAA,SACzB;AAAA,OACF,CAAA;AAEA,MAAO,OAAA,MAAA,CAAA;AAAA,aACA,CAAG,EAAA;AACV,MAAA,IAAA,CAAK,OAAQ,CAAA,MAAA,CAAO,KAAM,CAAA,CAAA,0BAAA,EAA6B,CAAC,CAAE,CAAA,CAAA,CAAA;AAC1D,MAAA,MAAM,aAAa,CAAC,CAAA,CAAA;AAAA,KACtB;AAAA,GACF;AAAA,EAEQ,qBAAqB,IAA0C,EAAA;AACrE,IAAA,OAAOnB,uBAAO,CAAA,MAAA;AAAA,MACZ,IAAA;AAAA,MACA,CAAA,CAAA,KAAK,GAAG,CAAE,CAAA,iBAAiB,IAAI,CAAE,CAAA,iBAAiB,CAAI,CAAA,EAAA,CAAA,CAAE,IAAI,CAAA,CAAA;AAAA,KAC9D,CAAA;AAAA,GACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAc,sBACZ,CAAA,QAAA,EACA,OAIe,EAAA;AA5TnB,IAAA,IAAA,EAAA,CAAA;AA6TI,IAAA,MAAM,EAAK,GAAA,QAAA,CAAA;AAGX,IAAM,MAAA,eAAA,GAAkB,IAAI,KAAc,EAAA,CAAA;AAI1C,IAAA,KAAA,MAAW,EAAE,MAAA,EAAQ,WAAY,EAAA,IAAK,QAAQ,QAAU,EAAA;AACtD,MAAM,MAAA,SAAA,GAAYE,gCAAmB,MAAM,CAAA,CAAA;AAC3C,MAAM,MAAA,IAAA,GAAOe,qBAAmB,MAAM,CAAA,CAAA;AAEtC,MAAM,MAAA,OAAA,GAAU,MAAM,uBAAwB,CAAA;AAAA,QAC5C,EAAA;AAAA,QACA,MAAA;AAAA,QACA,IAAA;AAAA,QACA,WAAA;AAAA,OACD,CAAA,CAAA;AACD,MAAA,IAAI,OAAS,EAAA;AACX,QAAA,eAAA,CAAgB,KAAK,SAAS,CAAA,CAAA;AAC9B,QAAA,SAAA;AAAA,OACF;AAEA,MAAM,MAAA,QAAA,GAAW,MAAM,uBAAwB,CAAA;AAAA,QAC7C,EAAA;AAAA,QACA,MAAA;AAAA,QACA,IAAA;AAAA,QACA,WAAA;AAAA,QACA,MAAA,EAAQ,KAAK,OAAQ,CAAA,MAAA;AAAA,OACtB,CAAA,CAAA;AACD,MAAA,IAAI,QAAU,EAAA;AACZ,QAAA,eAAA,CAAgB,KAAK,SAAS,CAAA,CAAA;AAC9B,QAAA,SAAA;AAAA,OACF;AAKA,MAAM,MAAA,cAAA,GAAiB,MAAM,wBAAyB,CAAA;AAAA,QACpD,EAAA;AAAA,QACA,SAAA;AAAA,QACA,WAAA;AAAA,OACD,CAAA,CAAA;AACD,MAAA,IAAI,cAAgB,EAAA;AAClB,QAAA,IAAA,CAAK,QAAQ,MAAO,CAAA,IAAA;AAAA,UAClB,CAAkC,+BAAA,EAAA,SAAS,CAA0B,uBAAA,EAAA,cAAc,iBAAiB,WAAW,CAAA,CAAA;AAAA,SACjH,CAAA;AACA,QAAI,IAAA,IAAA,CAAK,OAAQ,CAAA,WAAA,IAAe,WAAa,EAAA;AAC3C,UAAA,MAAM,WAAwD,GAAA;AAAA,YAC5D,KAAO,EAAA,uBAAA;AAAA,YACP,YAAc,EAAA;AAAA,cACZ,iBAAmB,EAAA,MAAA;AAAA,cACnB,SAAA;AAAA,cACA,cAAgB,EAAA,WAAA;AAAA,cAChB,mBAAqB,EAAA,cAAA;AAAA,cACrB,cAAgB,EAAAP,cAAA,CAAS,GAAI,EAAA,CAAE,KAAM,EAAA;AAAA,aACvC;AAAA,WACF,CAAA;AACA,UAAA,OAAA,CAAM,EAAK,GAAA,IAAA,CAAA,OAAA,CAAQ,WAAb,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAA0B,OAAQ,CAAA,WAAA,CAAA,CAAA,CAAA;AAAA,SAC1C;AAAA,OACF;AAAA,KACF;AAGA,IAAM,MAAA,EAAA,CAAgC,0BAA0B,CAAA,CAC7D,QAAS,CAAA,EAAE,mBAAmB,OAAQ,CAAA,eAAA,EAAiB,CAAA,CACvD,MAAO,EAAA,CAAA;AACV,IAAA,MAAM,EAAG,CAAA,WAAA;AAAA,MACP,0BAAA;AAAA,MACA,eAAA,CAAgB,IAAI,CAAc,SAAA,MAAA;AAAA,QAChC,mBAAmB,OAAQ,CAAA,eAAA;AAAA,QAC3B,iBAAmB,EAAA,SAAA;AAAA,OACnB,CAAA,CAAA;AAAA,MACFS,YAAA;AAAA,KACF,CAAA;AAAA,GACF;AACF;;ACrXA,eAAsB,wBAAwB,IAA2B,EAAA;AACvE,EAAA,MAAM,aAAgB,GAAAE,gCAAA;AAAA,IACpB,mCAAA;AAAA,IACA,YAAA;AAAA,GACF,CAAA;AAEA,EAAM,MAAA,IAAA,CAAK,QAAQ,MAAO,CAAA;AAAA,IACxB,SAAW,EAAA,aAAA;AAAA,GACZ,CAAA,CAAA;AACH;;AC8BO,SAAS,4BAA4B,MAAmC,EAAA;AAC7E,EAAA,MAAM,eAAe,MAAO,CAAA,iBAAA;AAAA,IAC1B,gCAAA;AAAA,GACF,CAAA;AAEA,EAAI,IAAA,YAAA,KAAiB,KAAa,CAAA,IAAA,YAAA,KAAiB,WAAa,EAAA;AAC9D,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,WAAA;AAAA,KACR,CAAA;AAAA,GACF,MAAA,IAAW,iBAAiB,UAAY,EAAA;AAEtC,IAAO,OAAA;AAAA,MACL,IAAM,EAAA,UAAA;AAAA,MACN,eAAA,EAAiB,EAAE,OAAA,EAAS,CAAE,EAAA;AAAA,MAC9B,aAAA,EAAe,EAAE,OAAA,EAAS,EAAG,EAAA;AAAA,KAC/B,CAAA;AAAA,GACF;AAEA,EAAA,MAAM,IAAI,KAAA;AAAA,IACR,oCAAoC,YAAY,CAAA,4CAAA,CAAA;AAAA,GAClD,CAAA;AACF;;AC5DO,MAAM,SAAY,GAAA,kCAAA,CAAA;AAEzB,SAAS,qBAAA,CAAsB,IAAY,EAAA,SAAA,EAAmB,KAAgB,EAAA;AAC5E,EAAI,IAAA,KAAA,KAAU,IAAQ,IAAA,KAAA,KAAU,KAAW,CAAA,EAAA;AACzC,IAAK,IAAA,CAAA,YAAA,CAAa,WAAW,KAAK,CAAA,CAAA;AAAA,GACpC;AACF,CAAA;AAEgB,SAAA,mBAAA,CAAoB,MAAY,MAAgB,EAAA;AA3BhE,EAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AA4BE,EAAsB,qBAAA,CAAA,IAAA,EAAM,6BAA+B,EAAA,MAAA,CAAO,UAAU,CAAA,CAAA;AAC5E,EAAsB,qBAAA,CAAA,IAAA,EAAM,uBAAyB,EAAA,MAAA,CAAO,IAAI,CAAA,CAAA;AAChE,EAAA,qBAAA;AAAA,IACE,IAAA;AAAA,IACA,qCAAA;AAAA,IACA,CAAA,EAAA,GAAA,MAAA,CAAO,aAAP,IAAiB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,SAAA;AAAA,GACnB,CAAA;AACA,EAAA,qBAAA;AAAA,IACE,IAAA;AAAA,IACA,gCAAA;AAAA,IACA,CAAA,EAAA,GAAA,MAAA,CAAO,aAAP,IAAiB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA;AAAA,GACnB,CAAA;AACF,CAAA;AAKA,MAAM,WAAA,GAAc,CAAC,CAAA,EAAU,IAAe,KAAA;AAC5C,EAAA,IAAA,CAAK,gBAAgB,CAAC,CAAA,CAAA;AACtB,EAAA,IAAA,CAAK,SAAU,CAAA;AAAA,IACb,MAAMC,kBAAe,CAAA,KAAA;AAAA,GACtB,CAAA,CAAA;AACH,CAAA,CAAA;AAEA,SAAS,cAAoB,GAAgD,EAAA;AAC3E,EAAA,OACE,CAAC,CAAC,GACD,KAAA,OAAO,GAAQ,KAAA,QAAA,IAAY,OAAO,GAAA,KAAQ,UAC3C,CAAA,IAAA,MAAA,IAAU,GACV,IAAA,OAAO,IAAI,IAAS,KAAA,UAAA,CAAA;AAExB,CAAA;AAEA,SAAS,QAAA,CACP,MACA,EACe,EAAA;AACf,EAAI,IAAA;AACF,IAAM,MAAA,GAAA,GAAM,GAAG,IAAI,CAAA,CAAA;AAGnB,IAAI,IAAA,aAAA,CAAc,GAAG,CAAG,EAAA;AACtB,MAAI,GAAA,CAAA,IAAA;AAAA,QACF,MAAM;AACJ,UAAA,IAAA,CAAK,GAAI,EAAA,CAAA;AAAA,SACX;AAAA,QACA,CAAK,CAAA,KAAA;AACH,UAAA,WAAA,CAAY,GAAG,IAAI,CAAA,CAAA;AACnB,UAAA,IAAA,CAAK,GAAI,EAAA,CAAA;AAAA,SACX;AAAA,OACF,CAAA;AAAA,KACK,MAAA;AACL,MAAA,IAAA,CAAK,GAAI,EAAA,CAAA;AAAA,KACX;AAEA,IAAO,OAAA,GAAA,CAAA;AAAA,WACA,CAAG,EAAA;AACV,IAAA,WAAA,CAAY,GAAG,IAAI,CAAA,CAAA;AACnB,IAAA,IAAA,CAAK,GAAI,EAAA,CAAA;AACT,IAAM,MAAA,CAAA,CAAA;AAAA,GACR;AACF,CAAA;AAEO,SAAS,eACd,MACA,EAAA,IAAA,EACA,EACA,EAAA,WAAA,GAA2B,EACZ,EAAA;AACf,EAAA,OAAO,MAAO,CAAA,eAAA,CAAgB,IAAM,EAAA,WAAA,EAAa,CAAC,IAAe,KAAA;AAC/D,IAAO,OAAA,QAAA,CAAS,MAAM,EAAE,CAAA,CAAA;AAAA,GACzB,CAAA,CAAA;AACH;;ACjFA,MAAM,2BAA8B,GAAA,GAAA,CAAA;AACpC,MAAMC,QAAA,GAASC,SAAM,CAAA,SAAA,CAAU,SAAS,CAAA,CAAA;AA6CjC,SAAS,kBAAqB,OAAqB,EAAA;AACxD,EAAM,MAAA;AAAA,IACJ,SAAA;AAAA,IACA,WAAA;AAAA,IACA,YAAA;AAAA,IACA,aAAA;AAAA,IACA,iBAAoB,GAAA,2BAAA;AAAA,GAClB,GAAA,OAAA,CAAA;AAEJ,EAAA,IAAI,gBAAgB,aAAe,EAAA;AACjC,IAAM,MAAA,IAAI,MAAM,+CAA+C,CAAA,CAAA;AAAA,GACjE;AAIA,EAAM,MAAA,KAAA,GAAQ,EAAE,aAAA,EAAe,CAAE,EAAA,CAAA;AACjC,EAAM,MAAA,eAAA,GAAkB,IAAI,eAAgB,EAAA,CAAA;AAC5C,EAAA,MAAM,cAAc,eAAgB,CAAA,MAAA,CAAA;AAEpC,EAAA,MAAM,UAAU,aAAc,CAAA;AAAA,IAC5B,iBAAmB,EAAA,iBAAA;AAAA,IACnB,MAAQ,EAAA,WAAA;AAAA,GACT,CAAA,CAAA;AAED,EAAA,eAAe,YAAe,GAAA;AAC5B,IAAO,OAAA,CAAC,YAAY,OAAS,EAAA;AAC3B,MAAI,IAAA,KAAA,CAAM,iBAAiB,YAAc,EAAA;AACvC,QAAA,MAAM,cAAe,CAAAD,QAAA,EAAQ,kBAAoB,EAAA,OAAM,IAAQ,KAAA;AAC7D,UAAM,MAAA,SAAA,GAAY,gBAAgB,KAAM,CAAA,aAAA,CAAA;AACxC,UAAA,MAAM,WAAc,GAAA,MAAM,OAAQ,CAAA,OAAA,EAC/B,CAAA,IAAA,CAAK,MAAM,SAAA,CAAU,SAAS,CAAC,CAC/B,CAAA,KAAA,CAAM,MAAM;AAIX,YAAA,OAAO,EAAC,CAAA;AAAA,WACT,CAAA,CAAA;AACH,UAAK,IAAA,CAAA,YAAA,CAAa,WAAa,EAAA,WAAA,CAAY,MAAM,CAAA,CAAA;AACjD,UAAA,IAAI,WAAY,CAAA,MAAA,IAAU,CAAC,WAAA,CAAY,OAAS,EAAA;AAC9C,YAAA,KAAA,CAAM,iBAAiB,WAAY,CAAA,MAAA,CAAA;AACnC,YAAA,KAAA,MAAW,QAAQ,WAAa,EAAA;AAC9B,cAAQ,OAAA,CAAA,OAAA,GACL,IAAK,CAAA,MAAM,YAAY,IAAI,CAAC,CAC5B,CAAA,KAAA,CAAM,MAAM;AAAA,eAIZ,CACA,CAAA,OAAA,CAAQ,MAAM;AACb,gBAAA,KAAA,CAAM,aAAiB,IAAA,CAAA,CAAA;AACvB,gBAAA,OAAA,CAAQ,OAAQ,EAAA,CAAA;AAAA,eACjB,CAAA,CAAA;AAAA,aACL;AAAA,WACF;AAAA,SACD,CAAA,CAAA;AAAA,OACH;AACA,MAAA,MAAM,QAAQ,IAAK,EAAA,CAAA;AAAA,KACrB;AAAA,GACF;AAEA,EAAa,YAAA,EAAA,CAAE,MAAM,CAAS,KAAA,KAAA;AAM5B,IAAM,MAAA,IAAI,KAAM,CAAA,CAAA,4CAAA,CAAA,EAAgD,KAAK,CAAA,CAAA;AAAA,GACtE,CAAA,CAAA;AAED,EAAA,OAAO,MAAM;AACX,IAAA,eAAA,CAAgB,KAAM,EAAA,CAAA;AACtB,IAAA,OAAA,CAAQ,OAAQ,EAAA,CAAA;AAAA,GAClB,CAAA;AACF,CAAA;AAMO,SAAS,cAAc,OAO5B,EAAA;AACA,EAAM,MAAA,EAAE,iBAAmB,EAAA,MAAA,EAAW,GAAA,OAAA,CAAA;AACtC,EAAM,MAAA,SAAA,uBAAgB,GAAgB,EAAA,CAAA;AAEtC,EAAA,SAAS,IAAO,GAAA;AACd,IAAA,IAAI,MAAO,CAAA,OAAA,IAAW,EAAE,iBAAA,GAAoB,CAAI,CAAA,EAAA;AAC9C,MAAA,OAAO,QAAQ,OAAQ,EAAA,CAAA;AAAA,KACzB;AAEA,IAAO,OAAA,IAAI,QAAc,CAAW,OAAA,KAAA;AAClC,MAAM,MAAA,aAAA,GAAgB,UAAW,CAAA,IAAA,EAAM,iBAAiB,CAAA,CAAA;AAExD,MAAA,SAAS,IAAO,GAAA;AACd,QAAA,SAAA,CAAU,OAAO,IAAI,CAAA,CAAA;AACrB,QAAA,YAAA,CAAa,aAAa,CAAA,CAAA;AAC1B,QAAQ,OAAA,EAAA,CAAA;AAAA,OACV;AAEA,MAAA,SAAA,CAAU,IAAI,IAAI,CAAA,CAAA;AAAA,KACnB,CAAA,CAAA;AAAA,GACH;AAEA,EAAA,SAAS,OAAU,GAAA;AACjB,IAAM,MAAA,eAAA,GAAkB,IAAI,GAAA,CAAI,SAAS,CAAA,CAAA;AACzC,IAAA,SAAA,CAAU,KAAM,EAAA,CAAA;AAChB,IAAA,KAAA,MAAW,YAAY,eAAiB,EAAA;AACtC,MAAS,QAAA,EAAA,CAAA;AAAA,KACX;AAAA,GACF;AAEA,EAAO,MAAA,CAAA,gBAAA,CAAiB,SAAS,OAAO,CAAA,CAAA;AAExC,EAAO,OAAA;AAAA,IACL,IAAA;AAAA,IACA,OAAA;AAAA,IACA,OAAS,EAAA,MAAM,MAAO,CAAA,mBAAA,CAAoB,SAAS,OAAO,CAAA;AAAA,GAC5D,CAAA;AACF;;AChKA,eAAsB,iBAAiB,OAKrB,EAAA;AAEhB,EAAM,MAAA,UAAA,GAAa,KAAM,CAAA,OAAA,CAAQ,UAAU,CAAA,CAAA;AAC3C,EAAM,MAAA,SAAA,GAAY,KAAM,CAAA,OAAA,CAAQ,SAAS,CAAA,CAAA;AACzC,EAAA,MAAM,OAAO,OAAQ,CAAA,IAAA,CAAA;AACrB,EAAM,MAAA,IAAA,GAAO,QAAQ,QAAS,CAAA,IAAA,CAAA;AAE9B,EAAA,IAAI,SAAS,WAAa,EAAA;AACxB,IAAA,KAAA,MAAW,SAAS,UAAY,EAAA;AAC9B,MAAA,MAAM,IACH,CAAA,KAAA,CAA0B,gBAAgB,CAAA,CAC1C,MAAO,CAAA;AAAA,QACN,IAAM,EAAA,iBAAA;AAAA,OACP,CACA,CAAA,OAAA;AAAA,QACC,WAAA;AAAA,QACA,IAAA,CAAwB,eAAe,CACpC,CAAA,MAAA,CAAO,WAAW,CAClB,CAAA,OAAA,CAAQ,cAAc,KAAK,CAAA;AAAA,OAChC,CAAA;AACF,MAAA,MAAM,IACH,CAAA,KAAA,CAAyB,eAAe,CAAA,CACxC,MAAO,CAAA;AAAA,QACN,WAAa,EAAA,iBAAA;AAAA,QACb,cAAA,EAAgB,IAAK,CAAA,EAAA,CAAG,GAAI,EAAA;AAAA,OAC7B,CAAA,CACA,OAAQ,CAAA,YAAA,EAAc,KAAK,CAAA,CAAA;AAAA,KAChC;AAEA,IAAA,KAAA,MAAW,SAAS,SAAW,EAAA;AAC7B,MAAA,MAAM,IACH,CAAA,KAAA,CAA0B,gBAAgB,CAAA,CAC1C,MAAO,CAAA;AAAA,QACN,IAAM,EAAA,iBAAA;AAAA,OACP,CAAA,CACA,OAAQ,CAAA,WAAA,EAAa,KAAK,CAAA,CAAA;AAC7B,MAAA,MAAM,IACH,CAAA,KAAA,CAAyB,eAAe,CAAA,CACxC,MAAO,CAAA;AAAA,QACN,WAAa,EAAA,iBAAA;AAAA,QACb,cAAA,EAAgB,IAAK,CAAA,EAAA,CAAG,GAAI,EAAA;AAAA,OAC7B,CAAA,CACA,OAAQ,CAAA,WAAA,EAAa,KAAK,CAAA,CAAA;AAAA,KAC/B;AAAA,GACF,MAAA,IAAW,SAAS,UAAY,EAAA;AAG9B,IAAA,MAAM,SAASf,OAAK,EAAA,CAAA;AAEpB,IAAA,KAAA,MAAW,SAAS,UAAY,EAAA;AAC9B,MAAM,MAAA,IAAA,CAAwB,eAAe,CAAA,CAC1C,MAAO,CAAA;AAAA,QACN,cAAA,EAAgB,IAAK,CAAA,EAAA,CAAG,GAAI,EAAA;AAAA,QAC5B,kBAAoB,EAAA,MAAA;AAAA,OACrB,CAAA,CACA,OAAQ,CAAA,YAAA,EAAc,KAAK,CAAA,CAAA;AAAA,KAChC;AAEA,IAAA,KAAA,MAAW,SAAS,SAAW,EAAA;AAC7B,MAAM,MAAA,IAAA,CAAwB,eAAe,CAAA,CAC1C,MAAO,CAAA;AAAA,QACN,cAAA,EAAgB,IAAK,CAAA,EAAA,CAAG,GAAI,EAAA;AAAA,QAC5B,kBAAoB,EAAA,MAAA;AAAA,OACrB,CAAA,CACA,OAAQ,CAAA,WAAA,EAAa,KAAK,CAAA,CAAA;AAAA,KAC/B;AAAA,GACK,MAAA;AACL,IAAA,MAAM,IAAI,KAAA,CAAM,CAAmC,gCAAA,EAAA,IAAI,CAAE,CAAA,CAAA,CAAA;AAAA,GAC3D;AACF,CAAA;AAEA,SAAS,MAAM,KAAiD,EAAA;AAC9D,EAAA,IAAI,CAAC,KAAO,EAAA;AACV,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AACA,EAAO,OAAAiB,8BAAA,CAAc,KAAM,CAAA,OAAA,CAAQ,KAAK,CAAA,GAAI,QAAQ,CAAC,GAAG,KAAK,CAAA,EAAG,GAAG,CAAA,CAAA;AACrE;;AClFA,eAAsB,uBAAuB,OAGzB,EAAA;AAClB,EAAM,MAAA,EAAE,IAAM,EAAA,QAAA,EAAa,GAAA,OAAA,CAAA;AAE3B,EAAA,IAAI,KAAQ,GAAA,CAAA,CAAA;AAGZ,EAAA,KAAA,IAAS,CAAI,GAAA,CAAA,EAAG,CAAI,GAAA,GAAA,EAAK,EAAE,CAAG,EAAA;AAC5B,IAAM,MAAA,UAAA,GAAa,MAAM,IACtB,CAAA,IAAA;AAAA,MAAK,SAAA;AAAA,MAAW,CAAC,aAAa,YAAY,CAAA;AAAA,MAAG,CAAA,OAAA,KAC5C,QACG,IAAK,CAAA,eAAe,EACpB,MAAO,CAAA,yBAAA,EAA2B,0BAA0B,CAC5D,CAAA,aAAA;AAAA,QACC,0BAAA;AAAA,QACA,4CAAA;AAAA,QACA,0BAAA;AAAA,OACF,CACC,UAAU,4CAA4C,CAAA;AAAA,MAE1D,MAAO,CAAA;AAAA,MACN,QAAU,EAAA,mBAAA;AAAA,MACV,gBAAkB,EAAA,yBAAA;AAAA,KACnB,CAAA,CACA,IAAK,CAAA,SAAS,CACd,CAAA,aAAA;AAAA,MACC,WAAA;AAAA,MACA,6BAAA;AAAA,MACA,oBAAA;AAAA,KAED,CAAA,aAAA;AAAA,MACC,eAAA;AAAA,MACA,0BAAA;AAAA,MACA,6BAAA;AAAA,KACF,CAAA;AAEF,IAAI,IAAA,CAAC,WAAW,MAAQ,EAAA;AACtB,MAAA,MAAA;AAAA,KACF;AAEA,IAAA,MAAM,YAAsBC,qBAAK,CAAA,UAAA,CAAW,IAAI,CAAK,CAAA,KAAA,CAAA,CAAE,QAAQ,CAAC,CAAA,CAAA;AAChE,IAAA,MAAM,iBAA8B,GAAAA,qBAAA;AAAA,MAClC,WAAW,GAAI,CAAA,CAAA,CAAA,KAAK,EAAE,gBAAgB,CAAA,CAAE,OAAO,OAAO,CAAA;AAAA,KACxD,CAAA;AAEA,IAAA,KAAA,IAAS,SAAU,CAAA,MAAA,CAAA;AAGnB,IAAM,MAAA,IAAA,CACH,MAAyB,eAAe,CAAA,CACxC,QACA,CAAA,OAAA,CAAQ,aAAa,SAAS,CAAA,CAAA;AAGjC,IAAA,MAAM,gBAAiB,CAAA;AAAA,MACrB,IAAA;AAAA,MACA,QAAA;AAAA,MACA,SAAW,EAAA,iBAAA;AAAA,KACZ,CAAA,CAAA;AAAA,GACH;AAEA,EAAO,OAAA,KAAA,CAAA;AACT;;;;;;;;AChDA,MAAM,SAAY,GAAA,CAAA,CAAA;AAElB,MAAMH,QAAA,GAASC,SAAM,CAAA,SAAA,CAAU,SAAS,CAAA,CAAA;AAUjC,MAAM,8BAA+B,CAAA;AAAA,EAoB1C,YAAY,OAiBT,EAAA;AApCH,IAAiBnE,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,WAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,oBAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,cAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,YAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,mBAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,yBAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,mBAAA,CAAA,CAAA;AAIjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,aAAA,CAAA,CAAA;AAEjB,IAAQA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;AAzEV,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AA6FI,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA,CAAA;AACtB,IAAA,IAAA,CAAK,YAAY,OAAQ,CAAA,SAAA,CAAA;AACzB,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA,CAAA;AACtB,IAAA,IAAA,CAAK,OAAO,OAAQ,CAAA,IAAA,CAAA;AACpB,IAAA,IAAA,CAAK,qBAAqB,OAAQ,CAAA,kBAAA,CAAA;AAClC,IAAA,IAAA,CAAK,eAAe,OAAQ,CAAA,YAAA,CAAA;AAC5B,IAAA,IAAA,CAAK,WAAW,OAAQ,CAAA,QAAA,CAAA;AACxB,IAAA,IAAA,CAAK,aAAa,OAAQ,CAAA,UAAA,CAAA;AAC1B,IAAK,IAAA,CAAA,iBAAA,GAAA,CAAoB,EAAQ,GAAA,OAAA,CAAA,iBAAA,KAAR,IAA6B,GAAA,EAAA,GAAA,GAAA,CAAA;AACtD,IAAK,IAAA,CAAA,uBAAA,GAAA,CAA0B,EAAQ,GAAA,OAAA,CAAA,uBAAA,KAAR,IAAmC,GAAA,EAAA,GAAA,GAAA,CAAA;AAClE,IAAA,IAAA,CAAK,oBAAoB,OAAQ,CAAA,iBAAA,CAAA;AACjC,IAAA,IAAA,CAAK,OAAU,GAAA,CAAA,EAAA,GAAA,OAAA,CAAQ,OAAR,KAAA,IAAA,GAAA,EAAA,GAAmBsE,iBAAgB,EAAA,CAAA;AAClD,IAAA,IAAA,CAAK,cAAc,OAAQ,CAAA,WAAA,CAAA;AAE3B,IAAA,IAAA,CAAK,QAAW,GAAA,KAAA,CAAA,CAAA;AAAA,GAClB;AAAA,EAEA,MAAM,KAAQ,GAAA;AACZ,IAAA,IAAI,KAAK,QAAU,EAAA;AACjB,MAAM,MAAA,IAAI,MAAM,sCAAsC,CAAA,CAAA;AAAA,KACxD;AAEA,IAAM,MAAA,YAAA,GAAe,KAAK,aAAc,EAAA,CAAA;AACxC,IAAM,MAAA,WAAA,GAAc,KAAK,kBAAmB,EAAA,CAAA;AAE5C,IAAA,IAAA,CAAK,WAAW,MAAM;AACpB,MAAa,YAAA,EAAA,CAAA;AACb,MAAY,WAAA,EAAA,CAAA;AAAA,KACd,CAAA;AAAA,GACF;AAAA,EAEA,MAAM,IAAO,GAAA;AACX,IAAA,IAAI,KAAK,QAAU,EAAA;AACjB,MAAA,IAAA,CAAK,QAAS,EAAA,CAAA;AACd,MAAA,IAAA,CAAK,QAAW,GAAA,KAAA,CAAA,CAAA;AAAA,KAClB;AAAA,GACF;AAAA,EAEQ,aAA4B,GAAA;AAClC,IAAA,OAAO,iBAAoC,CAAA;AAAA,MACzC,YAAc,EAAA,CAAA;AAAA,MACd,aAAe,EAAA,EAAA;AAAA,MACf,mBAAmB,IAAK,CAAA,iBAAA;AAAA,MACxB,SAAA,EAAW,OAAM,KAAS,KAAA;AACxB,QAAI,IAAA;AACF,UAAA,MAAM,EAAE,KAAA,EAAU,GAAA,MAAM,KAAK,kBAAmB,CAAA,WAAA;AAAA,YAC9C,OAAM,EAAM,KAAA;AACV,cAAO,OAAA,IAAA,CAAK,kBAAmB,CAAA,sBAAA,CAAuB,EAAI,EAAA;AAAA,gBACxD,gBAAkB,EAAA,KAAA;AAAA,eACnB,CAAA,CAAA;AAAA,aACH;AAAA,WACF,CAAA;AACA,UAAO,OAAA,KAAA,CAAA;AAAA,iBACA,KAAO,EAAA;AACd,UAAK,IAAA,CAAA,MAAA,CAAO,IAAK,CAAA,iCAAA,EAAmC,KAAK,CAAA,CAAA;AACzD,UAAA,OAAO,EAAC,CAAA;AAAA,SACV;AAAA,OACF;AAAA,MACA,WAAA,EAAa,OAAM,IAAQ,KAAA;AACzB,QAAA,MAAM,cAAe,CAAAJ,QAAA,EAAQ,eAAiB,EAAA,OAAM,IAAQ,KAAA;AAxJpE,UAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AAyJU,UAAA,MAAM,QAAQ,IAAK,CAAA,OAAA,CAAQ,YAAa,CAAA,IAAA,EAAM,KAAK,MAAM,CAAA,CAAA;AACzD,UAAoB,mBAAA,CAAA,IAAA,EAAM,KAAK,iBAAiB,CAAA,CAAA;AAEhD,UAAI,IAAA;AACF,YAAM,MAAA;AAAA,cACJ,EAAA;AAAA,cACA,KAAA;AAAA,cACA,iBAAA;AAAA,cACA,SAAA;AAAA,cACA,WAAA;AAAA,cACA,UAAY,EAAA,kBAAA;AAAA,aACV,GAAA,IAAA,CAAA;AACJ,YAAA,MAAM,MAAS,GAAA,MAAM,IAAK,CAAA,YAAA,CAAa,OAAQ,CAAA;AAAA,cAC7C,MAAQ,EAAA,iBAAA;AAAA,cACR,KAAA;AAAA,aACD,CAAA,CAAA;AAED,YAAA,KAAA,CAAM,wBAAwB,MAAM,CAAA,CAAA;AAEpC,YAAA,IAAI,OAAO,EAAI,EAAA;AACb,cAAA,MAAM,EAAE,GAAK,EAAA,CAAA,EAAG,GAAG,eAAgB,EAAA,GAAI,wBAAS,EAAC,CAAA;AACjD,cAAA,IACEL,iCAAgB,eAAe,CAAA,KAC/BA,gCAAgB,CAAA,MAAA,CAAO,KAAK,CAC5B,EAAA;AACA,gBAAA,MAAM,IAAK,CAAA,kBAAA,CAAmB,WAAY,CAAA,OAAM,EAAM,KAAA;AACpD,kBAAM,MAAA,IAAA,CAAK,kBAAmB,CAAA,iBAAA,CAAkB,EAAI,EAAA;AAAA,oBAClD,EAAA;AAAA,oBACA,KAAO,EAAA;AAAA,sBACL,GAAK,EAAA,SAAA;AAAA,sBACL,GAAG,MAAO,CAAA,KAAA;AAAA,qBACZ;AAAA,mBACD,CAAA,CAAA;AAAA,iBACF,CAAA,CAAA;AAAA,eACH;AAAA,aACK,MAAA;AACL,cAAA,MAAM,WAAW,KAAO,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAA,CAAA;AACxB,cAAA,MAAM,GAAM,GAAA,MAAA,CAAO,SAAU,CAAA,QAAQ,IAAK,QAAsB,GAAA,CAAA,CAAA;AAChE,cAAA,MAAM,IAAK,CAAA,kBAAA,CAAmB,WAAY,CAAA,OAAM,EAAM,KAAA;AACpD,gBAAM,MAAA,IAAA,CAAK,kBAAmB,CAAA,iBAAA,CAAkB,EAAI,EAAA;AAAA,kBAClD,EAAA;AAAA,kBACA,KAAA,EAAO,GAAM,GAAA,CAAA,GAAI,EAAE,GAAG,OAAO,GAAK,EAAA,GAAA,GAAM,CAAE,EAAA,GAAI,EAAC;AAAA,iBAChD,CAAA,CAAA;AAAA,eACF,CAAA,CAAA;AAAA,aACH;AAEA,YAAA,MAAM,QACJ,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,iBAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,iBAAA,CAAmB,QAAnB,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAA6B,gBAA7B,IAA2C,GAAA,KAAA,CAAA,GAAA,EAAA,CAAAxD,gCAAA,CAAA,CAAA;AAC7C,YAAI,IAAA,MAAA,CAAO,OAAO,MAAQ,EAAA;AACxB,cAAK,CAAA,EAAA,GAAA,IAAA,CAAA,WAAA,KAAL,mBAAkB,OAAQ,CAAA;AAAA,gBACxB,KAAO,EAAA,oBAAA;AAAA,gBACP,YAAc,EAAA;AAAA,kBACZ,MAAQ,EAAA,SAAA;AAAA,kBACR,QAAA;AAAA,kBACA,QAAQ,MAAO,CAAA,MAAA;AAAA,iBACjB;AAAA,eACF,CAAA,CAAA;AAAA,aACF;AACA,YAAA,MAAM,eAAe,IAAK,CAAA,SAAA;AAAA,cACxB,OAAO,MAAO,CAAA,GAAA,CAAI,CAAK,CAAA,KAAAkE,qBAAA,CAAe,CAAC,CAAC,CAAA;AAAA,aAC1C,CAAA;AAEA,YAAA,IAAI,WAAc,GAAA,IAAA,CAAK,UAAW,EAAA,CAAE,OAAO,YAAY,CAAA,CAAA;AAEvD,YAAA,IAAI,OAAO,EAAI,EAAA;AACb,cAAA,MAAM,EAAE,UAAY,EAAA,OAAA,EAClB,GAAA,MAAM,KAAK,kBAAmB,CAAA,WAAA;AAAA,gBAAY,CACxC,EAAA,KAAA,IAAA,CAAK,kBAAmB,CAAA,WAAA,CAAY,EAAI,EAAA;AAAA,kBACtC,SAAA;AAAA,iBACD,CAAA;AAAA,eACH,CAAA;AAEF,cAAA,WAAA,GAAc,YACX,MAAO,CAAAV,gCAAA,CAAgB,EAAE,GAAG,MAAA,CAAO,iBAAiB,CAAC,EACrD,MAAO,CAAAA,gCAAA,CAAgB,CAAC,GAAG,MAAA,CAAO,gBAAgB,CAAC,CAAC,EACpD,MAAO,CAAAA,gCAAA,CAAgB,CAAC,GAAG,MAAA,CAAO,SAAS,CAAC,CAAC,EAC7C,MAAO,CAAAA,gCAAA,CAAgB,CAAC,GAAG,MAAA,CAAO,WAAW,CAAC,CAAC,EAC/C,MAAO,CAAAA,gCAAA,CAAgB,CAAC,GAAG,OAAO,CAAC,CAAC,CAAA,CAAA;AAAA,aACzC;AAEA,YAAM,MAAA,UAAA,GAAa,WAAY,CAAA,MAAA,CAAO,KAAK,CAAA,CAAA;AAC3C,YAAA,IAAI,eAAe,kBAAoB,EAAA;AAIrC,cAAA,KAAA,CAAM,2BAA4B,EAAA,CAAA;AAClC,cAAA,OAAA;AAAA,aACF;AASA,YAAI,IAAA,CAAC,OAAO,EAAI,EAAA;AAEd,cAAQ,OAAA,CAAA,OAAA,CAAQ,MAAS,CACtB,CAAA,IAAA;AAAA,gBAAK,MAAG;AA5PzB,kBAAAW,IAAAA,GAAAA,CAAAA;AA6PkB,kBAAA,OAAA,CAAAA,GAAA,GAAA,IAAA,CAAK,iBAAL,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,IAAA,IAAyB,CAAA,IAAA,EAAA;AAAA,oBACvB,iBAAA;AAAA,oBACA,QAAQ,MAAO,CAAA,MAAA;AAAA,mBACjB,CAAA,CAAA;AAAA,iBAAA;AAAA,eACF,CACC,MAAM,CAAS,KAAA,KAAA;AACd,gBAAA,IAAA,CAAK,MAAO,CAAA,KAAA;AAAA,kBACV,CAAiD,8CAAA,EAAAC,qBAAA;AAAA,oBAC/C,KAAA;AAAA,mBACD,CAAA,CAAA;AAAA,iBACH,CAAA;AAAA,eACD,CAAA,CAAA;AAEH,cAAA,MAAM,IAAK,CAAA,kBAAA,CAAmB,WAAY,CAAA,OAAM,EAAM,KAAA;AACpD,gBAAM,MAAA,IAAA,CAAK,kBAAmB,CAAA,2BAAA,CAA4B,EAAI,EAAA;AAAA,kBAC5D,EAAA;AAAA,kBACA,MAAQ,EAAA,YAAA;AAAA,kBACR,UAAA;AAAA,iBACD,CAAA,CAAA;AAAA,eACF,CAAA,CAAA;AAED,cAAM,MAAA,IAAA,CAAK,SAAS,MAAO,CAAA;AAAA,gBACzB,UAAY,EAAA,CAAC5B,+BAAmB,CAAA,iBAAiB,CAAC,CAAA;AAAA,eACnD,CAAA,CAAA;AAED,cAAA,KAAA,CAAM,wBAAyB,EAAA,CAAA;AAC/B,cAAA,OAAA;AAAA,aACF;AAEA,YAAO,MAAA,CAAA,eAAA,CAAgB,SAAS,GAAM,GAAA,EAAA,CAAA;AACtC,YAAI,IAAA,kBAAA,CAAA;AACJ,YAAA,MAAM,IAAK,CAAA,kBAAA,CAAmB,WAAY,CAAA,OAAM,EAAM,KAAA;AACpD,cAAA,MAAM,EAAE,QAAS,EAAA,GACf,MAAM,IAAK,CAAA,kBAAA,CAAmB,sBAAsB,EAAI,EAAA;AAAA,gBACtD,EAAA;AAAA,gBACA,iBAAiB,MAAO,CAAA,eAAA;AAAA,gBACxB,UAAA;AAAA,gBACA,MAAQ,EAAA,YAAA;AAAA,gBACR,WAAW,MAAO,CAAA,SAAA;AAAA,gBAClB,kBAAkB,MAAO,CAAA,gBAAA;AAAA,gBACzB,WAAA;AAAA,gBACA,aAAa,MAAO,CAAA,WAAA;AAAA,eACrB,CAAA,CAAA;AACH,cAAA,kBAAA,GAAqB,IAAI,GAAA;AAAA,gBACvB,QAAA,CAAS,SAAU,CAAA,GAAA,CAAI,CAAK,CAAA,KAAA;AAAA,kBAC1B,CAAG,EAAA,CAAA,CAAE,iBAAiB,CAAA,CAAA,EAAI,EAAE,IAAI,CAAA,CAAA;AAAA,kBAChC,CAAE,CAAA,iBAAA;AAAA,iBACH,CAAA;AAAA,eACH,CAAA;AAAA,aACD,CAAA,CAAA;AAED,YAAA,MAAM,qBAAqB,IAAI,GAAA;AAAA,cAC7B,MAAA,CAAO,SAAU,CAAA,GAAA,CAAI,CAAY,QAAA,KAAA;AAC/B,gBAAM,MAAA,eAAA,GAAkBA,+BAAmB,CAAA,QAAA,CAAS,MAAM,CAAA,CAAA;AAC1D,gBAAA,OAAO,CAAC,CAAG,EAAA,eAAe,IAAI,QAAS,CAAA,IAAI,IAAI,eAAe,CAAA,CAAA;AAAA,eAC/D,CAAA;AAAA,aACH,CAAA;AAEA,YAAM,MAAA,mBAAA,uBAA0B,GAAY,CAAA;AAAA,cAC1CA,+BAAA,CAAmB,OAAO,eAAe,CAAA;AAAA,aAC1C,CAAA,CAAA;AACD,YAAmB,kBAAA,CAAA,OAAA,CAAQ,CAAC,eAAA,EAAiB,SAAc,KAAA;AACzD,cAAA,IAAI,CAAC,kBAAA,CAAmB,GAAI,CAAA,SAAS,CAAG,EAAA;AACtC,gBAAA,mBAAA,CAAoB,IAAI,eAAe,CAAA,CAAA;AAAA,eACzC;AAAA,aACD,CAAA,CAAA;AACD,YAAoB,kBAAA,CAAA,OAAA,CAAQ,CAAC,eAAA,EAAiB,SAAc,KAAA;AAC1D,cAAA,IAAI,CAAC,kBAAA,CAAmB,GAAI,CAAA,SAAS,CAAG,EAAA;AACtC,gBAAA,mBAAA,CAAoB,IAAI,eAAe,CAAA,CAAA;AAAA,eACzC;AAAA,aACD,CAAA,CAAA;AAED,YAAM,MAAA,IAAA,CAAK,SAAS,MAAO,CAAA;AAAA,cACzB,UAAY,EAAA,mBAAA;AAAA,aACb,CAAA,CAAA;AAED,YAAA,KAAA,CAAM,yBAA0B,EAAA,CAAA;AAAA,mBACzB,KAAO,EAAA;AACd,YAAAJ,kBAAA,CAAY,KAAK,CAAA,CAAA;AACjB,YAAA,KAAA,CAAM,WAAW,KAAK,CAAA,CAAA;AAAA,WACxB;AAAA,SACD,CAAA,CAAA;AAAA,OACH;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAAA,EAEQ,kBAAiC,GAAA;AAnV3C,IAAA,IAAA,EAAA,CAAA;AAoVI,IAAA,MAAM,kBACJ,EAAK,GAAA,IAAA,CAAA,MAAA,CAAO,iBAAkB,CAAA,wBAAwB,MAAtD,IAA2D,GAAA,EAAA,GAAA,MAAA,CAAA;AAC7D,IAAA,IAAI,mBAAmB,QAAU,EAAA;AAC/B,MAAA,OAAO,MAAM;AAAA,OAAC,CAAA;AAAA,KAChB;AAEA,IAAM,MAAA,iBAAA,GAAoB,2BAA4B,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAEjE,IAAA,MAAM,UAAU,YAAY;AAC1B,MAAI,IAAA;AACF,QAAM,MAAA,CAAA,GAAI,MAAM,sBAAuB,CAAA;AAAA,UACrC,MAAM,IAAK,CAAA,IAAA;AAAA,UACX,QAAU,EAAA,iBAAA;AAAA,SACX,CAAA,CAAA;AACD,QAAA,IAAI,IAAI,CAAG,EAAA;AACT,UAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,CAAW,QAAA,EAAA,CAAC,CAAoB,kBAAA,CAAA,CAAA,CAAA;AAAA,SACnD;AAAA,eACO,KAAO,EAAA;AACd,QAAK,IAAA,CAAA,MAAA,CAAO,IAAK,CAAA,CAAA,kCAAA,CAAA,EAAsC,KAAK,CAAA,CAAA;AAAA,OAC9D;AAAA,KACF,CAAA;AAEA,IAAA,IAAI,KAAK,SAAW,EAAA;AAClB,MAAM,MAAA,eAAA,GAAkB,IAAI,eAAgB,EAAA,CAAA;AAE5C,MAAA,IAAA,CAAK,UAAU,YAAa,CAAA;AAAA,QAC1B,EAAI,EAAA,wBAAA;AAAA,QACJ,SAAW,EAAA,EAAE,YAAc,EAAA,IAAA,CAAK,uBAAwB,EAAA;AAAA,QACxD,OAAS,EAAA,EAAE,YAAc,EAAA,IAAA,CAAK,0BAA0B,GAAI,EAAA;AAAA,QAC5D,EAAI,EAAA,OAAA;AAAA,QACJ,QAAQ,eAAgB,CAAA,MAAA;AAAA,OACzB,CAAA,CAAA;AAED,MAAA,OAAO,MAAM;AACX,QAAA,eAAA,CAAgB,KAAM,EAAA,CAAA;AAAA,OACxB,CAAA;AAAA,KACF;AAEA,IAAA,MAAM,WAAc,GAAA,WAAA,CAAY,OAAS,EAAA,IAAA,CAAK,uBAAuB,CAAA,CAAA;AACrE,IAAA,OAAO,MAAM;AACX,MAAA,aAAA,CAAc,WAAW,CAAA,CAAA;AAAA,KAC3B,CAAA;AAAA,GACF;AACF,CAAA;AAGA,SAAS6B,iBAAkB,GAAA;AAEzB,EAAA,MAAM,wBAAwB,mBAAoB,CAAA;AAAA,IAChD,IAAM,EAAA,kCAAA;AAAA,IACN,IAAM,EAAA,6EAAA;AAAA,IACN,UAAA,EAAY,CAAC,QAAQ,CAAA;AAAA,GACtB,CAAA,CAAA;AACD,EAAA,MAAM,yBAAyB,mBAAoB,CAAA;AAAA,IACjD,IAAM,EAAA,qCAAA;AAAA,IACN,IAAM,EAAA,8FAAA;AAAA,IACN,UAAA,EAAY,CAAC,QAAQ,CAAA;AAAA,GACtB,CAAA,CAAA;AACD,EAAA,MAAM,yBAAyB,mBAAoB,CAAA;AAAA,IACjD,IAAM,EAAA,qCAAA;AAAA,IACN,IAAM,EAAA,wFAAA;AAAA,IACN,UAAA,EAAY,CAAC,QAAQ,CAAA;AAAA,GACtB,CAAA,CAAA;AACD,EAAA,MAAM,2BAA2B,mBAAoB,CAAA;AAAA,IACnD,IAAM,EAAA,wCAAA;AAAA,IACN,IAAM,EAAA,sJAAA;AAAA,GACP,CAAA,CAAA;AAED,EAAM,MAAA,KAAA,GAAQX,WAAQ,CAAA,QAAA,CAAS,SAAS,CAAA,CAAA;AACxC,EAAA,MAAM,oBAAoB,KAAM,CAAA,aAAA;AAAA,IAC9B,kCAAA;AAAA,IACA,EAAE,aAAa,8BAA+B,EAAA;AAAA,GAChD,CAAA;AAEA,EAAA,MAAM,qBAAqB,KAAM,CAAA,eAAA;AAAA,IAC/B,6BAAA;AAAA,IACA;AAAA,MACE,WAAa,EAAA,+CAAA;AAAA,MACb,IAAM,EAAA,SAAA;AAAA,KACR;AAAA,GACF,CAAA;AAEA,EAAA,MAAM,qBAAqB,KAAM,CAAA,eAAA;AAAA,IAC/B,6BAAA;AAAA,IACA;AAAA,MACE,WAAa,EAAA,yCAAA;AAAA,MACb,IAAM,EAAA,SAAA;AAAA,KACR;AAAA,GACF,CAAA;AAEA,EAAA,MAAM,uBAAuB,KAAM,CAAA,eAAA;AAAA,IACjC,gCAAA;AAAA,IACA;AAAA,MACE,WACE,EAAA,uGAAA;AAAA,MACF,IAAM,EAAA,SAAA;AAAA,KACR;AAAA,GACF,CAAA;AAEA,EAAS,SAAA,YAAA,CAAa,MAAwB,MAAuB,EAAA;AACnE,IAAM,MAAA,SAAA,GAAY,QAAQ,MAAO,EAAA,CAAA;AACjC,IAAM,MAAA,eAAA,GAAkB,uBAAuB,UAAW,EAAA,CAAA;AAC1D,IAAM,MAAA,kBAAA,GAAqB,uBAAuB,UAAW,EAAA,CAAA;AAE7D,IAAA,MAAA,CAAO,KAAM,CAAA,CAAA,WAAA,EAAc,IAAK,CAAA,SAAS,CAAE,CAAA,CAAA,CAAA;AAE3C,IAAA,IAAI,KAAK,YAAc,EAAA;AACrB,MAAA,MAAM,UAAU,CAAC,IAAA,CAAK,aAAa,OAAQ,EAAA,CAAE,GAAG,SAAS,CAAA,CAAA;AACzD,MAAA,wBAAA,CAAyB,QAAQ,OAAO,CAAA,CAAA;AACxC,MAAA,oBAAA,CAAqB,OAAO,OAAO,CAAA,CAAA;AAAA,KACrC;AAEA,IAAA,SAAS,OAAU,GAAA;AACjB,MAAM,MAAA,KAAA,GAAQ,OAAQ,CAAA,MAAA,CAAO,SAAS,CAAA,CAAA;AACtC,MAAA,OAAO,KAAM,CAAA,CAAC,CAAI,GAAA,KAAA,CAAM,CAAC,CAAI,GAAA,GAAA,CAAA;AAAA,KAC/B;AAEA,IAAA,SAAS,wBAAwB,MAAgC,EAAA;AAC/D,MAAA,kBAAA,CAAmB,EAAE,MAAQ,EAAA,MAAA,CAAO,EAAK,GAAA,IAAA,GAAO,UAAU,CAAA,CAAA;AAC1D,MAAmB,kBAAA,CAAA,MAAA,CAAO,SAAW,EAAA;AAAA,QACnC,MAAA,EAAQ,MAAO,CAAA,EAAA,GAAK,IAAO,GAAA,QAAA;AAAA,OAC5B,CAAA,CAAA;AAAA,KACH;AAEA,IAAA,SAAS,2BAA8B,GAAA;AACrC,MAAgB,eAAA,CAAA,EAAE,MAAQ,EAAA,WAAA,EAAa,CAAA,CAAA;AACvC,MAAA,qBAAA,CAAsB,GAAI,CAAA,EAAE,MAAQ,EAAA,WAAA,IAAe,CAAC,CAAA,CAAA;AAEpD,MAAA,kBAAA,CAAmB,OAAO,OAAQ,EAAA,EAAG,EAAE,MAAA,EAAQ,aAAa,CAAA,CAAA;AAC5D,MAAA,iBAAA,CAAkB,GAAI,CAAA,CAAA,EAAG,EAAE,MAAA,EAAQ,aAAa,CAAA,CAAA;AAAA,KAClD;AAEA,IAAA,SAAS,wBAA2B,GAAA;AAClC,MAAgB,eAAA,CAAA,EAAE,MAAQ,EAAA,QAAA,EAAU,CAAA,CAAA;AACpC,MAAA,qBAAA,CAAsB,GAAI,CAAA,EAAE,MAAQ,EAAA,QAAA,IAAY,CAAC,CAAA,CAAA;AAEjD,MAAA,kBAAA,CAAmB,OAAO,OAAQ,EAAA,EAAG,EAAE,MAAA,EAAQ,UAAU,CAAA,CAAA;AACzD,MAAA,iBAAA,CAAkB,GAAI,CAAA,CAAA,EAAG,EAAE,MAAA,EAAQ,UAAU,CAAA,CAAA;AAAA,KAC/C;AAEA,IAAA,SAAS,yBAA4B,GAAA;AACnC,MAAgB,eAAA,CAAA,EAAE,MAAQ,EAAA,SAAA,EAAW,CAAA,CAAA;AACrC,MAAA,qBAAA,CAAsB,GAAI,CAAA,EAAE,MAAQ,EAAA,SAAA,IAAa,CAAC,CAAA,CAAA;AAElD,MAAA,kBAAA,CAAmB,OAAO,OAAQ,EAAA,EAAG,EAAE,MAAA,EAAQ,WAAW,CAAA,CAAA;AAC1D,MAAA,iBAAA,CAAkB,GAAI,CAAA,CAAA,EAAG,EAAE,MAAA,EAAQ,WAAW,CAAA,CAAA;AAAA,KAChD;AAEA,IAAA,SAAS,WAAW,KAAc,EAAA;AAChC,MAAA,qBAAA,CAAsB,GAAI,CAAA,EAAE,MAAQ,EAAA,QAAA,IAAY,CAAC,CAAA,CAAA;AACjD,MAAA,iBAAA,CAAkB,GAAI,CAAA,CAAA,EAAG,EAAE,MAAA,EAAQ,UAAU,CAAA,CAAA;AAC7C,MAAA,MAAA,CAAO,IAAK,CAAA,CAAA,cAAA,EAAiB,IAAK,CAAA,SAAS,WAAW,KAAK,CAAA,CAAA;AAAA,KAC7D;AAEA,IAAO,OAAA;AAAA,MACL,uBAAA;AAAA,MACA,2BAAA;AAAA,MACA,wBAAA;AAAA,MACA,yBAAA;AAAA,MACA,UAAA;AAAA,KACF,CAAA;AAAA,GACF;AAEA,EAAA,OAAO,EAAE,YAAa,EAAA,CAAA;AACxB;;ACrdO,MAAM,sBAAkD,CAAA;AAAA,EAC7D,WAAA,CACmB,KACA,EAAA,YAAA,EACA,OAAyC,GAAA;AAAA,IACxD,oBAAA,EAAsB,CAAC,KAAK,CAAA;AAAA,GAE9B,EAAA;AALiB,IAAA,IAAA,CAAA,KAAA,GAAA,KAAA,CAAA;AACA,IAAA,IAAA,CAAA,YAAA,GAAA,YAAA,CAAA;AACA,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;AAAA,GAGhB;AAAA,EAEH,MAAM,cACJ,CAAA,KAAA,EACA,MACuE,EAAA;AACvE,IAAA,IAAI,CAAC,IAAK,CAAA,OAAA,CAAQ,qBAAqB,QAAS,CAAA,KAAA,CAAM,IAAI,CAAG,EAAA;AAC3D,MAAA,MAAM,IAAIb,iBAAA;AAAA,QACR,mDAAmD,IAAK,CAAA,SAAA;AAAA,UACtD,KAAK,OAAQ,CAAA,oBAAA;AAAA,SACd,CAAA,CAAA;AAAA,OACH,CAAA;AAAA,KACF;AACA,IAAA,IAAI,MAAQ,EAAA;AACV,MAAO,OAAA,IAAA,CAAK,qBAAqB,KAAK,CAAA,CAAA;AAAA,KACxC;AACA,IAAA,MAAM,QAAW,GAAA,MAAM,IAAK,CAAA,KAAA,CAAM,eAAe,KAAK,CAAA,CAAA;AACtD,IAAA,OAAO,EAAE,QAAA,EAAU,QAAU,EAAA,EAAG,EAAA,CAAA;AAAA,GAClC;AAAA,EAEA,aAAqC,GAAA;AACnC,IAAO,OAAA,IAAA,CAAK,MAAM,aAAc,EAAA,CAAA;AAAA,GAClC;AAAA,EACA,YAAY,EAA+B,EAAA;AACzC,IAAO,OAAA,IAAA,CAAK,KAAM,CAAA,WAAA,CAAY,EAAE,CAAA,CAAA;AAAA,GAClC;AAAA,EACA,eAAe,EAA2B,EAAA;AACxC,IAAO,OAAA,IAAA,CAAK,KAAM,CAAA,cAAA,CAAe,EAAE,CAAA,CAAA;AAAA,GACrC;AAAA,EAEA,oBACE,SACmB,EAAA;AACnB,IAAA,OAAO,IAAK,CAAA,KAAA,CAAM,mBAAoB,CAAA1B,2BAAA,CAAe,SAAS,CAAC,CAAA,CAAA;AAAA,GACjE;AAAA,EAEA,MAAc,gBACZ,mBACmB,EAAA;AACnB,IAAA,MAAM,WAAqB,EAAC,CAAA;AAC5B,IAAA,OAAO,oBAAoB,MAAQ,EAAA;AACjC,MAAM,MAAA,aAAA,GAAgB,oBAAoB,GAAI,EAAA,CAAA;AAC9C,MAAA,IAAI,CAAC,aAAe,EAAA;AAClB,QAAA,SAAA;AAAA,OACF;AACA,MAAA,MAAM,SAAY,GAAA,MAAM,IAAK,CAAA,YAAA,CAAa,OAAQ,CAAA;AAAA,QAChD,QAAQ,aAAc,CAAA,MAAA;AAAA,QACtB,OAAO,EAAC;AAAA;AAAA,OACT,CAAA,CAAA;AAED,MAAA,IAAI,UAAU,EAAI,EAAA;AAChB,QAAA,IACE,QAAS,CAAA,IAAA;AAAA,UACP,OACEyB,+BAAmB,CAAA,CAAC,CACpB,KAAAA,+BAAA,CAAmB,UAAU,eAAe,CAAA;AAAA,SAEhD,EAAA;AACA,UAAA,MAAM,IAAIC,iBAAA;AAAA,YACR,CAA4B,yBAAA,EAAAD,+BAAA;AAAA,cAC1B,SAAU,CAAA,eAAA;AAAA,aACX,CAAA,CAAA;AAAA,WACH,CAAA;AAAA,SACF;AACA,QAAoB,mBAAA,CAAA,IAAA,CAAK,GAAG,SAAA,CAAU,gBAAgB,CAAA,CAAA;AACtD,QAAS,QAAA,CAAA,IAAA,CAAK,UAAU,eAAe,CAAA,CAAA;AAAA,OAClC,MAAA;AACL,QAAM,MAAA,IAAIC,kBAAW,SAAU,CAAA,MAAA,CAAO,IAAI,MAAM,CAAA,CAAE,IAAK,CAAA,IAAI,CAAC,CAAA,CAAA;AAAA,OAC9D;AAAA,KACF;AACA,IAAO,OAAA,QAAA,CAAA;AAAA,GACT;AAAA,EAEA,MAAc,qBACZ,IACuE,EAAA;AAEvE,IAAA,MAAM,aAAgB,GAAA,IAAA,CAAK,KACxB,CAAA,aAAA,EACA,CAAA,IAAA;AAAA,MAAK,CAAA,SAAA,KACJ,SAAU,CAAA,IAAA,CAAK,CAAK,CAAA,KAAA,CAAA,CAAE,IAAS,KAAA,IAAA,CAAK,IAAQ,IAAA,CAAA,CAAE,MAAW,KAAA,IAAA,CAAK,MAAM,CAAA;AAAA,KACtE,CAAA;AAEF,IAAA,MAAM,MAAS,GAAA;AAAA,MACb,UAAY,EAAA,uBAAA;AAAA,MACZ,IAAM,EAAA,UAAA;AAAA,MACN,QAAU,EAAA;AAAA,QACR,MAAM,0BAA2B,CAAA;AAAA,UAC/B,MAAM,IAAK,CAAA,IAAA;AAAA,UACX,QAAQ,IAAK,CAAA,MAAA;AAAA,SACd,CAAA;AAAA,QACD,SAAW,EAAA,SAAA;AAAA,QACX,WAAa,EAAA;AAAA,UACX,CAACzC,gCAAmB,GAAG,CAAA,EAAG,KAAK,IAAI,CAAA,CAAA,EAAI,KAAK,MAAM,CAAA,CAAA;AAAA,UAClD,CAACC,uCAA0B,GAAG,CAAA,EAAG,KAAK,IAAI,CAAA,CAAA,EAAI,KAAK,MAAM,CAAA,CAAA;AAAA,SAC3D;AAAA,OACF;AAAA,MACA,IAAM,EAAA;AAAA,QACJ,MAAM,IAAK,CAAA,IAAA;AAAA,QACX,QAAQ,IAAK,CAAA,MAAA;AAAA,OACf;AAAA,KACF,CAAA;AACA,IAAA,MAAM,mBAAwC,GAAA;AAAA,MAC5C,EAAE,QAAQ,WAAa,EAAA,CAAA,EAAG,KAAK,IAAI,CAAA,CAAA,EAAI,IAAK,CAAA,MAAM,CAAG,CAAA,EAAA;AAAA,KACvD,CAAA;AACA,IAAA,MAAM,QAAqB,GAAA,MAAM,IAAK,CAAA,eAAA,CAAgB,mBAAmB,CAAA,CAAA;AAEzE,IAAO,OAAA;AAAA,MACL,QAAQ,MAAM,aAAA;AAAA,MACd,QAAA,EAAU,EAAE,GAAG,IAAM,EAAA,EAAA,EAAI,CAAG,EAAA,IAAA,CAAK,IAAI,CAAA,CAAA,EAAI,IAAK,CAAA,MAAM,CAAG,CAAA,EAAA;AAAA,MACvD,QAAA;AAAA,KACF,CAAA;AAAA,GACF;AACF;;AC/HA,eAAsB,mBAAmB,GAAgC,EAAA;AACvE,EAAM,MAAA,WAAA,GAAc,GAAI,CAAA,MAAA,CAAO,cAAc,CAAA,CAAA;AAC7C,EAAA,IAAI,CAAC,WAAa,EAAA;AAChB,IAAM,MAAA,IAAIwC,kBAAW,sBAAsB,CAAA,CAAA;AAAA,GAClC,MAAA,IAAA,CAAC,WAAY,CAAA,KAAA,CAAM,yBAAyB,CAAG,EAAA;AACxD,IAAM,MAAA,IAAIA,kBAAW,sBAAsB,CAAA,CAAA;AAAA,GAC7C;AAEA,EAAA,MAAM,OAAO,GAAI,CAAA,IAAA,CAAA;AACjB,EAAA,IAAI,CAAC,IAAM,EAAA;AACT,IAAM,MAAA,IAAIA,kBAAW,sBAAsB,CAAA,CAAA;AAAA,GAClC,MAAA,IAAA,CAACH,uBAAO,CAAA,aAAA,CAAc,IAAI,CAAG,EAAA;AACtC,IAAM,MAAA,IAAIG,kBAAW,mCAAmC,CAAA,CAAA;AAAA,aAC/C,MAAO,CAAA,IAAA,CAAK,IAAI,CAAA,CAAE,WAAW,CAAG,EAAA;AAEzC,IAAM,MAAA,IAAIA,kBAAW,oBAAoB,CAAA,CAAA;AAAA,GAC3C;AAEA,EAAO,OAAA,IAAA,CAAA;AACT,CAAA;AAEa,MAAA,aAAA,GAAgB4B,MAC1B,MAAO,CAAA;AAAA,EACN,IAAA,EAAMA,MAAE,MAAO,EAAA;AAAA,EACf,MAAA,EAAQA,MAAE,MAAO,EAAA;AAAA,EACjB,QAAA,EAAUA,KAAE,CAAA,OAAA,CAAQ,UAAU,CAAA,CAAE,EAAG,CAAAA,KAAA,CAAE,OAAQ,CAAA,UAAU,CAAC,CAAA,CAAE,QAAS,EAAA;AACrE,CAAC,EACA,MAAO,EAAA,CAAA;AAEY,eAAA,mBAAA,CACpB,KACA,MACY,EAAA;AACZ,EAAM,MAAA,IAAA,GAAO,MAAM,kBAAA,CAAmB,GAAG,CAAA,CAAA;AACzC,EAAI,IAAA;AACF,IAAO,OAAA,MAAM,MAAO,CAAA,KAAA,CAAM,IAAI,CAAA,CAAA;AAAA,WACvB,CAAG,EAAA;AACV,IAAA,MAAM,IAAI5B,iBAAA,CAAW,CAAsB,mBAAA,EAAA,CAAC,CAAE,CAAA,CAAA,CAAA;AAAA,GAChD;AACF,CAAA;AAEO,SAAS,qBAAqB,QAAmB,EAAA;AACtD,EAAA,IAAI,QAAU,EAAA;AACZ,IAAM,MAAA,IAAI6B,uBAAgB,6CAA6C,CAAA,CAAA;AAAA,GACzE;AACF,CAAA;AAEO,SAAS,8BACd,KACsC,EAAA;AACtC,EAAA,IAAI,CAAC,KAAO,EAAA;AACV,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AACA,EAAO,OAAA,CAAC,6BAA6B,KAAK,CAAA,CAAA;AAC5C,CAAA;AAEO,SAAS,6BACd,KACqC,EAAA;AACrC,EAAA,IAAI,CAAC,KAAO,EAAA;AACV,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AACA,EAAO,OAAA,CAAC,CAAE,KAAqC,CAAA,MAAA,CAAA;AACjD,CAAA;AAEA,MAAMC,uBAAgDF,KAAE,CAAA,IAAA;AAAA,EAAK,MAC3DA,MACG,MAAO,CAAA;AAAA,IACN,GAAA,EAAKA,MAAE,MAAO,EAAA;AAAA,IACd,QAAQA,KAAE,CAAA,KAAA,CAAMA,MAAE,MAAO,EAAC,EAAE,QAAS,EAAA;AAAA,GACtC,CAAA,CACA,EAAG,CAAAA,KAAA,CAAE,OAAO,EAAE,GAAA,EAAKE,oBAAmB,EAAC,CAAC,CAAA,CACxC,EAAG,CAAAF,KAAA,CAAE,OAAO,EAAE,KAAA,EAAOA,KAAE,CAAA,KAAA,CAAME,oBAAkB,CAAA,EAAG,CAAC,EACnD,EAAG,CAAAF,KAAA,CAAE,MAAO,CAAA,EAAE,OAAOA,KAAE,CAAA,KAAA,CAAME,oBAAkB,CAAA,EAAG,CAAC,CAAA;AACxD,CAAA,CAAA;AAEa,MAAA,YAAA,GAAoCF,MAAE,MAAO,CAAA;AAAA,EACxD,aAAaA,KAAE,CAAA,KAAA;AAAA,IACbA,KAAE,CAAA,MAAA,CAAO,EAAE,KAAA,EAAOA,MAAE,MAAO,EAAA,EAAG,KAAO,EAAAA,KAAA,CAAE,KAAK,CAAC,KAAA,EAAO,MAAM,CAAC,GAAG,CAAA;AAAA,GAChE;AAAA,EACA,cAAA,EAAgBA,MACb,MAAO,CAAA;AAAA,IACN,IAAA,EAAMA,MAAE,MAAO,EAAA;AAAA,IACf,QAAQA,KAAE,CAAA,KAAA,CAAMA,MAAE,MAAO,EAAC,EAAE,QAAS,EAAA;AAAA,GACtC,EACA,QAAS,EAAA;AAAA,EACZ,gBAAA,EAAkBA,KAAE,CAAA,KAAA,CAAMA,KAAE,CAAA,MAAA,GAAS,EAAG,CAAAA,KAAA,CAAE,IAAK,EAAC,CAAC,CAAA;AAAA,EACjD,MAAA,EAAQE,qBAAmB,QAAS,EAAA;AAAA,EACpC,UAAA,EAAYF,MAAE,OAAQ,EAAA;AAAA,EACtB,KAAO,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAAA,EAC3B,oBAAsB,EAAAA,KAAA,CAAE,KAAM,CAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,EAAG,CAAAA,KAAA,CAAE,IAAK,EAAC,CAAC,CAAA,CAAE,QAAS,EAAA;AAAA,EAChE,UAAY,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAClC,CAAC,CAAA,CAAA;AAEM,SAAS,aAAa,MAAgB,EAAA;AAC3C,EAAM,MAAA,IAAA,GAAO,IAAK,CAAA,SAAA,CAAU,MAAM,CAAA,CAAA;AAClC,EAAA,OAAO,OAAO,IAAK,CAAA,IAAA,EAAM,MAAM,CAAA,CAAE,SAAS,QAAQ,CAAA,CAAA;AACpD,CAAA;AAEO,SAAS,aAAa,aAAuB,EAAA;AAClD,EAAI,IAAA;AACF,IAAA,MAAM,OAAO,MAAO,CAAA,IAAA,CAAK,eAAe,QAAQ,CAAA,CAAE,SAAS,MAAM,CAAA,CAAA;AACjE,IAAA,MAAM,SAAS,YAAa,CAAA,SAAA,CAAU,IAAK,CAAA,KAAA,CAAM,IAAI,CAAC,CAAA,CAAA;AAEtD,IAAI,IAAA,CAAC,OAAO,OAAS,EAAA;AACnB,MAAA,MAAM,IAAI5B,iBAAA,CAAW,CAAqB,kBAAA,EAAA,MAAA,CAAO,KAAK,CAAE,CAAA,CAAA,CAAA;AAAA,KAC1D;AACA,IAAA,OAAO,MAAO,CAAA,IAAA,CAAA;AAAA,WACP,CAAG,EAAA;AACV,IAAA,MAAM,IAAIA,iBAAA,CAAW,CAAqB,kBAAA,EAAA,CAAC,CAAE,CAAA,CAAA,CAAA;AAAA,GAC/C;AACF;;;;;;;;AC/EA,MAAM,gBAAgC,GAAA;AAAA,EACpC,KAAO,EAAA,cAAA;AAAA,EACP,KAAO,EAAA,KAAA;AACT,CAAA,CAAA;AAEA,MAAM,aAAgB,GAAA,EAAA,CAAA;AAEtB,SAAS,gBAAgB,KAA4C,EAAA;AACnE,EAAA,IAAI,CAAC,KAAO,EAAA;AACV,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAEA,EAAI,IAAA,EAAE,KAAO,EAAA,MAAA,EAAW,GAAA,KAAA,CAAA;AAExB,EAAI,IAAA,KAAA,CAAM,UAAU,KAAW,CAAA,EAAA;AAC7B,IAAO,OAAA,EAAE,OAAO,MAAO,EAAA,CAAA;AAAA,GACzB;AAEA,EAAI,IAAA,MAAA,CAAA;AACJ,EAAI,IAAA;AACF,IAAM,MAAA,IAAA,GAAO,OAAO,IAAK,CAAA,KAAA,CAAM,OAAO,QAAQ,CAAA,CAAE,SAAS,MAAM,CAAA,CAAA;AAC/D,IAAS,MAAA,GAAA,IAAA,CAAK,MAAM,IAAI,CAAA,CAAA;AAAA,GAClB,CAAA,MAAA;AACN,IAAM,MAAA,IAAIA,kBAAW,6CAA6C,CAAA,CAAA;AAAA,GACpE;AAEA,EAAI,IAAA,MAAA,CAAO,UAAU,KAAW,CAAA,EAAA;AAC9B,IAAA,IAAI,CAAC,MAAA,CAAO,SAAU,CAAA,MAAA,CAAO,KAAK,CAAG,EAAA;AACnC,MAAM,MAAA,IAAIA,kBAAW,iDAAiD,CAAA,CAAA;AAAA,KACxE;AACA,IAAA,KAAA,GAAQ,MAAO,CAAA,KAAA,CAAA;AAAA,GACjB;AAEA,EAAI,IAAA,MAAA,CAAO,WAAW,KAAW,CAAA,EAAA;AAC/B,IAAA,IAAI,CAAC,MAAA,CAAO,SAAU,CAAA,MAAA,CAAO,MAAM,CAAG,EAAA;AACpC,MAAM,MAAA,IAAIA,kBAAW,iDAAiD,CAAA,CAAA;AAAA,KACxE;AACA,IAAA,MAAA,GAAS,MAAO,CAAA,MAAA,CAAA;AAAA,GAClB;AAEA,EAAO,OAAA,EAAE,OAAO,MAAO,EAAA,CAAA;AACzB,CAAA;AAEA,SAAS,oBACP,KACQ,EAAA;AACR,EAAM,MAAA,EAAE,KAAO,EAAA,MAAA,EAAW,GAAA,KAAA,CAAA;AAC1B,EAAA,MAAM,OAAO,IAAK,CAAA,SAAA,CAAU,EAAE,KAAA,EAAO,QAAQ,CAAA,CAAA;AAC7C,EAAA,MAAM,SAAS,MAAO,CAAA,IAAA,CAAK,MAAM,MAAM,CAAA,CAAE,SAAS,QAAQ,CAAA,CAAA;AAC1D,EAAO,OAAA,MAAA,CAAA;AACT,CAAA;AAEA,SAAS,aACP,YACA,EAAA,EAAA,EACA,QACA,MAAkB,GAAA,KAAA,EAClB,gBAAgB,WACV,EAAA;AAtHR,EAAA,IAAA,EAAA,CAAA;AAuHE,EAAM,MAAA,GAAA,GAAM,MAAO,CAAA,GAAA,CAAI,WAAY,EAAA,CAAA;AACnC,EAAA,MAAM,UAAS,EAAO,GAAA,MAAA,CAAA,MAAA,KAAP,mBAAe,GAAI,CAAA,CAAA,CAAA,KAAK,EAAE,WAAY,EAAA,CAAA,CAAA;AAKrD,EAAA,MAAM,UAAa,GAAA,EAAA,CAAgB,QAAQ,CAAA,CACxC,OAAO,kBAAkB,CAAA,CACzB,KAAM,CAAA,EAAE,GAAI,EAAC,CACb,CAAA,QAAA,CAAS,SAAS,SAAY,GAAA;AAC7B,IAAI,IAAA,CAAA,MAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,MAAA,CAAQ,YAAW,CAAG,EAAA;AACxB,MAAA,IAAA,CAAK,MAAM,EAAE,KAAA,EAAO,OAAO,EAAG,CAAA,CAAC,GAAG,CAAA,CAAA;AAAA,eACzB,MAAQ,EAAA;AACjB,MAAK,IAAA,CAAA,QAAA,CAAS,OAAS,EAAA,IAAA,EAAM,MAAM,CAAA,CAAA;AAAA,KACrC;AAAA,GACD,CAAA,CAAA;AACH,EAAA,YAAA,CAAa,QAAS,CAAA,aAAA,EAAe,MAAS,GAAA,QAAA,GAAW,MAAM,UAAU,CAAA,CAAA;AAC3E,CAAA;AAEA,SAAS,uBACP,MACgC,EAAA;AAChC,EAAO,OAAA,MAAA,CAAO,eAAe,KAAK,CAAA,CAAA;AACpC,CAAA;AAEA,SAAS,iBACP,MACqC,EAAA;AACrC,EAAO,OAAA,MAAA,CAAO,eAAe,OAAO,CAAA,CAAA;AACtC,CAAA;AAEA,SAAS,uBACP,MACiC,EAAA;AACjC,EAAO,OAAA,MAAA,CAAO,eAAe,KAAK,CAAA,CAAA;AACpC,CAAA;AAEA,SAAS,YACP,MACA,EAAA,KAAA,EACA,IACA,MAAkB,GAAA,KAAA,EAClB,gBAAgB,WACG,EAAA;AACnB,EAAI,IAAA,sBAAA,CAAuB,MAAM,CAAG,EAAA;AAClC,IAAA,OAAO,YAAY,MAAO,CAAA,GAAA,EAAK,OAAO,EAAI,EAAA,CAAC,QAAQ,aAAa,CAAA,CAAA;AAAA,GAClE;AAEA,EAAI,IAAA,sBAAA,CAAuB,MAAM,CAAG,EAAA;AAClC,IAAO,OAAA,KAAA,CAAM,QAAS,CAAA,SAAS,cAAiB,GAAA;AAC9C,MAAA,YAAA,CAAa,IAAM,EAAA,EAAA,EAAI,MAAQ,EAAA,MAAA,EAAQ,aAAa,CAAA,CAAA;AAAA,KACrD,CAAA,CAAA;AAAA,GACH;AAEA,EAAA,OAAO,MAAM,MAAS,GAAA,aAAA,GAAgB,UAAU,CAAA,CAAE,SAAS,cAAiB,GAAA;AA7K9E,IAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AA8KI,IAAI,IAAA,gBAAA,CAAiB,MAAM,CAAG,EAAA;AAC5B,MAAA,KAAA,MAAW,SAAa,IAAA,CAAA,EAAA,GAAA,MAAA,CAAO,KAAP,KAAA,IAAA,GAAA,EAAA,GAAgB,EAAI,EAAA;AAC1C,QAAK,IAAA,CAAA,OAAA;AAAA,UAAQ,cACX,WAAY,CAAA,SAAA,EAAW,QAAU,EAAA,EAAA,EAAI,OAAO,aAAa,CAAA;AAAA,SAC3D,CAAA;AAAA,OACF;AAAA,KACK,MAAA;AACL,MAAA,KAAA,MAAW,SAAa,IAAA,CAAA,EAAA,GAAA,MAAA,CAAO,KAAP,KAAA,IAAA,GAAA,EAAA,GAAgB,EAAI,EAAA;AAC1C,QAAK,IAAA,CAAA,QAAA;AAAA,UAAS,cACZ,WAAY,CAAA,SAAA,EAAW,QAAU,EAAA,EAAA,EAAI,OAAO,aAAa,CAAA;AAAA,SAC3D,CAAA;AAAA,OACF;AAAA,KACF;AAAA,GACD,CAAA,CAAA;AACH,CAAA;AAEO,MAAM,sBAAkD,CAAA;AAAA,EAK7D,YAAY,OAIT,EAAA;AARH,IAAiB9C,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;AAOf,IAAA,IAAA,CAAK,WAAW,OAAQ,CAAA,QAAA,CAAA;AACxB,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA,CAAA;AACtB,IAAA,IAAA,CAAK,WAAW,OAAQ,CAAA,QAAA,CAAA;AAAA,GAC1B;AAAA,EAEA,MAAM,SAAS,OAAsD,EAAA;AA7MvE,IAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AA8MI,IAAA,MAAM,KAAK,IAAK,CAAA,QAAA,CAAA;AAEhB,IAAA,IAAI,aACF,GAAA,EAAA,CAAuB,gBAAgB,CAAA,CAAE,OAAO,kBAAkB,CAAA,CAAA;AAEpE,IAAA,CAAA,EAAA,GAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,UAAT,IAAgB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,CAAQ,CAAC,EAAE,KAAA,IAAS,KAAU,KAAA;AAC5C,MAAM,MAAA,KAAA,GAAQ,SAAS,KAAK,CAAA,CAAA,CAAA;AAC5B,MAAA,aAAA,GAAgB,aAAc,CAAA,aAAA;AAAA,QAC5B,EAAE,CAAC,KAAK,GAAG,QAAS,EAAA;AAAA,QACpB,SAAS,OAAO,KAAO,EAAA;AACrB,UAAA,KAAA,CACG,GAAG,CAAG,EAAA,KAAK,CAAc,UAAA,CAAA,EAAA,0BAA0B,EACnD,KAAM,CAAA,CAAA,EAAG,KAAK,CAAA,IAAA,CAAA,EAAQ,GAAG,GAAI,CAAA,GAAA,EAAK,CAAC,KAAK,CAAC,CAAC,CAAA,CAAA;AAAA,SAC/C;AAAA,OACF,CAAA;AAAA,KACF,CAAA,CAAA;AAEA,IAAgB,aAAA,GAAA,aAAA,CAAc,aAAa,6BAA6B,CAAA,CAAA;AAExE,IAAA,IAAI,mCAAS,MAAQ,EAAA;AACnB,MAAgB,aAAA,GAAA,WAAA;AAAA,QACd,OAAQ,CAAA,MAAA;AAAA,QACR,aAAA;AAAA,QACA,EAAA;AAAA,QACA,KAAA;AAAA,QACA,0BAAA;AAAA,OACF,CAAA;AAAA,KACF;AAEA,IAAA,CAAA,EAAA,GAAA,OAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAS,UAAT,IAAgB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,OAAA,CAAQ,CAAC,EAAE,KAAA,IAAS,KAAU,KAAA;AAC5C,MAAA,IAAI,EAAG,CAAA,MAAA,CAAO,MAAO,CAAA,MAAA,KAAW,IAAM,EAAA;AAEpC,QAAA,aAAA,GAAgB,cAAc,OAAQ,CAAA;AAAA,UACpC,EAAE,MAAQ,EAAA,CAAA,MAAA,EAAS,KAAK,CAAU,MAAA,CAAA,EAAA,KAAA,EAAO,OAAO,MAAO,EAAA;AAAA,SACxD,CAAA,CAAA;AAAA,OACI,MAAA;AAIL,QAAA,aAAA,GAAgB,cAAc,OAAQ,CAAA;AAAA,UACpC,EAAE,QAAQ,CAAS,MAAA,EAAA,KAAK,UAAU,KAAO,EAAA,KAAA,CAAA,EAAW,OAAO,MAAO,EAAA;AAAA,UAClE,EAAE,MAAA,EAAQ,CAAS,MAAA,EAAA,KAAK,UAAU,KAAM,EAAA;AAAA,SACzC,CAAA,CAAA;AAAA,OACH;AAAA,KACF,CAAA,CAAA;AACA,IAAgB,aAAA,GAAA,aAAA,CAAc,OAAQ,CAAA,0BAAA,EAA4B,KAAK,CAAA,CAAA;AAEvE,IAAA,MAAM,EAAE,KAAO,EAAA,MAAA,EAAW,GAAA,eAAA,CAAgB,mCAAS,UAAU,CAAA,CAAA;AAC7D,IAAA,IAAI,UAAU,KAAW,CAAA,EAAA;AACvB,MAAgB,aAAA,GAAA,aAAA,CAAc,KAAM,CAAA,KAAA,GAAQ,CAAC,CAAA,CAAA;AAAA,KAC/C;AACA,IAAA,IAAI,WAAW,KAAW,CAAA,EAAA;AACxB,MAAgB,aAAA,GAAA,aAAA,CAAc,OAAO,MAAM,CAAA,CAAA;AAAA,KAC7C;AAEA,IAAA,IAAI,OAAO,MAAM,aAAA,CAAA;AACjB,IAAI,IAAA,QAAA,CAAA;AACJ,IAAA,IAAI,KAAU,KAAA,KAAA,CAAA,IAAa,IAAK,CAAA,MAAA,IAAU,KAAO,EAAA;AAC/C,MAAW,QAAA,GAAA,EAAE,aAAa,KAAM,EAAA,CAAA;AAAA,KAC3B,MAAA;AACL,MAAO,IAAA,GAAA,IAAA,CAAK,KAAM,CAAA,CAAA,EAAG,CAAE,CAAA,CAAA,CAAA;AACvB,MAAW,QAAA,GAAA;AAAA,QACT,WAAa,EAAA,IAAA;AAAA,QACb,WAAW,mBAAoB,CAAA;AAAA,UAC7B,KAAA;AAAA,UACA,MAAA,EAAA,CAAS,0BAAU,CAAK,IAAA,KAAA;AAAA,SACzB,CAAA;AAAA,OACH,CAAA;AAAA,KACF;AAEA,IAAI,IAAA,QAAA,GAAqB,KAAK,GAAI,CAAA,CAAA,CAAA,KAAK,KAAK,KAAM,CAAA,CAAA,CAAE,YAAa,CAAC,CAAA,CAAA;AAElE,IAAA,IAAI,mCAAS,MAAQ,EAAA;AACnB,MAAA,QAAA,GAAW,SAAS,GAAI,CAAA,CAAA,CAAA,KAAK,OAAQ,CAAA,MAAA,CAAQ,CAAC,CAAC,CAAA,CAAA;AAAA,KACjD;AAOA,IAAA,KAAA,MAAW,UAAU,QAAU,EAAA;AAC7B,MAAA,IAAI,OAAO,SAAW,EAAA;AACpB,QAAW,KAAA,MAAA,QAAA,IAAY,OAAO,SAAkB,EAAA;AAC9C,UAAA,IAAI,CAAC,QAAA,CAAS,SAAa,IAAA,QAAA,CAAS,MAAQ,EAAA;AAG1C,YAAS,QAAA,CAAA,SAAA,GAAY6C,+BAAmB,CAAA,QAAA,CAAS,MAAM,CAAA,CAAA;AAAA,WAC9C,MAAA,IAAA,CAAC,QAAS,CAAA,MAAA,IAAU,SAAS,SAAW,EAAA;AAIjD,YAAS,QAAA,CAAA,MAAA,GAASzB,2BAAe,CAAA,QAAA,CAAS,SAAS,CAAA,CAAA;AAAA,WACrD;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAEA,IAAO,OAAA;AAAA,MACL,QAAA;AAAA,MACA,QAAA;AAAA,KACF,CAAA;AAAA,GACF;AAAA,EAEA,MAAM,cACJ,OACgC,EAAA;AAChC,IAAM,MAAA,MAAA,uBAAa,GAAoB,EAAA,CAAA;AAEvC,IAAA,KAAA,MAAW,KAAS,IAAAyD,YAAA,CAAY,OAAQ,CAAA,UAAA,EAAY,GAAG,CAAG,EAAA;AACxD,MAAA,IAAI,KAAQ,GAAA,IAAA,CAAK,QAA6B,CAAA,gBAAgB,CAC3D,CAAA,SAAA;AAAA,QACC,eAAA;AAAA,QACA,yBAAA;AAAA,QACA,0BAAA;AAAA,QAED,MAAO,CAAA;AAAA,QACN,SAAW,EAAA,0BAAA;AAAA,QACX,MAAQ,EAAA,6BAAA;AAAA,OACT,CAAA,CACA,OAAQ,CAAA,0BAAA,EAA4B,KAAK,CAAA,CAAA;AAE5C,MAAA,IAAI,mCAAS,MAAQ,EAAA;AACnB,QAAQ,KAAA,GAAA,WAAA;AAAA,UACN,OAAQ,CAAA,MAAA;AAAA,UACR,KAAA;AAAA,UACA,IAAK,CAAA,QAAA;AAAA,UACL,KAAA;AAAA,UACA,yBAAA;AAAA,SACF,CAAA;AAAA,OACF;AAEA,MAAW,KAAA,MAAA,GAAA,IAAO,MAAM,KAAO,EAAA;AAC7B,QAAO,MAAA,CAAA,GAAA,CAAI,GAAI,CAAA,SAAA,EAAW,GAAI,CAAA,MAAA,GAAS,KAAK,KAAM,CAAA,GAAA,CAAI,MAAM,CAAA,GAAI,IAAI,CAAA,CAAA;AAAA,OACtE;AAAA,KACF;AAEA,IAAA,IAAI,KAAQ,GAAA,OAAA,CAAQ,UAAW,CAAA,GAAA,CAAI,CAAI,GAAA,KAAA;AAvV3C,MAAA,IAAA,EAAA,CAAA;AAuV8C,MAAO,OAAA,CAAA,EAAA,GAAA,MAAA,CAAA,GAAA,CAAI,GAAG,CAAA,KAAd,IAAmB,GAAA,EAAA,GAAA,IAAA,CAAA;AAAA,KAAI,CAAA,CAAA;AAEjE,IAAA,IAAI,QAAQ,MAAQ,EAAA;AAClB,MAAA,KAAA,GAAQ,MAAM,GAAI,CAAA,CAAA,CAAA,KAAK,KAAK,OAAQ,CAAA,MAAA,CAAQ,CAAC,CAAC,CAAA,CAAA;AAAA,KAChD;AAEA,IAAA,OAAO,EAAE,KAAM,EAAA,CAAA;AAAA,GACjB;AAAA,EAEA,MAAM,cACJ,OACgC,EAAA;AAlWpC,IAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AAmWI,IAAA,MAAM,KAAK,IAAK,CAAA,QAAA,CAAA;AAEhB,IAAM,MAAA,KAAA,GAAA,CAAQ,EAAQ,GAAA,OAAA,CAAA,KAAA,KAAR,IAAiB,GAAA,EAAA,GAAA,aAAA,CAAA;AAE/B,IAAA,MAAM,MAEF,GAAA;AAAA,MACF,WAAA,EAAa,CAAC,gBAAgB,CAAA;AAAA,MAC9B,UAAY,EAAA,KAAA;AAAA,MACZ,GAAG,uBAAuB,OAAO,CAAA;AAAA,KACnC,CAAA;AAEA,IAAA,MAAM,sBAAsB,MAAO,CAAA,UAAA,CAAA;AAEnC,IAAI,IAAA,MAAA,CAAO,WAAY,CAAA,MAAA,GAAS,CAAG,EAAA;AACjC,MAAK,IAAA,CAAA,MAAA,CAAO,KAAK,CAAqD,mDAAA,CAAA,CAAA,CAAA;AAAA,KACxE;AAEA,IAAA,MAAM,SAAyB,GAAA;AAAA,MAC7B,GAAG,gBAAA;AAAA,MACH,GAAG,MAAO,CAAA,WAAA,CAAY,CAAC,CAAA;AAAA,KACzB,CAAA;AAEA,IAAA,MAAM,CAAC,uBAAyB,EAAA,WAAW,CACzC,GAAA,MAAA,CAAO,oBAAoB,EAAC,CAAA;AAE9B,IAAA,MAAM,OAAU,GAAA,EAAA,CAAG,QAAQ,CAAA,CACxB,IAAK,CAAA,gBAAA,EAAkB,kBAAoB,EAAA,0BAA0B,CACrE,CAAA,KAAA,CAAM,YAAc,EAAA,SAAA,CAAU,KAAK,CAAA,CAAA;AAEtC,IAAA,IAAI,OAAO,MAAQ,EAAA;AACjB,MAAA,WAAA,CAAY,MAAO,CAAA,MAAA,EAAQ,OAAS,EAAA,EAAA,EAAI,OAAO,kBAAkB,CAAA,CAAA;AAAA,KACnE;AAEA,IAAA,MAAM,4BAA+B,GAAA,CAAA,EAAA,GAAA,CAAA,EAAA,GAAA,MAAA,CAAO,cAAP,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAuB,SAAvB,IAA6B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,IAAA,EAAA,CAAA;AAClE,IAAM,MAAA,gBAAA,GAAA,CAAmB,kBAAO,cAAP,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAuB,WAAvB,IAAiC,GAAA,EAAA,GAAA,CAAC,UAAU,KAAK,CAAA,CAAA;AAC1E,IAAA,IAAI,4BAA8B,EAAA;AAChC,MAAA,IACE,iBAAiB,MAAW,KAAA,CAAA,IAC5B,iBAAiB,CAAC,CAAA,KAAM,UAAU,KAClC,EAAA;AAGA,QAAQ,OAAA,CAAA,WAAA;AAAA,UACN,cAAA;AAAA,UACA,CAAI,CAAA,EAAA,4BAAA,CAA6B,iBAAkB,CAAA,OAAO,CAAC,CAAA,CAAA,CAAA;AAAA,SAC7D,CAAA;AAAA,OACK,MAAA;AACL,QAAA,MAAM,UAAa,GAAA,EAAA,CAAgB,QAAQ,CAAA,CACxC,MAAO,CAAA,kBAAkB,CACzB,CAAA,OAAA,CAAQ,KAAO,EAAA,gBAAgB,CAC/B,CAAA,QAAA,CAAS,SAAS,SAAY,GAAA;AAC7B,UAAK,IAAA,CAAA,WAAA;AAAA,YACH,cAAA;AAAA,YACA,CAAI,CAAA,EAAA,4BAAA,CAA6B,iBAAkB,CAAA,OAAO,CAAC,CAAA,CAAA,CAAA;AAAA,WAC7D,CAAA;AAAA,SACD,CAAA,CAAA;AACH,QAAQ,OAAA,CAAA,QAAA,CAAS,kBAAoB,EAAA,IAAA,EAAM,UAAU,CAAA,CAAA;AAAA,OACvD;AAAA,KACF;AAEA,IAAM,MAAA,UAAA,GAAa,QAAQ,KAAM,EAAA,CAAA;AAEjC,IAAM,MAAA,oBAAA,GAAuB,UAAU,KAAU,KAAA,MAAA,CAAA;AAEjD,IAAA,IAAI,uBAAyB,EAAA;AAC3B,MAAQ,OAAA,CAAA,QAAA,CAAS,SAAS,MAAS,GAAA;AACjC,QAAK,IAAA,CAAA,KAAA;AAAA,UACH,OAAA;AAAA,UACA,mBAAA,KAAwB,uBAAuB,GAAM,GAAA,GAAA;AAAA,UACrD,uBAAA;AAAA,SAEC,CAAA,OAAA,CAAQ,OAAS,EAAA,GAAA,EAAK,uBAAuB,CAC7C,CAAA,QAAA;AAAA,UACC,kBAAA;AAAA,UACA,mBAAA,KAAwB,uBAAuB,GAAM,GAAA,GAAA;AAAA,UACrD,WAAA;AAAA,SACF,CAAA;AAAA,OACH,CAAA,CAAA;AAAA,KACH;AAEA,IAAA,OAAA,CACG,OAAQ,CAAA;AAAA,MACP;AAAA,QACE,MAAQ,EAAA,OAAA;AAAA,QACR,OAAO,mBACH,GAAA,WAAA,CAAY,SAAU,CAAA,KAAK,IAC3B,SAAU,CAAA,KAAA;AAAA,OAChB;AAAA,MACA;AAAA,QACE,MAAQ,EAAA,kBAAA;AAAA,QACR,OAAO,mBACH,GAAA,WAAA,CAAY,SAAU,CAAA,KAAK,IAC3B,SAAU,CAAA,KAAA;AAAA,OAChB;AAAA,KACD,CAEA,CAAA,KAAA,CAAM,mBAAsB,GAAA,KAAA,GAAQ,QAAQ,CAAC,CAAA,CAAA;AAEhD,IAAA,UAAA,CAAW,KAAM,CAAA,kBAAA,EAAoB,EAAE,EAAA,EAAI,SAAS,CAAA,CAAA;AAEpD,IAAM,MAAA,CAAC,IAAM,EAAA,CAAC,EAAE,KAAA,EAAO,CAAC,CAAA,GAAI,MAAM,OAAA,CAAQ,GAAI,CAAA;AAAA,MAC5C,KAAA,GAAQ,CAAI,GAAA,OAAA,GAAU,EAAC;AAAA;AAAA;AAAA;AAAA;AAAA,MAKvB,OAAO,MAAO,CAAA,UAAA,KAAe,WACzB,GAAA,UAAA,GACA,CAAC,EAAE,KAAA,EAAO,MAAO,CAAA,UAAA,EAAY,CAAA;AAAA,KAClC,CAAA,CAAA;AAED,IAAM,MAAA,UAAA,GAAa,OAAO,KAAK,CAAA,CAAA;AAE/B,IAAA,IAAI,mBAAqB,EAAA;AACvB,MAAA,IAAA,CAAK,OAAQ,EAAA,CAAA;AAAA,KACf;AACA,IAAA,MAAM,cACJ,GAAA,KAAA,GAAQ,CAAM,KAAA,mBAAA,IAAuB,KAAK,MAAS,GAAA,KAAA,CAAA,CAAA;AAGrD,IAAI,IAAA,IAAA,CAAK,SAAS,KAAO,EAAA;AACvB,MAAA,IAAA,CAAK,MAAU,IAAA,CAAA,CAAA;AAAA,KACjB;AAEA,IAAM,MAAA,gBAAA,GAAmB,OAAO,oBAAyB,KAAA,KAAA,CAAA,CAAA;AAEzD,IAAM,MAAA,QAAA,GAAW,KAAK,CAAC,CAAA,CAAA;AACvB,IAAA,MAAM,OAAU,GAAA,IAAA,CAAK,IAAK,CAAA,MAAA,GAAS,CAAC,CAAA,CAAA;AAEpC,IAAM,MAAA,oBAAA,GAAuB,OAAO,oBAAwB,IAAA;AAAA,MAC1D,QAAU,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAA,KAAA;AAAA,MACV,QAAU,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAA,SAAA;AAAA,KACZ,CAAA;AAEA,IAAA,MAAM,aAAiC,cACnC,GAAA;AAAA,MACE,GAAG,MAAA;AAAA,MACH,gBAAA,EAAkB,kBAAkB,OAAO,CAAA;AAAA,MAC3C,oBAAA;AAAA,MACA,UAAY,EAAA,KAAA;AAAA,MACZ,UAAA;AAAA,KAEF,GAAA,KAAA,CAAA,CAAA;AAEJ,IAAA,MAAM,UACJ,GAAA,CAAC,gBACD,IAAA,IAAA,CAAK,MAAS,GAAA,CAAA,IACd,CAACC,cAAA,CAAQ,iBAAkB,CAAA,QAAQ,CAAG,EAAA,MAAA,CAAO,oBAAoB,CAC7D,GAAA;AAAA,MACE,GAAG,MAAA;AAAA,MACH,gBAAA,EAAkB,kBAAkB,QAAQ,CAAA;AAAA,MAC5C,sBAAsB,MAAO,CAAA,oBAAA;AAAA,MAC7B,UAAY,EAAA,IAAA;AAAA,MACZ,UAAA;AAAA,KAEF,GAAA,KAAA,CAAA,CAAA;AAEN,IAAA,MAAM,QAAQ,IACX,CAAA,GAAA,CAAI,OAAK,IAAK,CAAA,KAAA,CAAM,EAAE,YAAa,CAAC,CACpC,CAAA,GAAA,CAAI,OAAM,OAAQ,CAAA,MAAA,GAAS,QAAQ,MAAO,CAAA,CAAC,IAAI,CAAE,CAAA,CAAA;AAEpD,IAAO,OAAA;AAAA,MACL,KAAA;AAAA,MACA,QAAU,EAAA;AAAA,QACR,GAAI,CAAC,CAAC,UAAA,IAAc,EAAE,UAAW,EAAA;AAAA,QACjC,GAAI,CAAC,CAAC,UAAA,IAAc,EAAE,UAAW,EAAA;AAAA,OACnC;AAAA,MACA,UAAA;AAAA,KACF,CAAA;AAAA,GACF;AAAA,EAEA,MAAM,kBAAkB,GAA4B,EAAA;AAClD,IAAM,MAAA,QAAA,GAAW,IAAK,CAAA,QAAA,CAAS,MAAO,CAAA,MAAA,CAAA;AAUtC,IAAA,IAAI,QAAS,CAAA,MAAA,CAAO,QAAS,CAAA,OAAO,CAAG,EAAA;AAGrC,MAAA,MAAM,OAAU,GAAA,MAAM,IAAK,CAAA,QAAA,CAA4B,eAAe,CAAA,CACnE,MAAO,CAAA,WAAW,CAClB,CAAA,OAAA,CAAQ,YAAc,EAAA,SAAS,QAAQ,OAAS,EAAA;AAC/C,QAAO,OAAA,OAAA,CACJ,IAAwB,CAAA,eAAe,CACvC,CAAA,SAAA;AAAA,UACC,0BAAA;AAAA,UACA;AAAA,YACE,4CACE,EAAA,0BAAA;AAAA,WACJ;AAAA,UAED,KAAM,CAAA,yBAAA,EAA2B,KAAK,GAAG,CAAA,CACzC,OAAO,4CAA4C,CAAA,CAAA;AAAA,OACvD,CAAA,CAAA;AACH,MAAA,MAAM,IAAK,CAAA,QAAA,CAA4B,eAAe,CAAA,CACnD,MAAO,CAAA;AAAA,QACN,WAAa,EAAA,mBAAA;AAAA,QACb,cAAgB,EAAA,IAAA,CAAK,QAAS,CAAA,EAAA,CAAG,GAAI,EAAA;AAAA,OACtC,CACA,CAAA,OAAA;AAAA,QACC,WAAA;AAAA,QACA,OAAQ,CAAA,GAAA,CAAI,CAAO,GAAA,KAAA,GAAA,CAAI,SAAS,CAAA;AAAA,OAClC,CAAA;AAAA,KACG,MAAA;AACL,MAAA,MAAM,IAAK,CAAA,QAAA,CAA4B,eAAe,CAAA,CACnD,MAAO,CAAA;AAAA,QACN,WAAa,EAAA,mBAAA;AAAA,QACb,cAAgB,EAAA,IAAA,CAAK,QAAS,CAAA,EAAA,CAAG,GAAI,EAAA;AAAA,OACtC,CACA,CAAA,OAAA,CAAQ,YAAc,EAAA,SAAS,QAAQ,OAAS,EAAA;AAC/C,QAAO,OAAA,OAAA,CACJ,IAAwB,CAAA,eAAe,CACvC,CAAA,SAAA;AAAA,UACC,0BAAA;AAAA,UACA;AAAA,YACE,4CACE,EAAA,0BAAA;AAAA,WACJ;AAAA,UAED,KAAM,CAAA,yBAAA,EAA2B,KAAK,GAAG,CAAA,CACzC,OAAO,4CAA4C,CAAA,CAAA;AAAA,OACvD,CAAA,CAAA;AAAA,KACL;AAMA,IAAM,MAAA,aAAA,GAAgB,MAAM,IAAK,CAAA,QAAA,CAC9B,KAAqB,WAAW,CAAA,CAChC,UAAuC,eAAiB,EAAA;AAAA,MACvD,0BAA4B,EAAA,6BAAA;AAAA,KAC7B,CACA,CAAA,KAAA,CAAM,iCAAmC,EAAA,GAAA,EAAK,GAAG,CACjD,CAAA,QAAA,CAAS,yBAA2B,EAAA,IAAA,EAAM,GAAG,CAC7C,CAAA,MAAA,CAAO,EAAE,GAAK,EAAA,6BAAA,EAA+B,CAC7C,CAAA,KAAA;AAAA,MAAM,WACL,KACG,CAAA,IAAA,CAAqB,WAAW,CAAA,CAChC,UAAuC,eAAiB,EAAA;AAAA,QACvD,0BAA4B,EAAA,6BAAA;AAAA,OAC7B,CACA,CAAA,KAAA,CAAM,iCAAmC,EAAA,GAAA,EAAK,GAAG,CACjD,CAAA,QAAA,CAAS,yBAA2B,EAAA,IAAA,EAAM,GAAG,CAC7C,CAAA,MAAA,CAAO,EAAE,GAAA,EAAK,+BAA+B,CAAA;AAAA,KAClD,CAAA;AAEF,IAAM,MAAA,IAAA,CAAK,SAA4B,eAAe,CAAA,CACnD,MAAM,WAAa,EAAA,GAAG,EACtB,MAAO,EAAA,CAAA;AAEV,IAAM,MAAA,IAAA,CAAK,SAAS,MAAO,CAAA;AAAA,MACzB,UAAA,EAAY,IAAI,GAAI,CAAA,aAAA,CAAc,IAAI,CAAK,CAAA,KAAA,CAAA,CAAE,GAAG,CAAC,CAAA;AAAA,KAClD,CAAA,CAAA;AAAA,GACH;AAAA,EAEA,MAAM,eAAe,OAAkD,EAAA;AACrE,IAAM,MAAA,CAAC,OAAO,CAAI,GAAA,MAAM,KAAK,QAA4B,CAAA,eAAe,CACrE,CAAA,QAAA,CAA6B,gBAAkB,EAAA;AAAA,MAC9C,yBAA2B,EAAA,0BAAA;AAAA,KAC5B,CACA,CAAA,KAAA,CAAM,4BAA4B,GAAK,EAAA,OAAO,EAC9C,MAAO,CAAA;AAAA,MACN,UAAY,EAAA,6BAAA;AAAA,KACb,CAAA,CAAA;AAEH,IAAA,IAAI,CAAC,OAAS,EAAA;AACZ,MAAA,MAAM,IAAI/E,oBAAA,CAAc,CAAkB,eAAA,EAAA,OAAO,CAAE,CAAA,CAAA,CAAA;AAAA,KACrD;AAEA,IAAA,MAAM,UAAa,GAAA,IAAA,CAAK,KAAM,CAAA,OAAA,CAAQ,UAAU,CAAA,CAAA;AAChD,IAAM,MAAA,cAAA,uBAAqB,GAAY,EAAA,CAAA;AACvC,IAAM,MAAA,IAAA,GAAO,IAAI,KAAc,EAAA,CAAA;AAC/B,IAAM,MAAA,KAAA,GAAQ,IAAI,KAAsD,EAAA,CAAA;AAExE,IAAA,KAAA,IACM,UAA8B,UAClC,EAAA,OAAA,EACA,OAAU,GAAA,IAAA,CAAK,KACf,EAAA;AACA,MAAM,MAAA,UAAA,GAAa8C,gCAAmB,OAAO,CAAA,CAAA;AAC7C,MAAA,cAAA,CAAe,IAAI,UAAU,CAAA,CAAA;AAE7B,MAAM,MAAA,UAAA,GAAa,MAAM,IAAK,CAAA,QAAA;AAAA,QAC5B,0BAAA;AAAA,OACF,CACG,UAA6B,eAAiB,EAAA;AAAA,QAC7C,4CACE,EAAA,0BAAA;AAAA,OACH,CACA,CAAA,SAAA,CAA8B,gBAAkB,EAAA;AAAA,QAC/C,yBAA2B,EAAA,0BAAA;AAAA,OAC5B,CACA,CAAA,KAAA,CAAM,8CAA8C,GAAK,EAAA,UAAU,EACnE,MAAO,CAAA;AAAA,QACN,eAAiB,EAAA,0BAAA;AAAA,QACjB,gBAAkB,EAAA,6BAAA;AAAA,OACnB,CAAA,CAAA;AAEH,MAAA,MAAM,aAAuB,EAAC,CAAA;AAC9B,MAAA,KAAA,MAAW,EAAE,eAAA,EAAiB,gBAAiB,EAAA,IAAK,UAAY,EAAA;AAC9D,QAAA,UAAA,CAAW,KAAK,eAAe,CAAA,CAAA;AAC/B,QAAA,IAAI,CAAC,cAAA,CAAe,GAAI,CAAA,eAAe,CAAG,EAAA;AACxC,UAAA,cAAA,CAAe,IAAI,eAAe,CAAA,CAAA;AAClC,UAAA,IAAA,CAAK,IAAK,CAAA,IAAA,CAAK,KAAM,CAAA,gBAAgB,CAAC,CAAA,CAAA;AAAA,SACxC;AAAA,OACF;AAEA,MAAA,KAAA,CAAM,IAAK,CAAA;AAAA,QACT,MAAQ,EAAA,OAAA;AAAA,QACR,gBAAkB,EAAA,UAAA;AAAA,OACnB,CAAA,CAAA;AAAA,KACH;AAEA,IAAO,OAAA;AAAA,MACL,aAAA,EAAeA,gCAAmB,UAAU,CAAA;AAAA,MAC5C,KAAA;AAAA,KACF,CAAA;AAAA,GACF;AAAA,EAEA,MAAM,OAAO,OAA6D,EAAA;AACxE,IAAA,MAAM,SAAyC,EAAC,CAAA;AAChD,IAAA,MAAM,KAAK,IAAK,CAAA,QAAA,CAAA;AAEhB,IAAW,KAAA,MAAA,KAAA,IAAS,QAAQ,MAAQ,EAAA;AAClC,MAAM,MAAA,OAAA,GAAU,EAAgB,CAAA,QAAQ,CACrC,CAAA,KAAA,CAAM,YAAc,EAAA,KAAA,CAAM,iBAAkB,CAAA,OAAO,CAAC,CAAA,CACpD,YAAa,CAAA,uBAAuB,EACpC,MAAO,CAAA,EAAE,KAAO,EAAA,uBAAA,EAAyB,KAAO,EAAA,EAAA,CAAG,GAAI,CAAA,UAAU,CAAE,EAAC,CACpE,CAAA,OAAA,CAAQ,uBAAuB,CAAA,CAAA;AAElC,MAAA,IAAI,mCAAS,MAAQ,EAAA;AACnB,QAAA,WAAA,CAAY,OAAQ,CAAA,MAAA,EAAQ,OAAS,EAAA,EAAA,EAAI,OAAO,kBAAkB,CAAA,CAAA;AAAA,OACpE;AAEA,MAAA,MAAM,SAAS,MAAM,OAAA,CAAA;AAErB,MAAA,MAAA,CAAO,KAAK,CAAA,GAAI,MAAO,CAAA,GAAA,CAAI,CAAS,IAAA,MAAA;AAAA,QAClC,KAAA,EAAO,MAAO,CAAA,IAAA,CAAK,KAAK,CAAA;AAAA,QACxB,KAAA,EAAO,MAAO,CAAA,IAAA,CAAK,KAAK,CAAA;AAAA,OACxB,CAAA,CAAA,CAAA;AAAA,KACJ;AAEA,IAAA,OAAO,EAAE,MAAO,EAAA,CAAA;AAAA,GAClB;AACF,CAAA;AAEA,MAAM,qBAAgD6B,KAAE,CAAA,IAAA;AAAA,EAAK,MAC3DA,MACG,MAAO,CAAA;AAAA,IACN,GAAA,EAAKA,MAAE,MAAO,EAAA;AAAA,IACd,QAAQA,KAAE,CAAA,KAAA,CAAMA,MAAE,MAAO,EAAC,EAAE,QAAS,EAAA;AAAA,GACtC,CAAA,CACA,EAAG,CAAAA,KAAA,CAAE,OAAO,EAAE,GAAA,EAAK,kBAAmB,EAAC,CAAC,CAAA,CACxC,EAAG,CAAAA,KAAA,CAAE,OAAO,EAAE,KAAA,EAAOA,KAAE,CAAA,KAAA,CAAM,kBAAkB,CAAA,EAAG,CAAC,EACnD,EAAG,CAAAA,KAAA,CAAE,MAAO,CAAA,EAAE,OAAOA,KAAE,CAAA,KAAA,CAAM,kBAAkB,CAAA,EAAG,CAAC,CAAA;AACxD,CAAA,CAAA;AAEiDA,MAAE,MAAO,CAAA;AAAA,EACxD,aAAaA,KAAE,CAAA,KAAA;AAAA,IACbA,KAAE,CAAA,MAAA,CAAO,EAAE,KAAA,EAAOA,MAAE,MAAO,EAAA,EAAG,KAAO,EAAAA,KAAA,CAAE,KAAK,CAAC,KAAA,EAAO,MAAM,CAAC,GAAG,CAAA;AAAA,GAChE;AAAA,EACA,gBAAA,EAAkBA,KAAE,CAAA,KAAA,CAAMA,KAAE,CAAA,MAAA,GAAS,EAAG,CAAAA,KAAA,CAAE,IAAK,EAAC,CAAC,CAAA;AAAA,EACjD,MAAA,EAAQ,mBAAmB,QAAS,EAAA;AAAA,EACpC,UAAA,EAAYA,MAAE,OAAQ,EAAA;AAAA,EACtB,KAAO,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAAA,EAC3B,oBAAsB,EAAAA,KAAA,CAAE,KAAM,CAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,EAAG,CAAAA,KAAA,CAAE,IAAK,EAAC,CAAC,CAAA,CAAE,QAAS,EAAA;AAAA,EAChE,UAAY,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAClC,CAAC,EAAA;AAED,SAAS,uBACP,OACiB,EAAA;AACjB,EAAI,IAAA,6BAAA,CAA8B,OAAO,CAAG,EAAA;AAC1C,IAAM,MAAA;AAAA,MACJ,MAAA;AAAA,MACA,WAAA,EAAa,UAAa,GAAA,CAAC,gBAAgB,CAAA;AAAA,MAC3C,cAAA;AAAA,KACE,GAAA,OAAA,CAAA;AACJ,IAAA,OAAO,EAAE,MAAA,EAAQ,WAAa,EAAA,UAAA,EAAY,cAAe,EAAA,CAAA;AAAA,GAC3D;AACA,EAAI,IAAA,4BAAA,CAA6B,OAAO,CAAG,EAAA;AACzC,IAAA,OAAO,OAAQ,CAAA,MAAA,CAAA;AAAA,GACjB;AACA,EAAA,OAAO,EAAC,CAAA;AACV,CAAA;AAEA,SAAS,YAAY,KAA6B,EAAA;AAChD,EAAO,OAAA,KAAA,KAAU,QAAQ,MAAS,GAAA,KAAA,CAAA;AACpC,CAAA;AAEA,SAAS,kBAAkB,GAAkB,EAAA;AAC3C,EAAA,OAAO,CAAC,GAAA,CAAI,KAAO,EAAA,GAAA,CAAI,SAAS,CAAA,CAAA;AAClC;;;;;;;;ACzsBO,MAAM,wBAAyB,CAAA;AAAA,EAOpC,WAAA,CACmB,QACA,YACjB,EAAA;AAFiB,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA,CAAA;AACA,IAAA,IAAA,CAAA,YAAA,GAAA,YAAA,CAAA;AARnB,IAAiB1E,eAAA,CAAA,IAAA,EAAA,QAAA,EAAS,IAAI,KAAa,EAAA,CAAA,CAAA;AAC3C,IAAiBA,eAAA,CAAA,IAAA,EAAA,WAAA,EAAY,IAAI,KAA0B,EAAA,CAAA,CAAA;AAC3D,IAAiBA,eAAA,CAAA,IAAA,EAAA,kBAAA,EAAmB,IAAI,KAAsB,EAAA,CAAA,CAAA;AAC9D,IAAiBA,eAAA,CAAA,IAAA,EAAA,aAAA,EAAc,IAAI,KAAsB,EAAA,CAAA,CAAA;AACzD,IAAAA,eAAA,CAAA,IAAA,EAAQ,MAAO,EAAA,KAAA,CAAA,CAAA;AAAA,GAKZ;AAAA,EAEH,OAA+C,GAAA;AAC7C,IAAA,OAAO,CAAK,CAAA,KAAA,IAAA,CAAK,OAAQ,CAAA,IAAA,CAAK,QAAQ,CAAC,CAAA,CAAA;AAAA,GACzC;AAAA,EAEA,aACE,SACqC,EAAA;AACrC,IAAM,MAAA,MAAA,GAAS,IAAK,CAAA,MAAA,CAAO,KAAM,CAAA;AAAA,MAC/B,SAAA,EAAW,UAAU,gBAAiB,EAAA;AAAA,KACvC,CAAA,CAAA;AACD,IAAA,OAAO,CAAK,CAAA,KAAA,IAAA,CAAK,OAAQ,CAAA,MAAA,EAAQ,CAAC,CAAA,CAAA;AAAA,GACpC;AAAA,EAEA,OAAU,GAAA;AACR,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AACZ,IAAO,OAAA;AAAA,MACL,QAAQ,IAAK,CAAA,MAAA;AAAA,MACb,WAAW,IAAK,CAAA,SAAA;AAAA,MAChB,aAAa,IAAK,CAAA,WAAA;AAAA,MAClB,kBAAkB,IAAK,CAAA,gBAAA;AAAA,KACzB,CAAA;AAAA,GACF;AAAA,EAEQ,OAAA,CAAQ,QAAuB,CAA2B,EAAA;AAChE,IAAA,IAAI,KAAK,IAAM,EAAA;AACb,MAAO,MAAA,CAAA,IAAA;AAAA,QACL,iBACE,CAAE,CAAA,IACJ,8DACE,IAAI,KAAA,GAAQ,KACd,CAAA,CAAA;AAAA,OACF,CAAA;AACA,MAAA,OAAA;AAAA,KACF;AAEA,IAAI,IAAA,CAAA,CAAE,SAAS,QAAU,EAAA;AACvB,MAAI,IAAA,MAAA,CAAA;AACJ,MAAM,MAAA,QAAA,GAAWE,iCAAqB,CAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AAEhD,MAAI,IAAA;AACF,QAAS,MAAA,GAAA,sBAAA,CAAuB,EAAE,MAAM,CAAA,CAAA;AAAA,eACjC,CAAG,EAAA;AACV,QAAAuC,kBAAA,CAAY,CAAC,CAAA,CAAA;AACb,QAAA,MAAA,CAAO,KAAM,CAAA,CAAA,8BAAA,EAAiC,QAAQ,CAAA,EAAA,EAAK,CAAC,CAAE,CAAA,CAAA,CAAA;AAC9D,QAAK,IAAA,CAAA,MAAA,CAAO,KAAK,CAAC,CAAA,CAAA;AAClB,QAAA,OAAA;AAAA,OACF;AAOA,MAAM,MAAA,SAAA,GAAYI,gCAAmB,MAAM,CAAA,CAAA;AAC3C,MAAA,IAAI,SAAc,KAAAA,+BAAA,CAAmB,IAAK,CAAA,YAAY,CAAG,EAAA;AACvD,QAAO,MAAA,CAAA,IAAA;AAAA,UACL,0BAA0B,SAAS,CAAA,0IAAA,CAAA;AAAA,SACrC,CAAA;AACA,QAAA,OAAA;AAAA,OACF;AAOA,MAAA,MAAM,WAAc,GAAA,MAAA,CAAO,QAAS,CAAA,WAAA,IAAe,EAAC,CAAA;AACpD,MAAA,IAAI,OAAO,WAAgB,KAAA,QAAA,IAAY,CAAC,KAAM,CAAA,OAAA,CAAQ,WAAW,CAAG,EAAA;AAClE,QAAM,MAAA,cAAA,GAAiB,0BAA2B,CAAA,IAAA,CAAK,YAAY,CAAA,CAAA;AACnE,QAAS,MAAA,GAAA;AAAA,UACP,GAAG,MAAA;AAAA,UACH,QAAU,EAAA;AAAA,YACR,GAAG,MAAO,CAAA,QAAA;AAAA,YACV,WAAa,EAAA;AAAA,cACX,GAAG,WAAA;AAAA,cACH,CAACvC,uCAA0B,GAAG,cAAA;AAAA,cAC9B,CAACD,gCAAmB,GAAG,QAAA;AAAA,aACzB;AAAA,WACF;AAAA,SACF,CAAA;AAAA,OACF;AAEA,MAAA,IAAA,CAAK,iBAAiB,IAAK,CAAA,EAAE,MAAQ,EAAA,WAAA,EAAa,UAAU,CAAA,CAAA;AAAA,KAC9D,MAAA,IAAW,CAAE,CAAA,IAAA,KAAS,UAAY,EAAA;AAChC,MAAA,MAAM,SAAS,4BAA6B,CAAA;AAAA,QAC1C,UAAU,CAAE,CAAA,QAAA;AAAA,QACZ,cAAc,IAAK,CAAA,YAAA;AAAA,OACpB,CAAA,CAAA;AACD,MAAM,MAAA,WAAA,GAAc,qBAAqB,MAAM,CAAA,CAAA;AAC/C,MAAA,IAAA,CAAK,gBAAiB,CAAA,IAAA,CAAK,EAAE,MAAA,EAAQ,aAAa,CAAA,CAAA;AAAA,KACpD,MAAA,IAAW,CAAE,CAAA,IAAA,KAAS,UAAY,EAAA;AAChC,MAAK,IAAA,CAAA,SAAA,CAAU,IAAK,CAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AAAA,KAChC,MAAA,IAAW,CAAE,CAAA,IAAA,KAAS,OAAS,EAAA;AAC7B,MAAK,IAAA,CAAA,MAAA,CAAO,IAAK,CAAA,CAAA,CAAE,KAAK,CAAA,CAAA;AAAA,KAC1B,MAAA,IAAW,CAAE,CAAA,IAAA,KAAS,SAAW,EAAA;AAC/B,MAAA,IAAA,CAAK,YAAY,IAAK,CAAA,EAAE,GAAK,EAAA,CAAA,CAAE,KAAK,CAAA,CAAA;AAAA,KACtC;AAAA,GACF;AACF;;;;;;;;ACjIA,MAAM,uBAAyD,CAAA;AAAA,EAG7D,YAA6B,aAA4B,EAAA;AAA5B,IAAA,IAAA,CAAA,aAAA,GAAA,aAAA,CAAA;AAF7B,IAAQL,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;AAAA,GAEkD;AAAA,EAE1D,MAAM,IACJ,GAC+B,EAAA;AA9BnC,IAAA,IAAA,EAAA,CAAA;AA+BI,IAAO,OAAA,CAAA,EAAA,GAAA,IAAA,CAAK,kBAAL,IAAqB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAA,CAAA,CAAA;AAAA,GAC9B;AAAA,EAEA,MAAM,GACJ,CAAA,GAAA,EACA,KACe,EAAA;AACf,IAAI,IAAA,CAAC,KAAK,QAAU,EAAA;AAClB,MAAA,IAAA,CAAK,WAAW,EAAC,CAAA;AAAA,KACnB;AAEA,IAAK,IAAA,CAAA,QAAA,CAAS,GAAG,CAAI,GAAA,KAAA,CAAA;AAAA,GACvB;AAAA,EAEA,OAAkC,GAAA;AA7CpC,IAAA,IAAA,EAAA,CAAA;AA8CI,IAAO,OAAA,CAAA,EAAA,GAAA,IAAA,CAAK,QAAL,KAAA,IAAA,GAAA,EAAA,GAAiB,IAAK,CAAA,aAAA,CAAA;AAAA,GAC/B;AACF,CAAA;AAEA,MAAM,oBAAsD,CAAA;AAAA,EAI1D,YAA6B,aAA4B,EAAA;AAA5B,IAAA,IAAA,CAAA,aAAA,GAAA,aAAA,CAAA;AAH7B,IAAQA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;AACR,IAAQA,eAAA,CAAA,IAAA,EAAA,WAAA,sBAAsD,GAAI,EAAA,CAAA,CAAA;AAAA,GAER;AAAA,EAE1D,MAAM,IACJ,GAC+B,EAAA;AA1DnC,IAAA,IAAA,EAAA,CAAA;AA2DI,IAAO,OAAA,CAAA,EAAA,GAAA,IAAA,CAAK,kBAAL,IAAqB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAA,CAAA,CAAA;AAAA,GAC9B;AAAA,EAEA,MAAM,GACJ,CAAA,GAAA,EACA,KACe,EAAA;AACf,IAAI,IAAA,CAAC,KAAK,QAAU,EAAA;AAClB,MAAA,IAAA,CAAK,WAAW,EAAC,CAAA;AAAA,KACnB;AAEA,IAAK,IAAA,CAAA,QAAA,CAAS,GAAG,CAAI,GAAA,KAAA,CAAA;AAAA,GACvB;AAAA,EAEA,QAAQ,GAAa,EAAA;AAzEvB,IAAA,IAAA,EAAA,CAAA;AA0EI,IAAA,MAAM,gBAAmB,GAAA,IAAA,CAAK,SAAU,CAAA,GAAA,CAAI,GAAG,CAAA,CAAA;AAC/C,IAAA,IAAI,gBAAkB,EAAA;AACpB,MAAO,OAAA,gBAAA,CAAA;AAAA,KACT;AACA,IAAM,MAAA,QAAA,GAAA,CAAW,EAAK,GAAA,IAAA,CAAA,aAAA,KAAL,IAAqB,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,GAAA,CAAA,CAAA;AACtC,IAAA,MAAM,WAAW,IAAI,uBAAA;AAAA,MACnB,QAAA,CAAS,QAAQ,CAAA,GAAI,QAAW,GAAA,KAAA,CAAA;AAAA,KAClC,CAAA;AACA,IAAK,IAAA,CAAA,SAAA,CAAU,GAAI,CAAA,GAAA,EAAK,QAAQ,CAAA,CAAA;AAChC,IAAO,OAAA,QAAA,CAAA;AAAA,GACT;AAAA,EAEA,OAAkC,GAAA;AAtFpC,IAAA,IAAA,EAAA,CAAA;AAuFI,IAAA,IAAI,GAAM,GAAA,CAAA,EAAA,GAAA,IAAA,CAAK,QAAL,KAAA,IAAA,GAAA,EAAA,GAAiB,IAAK,CAAA,aAAA,CAAA;AAChC,IAAA,KAAA,MAAW,CAAC,GAAA,EAAK,QAAQ,CAAA,IAAK,KAAK,SAAW,EAAA;AAC5C,MAAM,MAAA,aAAA,GAAgB,SAAS,OAAQ,EAAA,CAAA;AACvC,MAAA,IAAI,aAAe,EAAA;AACjB,QAAA,GAAA,GAAM,EAAE,GAAG,GAAA,EAAK,CAAC,GAAG,GAAG,aAAc,EAAA,CAAA;AAAA,OACvC;AAAA,KACF;AACA,IAAO,OAAA,GAAA,CAAA;AAAA,GACT;AACF,CAAA;AAEO,MAAM,qBAAsB,CAAA;AAAA,EAGjC,YAA6B,aAA2B,EAAA;AAA3B,IAAA,IAAA,CAAA,aAAA,GAAA,aAAA,CAAA;AAF7B,IAAQA,eAAA,CAAA,IAAA,EAAA,QAAA,sBAAa,GAAkC,EAAA,CAAA,CAAA;AAAA,GAEE;AAAA,EAEzD,YAAA,CACE,WACA,GACuB,EAAA;AAEvB,IAAM,MAAA,IAAA,GAAO,UAAU,gBAAiB,EAAA,CAAA;AACxC,IAAA,MAAM,KAAQ,GAAA,IAAA,CAAK,MAAO,CAAA,GAAA,CAAI,IAAI,CAAA,CAAA;AAClC,IAAA,IAAI,KAAO,EAAA;AACT,MAAA,OAAO,GAAM,GAAA,KAAA,CAAM,OAAQ,CAAA,GAAG,CAAI,GAAA,KAAA,CAAA;AAAA,KACpC;AAEA,IAAM,MAAA,QAAA,GAAW,IAAK,CAAA,aAAA,CAAc,IAAI,CAAA,CAAA;AAExC,IAAA,MAAM,WAAW,IAAI,oBAAA;AAAA,MACnB,QAAA,CAAS,QAAQ,CAAA,GAAI,QAAW,GAAA,KAAA,CAAA;AAAA,KAClC,CAAA;AACA,IAAK,IAAA,CAAA,MAAA,CAAO,GAAI,CAAA,IAAA,EAAM,QAAQ,CAAA,CAAA;AAC9B,IAAA,OAAO,GAAM,GAAA,QAAA,CAAS,OAAQ,CAAA,GAAG,CAAI,GAAA,QAAA,CAAA;AAAA,GACvC;AAAA,EAEA,OAAsB,GAAA;AACpB,IAAA,MAAM,SAAqB,EAAC,CAAA;AAC5B,IAAA,KAAA,MAAW,CAAC,GAAK,EAAA,KAAK,KAAK,IAAK,CAAA,MAAA,CAAO,SAAW,EAAA;AAChD,MAAO,MAAA,CAAA,GAAG,CAAI,GAAA,KAAA,CAAM,OAAQ,EAAA,CAAA;AAAA,KAC9B;AAEA,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AACF;;ACnEA,MAAM,MAAA,GAASmE,SAAM,CAAA,SAAA,CAAU,SAAS,CAAA,CAAA;AAUxC,SAAS,sBAAA,CACP,IACA,EAAA,KAAA,EACA,SACA,EAAA;AACA,EAAK,IAAA,CAAA,YAAA,CAAa,qCAAqC,KAAK,CAAA,CAAA;AAC5D,EAAK,IAAA,CAAA,YAAA;AAAA,IACH,kCAAA;AAAA,IACA,UAAU,gBAAiB,EAAA;AAAA,GAC7B,CAAA;AACF,CAAA;AAGO,MAAM,oCAEb,CAAA;AAAA,EACE,YACmB,OASjB,EAAA;AATiB,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;AAAA,GAShB;AAAA,EAEH,MAAM,QACJ,OACiC,EAAA;AACjC,IAAA,OAAO,IAAK,CAAA,mBAAA,CAAoB,OAAQ,CAAA,MAAA,EAAQ,QAAQ,KAAK,CAAA,CAAA;AAAA,GAC/D;AAAA,EAEA,MAAc,mBACZ,CAAA,iBAAA,EACA,KACiC,EAAA;AACjC,IAAA,MAAM,YAAY,IAAI,wBAAA;AAAA,MACpB,KAAK,OAAQ,CAAA,MAAA;AAAA,MACb,iBAAA;AAAA,KACF,CAAA;AAGA,IAAA,MAAM,QAAQ,IAAI,qBAAA;AAAA,MAChB,QAAA,CAAS,KAAK,CAAK,IAAA,QAAA,CAAS,MAAM,KAAK,CAAA,GAAI,KAAM,CAAA,KAAA,GAAQ,EAAC;AAAA,KAC5D,CAAA;AAEA,IAAI,IAAA;AAEF,MAAA,IAAI,MAAiB,GAAA,iBAAA,CAAA;AAMrB,MAAI,IAAA;AACF,QAAA,sBAAA,CAAuB,MAAM,CAAA,CAAA;AAAA,eACtB,CAAG,EAAA;AACV,QAAA,MAAM,IAAIrB,iBAAA;AAAA,UACR,CAAA,mDAAA,CAAA;AAAA,UACA,CAAA;AAAA,SACF,CAAA;AAAA,OACF;AAIA,MAAA,MAAM,OAAmB,GAAA;AAAA,QACvB,SAAA,EAAWD,gCAAmB,MAAM,CAAA;AAAA,QACpC,QAAU,EAAAO,6BAAA,CAAiB,oBAAqB,CAAA,MAAM,CAAC,CAAA;AAAA,QACvD,cAAgB,EAAAA,6BAAA,CAAiB,0BAA2B,CAAA,MAAM,CAAC,CAAA;AAAA,QACnE,KAAA;AAAA,QACA,SAAA;AAAA,OACF,CAAA;AAGA,MAAA,MAAA,GAAS,MAAM,IAAA,CAAK,iBAAkB,CAAA,MAAA,EAAQ,OAAO,CAAA,CAAA;AACrD,MAAS,MAAA,GAAA,MAAM,IAAK,CAAA,aAAA,CAAc,MAAM,CAAA,CAAA;AACxC,MAAM,MAAA,IAAA,CAAK,eAAgB,CAAA,MAAA,EAAQ,OAAO,CAAA,CAAA;AAC1C,MAAI,IAAA,gBAAA,CAAiB,MAAM,CAAG,EAAA;AAC5B,QAAM,MAAA,IAAA,CAAK,sBAAuB,CAAA,MAAA,EAAQ,OAAO,CAAA,CAAA;AAAA,OACnD;AACA,MAAA,MAAA,GAAS,MAAM,IAAA,CAAK,kBAAmB,CAAA,MAAA,EAAQ,OAAO,CAAA,CAAA;AAItD,MAAM,MAAA,gBAAA,GAAmB,OAAQ,CAAA,SAAA,CAAU,OAAQ,EAAA,CAAA;AACnD,MAAW,KAAA,MAAA,cAAA,IAAkB,iBAAiB,gBAAkB,EAAA;AAC9D,QACE,IAAA,CAAC,IAAK,CAAA,OAAA,CAAQ,aAAc,CAAA,SAAA;AAAA,UAC1B,cAAe,CAAA,MAAA;AAAA,UACf,OAAQ,CAAA,cAAA;AAAA,SAEV,EAAA;AACA,UAAA,MAAM,IAAIuB,sBAAA;AAAA,YACR,CAAU,OAAA,EAAA9B,+BAAA;AAAA,cACR,cAAe,CAAA,MAAA;AAAA,aAChB,CAAO,IAAA,EAAA3C,iCAAA;AAAA,cACN,OAAQ,CAAA,QAAA;AAAA,aACT,CAAmB,gBAAA,EAAAA,iCAAA;AAAA,cAClB,OAAQ,CAAA,cAAA;AAAA,aACT,CAAA,6CAAA,CAAA;AAAA,WACH,CAAA;AAAA,SACF;AAAA,OACF;AAEA,MAAO,OAAA;AAAA,QACL,GAAG,gBAAA;AAAA,QACH,eAAiB,EAAA,MAAA;AAAA,QACjB,KAAO,EAAA,EAAE,KAAO,EAAA,KAAA,CAAM,SAAU,EAAA;AAAA,QAChC,EAAA,EAAI,gBAAiB,CAAA,MAAA,CAAO,MAAW,KAAA,CAAA;AAAA,OACzC,CAAA;AAAA,aACO,KAAO,EAAA;AACd,MAAAuC,kBAAA,CAAY,KAAK,CAAA,CAAA;AACjB,MAAO,OAAA;AAAA,QACL,EAAI,EAAA,KAAA;AAAA,QACJ,QAAQ,SAAU,CAAA,OAAA,EAAU,CAAA,MAAA,CAAO,OAAO,KAAK,CAAA;AAAA,OACjD,CAAA;AAAA,KACF;AAAA,GACF;AAAA;AAAA;AAAA,EAIA,MAAc,iBACZ,CAAA,MAAA,EACA,OACiB,EAAA;AACjB,IAAA,OAAO,MAAM,cAAA,CAAe,MAAQ,EAAA,iBAAA,EAAmB,OAAM,SAAa,KAAA;AACxE,MAAA,mBAAA,CAAoB,WAAW,MAAM,CAAA,CAAA;AACrC,MAAU,SAAA,CAAA,YAAA,CAAa,qCAAqC,YAAY,CAAA,CAAA;AACxE,MAAA,IAAI,GAAM,GAAA,MAAA,CAAA;AAEV,MAAW,KAAA,MAAA,SAAA,IAAa,IAAK,CAAA,OAAA,CAAQ,UAAY,EAAA;AAC/C,QAAA,IAAI,UAAU,gBAAkB,EAAA;AAC9B,UAAA,IAAI,QAAW,GAAA,GAAA,CAAA;AACf,UAAA,GAAA,GAAM,MAAM,cAAA,CAAe,MAAQ,EAAA,gBAAA,EAAkB,OAAM,IAAQ,KAAA;AACjE,YAAA,mBAAA,CAAoB,MAAM,MAAM,CAAA,CAAA;AAChC,YAAuB,sBAAA,CAAA,IAAA,EAAM,oBAAoB,SAAS,CAAA,CAAA;AAC1D,YAAI,IAAA;AACF,cAAA,QAAA,GAAW,MAAM,SAAU,CAAA,gBAAA;AAAA,gBACzB,QAAA;AAAA,gBACA,OAAQ,CAAA,QAAA;AAAA,gBACR,OAAA,CAAQ,SAAU,CAAA,YAAA,CAAa,SAAS,CAAA;AAAA,gBACxC,OAAQ,CAAA,cAAA;AAAA,gBACR,OAAA,CAAQ,KAAM,CAAA,YAAA,CAAa,SAAS,CAAA;AAAA,eACtC,CAAA;AAAA,qBACO,CAAG,EAAA;AACV,cAAA,MAAM,IAAIK,iBAAA;AAAA,gBACR,CAAA,UAAA,EAAa,SAAU,CAAA,WAAA,CAAY,IAAI,CAAA,mCAAA,CAAA;AAAA,gBACvC,CAAA;AAAA,eACF,CAAA;AAAA,aACF;AACA,YAAO,OAAA,QAAA,CAAA;AAAA,WACR,CAAA,CAAA;AAAA,SACH;AAAA,OACF;AAEA,MAAO,OAAA,GAAA,CAAA;AAAA,KACR,CAAA,CAAA;AAAA,GACH;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,cAAc,MAAiC,EAAA;AAC3D,IAAA,OAAO,MAAM,cAAA,CAAe,MAAQ,EAAA,iBAAA,EAAmB,OAAM,SAAa,KAAA;AACxE,MAAA,mBAAA,CAAoB,WAAW,MAAM,CAAA,CAAA;AACrC,MAAU,SAAA,CAAA,YAAA;AAAA,QACR,mCAAA;AAAA,QACA,eAAA;AAAA,OACF,CAAA;AACA,MAAI,IAAA,oBAAA,CAAA;AAEJ,MAAI,IAAA;AACF,QAAA,oBAAA,GAAuB,MAAM,IAAA,CAAK,OAAQ,CAAA,MAAA,CAAO,QAAQ,MAAM,CAAA,CAAA;AAAA,eACxD,CAAG,EAAA;AACV,QAAA,MAAM,IAAIA,iBAAA;AAAA,UACR,CAAA,wBAAA,EAA2BD,+BAAmB,CAAA,MAAM,CAAC,CAAA,CAAA;AAAA,UACrD,CAAA;AAAA,SACF,CAAA;AAAA,OACF;AAEA,MAAA,IAAI,CAAC,oBAAsB,EAAA;AACzB,QAAA,MAAM,IAAI,KAAA;AAAA,UACR,CAA4C,yCAAA,EAAAA,+BAAA;AAAA,YAC1C,MAAA;AAAA,WACD,CAAA,CAAA;AAAA,SACH,CAAA;AAAA,OACF;AAEA,MAAO,OAAA,oBAAA,CAAA;AAAA,KACR,CAAA,CAAA;AAAA,GACH;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,eACZ,CAAA,MAAA,EACA,OACe,EAAA;AACf,IAAA,OAAO,MAAM,cAAA,CAAe,MAAQ,EAAA,iBAAA,EAAmB,OAAM,SAAa,KAAA;AACxE,MAAA,mBAAA,CAAoB,WAAW,MAAM,CAAA,CAAA;AACrC,MAAU,SAAA,CAAA,YAAA,CAAa,qCAAqC,UAAU,CAAA,CAAA;AAGtE,MAAA,IAAIA,+BAAmB,CAAA,MAAM,CAAM,KAAA,OAAA,CAAQ,SAAW,EAAA;AACpD,QAAA,MAAM,IAAIK,oBAAA;AAAA,UACR,sEAAA;AAAA,SACF,CAAA;AAAA,OACF;AAGA,MAAI,IAAA;AACF,QAAA,cAAA,CAAe,MAAM,CAAA,CAAA;AAAA,eACd,CAAG,EAAA;AACV,QAAA,MAAM,IAAIA,oBAAA;AAAA,UACR,CAAA,oBAAA,EAAuB,QAAQ,SAAS,CAAA,sCAAA,CAAA;AAAA,UACxC,CAAA;AAAA,SACF,CAAA;AAAA,OACF;AAEA,MAAA,IAAI,KAAQ,GAAA,KAAA,CAAA;AAEZ,MAAW,KAAA,MAAA,SAAA,IAAa,IAAK,CAAA,OAAA,CAAQ,UAAY,EAAA;AAC/C,QAAA,IAAI,UAAU,kBAAoB,EAAA;AAChC,UAAI,IAAA;AACF,YAAA,MAAM,YAAY,MAAM,cAAA;AAAA,cACtB,MAAA;AAAA,cACA,gBAAA;AAAA,cACA,OAAM,IAAQ,KAAA;AACZ,gBAAA,mBAAA,CAAoB,MAAM,MAAM,CAAA,CAAA;AAChC,gBAAuB,sBAAA,CAAA,IAAA,EAAM,sBAAsB,SAAS,CAAA,CAAA;AAC5D,gBAAO,OAAA,MAAM,SAAU,CAAA,kBAAA,CAAoB,MAAM,CAAA,CAAA;AAAA,eACnD;AAAA,aACF,CAAA;AACA,YAAA,IAAI,SAAW,EAAA;AACb,cAAQ,KAAA,GAAA,IAAA,CAAA;AACR,cAAI,IAAA,IAAA,CAAK,QAAQ,+BAAiC,EAAA;AAChD,gBAAA,MAAA;AAAA,eACF;AAAA,aACF;AAAA,mBACO,CAAG,EAAA;AACV,YAAA,MAAM,IAAIJ,iBAAA;AAAA,cACR,aAAa,SAAU,CAAA,WAAA,CAAY,IAAI,CAAA,4CAAA,EAA+C,QAAQ,SAAS,CAAA,CAAA;AAAA,cACvG,CAAA;AAAA,aACF,CAAA;AAAA,WACF;AAAA,SACF;AAAA,OACF;AAEA,MAAA,IAAI,CAAC,KAAO,EAAA;AACV,QAAA,MAAM,IAAIA,iBAAA;AAAA,UACR,CAAA,mCAAA,EAAsC,QAAQ,SAAS,CAAA,0DAAA,CAAA;AAAA,SACzD,CAAA;AAAA,OACF;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,sBACZ,CAAA,MAAA,EACA,OACe,EAAA;AACf,IAAA,OAAO,MAAM,cAAA,CAAe,MAAQ,EAAA,iBAAA,EAAmB,OAAM,SAAa,KAAA;AACxE,MAAA,mBAAA,CAAoB,WAAW,MAAM,CAAA,CAAA;AACrC,MAAU,SAAA,CAAA,YAAA;AAAA,QACR,mCAAA;AAAA,QACA,cAAA;AAAA,OACF,CAAA;AACA,MAAM,MAAA,EAAE,OAAO,OAAQ,CAAA,QAAA,CAAS,MAAM,QAAW,GAAA,UAAA,KAC/C,MAAO,CAAA,IAAA,CAAA;AACT,MAAM,MAAA,OAAA,GAAU,IAAI,KAAc,EAAA,CAAA;AAClC,MAAI,IAAA,MAAA,CAAO,KAAK,MAAQ,EAAA;AACtB,QAAQ,OAAA,CAAA,IAAA,CAAK,MAAO,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,OACjC;AACA,MAAI,IAAA,MAAA,CAAO,KAAK,OAAS,EAAA;AACvB,QAAA,OAAA,CAAQ,IAAK,CAAA,GAAG,MAAO,CAAA,IAAA,CAAK,OAAO,CAAA,CAAA;AAAA,OACrC;AAEA,MAAA,KAAA,MAAW,uBAAuB,OAAS,EAAA;AACzC,QAAA,IAAI,SAAS,MAAU,IAAA,mBAAA,CAAoB,QAAS,CAAAP,qBAAA,CAAK,GAAG,CAAG,EAAA;AAC7D,UAAA,OAAA,CAAQ,UAAU,OAAQ,EAAA;AAAA,YACxBlB,kCAAiB,CAAA,UAAA;AAAA,cACf,OAAQ,CAAA,QAAA;AAAA,cACR,CAAyC,sCAAA,EAAA,IAAI,CAA8B,2BAAA,EAAA,OAAA,CAAQ,SAAS,MAAM,CAAA,gCAAA,CAAA;AAAA,aACpG;AAAA,WACF,CAAA;AACA,UAAA,SAAA;AAAA,SACF;AACA,QAAA,MAAM,MAAS,GAAA,aAAA;AAAA,UACb,KAAK,OAAQ,CAAA,YAAA;AAAA,UACb,OAAQ,CAAA,QAAA;AAAA,UACR,IAAA;AAAA,UACA,mBAAA;AAAA,SACF,CAAA;AAEA,QAAA,IAAI,OAAU,GAAA,KAAA,CAAA;AACd,QAAW,KAAA,MAAA,SAAA,IAAa,IAAK,CAAA,OAAA,CAAQ,UAAY,EAAA;AAC/C,UAAA,IAAI,UAAU,YAAc,EAAA;AAC1B,YAAI,IAAA;AACF,cAAA,MAAM,OAAO,MAAM,cAAA;AAAA,gBACjB,MAAA;AAAA,gBACA,gBAAA;AAAA,gBACA,OAAM,IAAQ,KAAA;AACZ,kBAAA,mBAAA,CAAoB,MAAM,MAAM,CAAA,CAAA;AAChC,kBAAuB,sBAAA,CAAA,IAAA,EAAM,gBAAgB,SAAS,CAAA,CAAA;AACtD,kBAAA,OAAO,MAAM,SAAU,CAAA,YAAA;AAAA,oBACrB;AAAA,sBACE,IAAA;AAAA,sBACA,MAAA;AAAA,sBACA,QAAA;AAAA,qBACF;AAAA,oBACA,QAAa,KAAA,UAAA;AAAA,oBACb,OAAA,CAAQ,SAAU,CAAA,YAAA,CAAa,SAAS,CAAA;AAAA,oBACxC,KAAK,OAAQ,CAAA,MAAA;AAAA,oBACb,OAAQ,CAAA,KAAA,CAAM,YAAa,CAAA,SAAA,EAAW,MAAM,CAAA;AAAA,mBAC9C,CAAA;AAAA,iBACF;AAAA,eACF,CAAA;AACA,cAAA,IAAI,IAAM,EAAA;AACR,gBAAU,OAAA,GAAA,IAAA,CAAA;AACV,gBAAA,MAAA;AAAA,eACF;AAAA,qBACO,CAAG,EAAA;AACV,cAAA,MAAM,IAAIyB,iBAAA;AAAA,gBACR,aAAa,SAAU,CAAA,WAAA,CAAY,IAAI,CAAiC,8BAAA,EAAA,IAAI,IAAI,MAAM,CAAA,CAAA;AAAA,gBACtF,CAAA;AAAA,eACF,CAAA;AAAA,aACF;AAAA,WACF;AAAA,SACF;AACA,QAAA,IAAI,CAAC,OAAS,EAAA;AACZ,UAAA,MAAM,IAAIA,iBAAA;AAAA,YACR,CAAA,2CAAA,EAA8C,IAAI,CAAA,CAAA,EAAI,MAAM,CAAA,CAAA;AAAA,WAC9D,CAAA;AAAA,SACF;AAAA,OACF;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAAA;AAAA;AAAA;AAAA,EAKA,MAAc,kBACZ,CAAA,MAAA,EACA,OACiB,EAAA;AACjB,IAAA,OAAO,MAAM,cAAA,CAAe,MAAQ,EAAA,iBAAA,EAAmB,OAAM,SAAa,KAAA;AACxE,MAAA,mBAAA,CAAoB,WAAW,MAAM,CAAA,CAAA;AACrC,MAAU,SAAA,CAAA,YAAA;AAAA,QACR,mCAAA;AAAA,QACA,mBAAA;AAAA,OACF,CAAA;AACA,MAAA,IAAI,GAAM,GAAA,MAAA,CAAA;AAEV,MAAW,KAAA,MAAA,SAAA,IAAa,IAAK,CAAA,OAAA,CAAQ,UAAY,EAAA;AAC/C,QAAA,IAAI,UAAU,iBAAmB,EAAA;AAC/B,UAAA,IAAI,QAAW,GAAA,GAAA,CAAA;AACf,UAAA,GAAA,GAAM,MAAM,cAAA,CAAe,MAAQ,EAAA,gBAAA,EAAkB,OAAM,IAAQ,KAAA;AACjE,YAAA,mBAAA,CAAoB,MAAM,MAAM,CAAA,CAAA;AAChC,YAAuB,sBAAA,CAAA,IAAA,EAAM,qBAAqB,SAAS,CAAA,CAAA;AAC3D,YAAI,IAAA;AACF,cAAA,QAAA,GAAW,MAAM,SAAU,CAAA,iBAAA;AAAA,gBACzB,QAAA;AAAA,gBACA,OAAQ,CAAA,QAAA;AAAA,gBACR,OAAA,CAAQ,SAAU,CAAA,YAAA,CAAa,SAAS,CAAA;AAAA,gBACxC,OAAA,CAAQ,KAAM,CAAA,YAAA,CAAa,SAAS,CAAA;AAAA,eACtC,CAAA;AAAA,qBACO,CAAG,EAAA;AACV,cAAA,MAAM,IAAIA,iBAAA;AAAA,gBACR,CAAA,UAAA,EAAa,SAAU,CAAA,WAAA,CAAY,IAAI,CAAA,oCAAA,CAAA;AAAA,gBACvC,CAAA;AAAA,eACF,CAAA;AAAA,aACF;AACA,YAAO,OAAA,QAAA,CAAA;AAAA,WACR,CAAA,CAAA;AAAA,SACH;AAAA,OACF;AAEA,MAAO,OAAA,GAAA,CAAA;AAAA,KACR,CAAA,CAAA;AAAA,GACH;AACF;;AClaA,eAAsB,8BAA8B,OAUlD,EAAA;AACA,EAAA,MAAM,EAAE,IAAA,EAAM,SAAW,EAAA,aAAA,EAAkB,GAAA,OAAA,CAAA;AAE3C,EAAI,IAAA,UAAA,GAAa,IAAwB,CAAA,eAAe,CAAE,CAAA,MAAA;AAAA,IACxD,YAAA;AAAA,IACA,gBAAA;AAAA,IACA,oBAAA;AAAA,GACF,CAAA;AAKA,EAAI,IAAA,CAAC,OAAS,EAAA,QAAA,EAAU,IAAI,CAAA,CAAE,SAAS,IAAK,CAAA,MAAA,CAAO,MAAO,CAAA,MAAM,CAAG,EAAA;AACjE,IAAa,UAAA,GAAA,UAAA,CAAW,SAAU,EAAA,CAAE,UAAW,EAAA,CAAA;AAAA,GACjD;AAEA,EAAM,MAAA,KAAA,GAAQ,MAAM,UACjB,CAAA,YAAA,CAAa,gBAAgB,CAC7B,CAAA,YAAA,CAAa,oBAAoB,CAAA,CACjC,KAAM,CAAA,gBAAA,EAAkB,MAAM,IAAK,CAAA,EAAA,CAAG,KAAK,CAAA,CAC3C,QAAQ,gBAAkB,EAAA,KAAK,CAC/B,CAAA,KAAA,CAAM,SAAS,CAAA,CAAA;AAElB,EAAI,IAAA,CAAC,MAAM,MAAQ,EAAA;AACjB,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AAEA,EAAM,MAAA,IAAA,CAAwB,eAAe,CAC1C,CAAA,OAAA;AAAA,IACC,YAAA;AAAA,IACA,KAAM,CAAA,GAAA,CAAI,CAAK,CAAA,KAAA,CAAA,CAAE,UAAU,CAAA;AAAA,GAG5B,CAAA,YAAA,CAAa,oBAAoB,CAAA,CACjC,MAAO,CAAA;AAAA,IACN,cAAA,EAAgB,OAAQ,CAAA,IAAA,EAAM,aAAa,CAAA;AAAA,GAC5C,CAAA,CAAA;AAEH,EAAO,OAAA,KAAA,CAAM,IAAI,CAAM,CAAA,MAAA;AAAA,IACrB,WAAW,CAAE,CAAA,UAAA;AAAA,IACb,cAAc,CAAE,CAAA,kBAAA;AAAA,IAChB,iBAAA,EAAmB,mBAAoB,CAAA,CAAA,CAAE,cAAe,CAAA;AAAA,GACxD,CAAA,CAAA,CAAA;AACJ,CAAA;AAEA,SAAS,OAAA,CAAQ,MAAY,QAAmC,EAAA;AAC9D,EAAM,MAAA,OAAA,GAAUiC,4BAAuB,CAAA,QAAQ,CAAI,GAAA,GAAA,CAAA;AACnD,EAAA,IAAI,KAAK,MAAO,CAAA,MAAA,CAAO,MAAO,CAAA,QAAA,CAAS,SAAS,CAAG,EAAA;AACjD,IAAA,OAAO,KAAK,GAAI,CAAA,CAAA,kBAAA,CAAA,EAAsB,CAAC,CAAG,EAAA,OAAO,UAAU,CAAC,CAAA,CAAA;AAAA,aACnD,IAAK,CAAA,MAAA,CAAO,OAAO,MAAO,CAAA,QAAA,CAAS,OAAO,CAAG,EAAA;AACtD,IAAA,OAAO,IAAK,CAAA,GAAA,CAAI,CAAoB,iBAAA,EAAA,OAAO,CAAS,OAAA,CAAA,CAAA,CAAA;AAAA,GACtD;AACA,EAAA,OAAO,IAAK,CAAA,GAAA,CAAI,CAAqB,kBAAA,EAAA,OAAO,CAAW,SAAA,CAAA,CAAA,CAAA;AACzD;;ACjFA,MAAM,YAAe,GAAA;AAAA,EACnB,aAAA;AAAA,EACA,WAAA;AAAA,EACA,QAAA;AAAA,EACA,eAAA;AAAA,EACA,oBAAA;AAAA,EACA,cAAA;AAAA,EACA,eAAA;AACF,CAAA,CAAA;AAKA,MAAM,cAAiB,GAAA,GAAA,CAAA;AACvB,MAAM,gBAAmB,GAAA,GAAA,CAAA;AAkClB,SAAS,SAAS,IAAqB,EAAA;AAC5C,EAAA,MAAM,SAAe,EAAC,CAAA;AAEtB,EAAS,SAAA,KAAA,CAAM,MAAc,OAAkB,EAAA;AAC7C,IAAI,IAAA,YAAA,CAAa,QAAS,CAAA,IAAI,CAAG,EAAA;AAC/B,MAAA,OAAA;AAAA,KACF;AAGA,IAAA,IACE,OAAY,KAAA,KAAA,CAAA,IACZ,OAAY,KAAA,IAAA,IACZ,CAAC,QAAA,EAAU,QAAU,EAAA,SAAS,CAAE,CAAA,QAAA,CAAS,OAAO,OAAO,CACvD,EAAA;AACA,MAAA,MAAA,CAAO,KAAK,EAAE,GAAA,EAAK,IAAM,EAAA,KAAA,EAAO,SAAS,CAAA,CAAA;AACzC,MAAA,OAAA;AAAA,KACF;AAGA,IAAI,IAAA,OAAO,YAAY,QAAU,EAAA;AAC/B,MAAA,OAAA;AAAA,KACF;AAGA,IAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,OAAO,CAAG,EAAA;AAC1B,MAAA,KAAA,MAAW,QAAQ,OAAS,EAAA;AAc1B,QAAA,KAAA,CAAM,MAAM,IAAI,CAAA,CAAA;AAChB,QAAI,IAAA,OAAO,SAAS,QAAU,EAAA;AAC5B,UAAO,MAAA,CAAA,IAAA,CAAK,EAAE,GAAA,EAAK,CAAG,EAAA,IAAI,IAAI,IAAI,CAAA,CAAA,EAAI,KAAO,EAAA,IAAA,EAAM,CAAA,CAAA;AAAA,SACrD;AAAA,OACF;AACA,MAAA,OAAA;AAAA,KACF;AAGA,IAAA,KAAA,MAAW,CAAC,GAAK,EAAA,KAAK,KAAK,MAAO,CAAA,OAAA,CAAQ,OAAQ,CAAG,EAAA;AACnD,MAAA,KAAA,CAAM,OAAO,CAAG,EAAA,IAAI,IAAI,GAAG,CAAA,CAAA,GAAK,KAAK,KAAK,CAAA,CAAA;AAAA,KAC5C;AAAA,GACF;AAEA,EAAA,KAAA,CAAM,IAAI,IAAI,CAAA,CAAA;AAEd,EAAO,OAAA,MAAA,CAAA;AACT,CAAA;AAGgB,SAAA,SAAA,CAAU,OAAa,QAAiC,EAAA;AACtE,EAAA,MAAM,SAAwB,EAAC,CAAA;AAE/B,EAAA,KAAA,MAAW,EAAE,GAAK,EAAA,MAAA,EAAQ,KAAO,EAAA,QAAA,MAAc,KAAO,EAAA;AACpD,IAAM,MAAA,GAAA,GAAM,MAAO,CAAA,iBAAA,CAAkB,OAAO,CAAA,CAAA;AAC5C,IAAI,IAAA,GAAA,CAAI,SAAS,cAAgB,EAAA;AAC/B,MAAA,SAAA;AAAA,KACF;AACA,IAAI,IAAA,QAAA,KAAa,KAAa,CAAA,IAAA,QAAA,KAAa,IAAM,EAAA;AAC/C,MAAA,MAAA,CAAO,IAAK,CAAA;AAAA,QACV,SAAW,EAAA,QAAA;AAAA,QACX,GAAA;AAAA,QACA,cAAgB,EAAA,IAAA;AAAA,QAChB,KAAO,EAAA,IAAA;AAAA,OACR,CAAA,CAAA;AAAA,KACI,MAAA;AACL,MAAA,MAAM,KAAQ,GAAA,MAAA,CAAO,QAAQ,CAAA,CAAE,kBAAkB,OAAO,CAAA,CAAA;AACxD,MAAI,IAAA,KAAA,CAAM,UAAU,gBAAkB,EAAA;AACpC,QAAA,MAAA,CAAO,IAAK,CAAA;AAAA,UACV,SAAW,EAAA,QAAA;AAAA,UACX,GAAA;AAAA,UACA,cAAA,EAAgB,OAAO,QAAQ,CAAA;AAAA,UAC/B,KAAA;AAAA,SACD,CAAA,CAAA;AAAA,OACI,MAAA;AACL,QAAA,MAAA,CAAO,IAAK,CAAA;AAAA,UACV,SAAW,EAAA,QAAA;AAAA,UACX,GAAA;AAAA,UACA,cAAgB,EAAA,IAAA;AAAA,UAChB,KAAO,EAAA,IAAA;AAAA,SACR,CAAA,CAAA;AAAA,OACH;AAAA,KACF;AAAA,GACF;AAEA,EAAO,OAAA,MAAA,CAAA;AACT,CAAA;AASgB,SAAA,iBAAA,CACd,UACA,MACe,EAAA;AAlLjB,EAAA,IAAA,EAAA,CAAA;AAoLE,EAAM,MAAA,GAAA,GAAM,SAAS,MAAM,CAAA,CAAA;AAI3B,EAAI,GAAA,CAAA,IAAA,CAAK,EAAE,GAAK,EAAA,eAAA,EAAiB,OAAO,MAAO,CAAA,QAAA,CAAS,MAAM,CAAA,CAAA;AAC9D,EAAI,GAAA,CAAA,IAAA,CAAK,EAAE,GAAK,EAAA,oBAAA,EAAsB,OAAO,MAAO,CAAA,QAAA,CAAS,WAAW,CAAA,CAAA;AACxE,EAAI,GAAA,CAAA,IAAA,CAAK,EAAE,GAAK,EAAA,cAAA,EAAgB,OAAO,MAAO,CAAA,QAAA,CAAS,KAAK,CAAA,CAAA;AAI5D,EAAI,IAAA,CAAC,MAAO,CAAA,QAAA,CAAS,SAAW,EAAA;AAC9B,IAAA,GAAA,CAAI,KAAK,EAAE,GAAA,EAAK,oBAAsB,EAAA,KAAA,EAAOC,gCAAmB,CAAA,CAAA;AAAA,GAClE;AAGA,EAAA,KAAA,MAAW,QAAY,IAAA,CAAA,EAAA,GAAA,MAAA,CAAO,SAAP,KAAA,IAAA,GAAA,EAAA,GAAoB,EAAI,EAAA;AAC7C,IAAA,GAAA,CAAI,IAAK,CAAA;AAAA,MACP,GAAA,EAAK,CAAa,UAAA,EAAA,QAAA,CAAS,IAAI,CAAA,CAAA;AAAA,MAC/B,OAAO,QAAS,CAAA,SAAA;AAAA,KACjB,CAAA,CAAA;AAAA,GACH;AAIA,EAAM,MAAA,IAAA,GAAO,IAAI,GAAI,CAAA,GAAA,CAAI,IAAI,CAAK,CAAA,KAAA,CAAA,CAAE,GAAG,CAAC,CAAA,CAAA;AACxC,EAAM,MAAA,SAAA,GAAY,IAAI,GAAA,CAAI,GAAI,CAAA,GAAA,CAAI,CAAK,CAAA,KAAA,CAAA,CAAE,GAAI,CAAA,iBAAA,CAAkB,OAAO,CAAC,CAAC,CAAA,CAAA;AACxE,EAAI,IAAA,IAAA,CAAK,IAAS,KAAA,SAAA,CAAU,IAAM,EAAA;AAChC,IAAA,MAAM,aAAa,EAAC,CAAA;AACpB,IAAA,KAAA,MAAW,OAAO,IAAM,EAAA;AACtB,MAAM,MAAA,KAAA,GAAQ,GAAI,CAAA,iBAAA,CAAkB,OAAO,CAAA,CAAA;AAC3C,MAAA,IAAI,CAAC,SAAA,CAAU,MAAO,CAAA,KAAK,CAAG,EAAA;AAC5B,QAAA,UAAA,CAAW,KAAK,KAAK,CAAA,CAAA;AAAA,OACvB;AAAA,KACF;AACA,IAAA,MAAM,OAAU,GAAA,CAAA,CAAA,EAAI,UAAW,CAAA,IAAA,CAAK,MAAM,CAAC,CAAA,CAAA,CAAA,CAAA;AAC3C,IAAA,MAAM,IAAIlC,iBAAA;AAAA,MACR,uDAAuD,OAAO,CAAA,CAAA;AAAA,KAChE,CAAA;AAAA,GACF;AAEA,EAAO,OAAA,SAAA,CAAU,KAAK,QAAQ,CAAA,CAAA;AAChC;;AC9LA,eAAsB,4BAA4B,MAIhC,EAAA;AAChB,EAAA,MAAM,EAAE,IAAA,EAAM,SAAW,EAAA,YAAA,EAAiB,GAAA,MAAA,CAAA;AAE1C,EAAM,MAAA,IAAA,CAAwB,eAAe,CAAA,CAC1C,MAAO,CAAA;AAAA,IACN,cAAgB,EAAA,IAAA;AAAA,IAChB,kBAAoB,EAAA,IAAA;AAAA,GACrB,CACA,CAAA,KAAA,CAAM,YAAc,EAAA,GAAA,EAAK,SAAS,CAClC,CAAA,QAAA,CAAS,oBAAsB,EAAA,GAAA,EAAK,YAAY,CAAA,CAAA;AACrD;;ACrBO,MAAMgB,YAAa,GAAA,EAAA,CAAA;AAEnB,SAAS,mBAAmB,MAAgB,EAAA;AACjD,EAAA,OAAOb,iBAAW,CAAA,MAAM,CACrB,CAAA,MAAA,CAAOY,gCAAgB,CAAA,EAAE,GAAG,MAAA,EAAQ,CAAC,CACrC,CAAA,MAAA,CAAO,KAAK,CAAA,CAAA;AACjB;;ACQA,MAAM,qBAAA;AAAA;AAAA,EAEJ,2HAAA;AAAA,CAAA,CAAA;AAOF,eAAsB,iBAAiB,OAMY,EAAA;AArDnD,EAAA,IAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,EAAA,CAAA;AAsDE,EAAA,MAAM,EAAE,IAAA,EAAM,MAAQ,EAAA,SAAA,EAAc,GAAA,OAAA,CAAA;AACpC,EAAA,MAAM,YAAe,GAAA,CAAA,EAAA,GAAA,OAAA,CAAQ,YAAR,KAAA,IAAA,GAAA,EAAA,GAAwBV,OAAK,EAAA,CAAA;AAElD,EAAA,MAAM,YAAe,GAAA,MAAM,IAAwB,CAAA,eAAe,EAC/D,KAAM,CAAA,EAAE,UAAY,EAAA,SAAA,EAAW,CAC/B,CAAA,KAAA,CAAM,CAAC,CAAA,CACP,OAAO,WAAW,CAAA,CAAA;AACrB,EAAI,IAAA,CAAC,aAAa,MAAQ,EAAA;AAExB,IAAO,OAAA,WAAA,CAAA;AAAA,GACT;AAGA,EAAM,MAAA,IAAA,CAAyB,gBAAgB,CAAA,CAC5C,MAAO,CAAA;AAAA,IACN,SAAA,EAAW,YAAa,CAAA,CAAC,CAAE,CAAA,SAAA;AAAA,IAC3B,IAAM,EAAA,EAAA;AAAA,IACN,aAAe,EAAA,YAAA;AAAA,GAChB,EACA,UAAW,CAAA,WAAW,EACtB,KAAM,CAAA,CAAC,eAAe,CAAC,CAAA,CAAA;AAM1B,EAAA,MAAM,CAAC,eAAiB,EAAA,eAAe,CAAI,GAAA,MAAM,QAAQ,GAAI,CAAA;AAAA,IAC3D,IACG,CAAA,IAAA,CAAK,qBAAuB,EAAA,SAAS,mBAAmB,OAAS,EAAA;AAChE,MAAA,OAAO,OACJ,CAAA,IAAA,CAAK,0BAA0B,CAAA,CAC/B,MAAM,EAAE,iBAAA,EAAmB,SAAU,EAAC,CACtC,CAAA,KAAA,CAAM,EAAE,KAAA,EAAO,KAAK,CAAA,CAAA;AAAA,KACxB,EACA,MAAO,CAAA;AAAA,MACN,QAAU,EAAA,yBAAA;AAAA,MACV,eAAiB,EAAA,gCAAA;AAAA,MACjB,MAAQ,EAAA,sBAAA;AAAA,MACR,sBAAwB,EAAA,2BAAA;AAAA,MACxB,YAAc,EAAA,qBAAA;AAAA,KACf,CACA,CAAA,IAAA,CAAK,eAAe,CACpB,CAAA,KAAA,CAAM,EAAE,0BAA4B,EAAA,SAAA,EAAW,CAAA,CAC/C,UAAU,IAAK,CAAA,GAAA,CAAI,qBAAqB,CAAC,CAAA,CACzC,cAAc,gBAAkB,EAAA;AAAA,MAC/B,0BAA4B,EAAA,yBAAA;AAAA,KAC7B,CAAA;AAAA,IACH,KACG,QAAS,CAAA;AAAA,MACR,YAAc,EAAA,MAAA;AAAA,MACd,cAAgB,EAAA,mBAAA;AAAA,KACjB,CACA,CAAA,IAAA,CAAK,WAAW,CAAA,CAChB,MAAM,EAAE,iBAAA,EAAmB,SAAU,EAAC,EACtC,OAAQ,CAAA,cAAA,EAAgB,KAAK,CAC7B,CAAA,OAAA,CAAQ,kBAAkB,KAAK,CAAA;AAAA,GACnC,CAAA,CAAA;AAMD,EAAI,IAAA,CAAC,gBAAgB,MAAQ,EAAA;AAC3B,IAAO,MAAA,CAAA,KAAA;AAAA,MACL,oBAAoB,SAAS,CAAA,4CAAA,CAAA;AAAA,KAC/B,CAAA;AACA,IAAO,OAAA,WAAA,CAAA;AAAA,GACT;AAEA,EAAM,MAAA;AAAA,IACJ,QAAA;AAAA,IACA,eAAA;AAAA,IACA,MAAA;AAAA,IACA,sBAAA;AAAA,IACA,YAAA;AAAA,GACF,GAAI,gBAAgB,CAAC,CAAA,CAAA;AAMrB,EAAA,IAAI,CAAC,eAAiB,EAAA;AACpB,IAAO,MAAA,CAAA,KAAA;AAAA,MACL,oBAAoB,SAAS,CAAA,uCAAA,CAAA;AAAA,KAC/B,CAAA;AACA,IAAO,OAAA,WAAA,CAAA;AAAA,GACT;AAIA,EAAM,MAAA,MAAA,GAAS,IAAK,CAAA,KAAA,CAAM,eAAe,CAAA,CAAA;AACzC,EAAM,MAAA,QAAA,GAAW,MAAO,CAAA,sBAAsB,CAAM,KAAA,CAAA,CAAA;AACpD,EAAA,IAAI,cAAkC,EAAC,CAAA;AAEvC,EAAA,IAAI,QAAU,EAAA;AACZ,IAAO,MAAA,CAAA,KAAA,CAAM,CAAG,EAAA,SAAS,CAAe,aAAA,CAAA,CAAA,CAAA;AACxC,IAAA,MAAA,CAAO,SAAS,WAAc,GAAA;AAAA,MAC5B,GAAG,OAAO,QAAS,CAAA,WAAA;AAAA,MACnB,CAAC,qBAAqB,GAAG,MAAA;AAAA,KAC3B,CAAA;AAAA,GACF;AACA,EAAA,IAAI,MAAQ,EAAA;AACV,IAAM,MAAA,YAAA,GAAe,IAAK,CAAA,KAAA,CAAM,MAAM,CAAA,CAAA;AACtC,IAAA,IAAI,KAAM,CAAA,OAAA,CAAQ,YAAY,CAAA,IAAK,aAAa,MAAQ,EAAA;AACtD,MAAc,WAAA,GAAA,YAAA,CAAa,IAAI,CAAM,CAAA,MAAA;AAAA,QACnC,IAAM,EAAA8B,mDAAA;AAAA,QACN,KAAO,EAAA,OAAA;AAAA,QACP,SAAS,CAAG,EAAA,CAAA,CAAE,IAAI,CAAA,EAAA,EAAK,EAAE,OAAO,CAAA,CAAA;AAAA,QAChC,KAAO,EAAA,CAAA;AAAA,OACP,CAAA,CAAA,CAAA;AAAA,KACJ;AAAA,GACF;AAEA,EAAA,KAAA,MAAW,UAAc,IAAA,CAAC1E,gCAAqB,EAAAC,gCAAmB,CAAG,EAAA;AACnE,IAAA,MAAM,KAAQ,GAAA,CAAA,EAAA,GAAA,MAAA,CAAO,QAAS,CAAA,WAAA,KAAhB,IAA8B,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,UAAA,CAAA,CAAA;AAC5C,IAAA,IAAI,OAAO,KAAU,KAAA,QAAA,IAAY,qBAAsB,CAAA,IAAA,CAAK,KAAK,CAAG,EAAA;AAClE,MAAO,MAAA,CAAA,QAAA,CAAS,WAAa,CAAA,UAAU,CACrC,GAAA,+DAAA,CAAA;AAAA,KACJ;AAAA,GACF;AAIA,EAAA,MAAA,CAAO,YAAY,eAChB,CAAA,MAAA;AAAA,IAAO,SAAO,GAAI,CAAA,YAAA;AAAA;AAAA,GAAgD,CAClE,IAAoB,CAAQ,GAAA,MAAA;AAAA,IAC3B,MAAM,GAAI,CAAA,YAAA;AAAA,IACV,WAAW,GAAI,CAAA,cAAA;AAAA,GACf,CAAA,CAAA,CAAA;AACJ,EAAA,IAAI,YAAY,MAAQ,EAAA;AACtB,IAAA,MAAA,CAAO,MAAS,GAAA;AAAA,MACd,GAAG,MAAO,CAAA,MAAA;AAAA,MACV,KAAA,EAAO,CAAC,GAAA,CAAI,EAAO,GAAA,CAAA,EAAA,GAAA,MAAA,CAAA,MAAA,KAAP,IAAe,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,KAAA,KAAf,IAAwB,GAAA,EAAA,GAAA,EAAK,EAAA,GAAG,WAAW,CAAA;AAAA,KACzD,CAAA;AAAA,GACF;AAGA,EAAM,MAAA,IAAA,GAAO,mBAAmB,MAAM,CAAA,CAAA;AACtC,EAAA,IAAI,SAAS,YAAc,EAAA;AACzB,IAAO,MAAA,CAAA,KAAA,CAAM,CAAwB,qBAAA,EAAA,SAAS,CAAc,YAAA,CAAA,CAAA,CAAA;AAC5D,IAAO,OAAA,WAAA,CAAA;AAAA,GACT;AAEA,EAAA,MAAA,CAAO,SAAS,GAAM,GAAA,QAAA,CAAA;AACtB,EAAI,IAAA,CAAC,MAAO,CAAA,QAAA,CAAS,IAAM,EAAA;AAGzB,IAAA,MAAA,CAAO,SAAS,IAAO,GAAA,IAAA,CAAA;AAAA,GACzB;AAKA,EAAM,MAAA,aAAA,GAAgB,iBAAkB,CAAA,QAAA,EAAU,MAAM,CAAA,CAAA;AAExD,EAAA,MAAM,mBAAsB,GAAA,MAAM,IAAyB,CAAA,gBAAgB,EACxE,MAAO,CAAA;AAAA,IACN,YAAA,EAAc,IAAK,CAAA,SAAA,CAAU,MAAM,CAAA;AAAA,IACnC,IAAA;AAAA,IACA,eAAA,EAAiB,IAAK,CAAA,EAAA,CAAG,GAAI,EAAA;AAAA,GAC9B,CACA,CAAA,KAAA,CAAM,aAAa,QAAQ,CAAA,CAC3B,MAAM,eAAiB,EAAA,YAAY,CACnC,CAAA,UAAA,CAAW,WAAW,CACtB,CAAA,KAAA,CAAM,CAAC,cAAgB,EAAA,MAAA,EAAQ,iBAAiB,CAAC,CAAA,CAAA;AAEpD,EAAI,IAAA,OAAA,CAAQ,QAAS,CAAA,IAAA,KAAS,UAAY,EAAA;AACxC,IAAA,MAAM,2BAA4B,CAAA;AAAA,MAChC,IAAA;AAAA,MACA,SAAA;AAAA,MACA,YAAA;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAEA,EAAA,IAAI,wBAAwB,CAAG,EAAA;AAC7B,IAAO,MAAA,CAAA,KAAA,CAAM,CAAU,OAAA,EAAA,SAAS,CAAuC,qCAAA,CAAA,CAAA,CAAA;AACvE,IAAO,OAAA,WAAA,CAAA;AAAA,GACT;AASA,EAAM,MAAA,IAAA,CAAkB,QAAQ,CAAE,CAAA,KAAA,CAAM,EAAE,SAAW,EAAA,QAAA,EAAU,CAAA,CAAE,MAAO,EAAA,CAAA;AACxE,EAAA,MAAM,IAAK,CAAA,WAAA,CAAY,QAAU,EAAA,aAAA,EAAesD,YAAU,CAAA,CAAA;AAE1D,EAAO,OAAA,SAAA,CAAA;AACT;;AC3NgB,SAAA,eAAA,CAAgB,MAAY,MAAuB,EAAA;AAEjE,EAAA,MAAM,uBAAuB,mBAAoB,CAAA;AAAA,IAC/C,IAAM,EAAA,iCAAA;AAAA,IACN,IAAM,EAAA,4EAAA;AAAA,GACP,CAAA,CAAA;AAED,EAAM,MAAA,KAAA,GAAQH,WAAQ,CAAA,QAAA,CAAS,SAAS,CAAA,CAAA;AAExC,EAAA,MAAM,mBAAmB,KAAM,CAAA,aAAA;AAAA,IAC7B,iCAAA;AAAA,IACA;AAAA,MACE,WAAa,EAAA,6BAAA;AAAA,KACf;AAAA,GACF,CAAA;AAEA,EAAA,MAAM,oBAAoB,KAAM,CAAA,eAAA;AAAA,IAC9B,4BAAA;AAAA,IACA;AAAA,MACE,WAAa,EAAA,8CAAA;AAAA,MACb,IAAM,EAAA,SAAA;AAAA,KACR;AAAA,GACF,CAAA;AAEA,EAAA,MAAM,sBAAsB,KAAM,CAAA,qBAAA;AAAA,IAChC,gCAAA;AAAA,IACA,EAAE,aAAa,qDAAsD,EAAA;AAAA,GACvE,CAAA;AACA,EAAoB,mBAAA,CAAA,WAAA,CAAY,OAAM,MAAU,KAAA;AAC9C,IAAA,MAAM,KAAQ,GAAA,MAAM,IAAwB,CAAA,eAAe,CACxD,CAAA,KAAA,CAAM,EAAE,KAAA,EAAO,GAAI,EAAC,CACpB,CAAA,YAAA,CAAa,gBAAgB,CAAA,CAAA;AAChC,IAAA,MAAA,CAAO,QAAQ,MAAO,CAAA,KAAA,CAAM,CAAC,CAAA,CAAE,KAAK,CAAC,CAAA,CAAA;AAAA,GACtC,CAAA,CAAA;AAED,EAAA,MAAM,sBAAsB,KAAM,CAAA,eAAA;AAAA,IAChC,+BAAA;AAAA,IACA;AAAA,MACE,WACE,EAAA,qGAAA;AAAA,MACF,IAAM,EAAA,SAAA;AAAA,KACR;AAAA,GACF,CAAA;AAEA,EAAA,SAAS,YAAY,IAGlB,EAAA;AACD,IAAA,MAAA,CAAO,KAAM,CAAA,CAAA,UAAA,EAAa,IAAK,CAAA,SAAS,CAAE,CAAA,CAAA,CAAA;AAE1C,IAAM,MAAA,SAAA,GAAY,QAAQ,MAAO,EAAA,CAAA;AACjC,IAAA,IAAI,KAAK,iBAAmB,EAAA;AAC1B,MAAoB,mBAAA,CAAA,MAAA;AAAA,QAClB,CAAC,IAAK,CAAA,iBAAA,CAAkB,OAAQ,EAAA,CAAE,GAAG,SAAS,CAAA;AAAA,OAChD,CAAA;AAAA,KACF;AAEA,IAAA,SAAS,OAAU,GAAA;AACjB,MAAM,MAAA,KAAA,GAAQ,OAAQ,CAAA,MAAA,CAAO,SAAS,CAAA,CAAA;AACtC,MAAA,OAAO,KAAM,CAAA,CAAC,CAAI,GAAA,KAAA,CAAM,CAAC,CAAI,GAAA,GAAA,CAAA;AAAA,KAC/B;AAEA,IAAA,SAAS,aAAa,MAAgB,EAAA;AACpC,MAAA,oBAAA,CAAqB,IAAI,CAAC,CAAA,CAAA;AAC1B,MAAA,gBAAA,CAAiB,GAAI,CAAA,CAAA,EAAG,EAAE,MAAA,EAAQ,CAAA,CAAA;AAClC,MAAA,iBAAA,CAAkB,MAAO,CAAA,OAAA,EAAW,EAAA,EAAE,QAAQ,CAAA,CAAA;AAAA,KAChD;AAEA,IAAA,SAAS,WAAW,KAAc,EAAA;AAChC,MAAA,oBAAA,CAAqB,IAAI,CAAC,CAAA,CAAA;AAC1B,MAAA,gBAAA,CAAiB,GAAI,CAAA,CAAA,EAAG,EAAE,MAAA,EAAQ,SAAS,CAAA,CAAA;AAC3C,MAAA,iBAAA,CAAkB,OAAO,OAAQ,EAAA,EAAG,EAAE,MAAA,EAAQ,SAAS,CAAA,CAAA;AACvD,MAAO,MAAA,CAAA,KAAA;AAAA,QACL,oBAAoB,IAAK,CAAA,SAAS,CAAK,EAAA,EAAAc,qBAAA,CAAe,KAAK,CAAC,CAAA,CAAA;AAAA,OAC9D,CAAA;AAAA,KACF;AAEA,IAAO,OAAA;AAAA,MACL,YAAA;AAAA,MACA,UAAA;AAAA,KACF,CAAA;AAAA,GACF;AAEA,EAAA,OAAO,EAAE,WAAY,EAAA,CAAA;AACvB;;;;;;;;;;;;;;;;;;;;;AC7GA,IAAA,sBAAA,EAAA,wBAAA,EAAA,UAAA,EAAA,YAAA,CAAA;AA6CO,MAAM,gBAAA,GAAN,MAAM,gBAAoC,CAAA;AAAA,EAqB/C,YAAY,OAIT,EAAA;AAoFH,IAAM,YAAA,CAAA,IAAA,EAAA,sBAAA,CAAA,CAAA;AAaN,IAAM,YAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;AAzHN,IAAiBzE,eAAA,CAAA,IAAA,EAAA,MAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;AACjB,IAAiBA,eAAA,CAAA,IAAA,EAAA,SAAA,CAAA,CAAA;AACjB,IAAQA,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;AAqBN,IAAA,IAAA,CAAK,OAAO,OAAQ,CAAA,IAAA,CAAA;AACpB,IAAA,IAAA,CAAK,SAAS,OAAQ,CAAA,MAAA,CAAA;AACtB,IAAA,IAAA,CAAK,WAAW,OAAQ,CAAA,QAAA,CAAA;AACxB,IAAA,IAAA,CAAK,OAAU,GAAA,eAAA,CAAgB,OAAQ,CAAA,IAAA,EAAM,QAAQ,MAAM,CAAA,CAAA;AAAA,GAC7D;AAAA,EAvBA,OAAO,UACL,CAAA,MAAA,EACA,OAIiB,EAAA;AACjB,IAAA,OAAO,IAAI,gBAAgB,CAAA;AAAA,MACzB,MAAM,OAAQ,CAAA,IAAA;AAAA,MACd,QAAQ,OAAQ,CAAA,MAAA;AAAA,MAChB,QAAA,EAAU,4BAA4B,MAAM,CAAA;AAAA,KAC7C,CAAA,CAAA;AAAA,GACH;AAAA,EAaA,MAAM,OAAO,OAGV,EAAA;AACD,IAAM,MAAA,EAAE,UAAY,EAAA,SAAA,EAAc,GAAA,OAAA,CAAA;AAElC,IAAI,IAAA,IAAA,CAAK,QAAS,CAAA,IAAA,KAAS,UAAY,EAAA;AACrC,MAAA,MAAM,gBAAiB,CAAA;AAAA,QACrB,MAAM,IAAK,CAAA,IAAA;AAAA,QACX,UAAU,IAAK,CAAA,QAAA;AAAA,QACf,UAAA;AAAA,QACA,SAAA;AAAA,OACD,CAAA,CAAA;AACD,MAAA,OAAA;AAAA,KACF;AAEA,IAAA,IAAI,UAAY,EAAA;AACd,MAAA,KAAA,MAAW,aAAa,UAAY,EAAA;AAClC,QAAA,MAAM,eAAK,CAAA,IAAA,EAAA,UAAA,EAAA,YAAA,CAAA,CAAL,IAAgB,CAAA,IAAA,EAAA,EAAE,SAAU,EAAA,CAAA,CAAA;AAAA,OACpC;AAAA,KACF;AAEA,IAAA,IAAI,SAAW,EAAA;AACb,MAAA,MAAM,MAAS,GAAAoE,8BAAA;AAAA,QACb,MAAM,OAAQ,CAAA,SAAS,IAAI,SAAY,GAAA,CAAC,GAAG,SAAS,CAAA;AAAA,QACpD,GAAA;AAAA,OACF,CAAA;AACA,MAAA,KAAA,MAAW,SAAS,MAAQ,EAAA;AAC1B,QAAM,MAAA,IAAA,GAAO,MAAM,IAAA,CAAK,IAAwB,CAAA,eAAe,CAC5D,CAAA,MAAA,CAAO,YAAY,CAAA,CACnB,OAAQ,CAAA,WAAA,EAAa,KAAK,CAAA,CAAA;AAC7B,QAAA,KAAA,MAAW,OAAO,IAAM,EAAA;AACtB,UAAA,MAAM,sBAAK,UAAL,EAAA,YAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAAgB,EAAE,SAAA,EAAW,IAAI,UAAW,EAAA,CAAA,CAAA;AAAA,SACpD;AAAA,OACF;AAAA,KACF;AAAA,GACF;AAAA,EAEA,MAAM,KAAQ,GAAA;AACZ,IAAI,IAAA,IAAA,CAAK,QAAS,CAAA,IAAA,KAAS,UAAY,EAAA;AACrC,MAAA,IAAI,KAAK,QAAU,EAAA;AACjB,QAAM,MAAA,IAAI,MAAM,sCAAsC,CAAA,CAAA;AAAA,OACxD;AAEA,MAAA,MAAM,EAAE,eAAA,EAAiB,aAAc,EAAA,GAAI,IAAK,CAAA,QAAA,CAAA;AAEhD,MAAA,MAAM,eAAe,iBAAsC,CAAA;AAAA,QACzD,YAAc,EAAA,CAAA;AAAA,QACd,aAAe,EAAA,CAAA;AAAA,QACf,iBAAA,EAAmBW,6BAAuB,eAAe,CAAA;AAAA,QACzD,SAAA,EAAW,OAAM,KAAS,KAAA;AACxB,UAAA,OAAO,MAAM,eAAA,CAAA,IAAA,EAAK,sBAAL,EAAA,wBAAA,CAAA,CAAA,IAAA,CAAA,IAAA,EAA4B,KAAO,EAAA,aAAA,CAAA,CAAA;AAAA,SAClD;AAAA,QACA,WAAA,EAAa,OAAM,IAAQ,KAAA;AACzB,UAAO,OAAA,MAAM,eAAK,CAAA,IAAA,EAAA,UAAA,EAAA,YAAA,CAAA,CAAL,IAAgB,CAAA,IAAA,EAAA;AAAA,YAC3B,WAAW,IAAK,CAAA,SAAA;AAAA,YAChB,cAAc,IAAK,CAAA,YAAA;AAAA,YACnB,mBAAmB,IAAK,CAAA,iBAAA;AAAA,WAC1B,CAAA,CAAA;AAAA,SACF;AAAA,OACD,CAAA,CAAA;AAED,MAAA,IAAA,CAAK,WAAW,MAAM;AACpB,QAAa,YAAA,EAAA,CAAA;AAAA,OACf,CAAA;AAAA,KACF;AAAA,GACF;AAAA,EAEA,MAAM,IAAO,GAAA;AACX,IAAI,IAAA,IAAA,CAAK,QAAS,CAAA,IAAA,KAAS,UAAY,EAAA;AACrC,MAAA,IAAI,KAAK,QAAU,EAAA;AACjB,QAAA,IAAA,CAAK,QAAS,EAAA,CAAA;AACd,QAAA,IAAA,CAAK,QAAW,GAAA,KAAA,CAAA,CAAA;AAAA,OAClB;AAAA,KACF;AAAA,GACF;AAsCF,CAAA,CAAA;AApCQ,sBAAA,GAAA,IAAA,OAAA,EAAA,CAAA;AAAA,wBAAsB,GAAA,eAAC,OAAe,aAA8B,EAAA;AACxE,EAAI,IAAA;AACF,IAAA,OAAO,MAAM,6BAA8B,CAAA;AAAA,MACzC,MAAM,IAAK,CAAA,IAAA;AAAA,MACX,SAAW,EAAA,KAAA;AAAA,MACX,aAAA;AAAA,KACD,CAAA,CAAA;AAAA,WACM,KAAO,EAAA;AACd,IAAK,IAAA,CAAA,MAAA,CAAO,IAAK,CAAA,oCAAA,EAAsC,KAAK,CAAA,CAAA;AAC5D,IAAA,OAAO,EAAC,CAAA;AAAA,GACV;AACF,CAAA,CAAA;AAEM,UAAA,GAAA,IAAA,OAAA,EAAA,CAAA;AAAA,YAAA,GAAU,eAAC,OAId,EAAA;AACD,EAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,OAAA,CAAQ,WAAY,CAAA;AAAA,IACrC,WAAW,OAAQ,CAAA,SAAA;AAAA,IACnB,mBAAmB,OAAQ,CAAA,iBAAA;AAAA,GAC5B,CAAA,CAAA;AAED,EAAI,IAAA;AACF,IAAM,MAAA,MAAA,GAAS,MAAM,gBAAiB,CAAA;AAAA,MACpC,MAAM,IAAK,CAAA,IAAA;AAAA,MACX,QAAQ,IAAK,CAAA,MAAA;AAAA,MACb,UAAU,IAAK,CAAA,QAAA;AAAA,MACf,WAAW,OAAQ,CAAA,SAAA;AAAA,MACnB,cAAc,OAAQ,CAAA,YAAA;AAAA,KACvB,CAAA,CAAA;AACD,IAAA,KAAA,CAAM,aAAa,MAAM,CAAA,CAAA;AAAA,WAClB,KAAO,EAAA;AACd,IAAA,KAAA,CAAM,WAAW,KAAK,CAAA,CAAA;AAAA,GACxB;AACF,CAAA,CAAA;AAhJK,IAAM,eAAN,GAAA,gBAAA;;ACzBP,MAAM,MAAA,GAASL,MAAE,MAAO,CAAA;AAAA,EACtB,UAAY,EAAAA,KAAA,CAAE,KAAM,CAAAA,KAAA,CAAE,QAAQ,CAAA;AAAA,EAC9B,QAAQA,KAAE,CAAA,KAAA,CAAMA,MAAE,MAAO,EAAC,EAAE,QAAS,EAAA;AACvC,CAAC,CAAA,CAAA;AAEM,SAAS,qBAAqB,GAAsC,EAAA;AACzE,EAAI,IAAA;AACF,IAAO,OAAA,MAAA,CAAO,KAAM,CAAA,GAAA,CAAI,IAAI,CAAA,CAAA;AAAA,WACrB,KAAO,EAAA;AACd,IAAA,MAAM,IAAI5B,iBAAA;AAAA,MACR,CAAA,wFAAA,EAA2F,MAAM,OAAO,CAAA,CAAA;AAAA,KAC1G,CAAA;AAAA,GACF;AACF;;ACTO,SAAS,kBACd,KACc,EAAA;AACd,EAAA,MAAM,eAAqD,EAAC,CAAA;AAE5D,EAAA,KAAA,MAAW,CAAC,GAAK,EAAA,KAAK,KAAK,MAAO,CAAA,OAAA,CAAQ,KAAK,CAAG,EAAA;AAChD,IAAA,MAAM,MAAS,GAAA,CAAC,KAAK,CAAA,CAAE,IAAK,EAAA,CAAA;AAE5B,IAAA,MAAM,CACJ,GAAA,GAAA,IAAO,YACH,GAAA,YAAA,CAAa,GAAG,CAAA,GACf,YAAa,CAAA,GAAG,CAAI,GAAA,EAAE,GAAK,EAAA,MAAA,EAAQ,EAAG,EAAA,CAAA;AAE7C,IAAE,CAAA,CAAA,MAAA,CAAQ,IAAK,CAAA,GAAG,MAAM,CAAA,CAAA;AAAA,GAC1B;AAEA,EAAO,OAAA,EAAE,KAAO,EAAA,CAAC,EAAE,KAAA,EAAO,OAAO,MAAO,CAAA,YAAY,CAAE,EAAC,CAAE,EAAA,CAAA;AAC3D;;ACuBgB,SAAA,iBAAA,CACd,OACA,GACsB,EAAA;AACtB,EAAA,IAAI,UAAU,KAAW,CAAA,EAAA;AACvB,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACT;AAEA,EAAA,MAAM,KAAQ,GAAA,CAAC,KAAK,CAAA,CAAE,IAAK,EAAA,CAAA;AAC3B,EAAA,IAAI,MAAM,IAAK,CAAA,CAAA,CAAA,KAAK,OAAO,CAAA,KAAM,QAAQ,CAAG,EAAA;AAC1C,IAAA,MAAM,IAAIA,iBAAA,CAAW,CAAW,QAAA,EAAA,GAAG,CAAgB,cAAA,CAAA,CAAA,CAAA;AAAA,GACrD;AAEA,EAAO,OAAA,KAAA,CAAA;AACT;;ACnDO,SAAS,wBACd,MAC0B,EAAA;AAE1B,EAAA,MAAM,aAAgB,GAAA,iBAAA,CAAkB,MAAO,CAAA,MAAA,EAAQ,QAAQ,CAAA,CAAA;AAC/D,EAAA,IAAI,CAAC,aAAe,EAAA;AAClB,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACT;AAIA,EAAA,MAAM,UAAU,aAAc,CAAA,GAAA,CAAI,uBAAuB,CAAA,CAAE,OAAO,OAAO,CAAA,CAAA;AACzE,EAAI,IAAA,CAAC,QAAQ,MAAQ,EAAA;AACnB,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACT;AAEA,EAAO,OAAA,EAAE,OAAO,OAAQ,CAAA,GAAA,CAAI,QAAM,EAAE,KAAA,EAAO,CAAG,EAAA,CAAE,CAAE,EAAA,CAAA;AACpD,CAAA;AAMO,SAAS,wBACd,YACoC,EAAA;AACpC,EAAA,MAAM,UAAa,GAAA,YAAA,CAChB,KAAM,CAAA,GAAG,CACT,CAAA,GAAA,CAAI,CAAK,CAAA,KAAA,CAAA,CAAE,IAAK,EAAC,CACjB,CAAA,MAAA,CAAO,OAAO,CAAA,CAAA;AAEjB,EAAI,IAAA,CAAC,WAAW,MAAQ,EAAA;AACtB,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACT;AAEA,EAAA,MAAM,eAAqD,EAAC,CAAA;AAE5D,EAAA,KAAA,MAAW,aAAa,UAAY,EAAA;AAClC,IAAM,MAAA,WAAA,GAAc,SAAU,CAAA,OAAA,CAAQ,GAAG,CAAA,CAAA;AAEzC,IAAM,MAAA,GAAA,GACJ,gBAAgB,CACZ,CAAA,GAAA,SAAA,GACA,UAAU,SAAU,CAAA,CAAA,EAAG,WAAW,CAAA,CAAE,IAAK,EAAA,CAAA;AAC/C,IAAM,MAAA,KAAA,GACJ,gBAAgB,CACZ,CAAA,GAAA,KAAA,CAAA,GACA,UAAU,SAAU,CAAA,WAAA,GAAc,CAAC,CAAA,CAAE,IAAK,EAAA,CAAA;AAChD,IAAA,IAAI,CAAC,GAAK,EAAA;AACR,MAAA,MAAM,IAAIA,iBAAA;AAAA,QACR,oBAAoB,SAAS,CAAA,yEAAA,CAAA;AAAA,OAC/B,CAAA;AAAA,KACF;AAEA,IAAM,MAAA,CAAA,GACJ,GAAO,IAAA,YAAA,GAAe,YAAa,CAAA,GAAG,IAAK,YAAa,CAAA,GAAG,CAAI,GAAA,EAAE,GAAI,EAAA,CAAA;AAEvE,IAAA,IAAI,UAAU,KAAW,CAAA,EAAA;AACvB,MAAE,CAAA,CAAA,MAAA,GAAS,CAAE,CAAA,MAAA,IAAU,EAAC,CAAA;AACxB,MAAE,CAAA,CAAA,MAAA,CAAO,KAAK,KAAK,CAAA,CAAA;AAAA,KACrB;AAAA,GACF;AAEA,EAAO,OAAA,MAAA,CAAO,OAAO,YAAY,CAAA,CAAA;AACnC;;ACrEA,SAAS,oBAAA,CAAqB,OAAe,KAAe,EAAA;AAC1D,EAAO,OAAA,KAAA,CAAM,KAAM,CAAA,GAAG,CAAE,CAAA,MAAA;AAAA,IACtB,CAAC,CAAC,SAAA,EAAW,WAAW,CAAG,EAAA,QAAA,EAAU,OAAO,UAAe,KAAA;AACzD,MAAA,IAAIH,uBAAO,CAAA,KAAA,CAAM,WAAa,EAAA,QAAQ,CAAG,EAAA;AACvC,QAAA,OAAO,CAAC,SAAU,CAAA,MAAA,CAAO,QAAQ,CAAG,EAAA,WAAA,CAAY,QAAQ,CAAC,CAAA,CAAA;AAAA,OAChD,MAAA,IAAA,UAAA,CAAW,KAAQ,GAAA,CAAC,MAAM,KAAW,CAAA,EAAA;AAC9C,QAAW,UAAA,CAAA,KAAA,GAAQ,CAAC,CAAI,GAAA,CAAA,EAAG,QAAQ,CAAI,CAAA,EAAA,UAAA,CAAW,KAAQ,GAAA,CAAC,CAAC,CAAA,CAAA,CAAA;AAC5D,QAAO,OAAA,CAAC,WAAW,WAAW,CAAA,CAAA;AAAA,OAChC;AAEA,MAAO,OAAA,CAAC,WAAW,KAAS,CAAA,CAAA,CAAA;AAAA,KAC9B;AAAA,IACA,CAAC,EAAC,EAAe,KAAY,CAAA;AAAA,GAC/B,CAAA;AACF,CAAA;AAEgB,SAAA,0BAAA,CACd,QACA,KAC0C,EAAA;AAzC5C,EAAA,IAAA,EAAA,CAAA;AA0CE,EAAA,MAAM,WAAc,GAAA,iBAAA,CAAkB,MAAO,CAAA,MAAA,EAAQ,QAAQ,CAAA,CAAA;AAE7D,EAAA,MAAM,SAAS,KAAM,CAAA,IAAA;AAAA,IACnB,IAAI,GAAA;AAAA,MACF,CAAC,GAAI,KAAA,IAAA,IAAA,GAAA,KAAA,GAAS,EAAC,EAAI,GAAI,CAAA,EAAA,GAAA,WAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,WAAA,CAAa,GAAI,CAAA,CAAA,CAAA,KAAK,CAAE,CAAA,KAAA,CAAM,GAAG,CAAA,CAAA,KAAjC,YAAuC,EAAG,CAC9D,CAAA,IAAA,EACA,CAAA,GAAA,CAAI,CAAK,CAAA,KAAA,CAAA,CAAE,IAAK,EAAC,CACjB,CAAA,MAAA,CAAO,OAAO,CAAA;AAAA,KACnB;AAAA,GACF,CAAA;AAEA,EAAI,IAAA,CAAC,OAAO,MAAQ,EAAA;AAClB,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACT;AAEA,EAAA,MAAM,iBAAiB,MAAO,CAAA,IAAA,CAAK,OAAK,CAAE,CAAA,QAAA,CAAS,GAAG,CAAC,CAAA,CAAA;AACvD,EAAA,IAAI,cAAgB,EAAA;AAClB,IAAA,MAAM,IAAIG,iBAAA;AAAA,MACR,kBAAkB,cAAc,CAAA,sCAAA,CAAA;AAAA,KAClC,CAAA;AAAA,GACF;AAEA,EAAA,OAAO,CAAS,KAAA,KAAA;AACd,IAAA,MAAM,SAAmC,EAAC,CAAA;AAE1C,IAAA,KAAA,MAAW,SAAS,MAAQ,EAAA;AAC1B,MAAA,MAAM,CAAC,SAAW,EAAA,KAAK,CAAI,GAAA,oBAAA,CAAqB,OAAO,KAAK,CAAA,CAAA;AAE5D,MAAA,IAAI,UAAU,KAAW,CAAA,EAAA;AACvB,QAAOH,uBAAA,CAAA,GAAA,CAAI,MAAQ,EAAA,SAAA,EAAW,KAAK,CAAA,CAAA;AAAA,OACrC;AAAA,KACF;AAEA,IAAO,OAAA,MAAA,CAAA;AAAA,GACT,CAAA;AACF;;ACzDO,SAAS,4BACd,MAC2B,EAAA;AAC3B,EAAA,MAAM,iBAAoB,GAAA,iBAAA,CAAkB,MAAO,CAAA,UAAA,EAAY,YAAY,CAAA,CAAA;AAC3E,EAAA,IAAI,CAAC,iBAAmB,EAAA;AACtB,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACT;AAEA,EAAO,OAAA,iBAAA,CAAkB,IAAI,CAAoB,gBAAA,KAAA;AAC/C,IAAA,MAAM,CAAC,KAAO,EAAA,KAAK,CAAI,GAAA,gBAAA,CAAiB,MAAM,GAAG,CAAA,CAAA;AAEjD,IAAA,IAAI,KAAU,KAAA,KAAA,CAAA,IAAa,CAAC,OAAA,CAAQ,KAAK,CAAG,EAAA;AAC1C,MAAM,MAAA,IAAIG,kBAAW,gDAAgD,CAAA,CAAA;AAAA,KACvE;AACA,IAAO,OAAA,EAAE,OAAO,KAAM,EAAA,CAAA;AAAA,GACvB,CAAA,CAAA;AACH,CAAA;AAEO,SAAS,QAAQ,KAAwC,EAAA;AAC9D,EAAA,OAAO,CAAC,KAAA,EAAO,MAAM,CAAA,CAAE,SAAS,KAAK,CAAA,CAAA;AACvC;;ACZO,SAAS,yBACd,MACqD,EAAA;AACrD,EAAM,MAAA,MAAA,GAAS,2BAA2B,MAAM,CAAA,CAAA;AAEhD,EAAA,IAAI,OAAO,MAAQ,EAAA;AACjB,IAAM,MAAA,aAAA,GAAgB,YAAa,CAAA,MAAA,CAAO,MAAM,CAAA,CAAA;AAChD,IAAA,MAAMoC,SAA4D,GAAA;AAAA,MAChE,MAAQ,EAAA,aAAA;AAAA,MACR,MAAA;AAAA,KACF,CAAA;AACA,IAAOA,OAAAA,SAAAA,CAAAA;AAAA,GACT;AAEA,EAAM,MAAA,MAAA,GAAS,wBAAwB,MAAM,CAAA,CAAA;AAC7C,EAAM,MAAA,WAAA,GAAc,4BAA4B,MAAM,CAAA,CAAA;AAEtD,EAAA,MAAM,QAA6D,GAAA;AAAA,IACjE,MAAA;AAAA,IACA,MAAA;AAAA,IACA,WAAA;AAAA,IACA,cAAgB,EAAA;AAAA,MACd,IAAA,EAAM,OAAO,kBAAsB,IAAA,EAAA;AAAA,MACnC,QAAQ,MAAO,CAAA,oBAAA;AAAA,KACjB;AAAA,GACF,CAAA;AAEA,EAAO,OAAA,QAAA,CAAA;AACT;;ACjCO,SAAS,uBACd,MACU,EAAA;AAEV,EAAA,MAAM,YAAe,GAAA,iBAAA,CAAkB,MAAO,CAAA,KAAA,EAAO,OAAO,CAAA,CAAA;AAC5D,EAAA,IAAI,YAAc,EAAA;AAChB,IAAM,MAAA,QAAA,GAAW,YAAa,CAAA,MAAA,CAAO,OAAO,CAAA,CAAA;AAC5C,IAAA,IAAI,SAAS,MAAQ,EAAA;AACnB,MAAO,OAAA,QAAA,CAAA;AAAA,KACT;AAAA,GACF;AAEA,EAAM,MAAA,IAAIpC,kBAAW,yBAAyB,CAAA,CAAA;AAChD;;AChBO,SAAS,uBACd,MAC2B,EAAA;AAtB7B,EAAA,IAAA,EAAA,CAAA;AAuBE,EAAA,OAAA,CAAO,uBAAkB,MAAO,CAAA,KAAA,EAAO,OAAO,CAAvC,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAA0C,IAAI,CAAQ,IAAA,KAAA;AAC3D,IAAM,MAAA,KAAA,GAAQ,IAAK,CAAA,KAAA,CAAM,mBAAmB,CAAA,CAAA;AAC5C,IAAA,IAAI,CAAC,KAAO,EAAA;AACV,MAAA,MAAM,IAAIA,iBAAA;AAAA,QACR,4BAA4B,IAAI,CAAA,wCAAA,CAAA;AAAA,OAClC,CAAA;AAAA,KACF;AAEA,IAAO,OAAA;AAAA,MACL,KAAA,EAAO,MAAM,CAAC,CAAA;AAAA,MACd,KAAA,EAAO,MAAM,CAAC,CAAA;AAAA,KAChB,CAAA;AAAA,GACF,CAAA,CAAA;AACF;;ACfO,MAAM,IAAO,GAAA;AAAA,EAClB,OAAS,EAAA,OAAA;AAAA,EACT,IAAM,EAAA;AAAA,IACJ,KAAO,EAAA,SAAA;AAAA,IACP,OAAS,EAAA,GAAA;AAAA,IACT,WACE,EAAA,kEAAA;AAAA,IACF,OAAS,EAAA;AAAA,MACP,IAAM,EAAA,YAAA;AAAA,MACN,GAAK,EAAA,iDAAA;AAAA,KACP;AAAA,IACA,SAAS,EAAC;AAAA,GACZ;AAAA,EACA,OAAS,EAAA;AAAA,IACP;AAAA,MACE,GAAK,EAAA,GAAA;AAAA,KACP;AAAA,GACF;AAAA,EACA,UAAY,EAAA;AAAA,IACV,UAAU,EAAC;AAAA,IACX,SAAS,EAAC;AAAA,IACV,UAAY,EAAA;AAAA,MACV,IAAM,EAAA;AAAA,QACJ,IAAM,EAAA,MAAA;AAAA,QACN,EAAI,EAAA,MAAA;AAAA,QACJ,QAAU,EAAA,IAAA;AAAA,QACV,aAAe,EAAA,IAAA;AAAA,QACf,MAAQ,EAAA;AAAA,UACN,IAAM,EAAA,QAAA;AAAA,SACR;AAAA,OACF;AAAA,MACA,SAAW,EAAA;AAAA,QACT,IAAM,EAAA,WAAA;AAAA,QACN,EAAI,EAAA,MAAA;AAAA,QACJ,QAAU,EAAA,IAAA;AAAA,QACV,aAAe,EAAA,IAAA;AAAA,QACf,MAAQ,EAAA;AAAA,UACN,IAAM,EAAA,QAAA;AAAA,SACR;AAAA,OACF;AAAA,MACA,IAAM,EAAA;AAAA,QACJ,IAAM,EAAA,MAAA;AAAA,QACN,EAAI,EAAA,MAAA;AAAA,QACJ,QAAU,EAAA,IAAA;AAAA,QACV,aAAe,EAAA,IAAA;AAAA,QACf,MAAQ,EAAA;AAAA,UACN,IAAM,EAAA,QAAA;AAAA,SACR;AAAA,OACF;AAAA,MACA,GAAK,EAAA;AAAA,QACH,IAAM,EAAA,KAAA;AAAA,QACN,EAAI,EAAA,MAAA;AAAA,QACJ,QAAU,EAAA,IAAA;AAAA,QACV,aAAe,EAAA,IAAA;AAAA,QACf,MAAQ,EAAA;AAAA,UACN,IAAM,EAAA,QAAA;AAAA,SACR;AAAA,OACF;AAAA,MACA,MAAQ,EAAA;AAAA,QACN,IAAM,EAAA,QAAA;AAAA,QACN,EAAI,EAAA,OAAA;AAAA,QACJ,WAAa,EAAA,kCAAA;AAAA,QACb,QAAU,EAAA,KAAA;AAAA,QACV,aAAe,EAAA,IAAA;AAAA,QACf,MAAQ,EAAA;AAAA,UACN,IAAM,EAAA,QAAA;AAAA,UACN,SAAW,EAAA,CAAA;AAAA,SACb;AAAA,OACF;AAAA,MACA,KAAO,EAAA;AAAA,QACL,IAAM,EAAA,OAAA;AAAA,QACN,EAAI,EAAA,OAAA;AAAA,QACJ,WAAa,EAAA,0CAAA;AAAA,QACb,QAAU,EAAA,KAAA;AAAA,QACV,aAAe,EAAA,IAAA;AAAA,QACf,MAAQ,EAAA;AAAA,UACN,IAAM,EAAA,QAAA;AAAA,UACN,SAAW,EAAA,CAAA;AAAA,SACb;AAAA,OACF;AAAA,MACA,MAAQ,EAAA;AAAA,QACN,IAAM,EAAA,QAAA;AAAA,QACN,EAAI,EAAA,OAAA;AAAA,QACJ,WAAa,EAAA,gDAAA;AAAA,QACb,QAAU,EAAA,KAAA;AAAA,QACV,aAAe,EAAA,IAAA;AAAA,QACf,OAAS,EAAA,KAAA;AAAA,QACT,MAAQ,EAAA;AAAA,UACN,IAAM,EAAA,OAAA;AAAA,UACN,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,QAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA;AAAA,UACR,8CAAgD,EAAA;AAAA,YAC9C,KAAA,EAAO,CAAC,eAAA,EAAiB,WAAW,CAAA;AAAA,WACtC;AAAA,UACA,8BAAgC,EAAA;AAAA,YAC9B,KAAO,EAAA,CAAC,MAAQ,EAAA,eAAA,EAAiB,oBAAoB,CAAA;AAAA,WACvD;AAAA,SACF;AAAA,OACF;AAAA,MACA,MAAQ,EAAA;AAAA,QACN,IAAM,EAAA,QAAA;AAAA,QACN,EAAI,EAAA,OAAA;AAAA,QACJ,WAAa,EAAA,sDAAA;AAAA,QACb,QAAU,EAAA,KAAA;AAAA,QACV,aAAe,EAAA,IAAA;AAAA,QACf,MAAQ,EAAA;AAAA,UACN,IAAM,EAAA,OAAA;AAAA,UACN,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,QAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA;AAAA,UACR,YAAc,EAAA;AAAA,YACZ,KAAA,EAAO,CAAC,YAAY,CAAA;AAAA,WACtB;AAAA,UACA,yBAA2B,EAAA;AAAA,YACzB,KAAO,EAAA;AAAA,cACL,8DAAA;AAAA,aACF;AAAA,WACF;AAAA,SACF;AAAA,OACF;AAAA,MACA,MAAQ,EAAA;AAAA,QACN,IAAM,EAAA,QAAA;AAAA,QACN,EAAI,EAAA,OAAA;AAAA,QACJ,WAAa,EAAA,8CAAA;AAAA,QACb,QAAU,EAAA,KAAA;AAAA,QACV,aAAe,EAAA,IAAA;AAAA,QACf,MAAQ,EAAA;AAAA,UACN,IAAM,EAAA,SAAA;AAAA,UACN,OAAS,EAAA,CAAA;AAAA,SACX;AAAA,OACF;AAAA,MACA,KAAO,EAAA;AAAA,QACL,IAAM,EAAA,OAAA;AAAA,QACN,EAAI,EAAA,OAAA;AAAA,QACJ,WAAa,EAAA,8CAAA;AAAA,QACb,QAAU,EAAA,KAAA;AAAA,QACV,aAAe,EAAA,IAAA;AAAA,QACf,MAAQ,EAAA;AAAA,UACN,IAAM,EAAA,SAAA;AAAA,UACN,OAAS,EAAA,CAAA;AAAA,SACX;AAAA,OACF;AAAA,MACA,UAAY,EAAA;AAAA,QACV,IAAM,EAAA,YAAA;AAAA,QACN,EAAI,EAAA,OAAA;AAAA,QACJ,WAAa,EAAA,yCAAA;AAAA,QACb,QAAU,EAAA,KAAA;AAAA,QACV,aAAe,EAAA,IAAA;AAAA,QACf,MAAQ,EAAA;AAAA,UACN,IAAM,EAAA,OAAA;AAAA,UACN,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,QAAA;AAAA,YACN,WAAa,EAAA,qCAAA;AAAA,WACf;AAAA,SACF;AAAA,QACA,OAAS,EAAA,IAAA;AAAA,QACT,KAAO,EAAA,MAAA;AAAA,QACP,QAAU,EAAA;AAAA,UACR,yBAA2B,EAAA;AAAA,YACzB,KAAA,EAAO,CAAC,mBAAmB,CAAA;AAAA,WAC7B;AAAA,UACA,2BAA6B,EAAA;AAAA,YAC3B,KAAA,EAAO,CAAC,iBAAiB,CAAA;AAAA,WAC3B;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,IACA,eAAe,EAAC;AAAA,IAChB,SAAW,EAAA;AAAA,MACT,aAAe,EAAA;AAAA,QACb,WAAa,EAAA,qCAAA;AAAA,QACb,OAAS,EAAA;AAAA,UACP,kBAAoB,EAAA;AAAA,YAClB,MAAQ,EAAA;AAAA,cACN,IAAM,EAAA,4BAAA;AAAA,aACR;AAAA,WACF;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,IACA,OAAS,EAAA;AAAA,MACP,KAAO,EAAA;AAAA,QACL,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,QAAA;AAAA,YACN,UAAY,EAAA;AAAA,cACV,IAAM,EAAA;AAAA,gBACJ,IAAM,EAAA,QAAA;AAAA,eACR;AAAA,cACA,OAAS,EAAA;AAAA,gBACP,IAAM,EAAA,QAAA;AAAA,eACR;AAAA,cACA,KAAO,EAAA;AAAA,gBACL,IAAM,EAAA,QAAA;AAAA,eACR;AAAA,cACA,IAAM,EAAA;AAAA,gBACJ,IAAM,EAAA,QAAA;AAAA,eACR;AAAA,aACF;AAAA,YACA,QAAA,EAAU,CAAC,MAAA,EAAQ,SAAS,CAAA;AAAA,WAC9B;AAAA,UACA,OAAS,EAAA;AAAA,YACP,IAAM,EAAA,QAAA;AAAA,YACN,UAAY,EAAA;AAAA,cACV,MAAQ,EAAA;AAAA,gBACN,IAAM,EAAA,QAAA;AAAA,eACR;AAAA,cACA,GAAK,EAAA;AAAA,gBACH,IAAM,EAAA,QAAA;AAAA,eACR;AAAA,aACF;AAAA,YACA,QAAA,EAAU,CAAC,QAAA,EAAU,KAAK,CAAA;AAAA,WAC5B;AAAA,UACA,QAAU,EAAA;AAAA,YACR,IAAM,EAAA,QAAA;AAAA,YACN,UAAY,EAAA;AAAA,cACV,UAAY,EAAA;AAAA,gBACV,IAAM,EAAA,QAAA;AAAA,eACR;AAAA,aACF;AAAA,YACA,QAAA,EAAU,CAAC,YAAY,CAAA;AAAA,WACzB;AAAA,SACF;AAAA,QACA,QAAA,EAAU,CAAC,OAAA,EAAS,UAAU,CAAA;AAAA,QAC9B,sBAAsB,EAAC;AAAA,OACzB;AAAA,MACA,UAAY,EAAA;AAAA,QACV,IAAM,EAAA,QAAA;AAAA,QACN,YAAY,EAAC;AAAA,QACb,WAAa,EAAA,qDAAA;AAAA,QACb,sBAAsB,EAAC;AAAA,OACzB;AAAA,MACA,eAAiB,EAAA;AAAA,QACf,IAAM,EAAA,QAAA;AAAA,QACN,YAAY,EAAC;AAAA,QACb,oBAAsB,EAAA;AAAA,UACpB,IAAM,EAAA,QAAA;AAAA,SACR;AAAA,QACA,WAAa,EAAA,uDAAA;AAAA,OACf;AAAA,MACA,UAAY,EAAA;AAAA,QACV,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,IAAM,EAAA;AAAA,YACJ,IAAM,EAAA,QAAA;AAAA,YACN,WACE,EAAA,4DAAA;AAAA,WACJ;AAAA,UACA,IAAM,EAAA;AAAA,YACJ,IAAM,EAAA,QAAA;AAAA,YACN,WACE,EAAA,yDAAA;AAAA,WACJ;AAAA,UACA,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,QAAA;AAAA,YACN,WAAa,EAAA,6CAAA;AAAA,WACf;AAAA,UACA,GAAK,EAAA;AAAA,YACH,IAAM,EAAA,QAAA;AAAA,YACN,WAAa,EAAA,8CAAA;AAAA,WACf;AAAA,SACF;AAAA,QACA,QAAA,EAAU,CAAC,KAAK,CAAA;AAAA,QAChB,WACE,EAAA,+DAAA;AAAA,QACF,oBAAsB,EAAA,KAAA;AAAA,OACxB;AAAA,MACA,UAAY,EAAA;AAAA,QACV,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,OAAA;AAAA,YACN,KAAO,EAAA;AAAA,cACL,IAAM,EAAA,iCAAA;AAAA,aACR;AAAA,YACA,WAAa,EAAA,sDAAA;AAAA,WACf;AAAA,UACA,IAAM,EAAA;AAAA,YACJ,IAAM,EAAA,OAAA;AAAA,YACN,KAAO,EAAA;AAAA,cACL,IAAM,EAAA,QAAA;AAAA,aACR;AAAA,YACA,WACE,EAAA,6FAAA;AAAA,WACJ;AAAA,UACA,WAAa,EAAA;AAAA,YACX,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,UACA,MAAQ,EAAA;AAAA,YACN,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,UACA,WAAa,EAAA;AAAA,YACX,IAAM,EAAA,QAAA;AAAA,YACN,WACE,EAAA,mFAAA;AAAA,WACJ;AAAA,UACA,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,QAAA;AAAA,YACN,WACE,EAAA,wrBAAA;AAAA,WACJ;AAAA,UACA,SAAW,EAAA;AAAA,YACT,IAAM,EAAA,QAAA;AAAA,YACN,WAAa,EAAA,2CAAA;AAAA,WACf;AAAA,UACA,IAAM,EAAA;AAAA,YACJ,IAAM,EAAA,QAAA;AAAA,YACN,WACE,EAAA,qeAAA;AAAA,WACJ;AAAA,UACA,IAAM,EAAA;AAAA,YACJ,IAAM,EAAA,QAAA;AAAA,YACN,WACE,EAAA,wbAAA;AAAA,WACJ;AAAA,UACA,GAAK,EAAA;AAAA,YACH,IAAM,EAAA,QAAA;AAAA,YACN,WACE,EAAA,qXAAA;AAAA,WACJ;AAAA,SACF;AAAA,QACA,QAAA,EAAU,CAAC,MAAM,CAAA;AAAA,QACjB,WAAa,EAAA,yDAAA;AAAA,QACb,sBAAsB,EAAC;AAAA,OACzB;AAAA,MACA,cAAgB,EAAA;AAAA,QACd,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,SAAW,EAAA;AAAA,YACT,IAAM,EAAA,QAAA;AAAA,YACN,WAAa,EAAA,gDAAA;AAAA,WACf;AAAA,UACA,IAAM,EAAA;AAAA,YACJ,IAAM,EAAA,QAAA;AAAA,YACN,WAAa,EAAA,2BAAA;AAAA,WACf;AAAA,SACF;AAAA,QACA,QAAA,EAAU,CAAC,WAAA,EAAa,MAAM,CAAA;AAAA,QAC9B,WACE,EAAA,iEAAA;AAAA,QACF,oBAAsB,EAAA,KAAA;AAAA,OACxB;AAAA,MACA,MAAQ,EAAA;AAAA,QACN,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,SAAW,EAAA;AAAA,YACT,IAAM,EAAA,OAAA;AAAA,YACN,KAAO,EAAA;AAAA,cACL,IAAM,EAAA,qCAAA;AAAA,aACR;AAAA,YACA,WACE,EAAA,yDAAA;AAAA,WACJ;AAAA,UACA,IAAM,EAAA;AAAA,YACJ,IAAM,EAAA,iCAAA;AAAA,WACR;AAAA,UACA,QAAU,EAAA;AAAA,YACR,IAAM,EAAA,iCAAA;AAAA,WACR;AAAA,UACA,IAAM,EAAA;AAAA,YACJ,IAAM,EAAA,QAAA;AAAA,YACN,WAAa,EAAA,6CAAA;AAAA,WACf;AAAA,UACA,UAAY,EAAA;AAAA,YACV,IAAM,EAAA,QAAA;AAAA,YACN,WACE,EAAA,+FAAA;AAAA,WACJ;AAAA,SACF;AAAA,QACA,QAAU,EAAA,CAAC,UAAY,EAAA,MAAA,EAAQ,YAAY,CAAA;AAAA,QAC3C,WACE,EAAA,wEAAA;AAAA,OACJ;AAAA,MACA,cAAgB,EAAA;AAAA,QACd,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,SAAW,EAAA;AAAA,YACT,IAAM,EAAA,OAAA;AAAA,YACN,KAAO,EAAA;AAAA,cACL,IAAM,EAAA,qCAAA;AAAA,aACR;AAAA,YACA,WACE,EAAA,yDAAA;AAAA,WACJ;AAAA,UACA,IAAM,EAAA;AAAA,YACJ,IAAM,EAAA,iCAAA;AAAA,WACR;AAAA,UACA,QAAU,EAAA;AAAA,YACR,IAAM,EAAA,iCAAA;AAAA,WACR;AAAA,UACA,IAAM,EAAA;AAAA,YACJ,IAAM,EAAA,QAAA;AAAA,YACN,WAAa,EAAA,6CAAA;AAAA,WACf;AAAA,UACA,UAAY,EAAA;AAAA,YACV,IAAM,EAAA,QAAA;AAAA,YACN,WACE,EAAA,+FAAA;AAAA,WACJ;AAAA,SACF;AAAA,QACA,QAAU,EAAA,CAAC,UAAY,EAAA,MAAA,EAAQ,YAAY,CAAA;AAAA,QAC3C,WACE,EAAA,wEAAA;AAAA,QACF,QAAU,EAAA,IAAA;AAAA,OACZ;AAAA,MACA,sBAAwB,EAAA;AAAA,QACtB,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,OAAA;AAAA,YACN,KAAO,EAAA;AAAA,cACL,IAAM,EAAA,QAAA;AAAA,cACN,UAAY,EAAA;AAAA,gBACV,gBAAkB,EAAA;AAAA,kBAChB,KAAO,EAAA;AAAA,oBACL,IAAM,EAAA,QAAA;AAAA,mBACR;AAAA,kBACA,IAAM,EAAA,OAAA;AAAA,iBACR;AAAA,gBACA,MAAQ,EAAA;AAAA,kBACN,IAAM,EAAA,6BAAA;AAAA,iBACR;AAAA,eACF;AAAA,cACA,QAAA,EAAU,CAAC,kBAAA,EAAoB,QAAQ,CAAA;AAAA,aACzC;AAAA,WACF;AAAA,UACA,aAAe,EAAA;AAAA,YACb,IAAM,EAAA,QAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAA,EAAU,CAAC,OAAA,EAAS,eAAe,CAAA;AAAA,QACnC,oBAAsB,EAAA,KAAA;AAAA,OACxB;AAAA,MACA,qBAAuB,EAAA;AAAA,QACrB,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,OAAA;AAAA,YACN,KAAO,EAAA;AAAA,cACL,IAAM,EAAA,qCAAA;AAAA,aACR;AAAA,YACA,WACE,EAAA,0IAAA;AAAA,WACJ;AAAA,SACF;AAAA,QACA,QAAA,EAAU,CAAC,OAAO,CAAA;AAAA,QAClB,oBAAsB,EAAA,KAAA;AAAA,OACxB;AAAA,MACA,WAAa,EAAA;AAAA,QACX,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,QAAA;AAAA,WACR;AAAA,UACA,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,QAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAA,EAAU,CAAC,OAAA,EAAS,OAAO,CAAA;AAAA,QAC3B,oBAAsB,EAAA,KAAA;AAAA,OACxB;AAAA,MACA,oBAAsB,EAAA;AAAA,QACpB,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,MAAQ,EAAA;AAAA,YACN,IAAM,EAAA,QAAA;AAAA,YACN,oBAAsB,EAAA;AAAA,cACpB,IAAM,EAAA,OAAA;AAAA,cACN,KAAO,EAAA;AAAA,gBACL,IAAM,EAAA,kCAAA;AAAA,eACR;AAAA,aACF;AAAA,WACF;AAAA,SACF;AAAA,QACA,QAAA,EAAU,CAAC,QAAQ,CAAA;AAAA,QACnB,oBAAsB,EAAA,KAAA;AAAA,OACxB;AAAA,MACA,QAAU,EAAA;AAAA,QACR,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,MAAQ,EAAA;AAAA,YACN,IAAM,EAAA,QAAA;AAAA,WACR;AAAA,UACA,IAAM,EAAA;AAAA,YACJ,IAAM,EAAA,QAAA;AAAA,WACR;AAAA,UACA,EAAI,EAAA;AAAA,YACF,IAAM,EAAA,QAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA,CAAC,QAAU,EAAA,MAAA,EAAQ,IAAI,CAAA;AAAA,QACjC,WAAa,EAAA,wCAAA;AAAA,QACb,oBAAsB,EAAA,KAAA;AAAA,OACxB;AAAA,MACA,YAAc,EAAA;AAAA,QACZ,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,MAAQ,EAAA;AAAA,YACN,IAAM,EAAA,QAAA;AAAA,WACR;AAAA,UACA,IAAM,EAAA;AAAA,YACJ,IAAM,EAAA,QAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAA,EAAU,CAAC,QAAA,EAAU,MAAM,CAAA;AAAA,QAC3B,WAAa,EAAA,wCAAA;AAAA,QACb,oBAAsB,EAAA,KAAA;AAAA,OACxB;AAAA,MACA,6BAA+B,EAAA;AAAA,QAC7B,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,MAAQ,EAAA;AAAA,YACN,IAAM,EAAA,6BAAA;AAAA,WACR;AAAA,UACA,YAAc,EAAA;AAAA,YACZ,IAAM,EAAA,SAAA;AAAA,WACR;AAAA,UACA,QAAU,EAAA;AAAA,YACR,IAAM,EAAA,mCAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA,CAAC,QAAU,EAAA,cAAA,EAAgB,UAAU,CAAA;AAAA,QAC/C,WACE,EAAA,6OAAA;AAAA,QACF,oBAAsB,EAAA,KAAA;AAAA,OACxB;AAAA,MACA,8BAAgC,EAAA;AAAA,QAC9B,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,SAAW,EAAA;AAAA,YACT,IAAM,EAAA,QAAA;AAAA,YACN,WAAa,EAAA,gDAAA;AAAA,WACf;AAAA,UACA,IAAM,EAAA;AAAA,YACJ,IAAM,EAAA,QAAA;AAAA,YACN,WAAa,EAAA,2BAAA;AAAA,WACf;AAAA,SACF;AAAA,QACA,WACE,EAAA,iEAAA;AAAA,QACF,oBAAsB,EAAA,KAAA;AAAA,OACxB;AAAA,MACA,0BAA4B,EAAA;AAAA,QAC1B,KAAO,EAAA;AAAA,UACL;AAAA,YACE,IAAM,EAAA,iCAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,IAAM,EAAA,QAAA;AAAA,YACN,UAAY,EAAA;AAAA,cACV,KAAO,EAAA;AAAA,gBACL,IAAM,EAAA,OAAA;AAAA,gBACN,KAAO,EAAA;AAAA,kBACL,IAAM,EAAA,iCAAA;AAAA,iBACR;AAAA,gBACA,WACE,EAAA,sDAAA;AAAA,eACJ;AAAA,cACA,IAAM,EAAA;AAAA,gBACJ,IAAM,EAAA,OAAA;AAAA,gBACN,KAAO,EAAA;AAAA,kBACL,IAAM,EAAA,QAAA;AAAA,iBACR;AAAA,gBACA,WACE,EAAA,6FAAA;AAAA,eACJ;AAAA,cACA,WAAa,EAAA;AAAA,gBACX,IAAM,EAAA,sCAAA;AAAA,eACR;AAAA,cACA,MAAQ,EAAA;AAAA,gBACN,IAAM,EAAA,sCAAA;AAAA,eACR;AAAA,cACA,WAAa,EAAA;AAAA,gBACX,IAAM,EAAA,QAAA;AAAA,gBACN,WACE,EAAA,mFAAA;AAAA,eACJ;AAAA,cACA,KAAO,EAAA;AAAA,gBACL,IAAM,EAAA,QAAA;AAAA,gBACN,WACE,EAAA,wrBAAA;AAAA,eACJ;AAAA,cACA,SAAW,EAAA;AAAA,gBACT,IAAM,EAAA,QAAA;AAAA,gBACN,WAAa,EAAA,2CAAA;AAAA,eACf;AAAA,cACA,IAAM,EAAA;AAAA,gBACJ,IAAM,EAAA,QAAA;AAAA,gBACN,WACE,EAAA,qeAAA;AAAA,eACJ;AAAA,cACA,IAAM,EAAA;AAAA,gBACJ,IAAM,EAAA,QAAA;AAAA,gBACN,WACE,EAAA,wbAAA;AAAA,eACJ;AAAA,cACA,GAAK,EAAA;AAAA,gBACH,IAAM,EAAA,QAAA;AAAA,gBACN,WACE,EAAA,qXAAA;AAAA,eACJ;AAAA,aACF;AAAA,YACA,WACE,EAAA,yDAAA;AAAA,WACJ;AAAA,SACF;AAAA,QACA,oBAAsB,EAAA,KAAA;AAAA,OACxB;AAAA,MACA,sBAAwB,EAAA;AAAA,QACtB,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,UAAY,EAAA;AAAA,YACV,IAAM,EAAA,QAAA;AAAA,YACN,WACE,EAAA,+FAAA;AAAA,WACJ;AAAA,UACA,IAAM,EAAA;AAAA,YACJ,IAAM,EAAA,QAAA;AAAA,YACN,WAAa,EAAA,6CAAA;AAAA,WACf;AAAA,UACA,QAAU,EAAA;AAAA,YACR,IAAM,EAAA,iDAAA;AAAA,WACR;AAAA,UACA,IAAM,EAAA;AAAA,YACJ,IAAM,EAAA,iCAAA;AAAA,WACR;AAAA,UACA,SAAW,EAAA;AAAA,YACT,IAAM,EAAA,OAAA;AAAA,YACN,KAAO,EAAA;AAAA,cACL,IAAM,EAAA,qDAAA;AAAA,aACR;AAAA,YACA,WACE,EAAA,yDAAA;AAAA,WACJ;AAAA,SACF;AAAA,QACA,WAAa,EAAA,iDAAA;AAAA,QACb,oBAAsB,EAAA,KAAA;AAAA,OACxB;AAAA,MACA,0BAA4B,EAAA;AAAA,QAC1B,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,WAAa,EAAA;AAAA,YACX,IAAM,EAAA,QAAA;AAAA,YACN,WACE,EAAA,mQAAA;AAAA,WACJ;AAAA,UACA,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,QAAA;AAAA,YACN,QAAU,EAAA,IAAA;AAAA,WACZ;AAAA,UACA,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,QAAA;AAAA,YACN,IAAM,EAAA;AAAA,cACJ,wBAAA;AAAA,cACA,0BAAA;AAAA,cACA,gBAAA;AAAA,aACF;AAAA,YACA,WACE,EAAA,uDAAA;AAAA,WACJ;AAAA,UACA,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,QAAA;AAAA,YACN,WACE,EAAA,+HAAA;AAAA,WACJ;AAAA,SACF;AAAA,QACA,QAAU,EAAA,CAAC,aAAe,EAAA,OAAA,EAAS,SAAS,OAAO,CAAA;AAAA,QACnD,oBAAsB,EAAA,KAAA;AAAA,OACxB;AAAA,MACA,6BAA+B,EAAA;AAAA,QAC7B,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,MAAQ,EAAA;AAAA,YACN,IAAM,EAAA,OAAA;AAAA,YACN,KAAO,EAAA;AAAA,cACL,IAAM,EAAA,iDAAA;AAAA,aACR;AAAA,WACF;AAAA,UACA,MAAQ,EAAA;AAAA,YACN,IAAM,EAAA,6CAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAA,EAAU,CAAC,QAAA,EAAU,QAAQ,CAAA;AAAA,QAC7B,WACE,EAAA,wUAAA;AAAA,QACF,oBAAsB,EAAA,KAAA;AAAA,OACxB;AAAA,MACA,uBAAyB,EAAA;AAAA,QACvB,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,gBAAkB,EAAA;AAAA,YAChB,KAAO,EAAA;AAAA,cACL,IAAM,EAAA,oDAAA;AAAA,aACR;AAAA,YACA,IAAM,EAAA,OAAA;AAAA,WACR;AAAA,UACA,mBAAqB,EAAA;AAAA,YACnB,KAAO,EAAA;AAAA,cACL,IAAM,EAAA,oDAAA;AAAA,aACR;AAAA,YACA,IAAM,EAAA,OAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAA,EAAU,CAAC,kBAAA,EAAoB,qBAAqB,CAAA;AAAA,QACpD,oBAAsB,EAAA,KAAA;AAAA,OACxB;AAAA,MACA,aAAe,EAAA;AAAA,QACb,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,IAAM,EAAA;AAAA,YACJ,IAAM,EAAA,QAAA;AAAA,WACR;AAAA,UACA,MAAQ,EAAA;AAAA,YACN,IAAM,EAAA,QAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAA,EAAU,CAAC,MAAA,EAAQ,QAAQ,CAAA;AAAA,QAC3B,oBAAsB,EAAA,KAAA;AAAA,OACxB;AAAA,MACA,qBAAuB,EAAA;AAAA,QACrB,IAAM,EAAA,QAAA;AAAA,QACN,UAAY,EAAA;AAAA,UACV,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,OAAA;AAAA,YACN,KAAO,EAAA;AAAA,cACL,IAAM,EAAA,6BAAA;AAAA,aACR;AAAA,YACA,WAAa,EAAA,sDAAA;AAAA,WACf;AAAA,UACA,UAAY,EAAA;AAAA,YACV,IAAM,EAAA,QAAA;AAAA,WACR;AAAA,UACA,QAAU,EAAA;AAAA,YACR,IAAM,EAAA,QAAA;AAAA,YACN,UAAY,EAAA;AAAA,cACV,UAAY,EAAA;AAAA,gBACV,IAAM,EAAA,QAAA;AAAA,gBACN,WAAa,EAAA,4CAAA;AAAA,eACf;AAAA,cACA,UAAY,EAAA;AAAA,gBACV,IAAM,EAAA,QAAA;AAAA,gBACN,WAAa,EAAA,gDAAA;AAAA,eACf;AAAA,aACF;AAAA,WACF;AAAA,SACF;AAAA,QACA,QAAU,EAAA,CAAC,OAAS,EAAA,YAAA,EAAc,UAAU,CAAA;AAAA,QAC5C,oBAAsB,EAAA,KAAA;AAAA,OACxB;AAAA,KACF;AAAA,IACA,eAAiB,EAAA;AAAA,MACf,GAAK,EAAA;AAAA,QACH,IAAM,EAAA,MAAA;AAAA,QACN,MAAQ,EAAA,QAAA;AAAA,QACR,YAAc,EAAA,KAAA;AAAA,OAChB;AAAA,KACF;AAAA,GACF;AAAA,EACA,KAAO,EAAA;AAAA,IACL,UAAY,EAAA;AAAA,MACV,IAAM,EAAA;AAAA,QACJ,WAAa,EAAA,eAAA;AAAA,QACb,WAAa,EAAA,0CAAA;AAAA,QACb,SAAW,EAAA;AAAA,UACT,KAAO,EAAA;AAAA,YACL,WAAa,EAAA,WAAA;AAAA,WACf;AAAA,UACA,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,UACA,OAAS,EAAA;AAAA,YACP,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA;AAAA,UACR,EAAC;AAAA,UACD;AAAA,YACE,KAAK,EAAC;AAAA,WACR;AAAA,SACF;AAAA,QACA,YAAY,EAAC;AAAA,QACb,WAAa,EAAA;AAAA,UACX,QAAU,EAAA,IAAA;AAAA,UACV,OAAS,EAAA;AAAA,YACP,kBAAoB,EAAA;AAAA,cAClB,MAAQ,EAAA;AAAA,gBACN,IAAM,EAAA,QAAA;AAAA,gBACN,UAAY,EAAA;AAAA,kBACV,kBAAoB,EAAA;AAAA,oBAClB,IAAM,EAAA,QAAA;AAAA,mBACR;AAAA,kBACA,SAAW,EAAA;AAAA,oBACT,IAAM,EAAA,QAAA;AAAA,oBACN,WACE,EAAA,2DAAA;AAAA,mBACJ;AAAA,iBACF;AAAA,gBACA,QAAA,EAAU,CAAC,WAAW,CAAA;AAAA,gBACtB,WACE,EAAA,8DAAA;AAAA,gBACF,oBAAsB,EAAA,KAAA;AAAA,eACxB;AAAA,aACF;AAAA,WACF;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,IACA,WAAa,EAAA;AAAA,MACX,GAAK,EAAA;AAAA,QACH,WAAa,EAAA,aAAA;AAAA,QACb,WAAa,EAAA,2CAAA;AAAA,QACb,SAAW,EAAA;AAAA,UACT,KAAO,EAAA;AAAA,YACL,WAAa,EAAA,EAAA;AAAA,YACb,OAAS,EAAA;AAAA,cACP,kBAAoB,EAAA;AAAA,gBAClB,MAAQ,EAAA;AAAA,kBACN,IAAM,EAAA,OAAA;AAAA,kBACN,KAAO,EAAA;AAAA,oBACL,IAAM,EAAA,6BAAA;AAAA,mBACR;AAAA,iBACF;AAAA,eACF;AAAA,aACF;AAAA,WACF;AAAA,UACA,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,UACA,OAAS,EAAA;AAAA,YACP,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA;AAAA,UACR,EAAC;AAAA,UACD;AAAA,YACE,KAAK,EAAC;AAAA,WACR;AAAA,SACF;AAAA,QACA,UAAY,EAAA;AAAA,UACV;AAAA,YACE,IAAM,EAAA,gCAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,IAAM,EAAA,+BAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,IAAM,EAAA,gCAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,IAAM,EAAA,gCAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,IAAM,EAAA,+BAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,IAAM,EAAA,OAAA;AAAA,YACN,EAAI,EAAA,OAAA;AAAA,YACJ,aAAe,EAAA,IAAA;AAAA,YACf,QAAU,EAAA,KAAA;AAAA,YACV,MAAQ,EAAA;AAAA,cACN,IAAM,EAAA,OAAA;AAAA,cACN,KAAO,EAAA;AAAA,gBACL,IAAM,EAAA,QAAA;AAAA,eACR;AAAA,aACF;AAAA,WACF;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,IACA,wBAA0B,EAAA;AAAA,MACxB,GAAK,EAAA;AAAA,QACH,WAAa,EAAA,gBAAA;AAAA,QACb,WAAa,EAAA,iCAAA;AAAA,QACb,SAAW,EAAA;AAAA,UACT,KAAO,EAAA;AAAA,YACL,WAAa,EAAA,IAAA;AAAA,YACb,OAAS,EAAA;AAAA,cACP,kBAAoB,EAAA;AAAA,gBAClB,MAAQ,EAAA;AAAA,kBACN,IAAM,EAAA,6BAAA;AAAA,iBACR;AAAA,eACF;AAAA,aACF;AAAA,WACF;AAAA,UACA,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,UACA,OAAS,EAAA;AAAA,YACP,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA;AAAA,UACR,EAAC;AAAA,UACD;AAAA,YACE,KAAK,EAAC;AAAA,WACR;AAAA,SACF;AAAA,QACA,UAAY,EAAA;AAAA,UACV;AAAA,YACE,IAAM,EAAA,6BAAA;AAAA,WACR;AAAA,SACF;AAAA,OACF;AAAA,MACA,MAAQ,EAAA;AAAA,QACN,WAAa,EAAA,mBAAA;AAAA,QACb,WAAa,EAAA,gCAAA;AAAA,QACb,SAAW,EAAA;AAAA,UACT,KAAO,EAAA;AAAA,YACL,WAAa,EAAA,uBAAA;AAAA,WACf;AAAA,UACA,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,UACA,OAAS,EAAA;AAAA,YACP,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA;AAAA,UACR,EAAC;AAAA,UACD;AAAA,YACE,KAAK,EAAC;AAAA,WACR;AAAA,SACF;AAAA,QACA,UAAY,EAAA;AAAA,UACV;AAAA,YACE,IAAM,EAAA,6BAAA;AAAA,WACR;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,IACA,6CAA+C,EAAA;AAAA,MAC7C,GAAK,EAAA;AAAA,QACH,WAAa,EAAA,iBAAA;AAAA,QACb,WAAa,EAAA,iCAAA;AAAA,QACb,SAAW,EAAA;AAAA,UACT,KAAO,EAAA;AAAA,YACL,WAAa,EAAA,IAAA;AAAA,YACb,OAAS,EAAA;AAAA,cACP,kBAAoB,EAAA;AAAA,gBAClB,MAAQ,EAAA;AAAA,kBACN,IAAM,EAAA,6BAAA;AAAA,iBACR;AAAA,eACF;AAAA,aACF;AAAA,WACF;AAAA,UACA,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,UACA,OAAS,EAAA;AAAA,YACP,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA;AAAA,UACR,EAAC;AAAA,UACD;AAAA,YACE,KAAK,EAAC;AAAA,WACR;AAAA,SACF;AAAA,QACA,UAAY,EAAA;AAAA,UACV;AAAA,YACE,IAAM,EAAA,8BAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,IAAM,EAAA,mCAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,IAAM,EAAA,8BAAA;AAAA,WACR;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,IACA,sDAAwD,EAAA;AAAA,MACtD,GAAK,EAAA;AAAA,QACH,WAAa,EAAA,yBAAA;AAAA,QACb,WAAa,EAAA,yCAAA;AAAA,QACb,SAAW,EAAA;AAAA,UACT,KAAO,EAAA;AAAA,YACL,WAAa,EAAA,IAAA;AAAA,YACb,OAAS,EAAA;AAAA,cACP,kBAAoB,EAAA;AAAA,gBAClB,MAAQ,EAAA;AAAA,kBACN,IAAM,EAAA,6CAAA;AAAA,iBACR;AAAA,eACF;AAAA,aACF;AAAA,WACF;AAAA,UACA,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,UACA,OAAS,EAAA;AAAA,YACP,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA;AAAA,UACR,EAAC;AAAA,UACD;AAAA,YACE,KAAK,EAAC;AAAA,WACR;AAAA,SACF;AAAA,QACA,UAAY,EAAA;AAAA,UACV;AAAA,YACE,IAAM,EAAA,8BAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,IAAM,EAAA,mCAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,IAAM,EAAA,8BAAA;AAAA,WACR;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,IACA,mBAAqB,EAAA;AAAA,MACnB,IAAM,EAAA;AAAA,QACJ,WAAa,EAAA,mBAAA;AAAA,QACb,WACE,EAAA,2DAAA;AAAA,QACF,SAAW,EAAA;AAAA,UACT,KAAO,EAAA;AAAA,YACL,WAAa,EAAA,IAAA;AAAA,YACb,OAAS,EAAA;AAAA,cACP,kBAAoB,EAAA;AAAA,gBAClB,MAAQ,EAAA;AAAA,kBACN,IAAM,EAAA,4CAAA;AAAA,iBACR;AAAA,eACF;AAAA,aACF;AAAA,WACF;AAAA,UACA,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,UACA,OAAS,EAAA;AAAA,YACP,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA;AAAA,UACR,EAAC;AAAA,UACD;AAAA,YACE,KAAK,EAAC;AAAA,WACR;AAAA,SACF;AAAA,QACA,WAAa,EAAA;AAAA,UACX,QAAU,EAAA,KAAA;AAAA,UACV,OAAS,EAAA;AAAA,YACP,kBAAoB,EAAA;AAAA,cAClB,MAAQ,EAAA;AAAA,gBACN,IAAM,EAAA,QAAA;AAAA,gBACN,QAAA,EAAU,CAAC,YAAY,CAAA;AAAA,gBACvB,UAAY,EAAA;AAAA,kBACV,UAAY,EAAA;AAAA,oBACV,IAAM,EAAA,OAAA;AAAA,oBACN,KAAO,EAAA;AAAA,sBACL,IAAM,EAAA,QAAA;AAAA,qBACR;AAAA,mBACF;AAAA,kBACA,MAAQ,EAAA;AAAA,oBACN,IAAM,EAAA,OAAA;AAAA,oBACN,KAAO,EAAA;AAAA,sBACL,IAAM,EAAA,QAAA;AAAA,qBACR;AAAA,mBACF;AAAA,iBACF;AAAA,eACF;AAAA,cACA,QAAU,EAAA;AAAA,gBACR,0BAA4B,EAAA;AAAA,kBAC1B,KAAO,EAAA;AAAA,oBACL,UAAY,EAAA;AAAA,sBACV,6BAAA;AAAA,sBACA,uBAAA;AAAA,qBACF;AAAA,mBACF;AAAA,iBACF;AAAA,gBACA,wCAA0C,EAAA;AAAA,kBACxC,KAAO,EAAA;AAAA,oBACL,UAAA,EAAY,CAAC,6BAA6B,CAAA;AAAA,oBAC1C,MAAA,EAAQ,CAAC,sBAAsB,CAAA;AAAA,mBACjC;AAAA,iBACF;AAAA,eACF;AAAA,aACF;AAAA,WACF;AAAA,SACF;AAAA,QACA,UAAY,EAAA;AAAA,UACV;AAAA,YACE,IAAM,EAAA,gCAAA;AAAA,WACR;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,IACA,oBAAsB,EAAA;AAAA,MACpB,GAAK,EAAA;AAAA,QACH,WAAa,EAAA,oBAAA;AAAA,QACb,WAAa,EAAA,uCAAA;AAAA,QACb,SAAW,EAAA;AAAA,UACT,KAAO,EAAA;AAAA,YACL,WAAa,EAAA,IAAA;AAAA,YACb,OAAS,EAAA;AAAA,cACP,kBAAoB,EAAA;AAAA,gBAClB,MAAQ,EAAA;AAAA,kBACN,IAAM,EAAA,4CAAA;AAAA,iBACR;AAAA,eACF;AAAA,aACF;AAAA,WACF;AAAA,UACA,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,UACA,OAAS,EAAA;AAAA,YACP,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA;AAAA,UACR,EAAC;AAAA,UACD;AAAA,YACE,KAAK,EAAC;AAAA,WACR;AAAA,SACF;AAAA,QACA,UAAY,EAAA;AAAA,UACV;AAAA,YACE,IAAM,EAAA,gCAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,IAAM,EAAA,+BAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,IAAM,EAAA,oCAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,IAAM,EAAA,gCAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,IAAM,EAAA,gCAAA;AAAA,WACR;AAAA,UACA;AAAA,YACE,IAAM,EAAA,oBAAA;AAAA,YACN,EAAI,EAAA,OAAA;AAAA,YACJ,WAAa,EAAA,mBAAA;AAAA,YACb,QAAU,EAAA,KAAA;AAAA,YACV,aAAe,EAAA,IAAA;AAAA,YACf,MAAQ,EAAA;AAAA,cACN,IAAM,EAAA,QAAA;AAAA,aACR;AAAA,WACF;AAAA,UACA;AAAA,YACE,IAAM,EAAA,sBAAA;AAAA,YACN,EAAI,EAAA,OAAA;AAAA,YACJ,WACE,EAAA,+DAAA;AAAA,YACF,QAAU,EAAA,KAAA;AAAA,YACV,aAAe,EAAA,IAAA;AAAA,YACf,MAAQ,EAAA;AAAA,cACN,IAAM,EAAA,OAAA;AAAA,cACN,KAAO,EAAA;AAAA,gBACL,IAAM,EAAA,QAAA;AAAA,eACR;AAAA,aACF;AAAA,YACA,OAAS,EAAA,KAAA;AAAA,YACT,KAAO,EAAA,MAAA;AAAA,WACT;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,IACA,gBAAkB,EAAA;AAAA,MAChB,GAAK,EAAA;AAAA,QACH,WAAa,EAAA,iBAAA;AAAA,QACb,WAAa,EAAA,qDAAA;AAAA,QACb,SAAW,EAAA;AAAA,UACT,KAAO,EAAA;AAAA,YACL,WAAa,EAAA,IAAA;AAAA,YACb,OAAS,EAAA;AAAA,cACP,kBAAoB,EAAA;AAAA,gBAClB,MAAQ,EAAA;AAAA,kBACN,IAAM,EAAA,2CAAA;AAAA,iBACR;AAAA,eACF;AAAA,aACF;AAAA,WACF;AAAA,UACA,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,UACA,OAAS,EAAA;AAAA,YACP,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA;AAAA,UACR,EAAC;AAAA,UACD;AAAA,YACE,KAAK,EAAC;AAAA,WACR;AAAA,SACF;AAAA,QACA,UAAY,EAAA;AAAA,UACV;AAAA,YACE,EAAI,EAAA,OAAA;AAAA,YACJ,IAAM,EAAA,OAAA;AAAA,YACN,QAAU,EAAA,IAAA;AAAA,YACV,aAAe,EAAA,IAAA;AAAA,YACf,MAAQ,EAAA;AAAA,cACN,IAAM,EAAA,OAAA;AAAA,cACN,KAAO,EAAA;AAAA,gBACL,IAAM,EAAA,QAAA;AAAA,eACR;AAAA,aACF;AAAA,YACA,QAAU,EAAA;AAAA,cACR,kBAAoB,EAAA;AAAA,gBAClB,KAAA,EAAO,CAAC,MAAM,CAAA;AAAA,eAChB;AAAA,cACA,uBAAyB,EAAA;AAAA,gBACvB,KAAA,EAAO,CAAC,WAAW,CAAA;AAAA,eACrB;AAAA,aACF;AAAA,WACF;AAAA,UACA;AAAA,YACE,IAAM,EAAA,gCAAA;AAAA,WACR;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,IACA,YAAc,EAAA;AAAA,MACZ,IAAM,EAAA;AAAA,QACJ,WAAa,EAAA,gBAAA;AAAA,QACb,WAAa,EAAA,uCAAA;AAAA,QACb,SAAW,EAAA;AAAA,UACT,KAAO,EAAA;AAAA,YACL,WAAa,EAAA,SAAA;AAAA,YACb,OAAS,EAAA;AAAA,cACP,kBAAoB,EAAA;AAAA,gBAClB,MAAQ,EAAA;AAAA,kBACN,IAAM,EAAA,QAAA;AAAA,kBACN,UAAY,EAAA;AAAA,oBACV,MAAQ,EAAA;AAAA,sBACN,IAAM,EAAA,SAAA;AAAA,qBACR;AAAA,oBACA,QAAU,EAAA;AAAA,sBACR,KAAO,EAAA;AAAA,wBACL,IAAM,EAAA,6BAAA;AAAA,uBACR;AAAA,sBACA,IAAM,EAAA,OAAA;AAAA,qBACR;AAAA,oBACA,QAAU,EAAA;AAAA,sBACR,IAAM,EAAA,+BAAA;AAAA,qBACR;AAAA,mBACF;AAAA,kBACA,QAAA,EAAU,CAAC,UAAA,EAAY,UAAU,CAAA;AAAA,iBACnC;AAAA,eACF;AAAA,aACF;AAAA,WACF;AAAA,UACA,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,UACA,OAAS,EAAA;AAAA,YACP,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA;AAAA,UACR,EAAC;AAAA,UACD;AAAA,YACE,KAAK,EAAC;AAAA,WACR;AAAA,SACF;AAAA,QACA,UAAY,EAAA;AAAA,UACV;AAAA,YACE,EAAI,EAAA,OAAA;AAAA,YACJ,IAAM,EAAA,QAAA;AAAA,YACN,QAAU,EAAA,KAAA;AAAA,YACV,aAAe,EAAA,IAAA;AAAA,YACf,MAAQ,EAAA;AAAA,cACN,IAAM,EAAA,QAAA;AAAA,aACR;AAAA,WACF;AAAA,SACF;AAAA,QACA,WAAa,EAAA;AAAA,UACX,QAAU,EAAA,IAAA;AAAA,UACV,OAAS,EAAA;AAAA,YACP,kBAAoB,EAAA;AAAA,cAClB,MAAQ,EAAA;AAAA,gBACN,IAAM,EAAA,QAAA;AAAA,gBACN,UAAY,EAAA;AAAA,kBACV,MAAQ,EAAA;AAAA,oBACN,IAAM,EAAA,QAAA;AAAA,mBACR;AAAA,kBACA,IAAM,EAAA;AAAA,oBACJ,IAAM,EAAA,QAAA;AAAA,mBACR;AAAA,iBACF;AAAA,gBACA,QAAA,EAAU,CAAC,QAAA,EAAU,MAAM,CAAA;AAAA,eAC7B;AAAA,aACF;AAAA,WACF;AAAA,SACF;AAAA,OACF;AAAA,MACA,GAAK,EAAA;AAAA,QACH,WAAa,EAAA,cAAA;AAAA,QACb,WAAa,EAAA,mBAAA;AAAA,QACb,SAAW,EAAA;AAAA,UACT,KAAO,EAAA;AAAA,YACL,WAAa,EAAA,IAAA;AAAA,YACb,OAAS,EAAA;AAAA,cACP,kBAAoB,EAAA;AAAA,gBAClB,MAAQ,EAAA;AAAA,kBACN,IAAM,EAAA,OAAA;AAAA,kBACN,KAAO,EAAA;AAAA,oBACL,IAAM,EAAA,QAAA;AAAA,oBACN,UAAY,EAAA;AAAA,sBACV,IAAM,EAAA;AAAA,wBACJ,IAAM,EAAA,+BAAA;AAAA,uBACR;AAAA,qBACF;AAAA,oBACA,QAAA,EAAU,CAAC,MAAM,CAAA;AAAA,mBACnB;AAAA,iBACF;AAAA,eACF;AAAA,aACF;AAAA,WACF;AAAA,UACA,OAAS,EAAA;AAAA,YACP,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA;AAAA,UACR,EAAC;AAAA,UACD;AAAA,YACE,KAAK,EAAC;AAAA,WACR;AAAA,SACF;AAAA,QACA,YAAY,EAAC;AAAA,OACf;AAAA,KACF;AAAA,IACA,iBAAmB,EAAA;AAAA,MACjB,GAAK,EAAA;AAAA,QACH,WAAa,EAAA,aAAA;AAAA,QACb,WAAa,EAAA,uBAAA;AAAA,QACb,SAAW,EAAA;AAAA,UACT,KAAO,EAAA;AAAA,YACL,WAAa,EAAA,IAAA;AAAA,YACb,OAAS,EAAA;AAAA,cACP,kBAAoB,EAAA;AAAA,gBAClB,MAAQ,EAAA;AAAA,kBACN,IAAM,EAAA,+BAAA;AAAA,iBACR;AAAA,eACF;AAAA,aACF;AAAA,WACF;AAAA,UACA,OAAS,EAAA;AAAA,YACP,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA;AAAA,UACR,EAAC;AAAA,UACD;AAAA,YACE,KAAK,EAAC;AAAA,WACR;AAAA,SACF;AAAA,QACA,UAAY,EAAA;AAAA,UACV;AAAA,YACE,EAAI,EAAA,MAAA;AAAA,YACJ,IAAM,EAAA,IAAA;AAAA,YACN,QAAU,EAAA,IAAA;AAAA,YACV,aAAe,EAAA,IAAA;AAAA,YACf,MAAQ,EAAA;AAAA,cACN,IAAM,EAAA,QAAA;AAAA,aACR;AAAA,WACF;AAAA,SACF;AAAA,OACF;AAAA,MACA,MAAQ,EAAA;AAAA,QACN,WAAa,EAAA,gBAAA;AAAA,QACb,WAAa,EAAA,0BAAA;AAAA,QACb,SAAW,EAAA;AAAA,UACT,KAAO,EAAA;AAAA,YACL,WAAa,EAAA,YAAA;AAAA,WACf;AAAA,UACA,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,UACA,OAAS,EAAA;AAAA,YACP,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA;AAAA,UACR,EAAC;AAAA,UACD;AAAA,YACE,KAAK,EAAC;AAAA,WACR;AAAA,SACF;AAAA,QACA,UAAY,EAAA;AAAA,UACV;AAAA,YACE,EAAI,EAAA,MAAA;AAAA,YACJ,IAAM,EAAA,IAAA;AAAA,YACN,QAAU,EAAA,IAAA;AAAA,YACV,aAAe,EAAA,IAAA;AAAA,YACf,MAAQ,EAAA;AAAA,cACN,IAAM,EAAA,QAAA;AAAA,aACR;AAAA,WACF;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,IACA,gDAAkD,EAAA;AAAA,MAChD,GAAK,EAAA;AAAA,QACH,WAAa,EAAA,qBAAA;AAAA,QACb,WAAa,EAAA,4BAAA;AAAA,QACb,SAAW,EAAA;AAAA,UACT,KAAO,EAAA;AAAA,YACL,WAAa,EAAA,IAAA;AAAA,YACb,OAAS,EAAA;AAAA,cACP,kBAAoB,EAAA;AAAA,gBAClB,MAAQ,EAAA;AAAA,kBACN,IAAM,EAAA,+BAAA;AAAA,iBACR;AAAA,eACF;AAAA,aACF;AAAA,WACF;AAAA,UACA,OAAS,EAAA;AAAA,YACP,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA;AAAA,UACR,EAAC;AAAA,UACD;AAAA,YACE,KAAK,EAAC;AAAA,WACR;AAAA,SACF;AAAA,QACA,UAAY,EAAA;AAAA,UACV;AAAA,YACE,EAAI,EAAA,MAAA;AAAA,YACJ,IAAM,EAAA,MAAA;AAAA,YACN,QAAU,EAAA,IAAA;AAAA,YACV,aAAe,EAAA,IAAA;AAAA,YACf,MAAQ,EAAA;AAAA,cACN,IAAM,EAAA,QAAA;AAAA,aACR;AAAA,WACF;AAAA,UACA;AAAA,YACE,EAAI,EAAA,MAAA;AAAA,YACJ,IAAM,EAAA,WAAA;AAAA,YACN,QAAU,EAAA,IAAA;AAAA,YACV,aAAe,EAAA,IAAA;AAAA,YACf,MAAQ,EAAA;AAAA,cACN,IAAM,EAAA,QAAA;AAAA,aACR;AAAA,WACF;AAAA,UACA;AAAA,YACE,EAAI,EAAA,MAAA;AAAA,YACJ,IAAM,EAAA,MAAA;AAAA,YACN,QAAU,EAAA,IAAA;AAAA,YACV,aAAe,EAAA,IAAA;AAAA,YACf,MAAQ,EAAA;AAAA,cACN,IAAM,EAAA,QAAA;AAAA,aACR;AAAA,WACF;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,IACA,mBAAqB,EAAA;AAAA,MACnB,IAAM,EAAA;AAAA,QACJ,WAAa,EAAA,iBAAA;AAAA,QACb,WAAa,EAAA,4BAAA;AAAA,QACb,SAAW,EAAA;AAAA,UACT,KAAO,EAAA;AAAA,YACL,WAAa,EAAA,IAAA;AAAA,YACb,OAAS,EAAA;AAAA,cACP,kBAAoB,EAAA;AAAA,gBAClB,MAAQ,EAAA;AAAA,kBACN,IAAM,EAAA,8CAAA;AAAA,iBACR;AAAA,eACF;AAAA,aACF;AAAA,WACF;AAAA,UACA,KAAO,EAAA;AAAA,YACL,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,UACA,OAAS,EAAA;AAAA,YACP,IAAM,EAAA,sCAAA;AAAA,WACR;AAAA,SACF;AAAA,QACA,QAAU,EAAA;AAAA,UACR,EAAC;AAAA,UACD;AAAA,YACE,KAAK,EAAC;AAAA,WACR;AAAA,SACF;AAAA,QACA,YAAY,EAAC;AAAA,QACb,WAAa,EAAA;AAAA,UACX,QAAU,EAAA,IAAA;AAAA,UACV,OAAS,EAAA;AAAA,YACP,kBAAoB,EAAA;AAAA,cAClB,MAAQ,EAAA;AAAA,gBACN,IAAM,EAAA,QAAA;AAAA,gBACN,UAAY,EAAA;AAAA,kBACV,eAAiB,EAAA;AAAA,oBACf,IAAM,EAAA,QAAA;AAAA,mBACR;AAAA,kBACA,QAAU,EAAA;AAAA,oBACR,IAAM,EAAA,oCAAA;AAAA,mBACR;AAAA,iBACF;AAAA,gBACA,QAAA,EAAU,CAAC,UAAU,CAAA;AAAA,eACvB;AAAA,aACF;AAAA,WACF;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,IACA,kBAAoB,EAAA;AAAA,MAClB,IAAM,EAAA;AAAA,QACJ,WAAa,EAAA,gBAAA;AAAA,QACb,WACE,EAAA,2DAAA;AAAA,QACF,SAAW,EAAA;AAAA,UACT,KAAO,EAAA;AAAA,YACL,WAAa,EAAA,IAAA;AAAA,WACf;AAAA,UACA,KAAO,EAAA;AAAA,YACL,WAAa,EAAA,oBAAA;AAAA,YACb,OAAS,EAAA;AAAA,cACP,kBAAoB,EAAA;AAAA,gBAClB,MAAQ,EAAA;AAAA,kBACN,IAAM,EAAA,QAAA;AAAA,kBACN,UAAY,EAAA;AAAA,oBACV,MAAQ,EAAA;AAAA,sBACN,IAAM,EAAA,OAAA;AAAA,sBACN,KAAO,EAAA;AAAA,wBACL,IAAM,EAAA,QAAA;AAAA,wBACN,UAAY,EAAA;AAAA,0BACV,IAAM,EAAA;AAAA,4BACJ,IAAM,EAAA,QAAA;AAAA,2BACR;AAAA,0BACA,OAAS,EAAA;AAAA,4BACP,IAAM,EAAA,QAAA;AAAA,2BACR;AAAA,yBACF;AAAA,wBACA,QAAA,EAAU,CAAC,MAAA,EAAQ,SAAS,CAAA;AAAA,wBAC5B,sBAAsB,EAAC;AAAA,uBACzB;AAAA,qBACF;AAAA,mBACF;AAAA,kBACA,QAAA,EAAU,CAAC,QAAQ,CAAA;AAAA,iBACrB;AAAA,eACF;AAAA,aACF;AAAA,WACF;AAAA,SACF;AAAA,QACA,QAAU,EAAA;AAAA,UACR,EAAC;AAAA,UACD;AAAA,YACE,KAAK,EAAC;AAAA,WACR;AAAA,SACF;AAAA,QACA,YAAY,EAAC;AAAA,QACb,WAAa,EAAA;AAAA,UACX,QAAU,EAAA,IAAA;AAAA,UACV,OAAS,EAAA;AAAA,YACP,kBAAoB,EAAA;AAAA,cAClB,MAAQ,EAAA;AAAA,gBACN,IAAM,EAAA,QAAA;AAAA,gBACN,UAAY,EAAA;AAAA,kBACV,QAAU,EAAA;AAAA,oBACR,IAAM,EAAA,QAAA;AAAA,mBACR;AAAA,kBACA,MAAQ,EAAA;AAAA,oBACN,IAAM,EAAA,QAAA;AAAA,oBACN,sBAAsB,EAAC;AAAA,mBACzB;AAAA,iBACF;AAAA,gBACA,QAAA,EAAU,CAAC,UAAA,EAAY,QAAQ,CAAA;AAAA,eACjC;AAAA,aACF;AAAA,WACF;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,GACF;AACF,CAAA,CAAA;AACO,MAAM,mBAAsB,GAAA,OACjC,OACG,KAAAqC,gDAAA,CAA0C,MAAM,OAAO,CAAA;;AC3iDrD,SAAS,2BAA4B,CAAA;AAAA,EAC1C,KAAA;AAAA,EACA,MAAA;AAAA,EACA,KAAA;AACF,CAIiC,EAAA;AAC/B,EAAA,IAAI,MAAW,KAAA,KAAA,CAAA,IAAa,KAAU,KAAA,KAAA,CAAA,IAAa,UAAU,KAAW,CAAA,EAAA;AACtE,IAAO,OAAA,KAAA,CAAA,CAAA;AAAA,GACT;AAEA,EAAI,IAAA,MAAA,KAAW,KAAa,CAAA,IAAA,MAAA,GAAS,CAAG,EAAA;AACtC,IAAM,MAAA,IAAIrC,kBAAW,CAAyC,uCAAA,CAAA,CAAA,CAAA;AAAA,GAChE;AACA,EAAI,IAAA,KAAA,KAAU,KAAa,CAAA,IAAA,KAAA,IAAS,CAAG,EAAA;AACrC,IAAM,MAAA,IAAIA,kBAAW,CAA0C,wCAAA,CAAA,CAAA,CAAA;AAAA,GACjE;AACA,EAAI,IAAA,KAAA,KAAU,KAAa,CAAA,IAAA,CAAC,KAAO,EAAA;AACjC,IAAM,MAAA,IAAIA,kBAAW,CAAkC,gCAAA,CAAA,CAAA,CAAA;AAAA,GACzD;AAEA,EAAO,OAAA;AAAA,IACL,GAAI,MAAW,KAAA,KAAA,CAAA,GAAY,EAAE,MAAA,KAAW,EAAC;AAAA,IACzC,GAAI,KAAU,KAAA,KAAA,CAAA,GAAY,EAAE,KAAA,KAAU,EAAC;AAAA,IACvC,GAAI,KAAU,KAAA,KAAA,CAAA,GAAY,EAAE,KAAA,KAAU,EAAC;AAAA,GACzC,CAAA;AACF;;ACiCA,eAAsB,aACpB,OACyB,EAAA;AACzB,EAAM,MAAA,MAAA,GAAS,MAAM,mBAAoB,CAAA;AAAA,IACvC,gBAAkB,EAAA;AAAA;AAAA;AAAA,MAGhB,WAAa,EAAA,wBAAA;AAAA,KACf;AAAA,GACD,CAAA,CAAA;AACD,EAAM,MAAA;AAAA,IACJ,eAAA;AAAA,IACA,gBAAA;AAAA,IACA,eAAA;AAAA,IACA,YAAA;AAAA,IACA,cAAA;AAAA,IACA,MAAA;AAAA,IACA,MAAA;AAAA,IACA,2BAAA;AAAA,IACA,IAAA;AAAA,IACA,QAAA;AAAA,GACE,GAAA,OAAA,CAAA;AAEJ,EAAM,MAAA,WAAA,GAAc,IAAIsC,8CAAmB,CAAA;AAAA,IACzC,MAAA;AAAA,IACA,WAAa,EAAA,IAAA;AAAA,IACb,eAAiB,EAAA,QAAA;AAAA,GAClB,CAAA,CAAA;AACD,EAAA,MAAM,eACJ,GAAA,MAAA,CAAO,kBAAmB,CAAA,kBAAkB,CAAK,IAAA,KAAA,CAAA;AACnD,EAAA,IAAI,eAAiB,EAAA;AACnB,IAAA,MAAA,CAAO,KAAK,qCAAqC,CAAA,CAAA;AAAA,GACnD;AAEA,EAAA,IAAI,cAAgB,EAAA;AAElB,IAAA,MAAA,CAAO,IAAK,CAAA,UAAA,EAAY,OAAO,GAAA,EAAK,GAAQ,KAAA;AAC1C,MAAA,MAAM,EAAE,kBAAA,EAAoB,GAAG,QAAA,KAAa,GAAI,CAAA,IAAA,CAAA;AAChD,MAAA,MAAM,OAAU,GAAA,MAAM,WAAY,CAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AAChD,MAAI,IAAA;AACF,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,sBAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,QAAU,EAAA;AAAA,YACR,WAAW,QAAS,CAAA,SAAA;AAAA,WACtB;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAS,EAAA,CAAA,oBAAA,EAAuB,QAAS,CAAA,SAAS,iBAAiB,OAAO,CAAA,CAAA;AAAA,SAC3E,CAAA,CAAA;AAED,QAAM,MAAA,WAAA,GAAc,kBAChB,GAAA,MAAM,IAAK,CAAA,YAAA,CAAa,kBAAkB,CAC1C,GAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG,CAAA,CAAA;AAElC,QAAA,MAAM,eAAe,OAAQ,CAAA;AAAA,UAC3B,GAAG,QAAA;AAAA,UACH,WAAA;AAAA,SACD,CAAA,CAAA;AACD,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,sBAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,QAAU,EAAA;AAAA,YACR,WAAW,QAAS,CAAA,SAAA;AAAA,WACtB;AAAA,UACA,QAAU,EAAA;AAAA,YACR,MAAQ,EAAA,GAAA;AAAA,WACV;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAS,EAAA,CAAA,oBAAA,EAAuB,QAAS,CAAA,SAAS,iBAAiB,OAAO,CAAA,CAAA;AAAA,SAC3E,CAAA,CAAA;AACD,QAAI,GAAA,CAAA,MAAA,CAAO,GAAG,CAAA,CAAE,GAAI,EAAA,CAAA;AAAA,eACb,GAAK,EAAA;AACZ,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,sBAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,QAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,KAAO,EAAA,OAAA;AAAA,UACP,MAAQ,EAAA;AAAA,YACN;AAAA,cACE,MAAM,GAAI,CAAA,IAAA;AAAA,cACV,SAAS,GAAI,CAAA,OAAA;AAAA,cACb,OAAO,GAAI,CAAA,KAAA;AAAA,aACb;AAAA,WACF;AAAA,UACA,QAAU,EAAA;AAAA,YACR,WAAW,QAAS,CAAA,SAAA;AAAA,WACtB;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAS,EAAA,CAAA,oBAAA,EAAuB,QAAS,CAAA,SAAS,OAAO,OAAO,CAAA,OAAA,CAAA;AAAA,SACjE,CAAA,CAAA;AACD,QAAM,MAAA,GAAA,CAAA;AAAA,OACR;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAEA,EAAA,IAAI,2BAA6B,EAAA;AAC/B,IAAA,MAAA,CAAO,IAAI,2BAA2B,CAAA,CAAA;AAAA,GACxC;AAEA,EAAA,IAAI,eAAiB,EAAA;AACnB,IAAA,MAAA,CACG,GAAI,CAAA,WAAA,EAAa,OAAO,GAAA,EAAK,GAAQ,KAAA;AACpC,MAAM,MAAA,OAAA,GAAU,MAAM,WAAY,CAAA,UAAA;AAAA,QAChC,GAAA;AAAA,OACF,CAAA;AACA,MAAI,IAAA;AACF,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,oBAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,OAAA,EAAS,qCAAqC,OAAO,CAAA,CAAA;AAAA,SACtD,CAAA,CAAA;AACD,QAAA,MAAM,EAAE,QAAU,EAAA,QAAA,EAAa,GAAA,MAAM,gBAAgB,QAAS,CAAA;AAAA,UAC5D,MAAA,EAAQ,uBAAwB,CAAA,GAAA,CAAI,KAAK,CAAA;AAAA,UACzC,MAAA,EAAQ,0BAA2B,CAAA,GAAA,CAAI,KAAK,CAAA;AAAA,UAC5C,KAAA,EAAO,sBAAuB,CAAA,GAAA,CAAI,KAAK,CAAA;AAAA,UACvC,UAAA,EAAY,2BAA4B,CAAA,GAAA,CAAI,KAAK,CAAA;AAAA,UACjD,WAAa,EAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG,CAAA;AAAA,SAC5C,CAAA,CAAA;AAGD,QAAA,IAAI,SAAS,WAAa,EAAA;AACxB,UAAA,MAAM,MAAM,IAAI,GAAA,CAAI,CAAiB,cAAA,EAAA,GAAA,CAAI,GAAG,CAAE,CAAA,CAAA,CAAA;AAC9C,UAAI,GAAA,CAAA,YAAA,CAAa,OAAO,QAAQ,CAAA,CAAA;AAChC,UAAA,GAAA,CAAI,YAAa,CAAA,GAAA,CAAI,OAAS,EAAA,QAAA,CAAS,SAAS,CAAA,CAAA;AAChD,UAAI,GAAA,CAAA,SAAA,CAAU,QAAQ,CAAI,CAAA,EAAA,GAAA,CAAI,QAAQ,CAAG,EAAA,GAAA,CAAI,MAAM,CAAe,aAAA,CAAA,CAAA,CAAA;AAAA,SACpE;AAEA,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,oBAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA;AAAA,UAET,QAAU,EAAA;AAAA,YACR,MAAQ,EAAA,GAAA;AAAA,WACV;AAAA,UACA,OAAA,EAAS,2BAA2B,OAAO,CAAA,UAAA,CAAA;AAAA,SAC5C,CAAA,CAAA;AAGD,QAAA,GAAA,CAAI,KAAK,QAAQ,CAAA,CAAA;AAAA,eACV,GAAK,EAAA;AACZ,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,oBAAA;AAAA,UACX,MAAQ,EAAA,QAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,KAAO,EAAA,OAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,MAAQ,EAAA;AAAA,YACN;AAAA,cACE,MAAM,GAAI,CAAA,IAAA;AAAA,cACV,SAAS,GAAI,CAAA,OAAA;AAAA,cACb,OAAO,GAAI,CAAA,KAAA;AAAA,aACb;AAAA,WACF;AAAA,UACA,OAAA,EAAS,2BAA2B,OAAO,CAAA,OAAA,CAAA;AAAA,SAC5C,CAAA,CAAA;AACD,QAAM,MAAA,GAAA,CAAA;AAAA,OACR;AAAA,KACD,CACA,CAAA,GAAA,CAAI,oBAAsB,EAAA,OAAO,KAAK,GAAQ,KAAA;AAC7C,MAAM,MAAA,OAAA,GAAU,MAAM,WAAY,CAAA,UAAA;AAAA,QAChC,GAAA;AAAA,OACF,CAAA;AACA,MAAI,IAAA;AACF,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,2BAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,OAAA,EAAS,6CAA6C,OAAO,CAAA,CAAA;AAAA,SAC9D,CAAA,CAAA;AACD,QAAA,MAAM,EAAE,KAAO,EAAA,QAAA,EAAU,YACvB,GAAA,MAAM,gBAAgB,aAAc,CAAA;AAAA,UAClC,KAAA,EAAO,IAAI,KAAM,CAAA,KAAA;AAAA,UACjB,GAAG,wBAAyB,CAAA,GAAA,CAAI,KAAK,CAAA;AAAA,UACrC,WAAa,EAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG,CAAA;AAAA,SAC5C,CAAA,CAAA;AAEH,QAAA,GAAA,CAAI,IAAK,CAAA;AAAA,UACP,KAAA;AAAA,UACA,UAAA;AAAA,UACA,QAAU,EAAA;AAAA,YACR,GAAI,SAAS,UAAc,IAAA;AAAA,cACzB,UAAA,EAAY,YAAa,CAAA,QAAA,CAAS,UAAU,CAAA;AAAA,aAC9C;AAAA,YACA,GAAI,SAAS,UAAc,IAAA;AAAA,cACzB,UAAA,EAAY,YAAa,CAAA,QAAA,CAAS,UAAU,CAAA;AAAA,aAC9C;AAAA,WACF;AAAA,SACD,CAAA,CAAA;AACD,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,2BAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,QAAU,EAAA;AAAA,YACR,aAAe,EAAA,UAAA;AAAA,YACf,QAAU,EAAA;AAAA,cACR,GAAI,SAAS,UAAc,IAAA;AAAA,gBACzB,UAAA,EAAY,YAAa,CAAA,QAAA,CAAS,UAAU,CAAA;AAAA,eAC9C;AAAA,cACA,GAAI,SAAS,UAAc,IAAA;AAAA,gBACzB,UAAA,EAAY,YAAa,CAAA,QAAA,CAAS,UAAU,CAAA;AAAA,eAC9C;AAAA,aACF;AAAA,WACF;AAAA;AAAA,UAEA,QAAU,EAAA;AAAA,YACR,MAAQ,EAAA,GAAA;AAAA,WACV;AAAA,UACA,OAAA,EAAS,mCAAmC,OAAO,CAAA,UAAA,CAAA;AAAA,SACpD,CAAA,CAAA;AAAA,eACM,GAAK,EAAA;AACZ,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,2BAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,QAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,KAAO,EAAA,OAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,MAAQ,EAAA;AAAA,YACN;AAAA,cACE,MAAM,GAAI,CAAA,IAAA;AAAA,cACV,SAAS,GAAI,CAAA,OAAA;AAAA,cACb,OAAO,GAAI,CAAA,KAAA;AAAA,aACb;AAAA,WACF;AAAA,UACA,OAAA,EAAS,mCAAmC,OAAO,CAAA,OAAA,CAAA;AAAA,SACpD,CAAA,CAAA;AACD,QAAM,MAAA,GAAA,CAAA;AAAA,OACR;AAAA,KACD,CACA,CAAA,GAAA,CAAI,uBAAyB,EAAA,OAAO,KAAK,GAAQ,KAAA;AAChD,MAAM,MAAA,EAAE,GAAI,EAAA,GAAI,GAAI,CAAA,MAAA,CAAA;AACpB,MAAA,MAAM,OAAU,GAAA,MAAM,WAAY,CAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AAChD,MAAI,IAAA;AACF,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,yBAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,QAAU,EAAA;AAAA,YACR,GAAA;AAAA,WACF;AAAA,UACA,OAAS,EAAA,CAAA,kCAAA,EAAqC,GAAG,CAAA,cAAA,EAAiB,OAAO,CAAA,CAAA;AAAA,SAC1E,CAAA,CAAA;AACD,QAAA,MAAM,EAAE,QAAA,EAAa,GAAA,MAAM,gBAAgB,QAAS,CAAA;AAAA,UAClD,MAAQ,EAAA,iBAAA,CAAkB,EAAE,cAAA,EAAgB,KAAK,CAAA;AAAA,UACjD,WAAa,EAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG,CAAA;AAAA,SAC5C,CAAA,CAAA;AACD,QAAI,IAAA,CAAC,SAAS,MAAQ,EAAA;AACpB,UAAA,MAAM,IAAIrF,oBAAA,CAAc,CAAsB,mBAAA,EAAA,GAAG,CAAE,CAAA,CAAA,CAAA;AAAA,SACrD;AACA,QAAA,GAAA,CAAI,OAAO,GAAG,CAAA,CAAE,IAAK,CAAA,QAAA,CAAS,CAAC,CAAC,CAAA,CAAA;AAChC,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,yBAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,QAAU,EAAA;AAAA,YACR,GAAA;AAAA,YACA,SAAW,EAAA8C,+BAAA,CAAmB,QAAS,CAAA,CAAC,CAAC,CAAA;AAAA,WAC3C;AAAA,UACA,QAAU,EAAA;AAAA,YACR,MAAQ,EAAA,GAAA;AAAA,WACV;AAAA,UACA,OAAS,EAAA,CAAA,kCAAA,EAAqC,GAAG,CAAA,IAAA,EAAO,OAAO,CAAA,UAAA,CAAA;AAAA,SAChE,CAAA,CAAA;AAAA,eACM,GAAK,EAAA;AACZ,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,yBAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,QAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,KAAO,EAAA,OAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,QAAU,EAAA;AAAA,YACR,GAAA;AAAA,WACF;AAAA,UACA,MAAQ,EAAA;AAAA,YACN;AAAA,cACE,MAAM,GAAI,CAAA,IAAA;AAAA,cACV,SAAS,GAAI,CAAA,OAAA;AAAA,cACb,OAAO,GAAI,CAAA,KAAA;AAAA,aACb;AAAA,WACF;AAAA,UACA,OAAS,EAAA,CAAA,kCAAA,EAAqC,GAAG,CAAA,IAAA,EAAO,OAAO,CAAA,OAAA,CAAA;AAAA,SAChE,CAAA,CAAA;AACD,QAAM,MAAA,GAAA,CAAA;AAAA,OACR;AAAA,KACD,CACA,CAAA,MAAA,CAAO,uBAAyB,EAAA,OAAO,KAAK,GAAQ,KAAA;AACnD,MAAM,MAAA,EAAE,GAAI,EAAA,GAAI,GAAI,CAAA,MAAA,CAAA;AACpB,MAAA,MAAM,OAAU,GAAA,MAAM,WAAY,CAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AAChD,MAAI,IAAA,SAAA,CAAA;AACJ,MAAI,IAAA;AAEF,QAAA,MAAM,EAAE,QAAA,EAAa,GAAA,MAAM,gBAAgB,QAAS,CAAA;AAAA,UAClD,MAAQ,EAAA,iBAAA,CAAkB,EAAE,cAAA,EAAgB,KAAK,CAAA;AAAA,UACjD,WAAa,EAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG,CAAA;AAAA,SAC5C,CAAA,CAAA;AACD,QAAA,IAAI,SAAS,MAAQ,EAAA;AACnB,UAAY,SAAA,GAAAA,+BAAA,CAAmB,QAAS,CAAA,CAAC,CAAC,CAAA,CAAA;AAAA,SAC5C;AACA,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,uBAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,QAAU,EAAA;AAAA,YACR,GAAA;AAAA,YACA,SAAA;AAAA,WACF;AAAA,UACA,OAAS,EAAA,CAAA,qCAAA,EAAwC,GAAG,CAAA,cAAA,EAAiB,OAAO,CAAA,CAAA;AAAA,SAC7E,CAAA,CAAA;AACD,QAAM,MAAA,eAAA,CAAgB,kBAAkB,GAAK,EAAA;AAAA,UAC3C,WAAa,EAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG,CAAA;AAAA,SAC5C,CAAA,CAAA;AACD,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,uBAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,QAAU,EAAA;AAAA,YACR,GAAA;AAAA,YACA,SAAA;AAAA,WACF;AAAA,UACA,QAAU,EAAA;AAAA,YACR,MAAQ,EAAA,GAAA;AAAA,WACV;AAAA,UACA,OAAS,EAAA,CAAA,qCAAA,EAAwC,GAAG,CAAA,IAAA,EAAO,OAAO,CAAA,UAAA,CAAA;AAAA,SACnE,CAAA,CAAA;AACD,QAAI,GAAA,CAAA,MAAA,CAAO,GAAG,CAAA,CAAE,GAAI,EAAA,CAAA;AAAA,eACb,GAAK,EAAA;AACZ,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,uBAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,QAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,KAAO,EAAA,OAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,MAAQ,EAAA;AAAA,YACN;AAAA,cACE,MAAM,GAAI,CAAA,IAAA;AAAA,cACV,SAAS,GAAI,CAAA,OAAA;AAAA,cACb,OAAO,GAAI,CAAA,KAAA;AAAA,aACb;AAAA,WACF;AAAA,UACA,OAAS,EAAA,CAAA,qCAAA,EAAwC,GAAG,CAAA,IAAA,EAAO,OAAO,CAAA,OAAA,CAAA;AAAA,SACnE,CAAA,CAAA;AACD,QAAM,MAAA,GAAA,CAAA;AAAA,OACR;AAAA,KACD,CACA,CAAA,GAAA,CAAI,0CAA4C,EAAA,OAAO,KAAK,GAAQ,KAAA;AACnE,MAAA,MAAM,EAAE,IAAA,EAAM,SAAW,EAAA,IAAA,KAAS,GAAI,CAAA,MAAA,CAAA;AACtC,MAAA,MAAM,YAAYA,+BAAmB,CAAA,EAAE,IAAM,EAAA,SAAA,EAAW,MAAM,CAAA,CAAA;AAC9D,MAAA,MAAM,OAAU,GAAA,MAAM,WAAY,CAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AAChD,MAAI,IAAA;AACF,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,0BAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,QAAU,EAAA;AAAA,YACR,SAAA;AAAA,WACF;AAAA,UACA,OAAS,EAAA,CAAA,wCAAA,EAA2C,SAAS,CAAA,cAAA,EAAiB,OAAO,CAAA,CAAA;AAAA,SACtF,CAAA,CAAA;AACD,QAAA,MAAM,EAAE,QAAA,EAAa,GAAA,MAAM,gBAAgB,QAAS,CAAA;AAAA,UAClD,QAAQ,iBAAkB,CAAA;AAAA,YACxB,IAAA;AAAA,YACA,oBAAsB,EAAA,SAAA;AAAA,YACtB,eAAiB,EAAA,IAAA;AAAA,WAClB,CAAA;AAAA,UACD,WAAa,EAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG,CAAA;AAAA,SAC5C,CAAA,CAAA;AACD,QAAI,IAAA,CAAC,SAAS,MAAQ,EAAA;AACpB,UAAA,MAAM,IAAI9C,oBAAA;AAAA,YACR,CAAoB,iBAAA,EAAA,IAAI,CAAuB,oBAAA,EAAA,IAAI,mBAAmB,SAAS,CAAA,CAAA,CAAA;AAAA,WACjF,CAAA;AAAA,SACF;AACA,QAAA,GAAA,CAAI,OAAO,GAAG,CAAA,CAAE,IAAK,CAAA,QAAA,CAAS,CAAC,CAAC,CAAA,CAAA;AAChC,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,0BAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,QAAU,EAAA;AAAA,YACR,SAAA;AAAA,WACF;AAAA,UACA,QAAU,EAAA;AAAA,YACR,MAAQ,EAAA,GAAA;AAAA,WACV;AAAA,UACA,OAAS,EAAA,CAAA,wCAAA,EAA2C,SAAS,CAAA,IAAA,EAAO,OAAO,CAAA,UAAA,CAAA;AAAA,SAC5E,CAAA,CAAA;AAAA,eACM,GAAK,EAAA;AACZ,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,0BAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,QAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,KAAO,EAAA,OAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,QAAU,EAAA;AAAA,YACR,SAAA;AAAA,WACF;AAAA,UACA,MAAQ,EAAA;AAAA,YACN;AAAA,cACE,MAAM,GAAI,CAAA,IAAA;AAAA,cACV,SAAS,GAAI,CAAA,OAAA;AAAA,cACb,OAAO,GAAI,CAAA,KAAA;AAAA,aACb;AAAA,WACF;AAAA,UACA,OAAS,EAAA,CAAA,wCAAA,EAA2C,SAAS,CAAA,IAAA,EAAO,OAAO,CAAA,OAAA,CAAA;AAAA,SAC5E,CAAA,CAAA;AACD,QAAM,MAAA,GAAA,CAAA;AAAA,OACR;AAAA,KACD,CACA,CAAA,GAAA;AAAA,MACC,mDAAA;AAAA,MACA,OAAO,KAAK,GAAQ,KAAA;AAClB,QAAA,MAAM,EAAE,IAAA,EAAM,SAAW,EAAA,IAAA,KAAS,GAAI,CAAA,MAAA,CAAA;AACtC,QAAA,MAAM,YAAY8C,+BAAmB,CAAA,EAAE,IAAM,EAAA,SAAA,EAAW,MAAM,CAAA,CAAA;AAC9D,QAAA,MAAM,OAAU,GAAA,MAAM,WAAY,CAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AAChD,QAAI,IAAA;AACF,UAAA,MAAM,YAAY,QAAS,CAAA;AAAA,YACzB,SAAW,EAAA,4BAAA;AAAA,YACX,OAAA;AAAA,YACA,MAAQ,EAAA,WAAA;AAAA,YACR,KAAO,EAAA,YAAA;AAAA,YACP,OAAS,EAAA,GAAA;AAAA,YACT,QAAU,EAAA;AAAA,cACR,SAAA;AAAA,aACF;AAAA,YACA,OAAS,EAAA,CAAA,4CAAA,EAA+C,SAAS,CAAA,cAAA,EAAiB,OAAO,CAAA,CAAA;AAAA,WAC1F,CAAA,CAAA;AACD,UAAA,MAAM,QAAW,GAAA,MAAM,eAAgB,CAAA,cAAA,CAAe,SAAW,EAAA;AAAA,YAC/D,WAAa,EAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG,CAAA;AAAA,WAC5C,CAAA,CAAA;AACD,UAAA,GAAA,CAAI,MAAO,CAAA,GAAG,CAAE,CAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AAC7B,UAAA,MAAM,YAAY,QAAS,CAAA;AAAA,YACzB,SAAW,EAAA,4BAAA;AAAA,YACX,OAAA;AAAA,YACA,MAAQ,EAAA,WAAA;AAAA,YACR,KAAO,EAAA,YAAA;AAAA,YACP,OAAS,EAAA,GAAA;AAAA,YACT,QAAU,EAAA;AAAA,cACR,eAAe,QAAS,CAAA,aAAA;AAAA,cACxB,QAAU,EAAA,QAAA,CAAS,KAAM,CAAA,GAAA,CAAI,CAAgB,YAAA,KAAA;AAC3C,gBAAO,OAAA;AAAA,kBACL,SAAA,EAAWA,+BAAmB,CAAA,YAAA,CAAa,MAAM,CAAA;AAAA,kBACjD,kBAAkB,YAAa,CAAA,gBAAA;AAAA,iBACjC,CAAA;AAAA,eACD,CAAA;AAAA,aACH;AAAA,YACA,QAAU,EAAA;AAAA,cACR,MAAQ,EAAA,GAAA;AAAA,aACV;AAAA,YACA,OAAS,EAAA,CAAA,4CAAA,EAA+C,SAAS,CAAA,IAAA,EAAO,OAAO,CAAA,UAAA,CAAA;AAAA,WAChF,CAAA,CAAA;AAAA,iBACM,GAAK,EAAA;AACZ,UAAA,MAAM,YAAY,QAAS,CAAA;AAAA,YACzB,SAAW,EAAA,4BAAA;AAAA,YACX,OAAA;AAAA,YACA,MAAQ,EAAA,QAAA;AAAA,YACR,KAAO,EAAA,YAAA;AAAA,YACP,KAAO,EAAA,OAAA;AAAA,YACP,OAAS,EAAA,GAAA;AAAA,YACT,QAAU,EAAA;AAAA,cACR,SAAA;AAAA,aACF;AAAA,YACA,MAAQ,EAAA;AAAA,cACN;AAAA,gBACE,MAAM,GAAI,CAAA,IAAA;AAAA,gBACV,SAAS,GAAI,CAAA,OAAA;AAAA,gBACb,OAAO,GAAI,CAAA,KAAA;AAAA,eACb;AAAA,aACF;AAAA,YACA,OAAS,EAAA,CAAA,4CAAA,EAA+C,SAAS,CAAA,IAAA,EAAO,OAAO,CAAA,OAAA,CAAA;AAAA,WAChF,CAAA,CAAA;AACD,UAAM,MAAA,GAAA,CAAA;AAAA,SACR;AAAA,OACF;AAAA,KAED,CAAA,IAAA,CAAK,mBAAqB,EAAA,OAAO,KAAK,GAAQ,KAAA;AAC7C,MAAA,MAAM,OAAU,GAAA,MAAM,WAAY,CAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AAChD,MAAI,IAAA;AACF,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,yBAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,OAAA,EAAS,2CAA2C,OAAO,CAAA,CAAA;AAAA,SAC5D,CAAA,CAAA;AACD,QAAM,MAAA,OAAA,GAAU,qBAAqB,GAAG,CAAA,CAAA;AACxC,QAAM,MAAA,QAAA,GAAW,MAAM,eAAA,CAAgB,aAAc,CAAA;AAAA,UACnD,YAAY,OAAQ,CAAA,UAAA;AAAA,UACpB,MAAA,EAAQ,uBAAwB,CAAA,GAAA,CAAI,KAAK,CAAA;AAAA,UACzC,MAAQ,EAAA,0BAAA,CAA2B,GAAI,CAAA,KAAA,EAAO,QAAQ,MAAM,CAAA;AAAA,UAC5D,WAAa,EAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG,CAAA;AAAA,SAC5C,CAAA,CAAA;AACD,QAAA,GAAA,CAAI,MAAO,CAAA,GAAG,CAAE,CAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AAC7B,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,yBAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,QAAU,EAAA;AAAA,YACR,GAAG,OAAA;AAAA,WACL;AAAA,UACA,QAAU,EAAA;AAAA,YACR,MAAQ,EAAA,GAAA;AAAA,WACV;AAAA,UACA,OAAA,EAAS,iCAAiC,OAAO,CAAA,UAAA,CAAA;AAAA,SAClD,CAAA,CAAA;AAAA,eACM,GAAK,EAAA;AACZ,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,yBAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,QAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,KAAO,EAAA,OAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,MAAQ,EAAA;AAAA,YACN;AAAA,cACE,MAAM,GAAI,CAAA,IAAA;AAAA,cACV,SAAS,GAAI,CAAA,OAAA;AAAA,cACb,OAAO,GAAI,CAAA,KAAA;AAAA,aACb;AAAA,WACF;AAAA,UACA,OAAA,EAAS,iCAAiC,OAAO,CAAA,OAAA,CAAA;AAAA,SAClD,CAAA,CAAA;AACD,QAAM,MAAA,GAAA,CAAA;AAAA,OACR;AAAA,KACD,CACA,CAAA,GAAA,CAAI,gBAAkB,EAAA,OAAO,KAAK,GAAQ,KAAA;AACzC,MAAA,MAAM,OAAU,GAAA,MAAM,WAAY,CAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AAChD,MAAI,IAAA;AACF,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,yBAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,OAAA,EAAS,2CAA2C,OAAO,CAAA,CAAA;AAAA,SAC5D,CAAA,CAAA;AACD,QAAM,MAAA,QAAA,GAAW,MAAM,eAAA,CAAgB,MAAO,CAAA;AAAA,UAC5C,MAAA,EAAQ,uBAAwB,CAAA,GAAA,CAAI,KAAK,CAAA;AAAA,UACzC,MAAA,EAAQ,sBAAuB,CAAA,GAAA,CAAI,KAAK,CAAA;AAAA,UACxC,WAAa,EAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG,CAAA;AAAA,SAC5C,CAAA,CAAA;AACD,QAAA,GAAA,CAAI,MAAO,CAAA,GAAG,CAAE,CAAA,IAAA,CAAK,QAAQ,CAAA,CAAA;AAC7B,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,yBAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,QAAA,EAAU,EAAE,MAAA,EAAQ,GAAI,EAAA;AAAA,UACxB,OAAA,EAAS,iCAAiC,OAAO,CAAA,UAAA,CAAA;AAAA,SAClD,CAAA,CAAA;AAAA,eACM,GAAK,EAAA;AACZ,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,yBAAA;AAAA,UACX,OAAA;AAAA,UACA,MAAQ,EAAA,QAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAS,EAAA,GAAA;AAAA,UACT,MAAQ,EAAA;AAAA,YACN;AAAA,cACE,MAAM,GAAI,CAAA,IAAA;AAAA,cACV,SAAS,GAAI,CAAA,OAAA;AAAA,cACb,OAAO,GAAI,CAAA,KAAA;AAAA,aACb;AAAA,WACF;AAAA,UACA,OAAA,EAAS,iCAAiC,OAAO,CAAA,OAAA,CAAA;AAAA,SAClD,CAAA,CAAA;AACD,QAAM,MAAA,GAAA,CAAA;AAAA,OACR;AAAA,KACD,CAAA,CAAA;AAAA,GACL;AAEA,EAAA,IAAI,eAAiB,EAAA;AACnB,IAAA,MAAA,CACG,IAAK,CAAA,YAAA,EAAc,OAAO,GAAA,EAAK,GAAQ,KAAA;AACtC,MAAA,MAAM,WAAc,GAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG,CAAA,CAAA;AAClD,MAAA,MAAM,OAAU,GAAA,MAAM,WAAY,CAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AAChD,MAAA,MAAM,QAAW,GAAA,MAAM,mBAAoB,CAAA,GAAA,EAAK,aAAa,CAAA,CAAA;AAC7D,MAAM,MAAA,MAAA,GAASwC,oBAAG,GAAI,CAAA,KAAA,CAAM,QAAQ,EAAE,OAAA,EAAS,OAAO,CAAA,CAAA;AAEtD,MAAI,IAAA;AACF,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,yBAAA;AAAA,UACX,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAA;AAAA,UACA,QAAU,EAAA;AAAA,YACR,QAAA;AAAA,YACA,QAAU,EAAA,MAAA;AAAA,WACZ;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAS,EAAA,CAAA,wCAAA,EAA2C,QAAS,CAAA,MAAM,iBAAiB,OAAO,CAAA,CAAA;AAAA,SAC5F,CAAA,CAAA;AAID,QAAA,IAAI,CAAC,MAAQ,EAAA;AACX,UAAA,oBAAA,CAAqB,eAAe,CAAA,CAAA;AAAA,SACtC;AAEA,QAAM,MAAA,MAAA,GAAS,MAAM,eAAgB,CAAA,cAAA;AAAA,UACnC,QAAA;AAAA,UACA,MAAA;AAAA,UACA;AAAA,YACE,WAAA;AAAA,WACF;AAAA,SACF,CAAA;AACA,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,yBAAA;AAAA,UACX,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAA;AAAA,UACA,QAAU,EAAA;AAAA,YACR,UAAU,MAAO,CAAA,QAAA;AAAA,YACjB,QAAU,EAAA,MAAA;AAAA,WACZ;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,QAAU,EAAA;AAAA,YACR,MAAQ,EAAA,GAAA;AAAA,WACV;AAAA,UACA,OAAS,EAAA,CAAA,gCAAA,EAAmC,QAAS,CAAA,MAAM,iBAAiB,OAAO,CAAA,UAAA,CAAA;AAAA,SACpF,CAAA,CAAA;AACD,QAAA,GAAA,CAAI,MAAO,CAAA,GAAG,CAAE,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAAA,eACpB,GAAK,EAAA;AACZ,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,yBAAA;AAAA,UACX,MAAQ,EAAA,QAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,KAAO,EAAA,OAAA;AAAA,UACP,OAAA;AAAA,UACA,QAAU,EAAA;AAAA,YACR,QAAA;AAAA,YACA,QAAU,EAAA,MAAA;AAAA,WACZ;AAAA,UACA,MAAQ,EAAA;AAAA,YACN;AAAA,cACE,MAAM,GAAI,CAAA,IAAA;AAAA,cACV,SAAS,GAAI,CAAA,OAAA;AAAA,cACb,OAAO,GAAI,CAAA,KAAA;AAAA,aACb;AAAA,WACF;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAS,EAAA,CAAA,gCAAA,EAAmC,QAAS,CAAA,MAAM,iBAAiB,OAAO,CAAA,OAAA,CAAA;AAAA,SACpF,CAAA,CAAA;AACD,QAAM,MAAA,GAAA,CAAA;AAAA,OACR;AAAA,KACD,CACA,CAAA,GAAA,CAAI,YAAc,EAAA,OAAO,KAAK,GAAQ,KAAA;AACrC,MAAA,MAAM,OAAU,GAAA,MAAM,WAAY,CAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AAChD,MAAI,IAAA;AACF,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,sBAAA;AAAA,UACX,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAA;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAA,EAAS,2CAA2C,OAAO,CAAA,CAAA;AAAA,SAC5D,CAAA,CAAA;AACD,QAAM,MAAA,SAAA,GAAY,MAAM,eAAA,CAAgB,aAAc,CAAA;AAAA,UACpD,WAAa,EAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG,CAAA;AAAA,SAC5C,CAAA,CAAA;AACD,QAAI,GAAA,CAAA,MAAA,CAAO,GAAG,CAAA,CAAE,IAAK,CAAA,SAAA,CAAU,GAAI,CAAA,CAAA,CAAA,MAAM,EAAE,IAAA,EAAM,CAAE,EAAA,CAAE,CAAC,CAAA,CAAA;AACtD,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,sBAAA;AAAA,UACX,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAA;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,QAAU,EAAA;AAAA,YACR,MAAQ,EAAA,GAAA;AAAA,WACV;AAAA,UACA,OAAA,EAAS,iCAAiC,OAAO,CAAA,UAAA,CAAA;AAAA,SAClD,CAAA,CAAA;AAAA,eACM,GAAK,EAAA;AACZ,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,sBAAA;AAAA,UACX,MAAQ,EAAA,QAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,KAAO,EAAA,OAAA;AAAA,UACP,OAAA;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,MAAQ,EAAA;AAAA,YACN;AAAA,cACE,MAAM,GAAI,CAAA,IAAA;AAAA,cACV,SAAS,GAAI,CAAA,OAAA;AAAA,cACb,OAAO,GAAI,CAAA,KAAA;AAAA,aACb;AAAA,WACF;AAAA,UACA,OAAA,EAAS,iCAAiC,OAAO,CAAA,OAAA,CAAA;AAAA,SAClD,CAAA,CAAA;AACD,QAAM,MAAA,GAAA,CAAA;AAAA,OACR;AAAA,KACD,CAEA,CAAA,GAAA,CAAI,gBAAkB,EAAA,OAAO,KAAK,GAAQ,KAAA;AACzC,MAAM,MAAA,EAAE,EAAG,EAAA,GAAI,GAAI,CAAA,MAAA,CAAA;AACnB,MAAA,MAAM,OAAU,GAAA,MAAM,WAAY,CAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AAChD,MAAI,IAAA;AACF,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,0BAAA;AAAA,UACX,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAA;AAAA,UACA,QAAU,EAAA;AAAA,YACR,EAAA;AAAA,WACF;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAS,EAAA,CAAA,mCAAA,EAAsC,EAAE,CAAA,cAAA,EAAiB,OAAO,CAAA,CAAA;AAAA,SAC1E,CAAA,CAAA;AACD,QAAA,MAAM,MAAS,GAAA,MAAM,eAAgB,CAAA,WAAA,CAAY,EAAI,EAAA;AAAA,UACnD,WAAa,EAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG,CAAA;AAAA,SAC5C,CAAA,CAAA;AACD,QAAA,GAAA,CAAI,MAAO,CAAA,GAAG,CAAE,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAC3B,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,0BAAA;AAAA,UACX,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAA;AAAA,UACA,QAAU,EAAA;AAAA,YACR,EAAA;AAAA,WACF;AAAA,UACA,QAAU,EAAA;AAAA,YACR,MAAQ,EAAA,GAAA;AAAA,YACR,IAAM,EAAA,MAAA;AAAA,WACR;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAS,EAAA,CAAA,mCAAA,EAAsC,EAAE,CAAA,IAAA,EAAO,OAAO,CAAA,UAAA,CAAA;AAAA,SAChE,CAAA,CAAA;AAAA,eACM,GAAK,EAAA;AACZ,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,0BAAA;AAAA,UACX,MAAQ,EAAA,QAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,KAAO,EAAA,OAAA;AAAA,UACP,OAAA;AAAA,UACA,QAAU,EAAA;AAAA,YACR,EAAA;AAAA,WACF;AAAA,UACA,MAAQ,EAAA;AAAA,YACN;AAAA,cACE,MAAM,GAAI,CAAA,IAAA;AAAA,cACV,SAAS,GAAI,CAAA,OAAA;AAAA,cACb,OAAO,GAAI,CAAA,KAAA;AAAA,aACb;AAAA,WACF;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAS,EAAA,CAAA,mCAAA,EAAsC,EAAE,CAAA,IAAA,EAAO,OAAO,CAAA,OAAA,CAAA;AAAA,SAChE,CAAA,CAAA;AACD,QAAM,MAAA,GAAA,CAAA;AAAA,OACR;AAAA,KACD,CACA,CAAA,MAAA,CAAO,gBAAkB,EAAA,OAAO,KAAK,GAAQ,KAAA;AAC5C,MAAA,MAAM,OAAU,GAAA,MAAM,WAAY,CAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AAChD,MAAM,MAAA,EAAE,EAAG,EAAA,GAAI,GAAI,CAAA,MAAA,CAAA;AACnB,MAAI,IAAA;AACF,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,yBAAA;AAAA,UACX,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAA;AAAA,UACA,QAAU,EAAA;AAAA,YACR,EAAA;AAAA,WACF;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAS,EAAA,CAAA,sCAAA,EAAyC,EAAE,CAAA,cAAA,EAAiB,OAAO,CAAA,CAAA;AAAA,SAC7E,CAAA,CAAA;AACD,QAAA,oBAAA,CAAqB,eAAe,CAAA,CAAA;AAEpC,QAAA,MAAM,QAAW,GAAA,MAAM,eAAgB,CAAA,WAAA,CAAY,EAAI,EAAA;AAAA,UACrD,WAAa,EAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG,CAAA;AAAA,SAC5C,CAAA,CAAA;AACD,QAAM,MAAA,eAAA,CAAgB,eAAe,EAAI,EAAA;AAAA,UACvC,WAAa,EAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG,CAAA;AAAA,SAC5C,CAAA,CAAA;AACD,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,yBAAA;AAAA,UACX,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAA;AAAA,UACA,QAAU,EAAA;AAAA,YACR,QAAA;AAAA,WACF;AAAA,UACA,QAAU,EAAA;AAAA,YACR,MAAQ,EAAA,GAAA;AAAA,WACV;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAS,EAAA,CAAA,sCAAA,EAAyC,EAAE,CAAA,IAAA,EAAO,OAAO,CAAA,UAAA,CAAA;AAAA,SACnE,CAAA,CAAA;AACD,QAAI,GAAA,CAAA,MAAA,CAAO,GAAG,CAAA,CAAE,GAAI,EAAA,CAAA;AAAA,eACb,GAAK,EAAA;AACZ,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,yBAAA;AAAA,UACX,MAAQ,EAAA,QAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,KAAO,EAAA,OAAA;AAAA,UACP,OAAA;AAAA,UACA,QAAU,EAAA;AAAA,YACR,EAAA;AAAA,WACF;AAAA,UACA,MAAQ,EAAA;AAAA,YACN;AAAA,cACE,MAAM,GAAI,CAAA,IAAA;AAAA,cACV,SAAS,GAAI,CAAA,OAAA;AAAA,cACb,OAAO,GAAI,CAAA,KAAA;AAAA,aACb;AAAA,WACF;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAS,EAAA,CAAA,sCAAA,EAAyC,EAAE,CAAA,IAAA,EAAO,OAAO,CAAA,OAAA,CAAA;AAAA,SACnE,CAAA,CAAA;AACD,QAAM,MAAA,GAAA,CAAA;AAAA,OACR;AAAA,KACD,CACA,CAAA,GAAA,CAAI,6CAA+C,EAAA,OAAO,KAAK,GAAQ,KAAA;AACtE,MAAA,MAAM,EAAE,IAAA,EAAM,SAAW,EAAA,IAAA,KAAS,GAAI,CAAA,MAAA,CAAA;AACtC,MAAA,MAAM,OAAU,GAAA,MAAM,WAAY,CAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AAChD,MAAA,MAAM,cAAc,CAAG,EAAA,IAAI,CAAI,CAAA,EAAA,SAAS,IAAI,IAAI,CAAA,CAAA,CAAA;AAEhD,MAAI,IAAA;AACF,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,iCAAA;AAAA,UACX,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAA;AAAA,UACA,QAAU,EAAA;AAAA,YACR,WAAA;AAAA,WACF;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAS,EAAA,CAAA,2BAAA,EAA8B,WAAW,CAAA,cAAA,EAAiB,OAAO,CAAA,CAAA;AAAA,SAC3E,CAAA,CAAA;AAED,QAAM,MAAA,MAAA,GAAS,MAAM,eAAgB,CAAA,mBAAA;AAAA,UACnC,EAAE,IAAM,EAAA,SAAA,EAAW,IAAK,EAAA;AAAA,UACxB,EAAE,WAAa,EAAA,MAAM,QAAS,CAAA,WAAA,CAAY,GAAG,CAAE,EAAA;AAAA,SACjD,CAAA;AACA,QAAA,GAAA,CAAI,MAAO,CAAA,GAAG,CAAE,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAC3B,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,iCAAA;AAAA,UACX,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAA;AAAA,UACA,QAAU,EAAA;AAAA,YACR,WAAA;AAAA,WACF;AAAA,UACA,QAAU,EAAA;AAAA,YACR,MAAQ,EAAA,GAAA;AAAA,YACR,IAAM,EAAA,MAAA;AAAA,WACR;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAS,EAAA,CAAA,2BAAA,EAA8B,WAAW,CAAA,IAAA,EAAO,OAAO,CAAA,UAAA,CAAA;AAAA,SACjE,CAAA,CAAA;AAAA,eACM,GAAK,EAAA;AACZ,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,iCAAA;AAAA,UACX,MAAQ,EAAA,QAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,KAAO,EAAA,OAAA;AAAA,UACP,OAAA;AAAA,UACA,QAAU,EAAA;AAAA,YACR,WAAA;AAAA,WACF;AAAA,UACA,MAAQ,EAAA;AAAA,YACN;AAAA,cACE,MAAM,GAAI,CAAA,IAAA;AAAA,cACV,SAAS,GAAI,CAAA,OAAA;AAAA,cACb,OAAO,GAAI,CAAA,KAAA;AAAA,aACb;AAAA,WACF;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAS,EAAA,CAAA,2BAAA,EAA8B,WAAW,CAAA,IAAA,EAAO,OAAO,CAAA,OAAA,CAAA;AAAA,SACjE,CAAA,CAAA;AACD,QAAM,MAAA,GAAA,CAAA;AAAA,OACR;AAAA,KACD,CAAA,CAAA;AAAA,GACL;AAEA,EAAA,IAAI,gBAAkB,EAAA;AACpB,IAAA,MAAA,CAAO,IAAK,CAAA,mBAAA,EAAqB,OAAO,GAAA,EAAK,GAAQ,KAAA;AACnD,MAAA,MAAM,OAAU,GAAA,MAAM,WAAY,CAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AAEhD,MAAI,IAAA;AACF,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,wBAAA;AAAA,UACX,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAA;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAA,EAAS,8CAA8C,OAAO,CAAA,CAAA;AAAA,SAC/D,CAAA,CAAA;AACD,QAAA,MAAM,OAAO,MAAM,mBAAA;AAAA,UACjB,GAAA;AAAA,UACAX,MAAE,MAAO,CAAA;AAAA,YACP,QAAU,EAAA,aAAA;AAAA,YACV,eAAiB,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAAA,WACtC,CAAA;AAAA,SACH,CAAA;AACA,QAAM,MAAA,MAAA,GAASA,MAAE,MAAO,CAAA;AAAA,UACtB,QAAU,EAAA,aAAA;AAAA,UACV,eAAiB,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,QAAS,EAAA;AAAA,SACtC,CAAA,CAAA;AACD,QAAM,MAAA,UAAA,GAAa,MAAO,CAAA,KAAA,CAAM,IAAI,CAAA,CAAA;AACpC,QAAI,IAAA;AACF,UAAA,MAAM,MAAS,GAAA,MAAM,gBAAiB,CAAA,eAAA,CAAgB,UAAU,CAAA,CAAA;AAChE,UAAA,GAAA,CAAI,MAAO,CAAA,GAAG,CAAE,CAAA,IAAA,CAAK,MAAM,CAAA,CAAA;AAC3B,UAAA,MAAM,YAAY,QAAS,CAAA;AAAA,YACzB,SAAW,EAAA,wBAAA;AAAA,YACX,MAAQ,EAAA,WAAA;AAAA,YACR,KAAO,EAAA,YAAA;AAAA,YACP,OAAA;AAAA,YACA,OAAS,EAAA,GAAA;AAAA,YACT,QAAU,EAAA;AAAA,cACR,MAAQ,EAAA,GAAA;AAAA,cACR,IAAM,EAAA,MAAA;AAAA,aACR;AAAA,YACA,OAAA,EAAS,oCAAoC,OAAO,CAAA,UAAA,CAAA;AAAA,WACrD,CAAA,CAAA;AAAA,iBACM,GAAK,EAAA;AACZ,UAAA;AAAA;AAAA,YAEE,GAAA,CAAI,IAAS,KAAA,OAAA,IACb,aAAiB,IAAA,GAAA;AAAA,YACjB;AACA,YAAM,MAAA,IAAI5B,kBAAW,wCAAwC,CAAA,CAAA;AAAA,WAC/D;AACA,UAAM,MAAA,GAAA,CAAA;AAAA,SACR;AAAA,eACO,GAAK,EAAA;AACZ,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,wBAAA;AAAA,UACX,MAAQ,EAAA,QAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,KAAO,EAAA,OAAA;AAAA,UACP,OAAA;AAAA,UACA,MAAQ,EAAA;AAAA,YACN;AAAA,cACE,MAAM,GAAI,CAAA,IAAA;AAAA,cACV,SAAS,GAAI,CAAA,OAAA;AAAA,cACb,OAAO,GAAI,CAAA,KAAA;AAAA,aACb;AAAA,WACF;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAA,EAAS,oCAAoC,OAAO,CAAA,OAAA,CAAA;AAAA,SACrD,CAAA,CAAA;AACD,QAAM,MAAA,GAAA,CAAA;AAAA,OACR;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAEA,EAAA,IAAI,YAAc,EAAA;AAChB,IAAA,MAAA,CAAO,IAAK,CAAA,kBAAA,EAAoB,OAAO,GAAA,EAAK,GAAQ,KAAA;AAClD,MAAA,MAAM,OAAU,GAAA,MAAM,WAAY,CAAA,UAAA,CAAW,GAAG,CAAA,CAAA;AAEhD,MAAI,IAAA;AACF,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,uBAAA;AAAA,UACX,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAA;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAA,EAAS,6CAA6C,OAAO,CAAA,CAAA;AAAA,SAC9D,CAAA,CAAA;AACD,QAAM,MAAA,UAAA,GAAa4B,MAAE,MAAO,CAAA;AAAA,UAC1B,MAAA,EAAQA,MAAE,OAAQ,EAAA;AAAA,UAClB,QAAA,EAAUA,MAAE,MAAO,EAAA;AAAA,SACpB,CAAA,CAAA;AAED,QAAI,IAAA,IAAA,CAAA;AACJ,QAAI,IAAA,MAAA,CAAA;AACJ,QAAI,IAAA,QAAA,CAAA;AACJ,QAAI,IAAA;AACF,UAAO,IAAA,GAAA,MAAM,mBAAoB,CAAA,GAAA,EAAK,UAAU,CAAA,CAAA;AAChD,UAAS,MAAA,GAAA,sBAAA,CAAuB,KAAK,MAAM,CAAA,CAAA;AAC3C,UAAW,QAAA,GAAAtB,6BAAA,CAAiB,KAAK,QAAQ,CAAA,CAAA;AACzC,UAAA,IAAI,SAAS,IAAS,KAAA,KAAA;AACpB,YAAA,MAAM,IAAI,SAAA;AAAA,cACR,CAAA,qBAAA,EAAwB,KAAK,QAAQ,CAAA,8DAAA,CAAA;AAAA,aACvC,CAAA;AAAA,iBACK,GAAK,EAAA;AACZ,UAAA,OAAO,GAAI,CAAA,MAAA,CAAO,GAAG,CAAA,CAAE,IAAK,CAAA;AAAA,YAC1B,MAAQ,EAAA,CAACmB,qBAAe,CAAA,GAAG,CAAC,CAAA;AAAA,WAC7B,CAAA,CAAA;AAAA,SACH;AAEA,QAAM,MAAA,gBAAA,GAAmB,MAAM,YAAA,CAAa,OAAQ,CAAA;AAAA,UAClD,MAAQ,EAAA;AAAA,YACN,GAAG,MAAA;AAAA,YACH,QAAU,EAAA;AAAA,cACR,GAAG,MAAO,CAAA,QAAA;AAAA,cACV,WAAa,EAAA;AAAA,gBACX,CAAClE,gCAAmB,GAAG,IAAK,CAAA,QAAA;AAAA,gBAC5B,CAACC,uCAA0B,GAAG,IAAK,CAAA,QAAA;AAAA,gBACnC,GAAG,OAAO,QAAS,CAAA,WAAA;AAAA,eACrB;AAAA,aACF;AAAA,WACF;AAAA,SACD,CAAA,CAAA;AAED,QAAI,IAAA,CAAC,iBAAiB,EAAI,EAAA;AACxB,UAAA,MAAMyD,WAAS,gBAAiB,CAAA,MAAA,CAAO,IAAI,CAAK,CAAA,KAAAQ,qBAAA,CAAe,CAAC,CAAC,CAAA,CAAA;AACjE,UAAA,MAAM,YAAY,QAAS,CAAA;AAAA,YACzB,SAAW,EAAA,uBAAA;AAAA,YACX,MAAQ,EAAA,QAAA;AAAA,YACR,KAAO,EAAA,YAAA;AAAA,YACP,KAAO,EAAA,OAAA;AAAA,oBACPR,QAAA;AAAA,YACA,QAAU,EAAA;AAAA,cACR,MAAQ,EAAA,GAAA;AAAA,aACV;AAAA,YACA,OAAA;AAAA,YACA,OAAS,EAAA,GAAA;AAAA,YACT,OAAA,EAAS,6CAA6C,OAAO,CAAA,OAAA,CAAA;AAAA,WAC9D,CAAA,CAAA;AACD,UAAA,OAAO,GAAI,CAAA,MAAA,CAAO,GAAG,CAAA,CAAE,IAAK,CAAA;AAAA,oBAC1BA,QAAA;AAAA,WACD,CAAA,CAAA;AAAA,SACH;AACA,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,uBAAA;AAAA,UACX,MAAQ,EAAA,WAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,OAAA;AAAA,UACA,QAAU,EAAA;AAAA,YACR,MAAQ,EAAA,GAAA;AAAA,WACV;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAA,EAAS,mCAAmC,OAAO,CAAA,UAAA,CAAA;AAAA,SACpD,CAAA,CAAA;AACD,QAAA,OAAO,GAAI,CAAA,MAAA,CAAO,GAAG,CAAA,CAAE,GAAI,EAAA,CAAA;AAAA,eACpB,GAAK,EAAA;AACZ,QAAA,MAAM,YAAY,QAAS,CAAA;AAAA,UACzB,SAAW,EAAA,uBAAA;AAAA,UACX,MAAQ,EAAA,QAAA;AAAA,UACR,KAAO,EAAA,YAAA;AAAA,UACP,KAAO,EAAA,OAAA;AAAA,UACP,MAAQ,EAAA;AAAA,YACN;AAAA,cACE,MAAM,GAAI,CAAA,IAAA;AAAA,cACV,SAAS,GAAI,CAAA,OAAA;AAAA,cACb,OAAO,GAAI,CAAA,KAAA;AAAA,aACb;AAAA,WACF;AAAA,UACA,OAAA;AAAA,UACA,OAAS,EAAA,GAAA;AAAA,UACT,OAAA,EAAS,6CAA6C,OAAO,CAAA,OAAA,CAAA;AAAA,SAC9D,CAAA,CAAA;AACD,QAAM,MAAA,GAAA,CAAA;AAAA,OACR;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AAEA,EAAO,MAAA,CAAA,GAAA,CAAIuB,4BAAc,CAAA,CAAA;AACzB,EAAO,OAAA,MAAA,CAAA;AACT;;;;;;;;AC1nCO,MAAM,qBAAgD,CAAA;AAAA,EAG3D,YAAY,OAA+C,EAAA;AAF3D,IAAQtF,eAAA,CAAA,IAAA,EAAA,UAAA,CAAA,CAAA;AAGN,IAAA,IAAA,CAAK,WAAW,OAAQ,CAAA,QAAA,CAAA;AAAA,GAC1B;AAAA,EAEA,MAAM,QAAQ,OAAyB,EAAA;AACrC,IAAA,MAAM,IAAK,CAAA,QAAA,CAAS,WAAY,CAAA,OAAM,EAAM,KAAA;AAC1C,MAAA,MAAM,EAAE,UAAW,EAAA,GAAI,MAAM,IAAK,CAAA,QAAA,CAAS,cAAc,EAAI,EAAA;AAAA,QAC3D,WAAW,OAAQ,CAAA,SAAA;AAAA,OACpB,CAAA,CAAA;AACD,MAAA,MAAM,mBAAmB,UAAW,CAAA,IAAA;AAAA,QAAK,CAAA,GAAA,KACvC,GAAI,CAAA,UAAA,CAAW,WAAW,CAAA;AAAA,OAC5B,CAAA;AAIA,MAAA,IAAI,gBAAkB,EAAA;AACpB,QAAM,MAAA,IAAA,CAAK,QAAS,CAAA,OAAA,CAAQ,EAAI,EAAA;AAAA,UAC9B,SAAW,EAAA,gBAAA;AAAA,SACZ,CAAA,CAAA;AAAA,OACH;AACA,MAAM,MAAA,IAAA,CAAK,QAAS,CAAA,OAAA,CAAQ,EAAI,EAAA;AAAA,QAC9B,WAAW,OAAQ,CAAA,SAAA;AAAA,OACpB,CAAA,CAAA;AAAA,KACF,CAAA,CAAA;AAAA,GACH;AACF;;ACzBO,MAAM,wBAAmD,CAAA;AAAA,EAC9D,WAAA,CACmB,SACA,aACjB,EAAA;AAFiB,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;AACA,IAAA,IAAA,CAAA,aAAA,GAAA,aAAA,CAAA;AAAA,GAChB;AAAA,EAEH,MAAM,QAAQ,OAAyB,EAAA;AACrC,IAAM,MAAA,iBAAA,GAAA,CACJ,MAAM,IAAA,CAAK,aAAc,CAAA,SAAA;AAAA,MACvB;AAAA,QACE;AAAA,UACE,UAAY,EAAAuF,oCAAA;AAAA,UACZ,aAAa,OAAQ,CAAA,SAAA;AAAA,SACvB;AAAA,OACF;AAAA,MACA,EAAE,WAAa,EAAA,OAAA,CAAQ,WAAY,EAAA;AAAA,OAErC,CAAC,CAAA,CAAA;AACH,IAAI,IAAA,iBAAA,CAAkB,MAAW,KAAAC,sCAAA,CAAgB,KAAO,EAAA;AACtD,MAAA,MAAM,IAAIb,sBAAgB,EAAA,CAAA;AAAA,KAC5B;AACA,IAAM,MAAA,IAAA,CAAK,OAAQ,CAAA,OAAA,CAAQ,OAAO,CAAA,CAAA;AAAA,GACpC;AACF;;;;;;;;ACKO,MAAM,4BAAA,GAAN,MAAM,4BAA4D,CAAA;AAAA,EAqGvE,YAA6B,KAAsB,EAAA;AAAtB,IAAA,IAAA,CAAA,KAAA,GAAA,KAAA,CAAA;AAAA,GAAuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAnDpD,OAAO,WAAW,MAAgB,EAAA;AAChC,IAAM,MAAA,KAAA,GAAQ,IAAI,KAAmB,EAAA,CAAA;AAErC,IAAI,IAAA,MAAA,CAAO,GAAI,CAAA,eAAe,CAAG,EAAA;AAC/B,MAAA,MAAM,cAAc,MACjB,CAAA,cAAA,CAAe,eAAe,CAAA,CAC9B,IAAI,CAAS,QAAA,KAAA;AA1GtB,QAAA,IAAA,EAAA,CAAA;AA0G0B,QAAA,OAAA;AAAA,UAChB,KAAA,EAAO,SAAS,cAAe,CAAA,OAAO,EAAE,GAAI,CAAA,CAAA,IAAA,MAAS,EAAE,IAAA,EAAO,CAAA,CAAA;AAAA,UAC9D,YAAW,EACR,GAAA,QAAA,CAAA,sBAAA,CAAuB,WAAW,CAD1B,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAEP,IAAI,CAAkB,cAAA,KAAA;AACtB,YAAA,MAAM,QAAW,GAAA;AAAA,cACf,OAAA,EAAS,cAAe,CAAA,iBAAA,CAAkB,SAAS,CAAA;AAAA,cACnD,IAAA,EAAM,cAAe,CAAA,SAAA,CAAU,MAAM,CAAA;AAAA,cACrC,KAAA,EAAO,cAAe,CAAA,iBAAA,CAAkB,OAAO,CAAA;AAAA,aACjD,CAAA;AACA,YAAI,IAAA,QAAA,CAAS,OAAW,IAAA,QAAA,CAAS,KAAO,EAAA;AACtC,cAAA,MAAM,IAAI,KAAA;AAAA,gBACR,mEAAA;AAAA,eACF,CAAA;AAAA,aACF;AACA,YAAO,OAAA,QAAA,CAAA;AAAA,WACT,CAAA;AAAA,SACJ,CAAA;AAAA,OAAE,CAAA,CAAA;AACJ,MAAM,KAAA,CAAA,IAAA,CAAK,GAAG,WAAW,CAAA,CAAA;AAAA,KACpB,MAAA;AACL,MAAM,KAAA,CAAA,IAAA,CAAK,GAAG,4BAAA,CAA4B,YAAY,CAAA,CAAA;AAAA,KACxD;AAEA,IAAI,IAAA,MAAA,CAAO,GAAI,CAAA,mBAAmB,CAAG,EAAA;AACnC,MAAA,MAAM,gBAAgB,MACnB,CAAA,cAAA,CAAe,mBAAmB,CAAA,CAClC,QAAQ,CAAW,OAAA,KAAA;AAClB,QAAA,IAAI,CAAC,OAAA,CAAQ,GAAI,CAAA,OAAO,CAAG,EAAA;AACzB,UAAA,OAAO,EAAC,CAAA;AAAA,SACV;AACA,QAAM,MAAA,IAAA,GAAO,OAAQ,CAAA,SAAA,CAAU,MAAM,CAAA,CAAA;AACrC,QAAA,MAAM,QAAQ,aAAc,CAAA,IAAA,EAAM,OAAQ,CAAA,SAAA,CAAU,QAAQ,CAAC,CAAA,CAAA;AAE7D,QAAA,OAAO,OAAQ,CAAA,cAAA,CAAe,OAAO,CAAA,CAAE,IAAI,CAAa,QAAA,MAAA;AAAA,UACtD,KAAA,EAAO,SAAS,cAAe,CAAA,OAAO,EAAE,GAAI,CAAA,CAAA,IAAA,MAAS,EAAE,IAAA,EAAO,CAAA,CAAA;AAAA,UAC9D,SAAW,EAAA,CAAC,EAAE,IAAA,EAAM,OAAO,CAAA;AAAA,SAC3B,CAAA,CAAA,CAAA;AAAA,OACH,CAAA,CAAA;AAEH,MAAM,KAAA,CAAA,IAAA,CAAK,GAAG,aAAa,CAAA,CAAA;AAAA,KAC7B;AAEA,IAAO,OAAA,IAAI,6BAA4B,KAAK,CAAA,CAAA;AAAA,GAC9C;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,SAAA,CAAU,QAAgB,QAAwB,EAAA;AAChD,IAAW,KAAA,MAAA,IAAA,IAAQ,KAAK,KAAO,EAAA;AAC7B,MAAA,IAAI,CAAC,IAAK,CAAA,aAAA,CAAc,QAAU,EAAA,IAAA,CAAK,SAAS,CAAG,EAAA;AACjD,QAAA,SAAA;AAAA,OACF;AAEA,MAAA,IAAI,IAAK,CAAA,WAAA,CAAY,MAAQ,EAAA,IAAA,CAAK,KAAK,CAAG,EAAA;AACxC,QAAO,OAAA,IAAA,CAAA;AAAA,OACT;AAAA,KACF;AAEA,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AAAA,EAEQ,aAAA,CACN,UACA,QACS,EAAA;AACT,IAAA,IAAI,CAAC,QAAU,EAAA;AACb,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AAEA,IAAA,KAAA,MAAW,WAAW,QAAU,EAAA;AAC9B,MAAI,IAAA,OAAA,CAAQ,IAAS,MAAA,QAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAU,IAAM,CAAA,EAAA;AACnC,QAAA,SAAA;AAAA,OACF;AACA,MAAA,IAAI,OAAQ,CAAA,KAAA,IAAS,OAAQ,CAAA,KAAA,MAAU,qCAAU,MAAQ,CAAA,EAAA;AACvD,QAAA,SAAA;AAAA,OACF;AACA,MAAA,IACE,QAAQ,OACR,IAAA,CAACc,oBAAU,QAAU,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,QAAA,CAAA,MAAA,EAAQ,QAAQ,OAAS,EAAA;AAAA,QAC5C,MAAQ,EAAA,IAAA;AAAA,QACR,GAAK,EAAA,IAAA;AAAA,OACN,CACD,EAAA;AACA,QAAA,SAAA;AAAA,OACF;AACA,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AAEA,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AAAA,EAEQ,WAAA,CAAY,QAAgB,QAAwC,EAAA;AAzM9E,IAAA,IAAA,EAAA,CAAA;AA0MI,IAAA,IAAI,CAAC,QAAU,EAAA;AACb,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AAEA,IAAA,KAAA,MAAW,WAAW,QAAU,EAAA;AAC9B,MAAA,IAAA,CAAA,CAAI,sCAAQ,IAAR,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAc,mBAAkB,OAAQ,CAAA,IAAA,CAAK,aAAe,EAAA;AAC9D,QAAA,SAAA;AAAA,OACF;AAEA,MAAO,OAAA,IAAA,CAAA;AAAA,KACT;AAEA,IAAO,OAAA,KAAA,CAAA;AAAA,GACT;AACF,CAAA,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhKEzF,eAAA,CANW,8BAMK,cAA8B,EAAA;AAAA,EAC5C;AAAA,IACE,KAAA,EAAO,CAAC,WAAA,EAAa,KAAO,EAAA,UAAU,EAAE,GAAI,CAAA,CAAA,IAAA,MAAS,EAAE,IAAA,EAAO,CAAA,CAAA;AAAA,GAChE;AACF,CAAA,CAAA,CAAA;AAVK,IAAM,2BAAN,GAAA,4BAAA,CAAA;AAwKP,SAAS,aAAA,CAAc,MAAc,MAAwB,EAAA;AAC3D,EAAA,IAAI,SAAS,MAAQ,EAAA;AACnB,IAAO,OAAA,MAAA,CAAA;AAAA,GACT;AAEA,EAAO,OAAAuC,qBAAA,CAAK,QAAQ,MAAM,CAAA,CAAA;AAC5B;;;;;;;;ACnMA,MAAM,UAA+C,CAAA;AAAA,EAGnD,YACmB,MAIjB,EAAA;AAJiB,IAAA,IAAA,CAAA,MAAA,GAAA,MAAA,CAAA;AAHnB,IAAAvC,eAAA,CAAA,IAAA,EAAS,0BAAyBgD,0CAA8B,EAAA,CAAA,CAAA;AAAA,GAO7D;AAAA,EAEH,MAAM,cAAc,QAAiD,EAAA;AACnE,IAAM,MAAA,EAAA,GAAK,KAAK,MAAO,CAAA,gBAAA,CAAA;AAEvB,IAAI,IAAA,QAAA,CAAS,SAAS,MAAQ,EAAA;AAC5B,MAAA,IAAA,CAAK,MAAM,QAAS,CAAA,QAAA,CAAS,IAAI,CAAK,CAAA,KAAA,CAAA,CAAE,MAAM,CAAC,CAAA,CAAA;AAC/C,MAAM,MAAA,EAAA,CAAG,WAAY,CAAA,OAAM,EAAM,KAAA;AAC/B,QAAM,MAAA,EAAA,CAAG,2BAA2B,EAAI,EAAA;AAAA,UACtC,SAAA,EAAW,KAAK,MAAO,CAAA,EAAA;AAAA,UACvB,IAAM,EAAA,MAAA;AAAA,UACN,OAAO,QAAS,CAAA,QAAA;AAAA,SACjB,CAAA,CAAA;AAAA,OACF,CAAA,CAAA;AAAA,KACH,MAAA,IAAW,QAAS,CAAA,IAAA,KAAS,OAAS,EAAA;AACpC,MAAA,IAAA,CAAK,MAAM,QAAS,CAAA,KAAA,CAAM,IAAI,CAAK,CAAA,KAAA,CAAA,CAAE,MAAM,CAAC,CAAA,CAAA;AAC5C,MAAK,IAAA,CAAA,KAAA;AAAA,QACH,QAAS,CAAA,OAAA,CACN,GAAI,CAAA,CAAA,CAAA,KAAM,YAAY,CAAI,GAAA,CAAA,CAAE,MAAS,GAAA,KAAA,CAAU,EAC/C,MAAO,CAAA,CAAC,CAAmB,KAAA,OAAA,CAAQ,CAAC,CAAC,CAAA;AAAA,OAC1C,CAAA;AACA,MAAM,MAAA,EAAA,CAAG,WAAY,CAAA,OAAM,EAAM,KAAA;AAC/B,QAAM,MAAA,EAAA,CAAG,2BAA2B,EAAI,EAAA;AAAA,UACtC,SAAA,EAAW,KAAK,MAAO,CAAA,EAAA;AAAA,UACvB,IAAM,EAAA,OAAA;AAAA,UACN,OAAO,QAAS,CAAA,KAAA;AAAA,UAChB,OAAA,EAAS,SAAS,OAAQ,CAAA,GAAA;AAAA,YAAI,CAAA,CAAA,KAC5B,WAAe,IAAA,CAAA,GACX,CACA,GAAA;AAAA,cACE,SAAA,EAAWH,+BAAmB,CAAA,CAAA,CAAE,MAAM,CAAA;AAAA,cACtC,aAAa,CAAE,CAAA,WAAA;AAAA,aACjB;AAAA,WACN;AAAA,SACD,CAAA,CAAA;AAAA,OACF,CAAA,CAAA;AAAA,KACH;AAAA,GACF;AAAA,EAEA,MAAM,QAAQ,OAAsD,EAAA;AAClE,IAAM,MAAA,EAAA,GAAK,KAAK,MAAO,CAAA,gBAAA,CAAA;AAEvB,IAAM,MAAA,EAAA,CAAG,WAAY,CAAA,OAAO,EAAY,KAAA;AACtC,MAAO,OAAA,EAAA,CAAG,qBAAqB,EAAI,EAAA;AAAA,QACjC,MAAM,OAAQ,CAAA,IAAA;AAAA,OACf,CAAA,CAAA;AAAA,KACF,CAAA,CAAA;AAAA,GACH;AAAA,EAEQ,MAAM,QAAoB,EAAA;AAChC,IAAA,KAAA,MAAW,UAAU,QAAU,EAAA;AAC7B,MAAI,IAAA;AACF,QAAA,IAAA,CAAK,uBAAuB,MAAM,CAAA,CAAA;AAAA,eAC3B,CAAG,EAAA;AACV,QAAA,MAAM,IAAI,SAAA,CAAU,CAA8B,2BAAA,EAAA,CAAC,CAAE,CAAA,CAAA,CAAA;AAAA,OACvD;AAAA,KACF;AAAA,GACF;AACF,CAAA;AAEsB,eAAA,sBAAA,CACpB,IACA,SACA,EAAA;AACA,EAAA,MAAM,OAAQ,CAAA,GAAA;AAAA,IACZ,SAAA,CAAU,GAAI,CAAA,OAAM,QAAY,KAAA;AAC9B,MAAM,MAAA,UAAA,GAAa,IAAI,UAAW,CAAA;AAAA,QAChC,EAAA,EAAI,SAAS,eAAgB,EAAA;AAAA,QAC7B,gBAAkB,EAAA,EAAA;AAAA,OACnB,CAAA,CAAA;AACD,MAAO,OAAA,QAAA,CAAS,QAAQ,UAAU,CAAA,CAAA;AAAA,KACnC,CAAA;AAAA,GACH,CAAA;AACF;;ACnEO,MAAM,8BAA8B6C,6CAIzC;;ACnBK,MAAM,gBAAgB,2BAA4B,CAAA;AAAA,EACvD,IAAM,EAAA,gBAAA;AAAA,EACN,WAAa,EAAA,8CAAA;AAAA,EACb,YAAc,EAAAC,kCAAA;AAAA,EACd,YAAA,EAAcjB,MAAE,MAAO,CAAA;AAAA,IACrB,UAAY,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,SAAS,oCAAoC,CAAA;AAAA,IACpE,OAAOA,KACJ,CAAA,MAAA,GACA,QAAS,EAAA,CACT,SAAS,qCAAqC,CAAA;AAAA,GAClD,CAAA;AAAA,EACD,OAAO,CAAC,QAAA,EAAU,EAAE,UAAA,EAAY,OAAS,KAAA;AAvC3C,IAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAwCI,IAAA,OAAA,CAAC,EAAC,CAAA,EAAA,GAAA,QAAA,CAAS,QAAS,CAAA,WAAA,KAAlB,mBAA+B,cAAe,CAAA,UAAA,CAAA,CAAA,KAC/C,KAAU,KAAA,KAAA,CAAA,GACP,IACA,GAAA,CAAA,CAAA,EAAA,GAAA,QAAA,CAAS,QAAS,CAAA,WAAA,KAAlB,mBAAgC,UAAgB,CAAA,MAAA,KAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EACtD,SAAS,CAAC,EAAE,YAAY,KAAM,EAAA,KAC5B,UAAU,KACN,CAAA,GAAA;AAAA,IACE,GAAA,EAAK,wBAAwB,UAAU,CAAA,CAAA;AAAA,GAEzC,GAAA;AAAA,IACE,GAAA,EAAK,wBAAwB,UAAU,CAAA,CAAA;AAAA,IACvC,MAAA,EAAQ,CAAC,KAAK,CAAA;AAAA,GAChB;AACR,CAAC,CAAA;;AC5BM,MAAM,eAAe,2BAA4B,CAAA;AAAA,EACtD,IAAM,EAAA,gBAAA;AAAA,EACN,WAAa,EAAA,0CAAA;AAAA,EACb,YAAc,EAAAiB,kCAAA;AAAA,EACd,YAAA,EAAcjB,MAAE,MAAO,CAAA;AAAA,IACrB,KAAA,EAAOA,MACJ,KAAM,CAAAA,KAAA,CAAE,QAAQ,CAAA,CAChB,SAAS,wCAAwC,CAAA;AAAA,GACrD,CAAA;AAAA,EACD,KAAM,CAAA,QAAA,EAAU,EAAE,KAAA,EAAS,EAAA;AACzB,IAAA,MAAM,YAAe,GAAA,QAAA,CAAS,IAAK,CAAA,iBAAA,CAAkB,OAAO,CAAA,CAAA;AAC5D,IAAA,OAAO,MAAM,IAAK,CAAA,CAAA,IAAA,KAAQ,KAAK,iBAAkB,CAAA,OAAO,MAAM,YAAY,CAAA,CAAA;AAAA,GAC5E;AAAA,EACA,OAAA,CAAQ,EAAE,KAAA,EAAS,EAAA;AACjB,IAAO,OAAA;AAAA,MACL,GAAK,EAAA,MAAA;AAAA,MACL,QAAQ,KAAM,CAAA,GAAA,CAAI,UAAQ,IAAK,CAAA,iBAAA,CAAkB,OAAO,CAAC,CAAA;AAAA,KAC3D,CAAA;AAAA,GACF;AACF,CAAC,CAAA;;ACjBM,MAAM,gBAAgB,2BAA4B,CAAA;AAAA,EACvD,IAAM,EAAA,iBAAA;AAAA,EACN,WAAa,EAAA,2CAAA;AAAA,EACb,YAAc,EAAAiB,kCAAA;AAAA,EACd,YAAA,EAAcjB,MAAE,MAAO,CAAA;AAAA,IACrB,QAAQA,KACL,CAAA,KAAA,CAAMA,KAAE,CAAA,MAAA,EAAQ,CAChB,CAAA,QAAA;AAAA,MACC,kDAAkDpD,8BAAiB,CAAA,CAAA;AAAA,KACrE;AAAA,GACH,CAAA;AAAA,EACD,KAAO,EAAA,CAAC,QAAU,EAAA,EAAE,QAAa,KAAA;AAC/B,IAAI,IAAA,CAAC,SAAS,SAAW,EAAA;AACvB,MAAO,OAAA,KAAA,CAAA;AAAA,KACT;AAEA,IAAA,OAAO,QAAS,CAAA,SAAA,CACb,MAAO,CAAA,CAAA,QAAA,KAAY,SAAS,IAAS,KAAAA,8BAAiB,CACtD,CAAA,IAAA,CAAK,CAAY,QAAA,KAAA,MAAA,CAAO,QAAS,CAAA,QAAA,CAAS,SAAS,CAAC,CAAA,CAAA;AAAA,GACzD;AAAA,EACA,OAAS,EAAA,CAAC,EAAE,MAAA,EAAc,MAAA;AAAA,IACxB,GAAK,EAAA,mBAAA;AAAA,IACL,MAAQ,EAAA,MAAA;AAAA,GACV,CAAA;AACF,CAAC,CAAA;;AC1BM,MAAM,WAAW,2BAA4B,CAAA;AAAA,EAClD,IAAM,EAAA,WAAA;AAAA,EACN,WAAa,EAAA,yCAAA;AAAA,EACb,YAAc,EAAAqE,kCAAA;AAAA,EACd,YAAA,EAAcjB,MAAE,MAAO,CAAA;AAAA,IACrB,KAAO,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,SAAS,+BAA+B,CAAA;AAAA,GAC3D,CAAA;AAAA,EACD,KAAO,EAAA,CAAC,QAAU,EAAA,EAAE,OAAS,KAAA;AAhC/B,IAAA,IAAA,EAAA,CAAA;AAiCI,IAAA,OAAA,CAAC,EAAC,CAAA,EAAA,GAAA,QAAA,CAAS,QAAS,CAAA,MAAA,KAAlB,mBAA0B,cAAe,CAAA,KAAA,CAAA,CAAA,CAAA;AAAA,GAAA;AAAA,EAC7C,OAAS,EAAA,CAAC,EAAE,KAAA,EAAa,MAAA;AAAA,IACvB,GAAA,EAAK,mBAAmB,KAAK,CAAA,CAAA;AAAA,GAC/B,CAAA;AACF,CAAC,CAAA;;AChBY,MAAA,kBAAA,GAAqB,CAAC,YAAA,KACjC,2BAA4B,CAAA;AAAA,EAC1B,IAAM,EAAA,CAAA,IAAA,EAAO,YAAa,CAAA,WAAA,EAAa,CAAA,CAAA;AAAA,EACvC,WAAA,EAAa,qCAAqC,YAAY,CAAA,SAAA,CAAA;AAAA,EAC9D,YAAc,EAAAiB,kCAAA;AAAA,EACd,YAAA,EAAcjB,MAAE,MAAO,CAAA;AAAA,IACrB,KAAKA,KACF,CAAA,MAAA,GACA,QAAS,CAAA,CAAA,6BAAA,EAAgC,YAAY,CAAc,YAAA,CAAA,CAAA;AAAA,IACtE,OAAOA,KACJ,CAAA,MAAA,GACA,QAAS,EAAA,CACT,SAAS,CAAyC,uCAAA,CAAA,CAAA;AAAA,GACtD,CAAA;AAAA,EACD,OAAO,CAAC,QAAA,EAAU,EAAE,GAAA,EAAK,OAAY,KAAA;AACnC,IAAA,MAAM,UAAa,GAAAkB,UAAA,CAAI,QAAS,CAAA,YAAY,GAAG,GAAG,CAAA,CAAA;AAElD,IAAI,IAAA,KAAA,CAAM,OAAQ,CAAA,UAAU,CAAG,EAAA;AAC7B,MAAA,IAAI,UAAU,KAAW,CAAA,EAAA;AACvB,QAAO,OAAA,UAAA,CAAW,SAAS,KAAK,CAAA,CAAA;AAAA,OAClC;AACA,MAAA,OAAO,WAAW,MAAS,GAAA,CAAA,CAAA;AAAA,KAC7B;AACA,IAAA,IAAI,UAAU,KAAW,CAAA,EAAA;AACvB,MAAA,OAAO,KAAU,KAAA,UAAA,CAAA;AAAA,KACnB;AACA,IAAA,OAAO,CAAC,CAAC,UAAA,CAAA;AAAA,GACX;AAAA,EACA,OAAS,EAAA,CAAC,EAAE,GAAA,EAAK,OAAa,MAAA;AAAA,IAC5B,GAAK,EAAA,CAAA,EAAG,YAAY,CAAA,CAAA,EAAI,GAAG,CAAA,CAAA;AAAA,IAC3B,GAAI,KAAU,KAAA,KAAA,CAAA,IAAa,EAAE,MAAQ,EAAA,CAAC,KAAK,CAAE,EAAA;AAAA,GAC/C,CAAA;AACF,CAAC,CAAA;;AC1BU,MAAA,WAAA,GAAc,mBAAmB,UAAU,CAAA;;ACA3C,MAAA,OAAA,GAAU,mBAAmB,MAAM,CAAA;;ACEzC,MAAM,eAAkB,GAAA;AAAA,EAC7B,aAAA;AAAA,EACA,QAAA;AAAA,EACA,WAAA;AAAA,EACA,OAAA;AAAA,EACA,YAAA;AAAA,EACA,aAAA;AACF;;ACSO,MAAM,yBAAqD,CAAA;AAAA,EAChE,WAAA,CACmB,eACA,EAAA,aAAA,EACA,mBACjB,EAAA;AAHiB,IAAA,IAAA,CAAA,eAAA,GAAA,eAAA,CAAA;AACA,IAAA,IAAA,CAAA,aAAA,GAAA,aAAA,CAAA;AACA,IAAA,IAAA,CAAA,mBAAA,GAAA,mBAAA,CAAA;AAAA,GAChB;AAAA,EAEH,MAAM,SAAS,OAAqD,EAAA;AAClE,IAAM,MAAA,iBAAA,GAAA,CACJ,MAAM,IAAA,CAAK,aAAc,CAAA,oBAAA;AAAA,MACvB,CAAC,EAAE,UAAY,EAAAC,iCAAA,EAA6B,CAAA;AAAA,MAC5C,EAAE,WAAa,EAAA,OAAA,CAAQ,WAAY,EAAA;AAAA,OAErC,CAAC,CAAA,CAAA;AAEH,IAAI,IAAA,iBAAA,CAAkB,MAAW,KAAAL,sCAAA,CAAgB,IAAM,EAAA;AACrD,MAAO,OAAA;AAAA,QACL,UAAU,EAAC;AAAA,QACX,QAAA,EAAU,EAAE,WAAA,EAAa,KAAM,EAAA;AAAA,OACjC,CAAA;AAAA,KACF;AAEA,IAAI,IAAA,iBAAA,CAAkB,MAAW,KAAAA,sCAAA,CAAgB,WAAa,EAAA;AAC5D,MAAA,MAAM,mBAAiC,IAAK,CAAA,mBAAA;AAAA,QAC1C,iBAAkB,CAAA,UAAA;AAAA,OACpB,CAAA;AACA,MAAO,OAAA,IAAA,CAAK,gBAAgB,QAAS,CAAA;AAAA,QACnC,GAAG,OAAA;AAAA,QACH,MAAA,EAAA,CAAQ,OAAS,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAA,MAAA,IACb,EAAE,KAAA,EAAO,CAAC,gBAAkB,EAAA,OAAA,CAAQ,MAAM,CAAA,EAC1C,GAAA,gBAAA;AAAA,OACL,CAAA,CAAA;AAAA,KACH;AAEA,IAAO,OAAA,IAAA,CAAK,eAAgB,CAAA,QAAA,CAAS,OAAO,CAAA,CAAA;AAAA,GAC9C;AAAA,EAEA,MAAM,cACJ,OACgC,EAAA;AAChC,IAAM,MAAA,iBAAA,GAAA,CACJ,MAAM,IAAA,CAAK,aAAc,CAAA,oBAAA;AAAA,MACvB,CAAC,EAAE,UAAY,EAAAK,iCAAA,EAA6B,CAAA;AAAA,MAC5C,EAAE,WAAa,EAAA,OAAA,CAAQ,WAAY,EAAA;AAAA,OAErC,CAAC,CAAA,CAAA;AAEH,IAAI,IAAA,iBAAA,CAAkB,MAAW,KAAAL,sCAAA,CAAgB,IAAM,EAAA;AACrD,MAAO,OAAA;AAAA,QACL,KAAA,EAAO,IAAI,KAAM,CAAA,OAAA,CAAQ,WAAW,MAAM,CAAA,CAAE,KAAK,IAAI,CAAA;AAAA,OACvD,CAAA;AAAA,KACF;AAEA,IAAI,IAAA,iBAAA,CAAkB,MAAW,KAAAA,sCAAA,CAAgB,WAAa,EAAA;AAC5D,MAAA,MAAM,mBAAiC,IAAK,CAAA,mBAAA;AAAA,QAC1C,iBAAkB,CAAA,UAAA;AAAA,OACpB,CAAA;AACA,MAAO,OAAA,IAAA,CAAK,gBAAgB,aAAc,CAAA;AAAA,QACxC,GAAG,OAAA;AAAA,QACH,MAAA,EAAA,CAAQ,OAAS,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAA,MAAA,IACb,EAAE,KAAA,EAAO,CAAC,gBAAkB,EAAA,OAAA,CAAQ,MAAM,CAAA,EAC1C,GAAA,gBAAA;AAAA,OACL,CAAA,CAAA;AAAA,KACH;AAEA,IAAO,OAAA,IAAA,CAAK,eAAgB,CAAA,aAAA,CAAc,OAAO,CAAA,CAAA;AAAA,GACnD;AAAA,EAEA,MAAM,cACJ,OACgC,EAAA;AAChC,IAAM,MAAA,iBAAA,GAAA,CACJ,MAAM,IAAA,CAAK,aAAc,CAAA,oBAAA;AAAA,MACvB,CAAC,EAAE,UAAY,EAAAK,iCAAA,EAA6B,CAAA;AAAA,MAC5C,EAAE,WAAa,EAAA,OAAA,CAAQ,WAAY,EAAA;AAAA,OAErC,CAAC,CAAA,CAAA;AAEH,IAAI,IAAA,iBAAA,CAAkB,MAAW,KAAAL,sCAAA,CAAgB,IAAM,EAAA;AACrD,MAAO,OAAA;AAAA,QACL,OAAO,EAAC;AAAA,QACR,UAAU,EAAC;AAAA,QACX,UAAY,EAAA,CAAA;AAAA,OACd,CAAA;AAAA,KACF;AAEA,IAAI,IAAA,iBAAA,CAAkB,MAAW,KAAAA,sCAAA,CAAgB,WAAa,EAAA;AAC5D,MAAA,MAAM,mBAAiC,IAAK,CAAA,mBAAA;AAAA,QAC1C,iBAAkB,CAAA,UAAA;AAAA,OACpB,CAAA;AAEA,MAAI,IAAA,mBAAA,CAAA;AACJ,MAAI,IAAA,aAAA,CAAA;AAEJ,MAAI,IAAA,4BAAA,CAA6B,OAAO,CAAG,EAAA;AACzC,QAAA,aAAA,GAAgB,QAAQ,MAAO,CAAA,MAAA,CAAA;AAE/B,QAAsB,mBAAA,GAAA;AAAA,UACpB,GAAG,OAAA;AAAA,UACH,MAAQ,EAAA;AAAA,YACN,GAAG,OAAQ,CAAA,MAAA;AAAA,YACX,MAAQ,EAAA,OAAA,CAAQ,MAAO,CAAA,MAAA,GACnB,EAAE,KAAA,EAAO,CAAC,gBAAA,EAAkB,OAAQ,CAAA,MAAA,CAAO,MAAM,CAAA,EACjD,GAAA,gBAAA;AAAA,WACN;AAAA,SACF,CAAA;AAAA,OACK,MAAA;AACL,QAAsB,mBAAA,GAAA;AAAA,UACpB,GAAG,OAAA;AAAA,UACH,MAAA,EAAQ,OAAQ,CAAA,MAAA,GACZ,EAAE,KAAA,EAAO,CAAC,gBAAkB,EAAA,OAAA,CAAQ,MAAM,CAAA,EAC1C,GAAA,gBAAA;AAAA,SACN,CAAA;AACA,QAAA,aAAA,GAAgB,OAAQ,CAAA,MAAA,CAAA;AAAA,OAC1B;AAEA,MAAM,MAAA,QAAA,GAAW,MAAM,IAAA,CAAK,eAAgB,CAAA,aAAA;AAAA,QAC1C,mBAAA;AAAA,OACF,CAAA;AAEA,MAAM,MAAA,UAAA,GAAiC,QAAS,CAAA,QAAA,CAAS,UAAc,IAAA;AAAA,QACrE,GAAG,SAAS,QAAS,CAAA,UAAA;AAAA,QACrB,MAAQ,EAAA,aAAA;AAAA,OACV,CAAA;AAEA,MAAM,MAAA,UAAA,GAAiC,QAAS,CAAA,QAAA,CAAS,UAAc,IAAA;AAAA,QACrE,GAAG,SAAS,QAAS,CAAA,UAAA;AAAA,QACrB,MAAQ,EAAA,aAAA;AAAA,OACV,CAAA;AAEA,MAAO,OAAA;AAAA,QACL,GAAG,QAAA;AAAA,QACH,QAAU,EAAA;AAAA,UACR,UAAA;AAAA,UACA,UAAA;AAAA,SACF;AAAA,OACF,CAAA;AAAA,KACF;AAEA,IAAO,OAAA,IAAA,CAAK,eAAgB,CAAA,aAAA,CAAc,OAAO,CAAA,CAAA;AAAA,GACnD;AAAA,EAEA,MAAM,iBACJ,CAAA,GAAA,EACA,OACe,EAAA;AACf,IAAM,MAAA,iBAAA,GAAA,CACJ,MAAM,IAAA,CAAK,aAAc,CAAA,oBAAA;AAAA,MACvB,CAAC,EAAE,UAAY,EAAAM,mCAAA,EAA+B,CAAA;AAAA,MAC9C,EAAE,WAAa,EAAA,OAAA,CAAQ,WAAY,EAAA;AAAA,OAErC,CAAC,CAAA,CAAA;AACH,IAAI,IAAA,iBAAA,CAAkB,MAAW,KAAAN,sCAAA,CAAgB,IAAM,EAAA;AACrD,MAAA,MAAM,IAAIb,sBAAgB,EAAA,CAAA;AAAA,KAC5B;AACA,IAAI,IAAA,iBAAA,CAAkB,MAAW,KAAAa,sCAAA,CAAgB,WAAa,EAAA;AAC5D,MAAA,MAAM,mBAAiC,IAAK,CAAA,mBAAA;AAAA,QAC1C,iBAAkB,CAAA,UAAA;AAAA,OACpB,CAAA;AACA,MAAA,MAAM,EAAE,QAAS,EAAA,GAAI,MAAM,IAAA,CAAK,gBAAgB,QAAS,CAAA;AAAA,QACvD,aAAa,OAAQ,CAAA,WAAA;AAAA,QACrB,MAAQ,EAAA;AAAA,UACN,KAAA,EAAO,CAAC,gBAAkB,EAAA,iBAAA,CAAkB,EAAE,cAAgB,EAAA,GAAA,EAAK,CAAC,CAAA;AAAA,SACtE;AAAA,OACD,CAAA,CAAA;AACD,MAAI,IAAA,QAAA,CAAS,WAAW,CAAG,EAAA;AACzB,QAAA,MAAM,IAAIb,sBAAgB,EAAA,CAAA;AAAA,OAC5B;AAAA,KACF;AACA,IAAO,OAAA,IAAA,CAAK,eAAgB,CAAA,iBAAA,CAAkB,GAAK,EAAA;AAAA,MACjD,aAAa,OAAQ,CAAA,WAAA;AAAA,KACtB,CAAA,CAAA;AAAA,GACH;AAAA,EAEA,MAAM,cACJ,CAAA,SAAA,EACA,OACiC,EAAA;AACjC,IAAM,MAAA,2BAAA,GAAA,CACJ,MAAM,IAAA,CAAK,aAAc,CAAA,SAAA;AAAA,MACvB,CAAC,EAAE,UAAA,EAAYkB,iCAA6B,EAAA,WAAA,EAAa,WAAW,CAAA;AAAA,MACpE,EAAE,WAAa,EAAA,OAAA,CAAQ,WAAY,EAAA;AAAA,OAErC,CAAC,CAAA,CAAA;AACH,IAAI,IAAA,2BAAA,CAA4B,MAAW,KAAAL,sCAAA,CAAgB,IAAM,EAAA;AAC/D,MAAA,MAAM,IAAIb,sBAAgB,EAAA,CAAA;AAAA,KAC5B;AAEA,IAAM,MAAA,cAAA,GAAiB,MAAM,IAAA,CAAK,eAAgB,CAAA,cAAA;AAAA,MAChD,SAAA;AAAA,MACA,EAAE,WAAa,EAAA,OAAA,CAAQ,WAAY,EAAA;AAAA,KACrC,CAAA;AACA,IAAM,MAAA,iBAAA,GAAoB,MAAM,IAAA,CAAK,aAAc,CAAA,SAAA;AAAA,MACjD,cAAA,CAAe,KAAM,CAAA,GAAA,CAAI,CAAS,IAAA,MAAA;AAAA,QAChC,UAAY,EAAAkB,iCAAA;AAAA,QACZ,WAAA,EAAahD,+BAAmB,CAAA,IAAA,CAAK,MAAM,CAAA;AAAA,OAC3C,CAAA,CAAA;AAAA,MACF,EAAE,WAAa,EAAA,OAAA,CAAQ,WAAY,EAAA;AAAA,KACrC,CAAA;AACA,IAAM,MAAA,yBAAA,GAA4B,eAAe,KAAM,CAAA,MAAA;AAAA,MACrD,CAAC,CAAG,EAAA,KAAA,KAAU,kBAAkB,KAAK,CAAA,CAAE,WAAW2C,sCAAgB,CAAA,IAAA;AAAA,KACpE,CAAA;AACA,IAAI,IAAA,yBAAA,CAA0B,WAAW,CAAG,EAAA;AAC1C,MAAO,OAAA,cAAA,CAAA;AAAA,KACT;AACA,IAAA,MAAM,6BAA6B,yBAA0B,CAAA,GAAA;AAAA,MAC3D,CAAA,YAAA,KAAgB3C,+BAAmB,CAAA,YAAA,CAAa,MAAM,CAAA;AAAA,KACxD,CAAA;AACA,IAAA,MAAM,4BAA4B,IAAI,GAAA;AAAA,MACpC,0BAA2B,CAAA,OAAA;AAAA,QAAQ,mBACjC,IAAK,CAAA,WAAA;AAAA,UACH,aAAA;AAAA,UACA,cAAe,CAAA,KAAA;AAAA,UACf,IAAI,IAAI,0BAA0B,CAAA;AAAA,SACpC;AAAA,OACF;AAAA,KACF,CAAA;AACA,IAAO,OAAA;AAAA,MACL,eAAe,cAAe,CAAA,aAAA;AAAA,MAC9B,KAAA,EAAO,eAAe,KAAM,CAAA,MAAA;AAAA,QAC1B,CAAA,YAAA,KACE,CAAC,yBAA0B,CAAA,GAAA;AAAA,UACzBA,+BAAA,CAAmB,aAAa,MAAM,CAAA;AAAA,SACxC;AAAA,OACJ;AAAA,KACF,CAAA;AAAA,GACF;AAAA,EAEA,MAAM,OAAO,OAA6D,EAAA;AACxE,IAAM,MAAA,iBAAA,GAAA,CACJ,MAAM,IAAA,CAAK,aAAc,CAAA,oBAAA;AAAA,MACvB,CAAC,EAAE,UAAY,EAAAgD,iCAAA,EAA6B,CAAA;AAAA,MAC5C,EAAE,WAAa,EAAA,OAAA,CAAQ,WAAY,EAAA;AAAA,OAErC,CAAC,CAAA,CAAA;AAEH,IAAI,IAAA,iBAAA,CAAkB,MAAW,KAAAL,sCAAA,CAAgB,IAAM,EAAA;AACrD,MAAO,OAAA;AAAA,QACL,MAAQ,EAAA,MAAA,CAAO,WAAY,CAAA,OAAA,CAAQ,MAAO,CAAA,GAAA,CAAI,CAAK,CAAA,KAAA,CAAC,CAAG,EAAA,EAAE,CAAC,CAAC,CAAA;AAAA,OAC7D,CAAA;AAAA,KACF;AAEA,IAAI,IAAA,iBAAA,CAAkB,MAAW,KAAAA,sCAAA,CAAgB,WAAa,EAAA;AAC5D,MAAA,MAAM,mBAAiC,IAAK,CAAA,mBAAA;AAAA,QAC1C,iBAAkB,CAAA,UAAA;AAAA,OACpB,CAAA;AACA,MAAO,OAAA,IAAA,CAAK,gBAAgB,MAAO,CAAA;AAAA,QACjC,GAAG,OAAA;AAAA,QACH,MAAA,EAAA,CAAQ,OAAS,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,OAAA,CAAA,MAAA,IACb,EAAE,KAAA,EAAO,CAAC,gBAAkB,EAAA,OAAA,CAAQ,MAAM,CAAA,EAC1C,GAAA,gBAAA;AAAA,OACL,CAAA,CAAA;AAAA,KACH;AAEA,IAAO,OAAA,IAAA,CAAK,eAAgB,CAAA,MAAA,CAAO,OAAO,CAAA,CAAA;AAAA,GAC5C;AAAA,EAEQ,WAAA,CACN,SACA,EAAA,gBAAA,EACA,cACU,EAAA;AACV,IAAA,MAAM,SAAS,gBAAiB,CAAA,IAAA;AAAA,MAC9B,CAAgB,YAAA,KAAA3C,+BAAA,CAAmB,YAAa,CAAA,MAAM,CAAM,KAAA,SAAA;AAAA,KAC9D,CAAA;AACA,IAAA,IAAI,CAAC,MAAA;AAAQ,MAAA,OAAO,EAAC,CAAA;AAErB,IAAM,MAAA,iBAAA,GAAoB,IAAI,GAAA,CAAI,cAAc,CAAA,CAAA;AAChD,IAAA,MAAA,CAAO,gBAAiB,CAAA,OAAA;AAAA,MAAQ,CAAA,SAAA,KAC9B,iBAAkB,CAAA,GAAA,CAAI,SAAS,CAAA;AAAA,KACjC,CAAA;AAEA,IAAO,OAAA;AAAA,MACL,SAAA;AAAA,MACA,GAAG,OAAO,gBAAiB,CAAA,OAAA;AAAA,QAAQ,CAAA,SAAA,KACjC,cAAe,CAAA,GAAA,CAAI,SAAS,CAAA,GACxB,EAAC,GACD,IAAK,CAAA,WAAA,CAAY,SAAW,EAAA,gBAAA,EAAkB,iBAAiB,CAAA;AAAA,OACrE;AAAA,KACF,CAAA;AAAA,GACF;AACF;;ACvSO,MAAM,yBAAqD,CAAA;AAAA,EAChE,WAAA,CACmB,iBACA,aACjB,EAAA;AAFiB,IAAA,IAAA,CAAA,eAAA,GAAA,eAAA,CAAA;AACA,IAAA,IAAA,CAAA,aAAA,GAAA,aAAA,CAAA;AAAA,GAChB;AAAA,EAEH,MAAM,cAAA,CACJ,IACA,EAAA,MAAA,EACA,OAOC,EAAA;AACD,IAAM,MAAA,qBAAA,GAAA,CACJ,MAAM,IAAA,CAAK,aAAc,CAAA,SAAA;AAAA,MACvB,CAAC,EAAE,UAAY,EAAAkD,qCAAA,EAAiC,CAAA;AAAA,MAChD,EAAE,WAAa,EAAA,OAAA,CAAQ,WAAY,EAAA;AAAA,OAErC,CAAC,CAAA,CAAA;AAEH,IAAI,IAAA,qBAAA,CAAsB,MAAW,KAAAP,sCAAA,CAAgB,IAAM,EAAA;AACzD,MAAA,MAAM,IAAIb,sBAAgB,EAAA,CAAA;AAAA,KAC5B;AAEA,IAAA,OAAO,IAAK,CAAA,eAAA,CAAgB,cAAe,CAAA,IAAA,EAAM,QAAQ,OAAO,CAAA,CAAA;AAAA,GAClE;AAAA,EAEA,MAAM,cAAc,OAEI,EAAA;AACtB,IAAM,MAAA,qBAAA,GAAA,CACJ,MAAM,IAAA,CAAK,aAAc,CAAA,SAAA;AAAA,MACvB,CAAC,EAAE,UAAY,EAAAqB,mCAAA,EAA+B,CAAA;AAAA,MAC9C,EAAE,WAAa,EAAA,OAAA,CAAQ,WAAY,EAAA;AAAA,OAErC,CAAC,CAAA,CAAA;AAEH,IAAI,IAAA,qBAAA,CAAsB,MAAW,KAAAR,sCAAA,CAAgB,IAAM,EAAA;AACzD,MAAA,OAAO,EAAC,CAAA;AAAA,KACV;AAEA,IAAO,OAAA,IAAA,CAAK,eAAgB,CAAA,aAAA,CAAc,OAAO,CAAA,CAAA;AAAA,GACnD;AAAA,EAEA,MAAM,WACJ,CAAA,EAAA,EACA,OACmB,EAAA;AACnB,IAAM,MAAA,qBAAA,GAAA,CACJ,MAAM,IAAA,CAAK,aAAc,CAAA,SAAA;AAAA,MACvB,CAAC,EAAE,UAAY,EAAAQ,mCAAA,EAA+B,CAAA;AAAA,MAC9C,EAAE,WAAa,EAAA,OAAA,CAAQ,WAAY,EAAA;AAAA,OAErC,CAAC,CAAA,CAAA;AAEH,IAAI,IAAA,qBAAA,CAAsB,MAAW,KAAAR,sCAAA,CAAgB,IAAM,EAAA;AACzD,MAAA,MAAM,IAAIzF,oBAAA,CAAc,CAA6B,0BAAA,EAAA,EAAE,CAAE,CAAA,CAAA,CAAA;AAAA,KAC3D;AAEA,IAAA,OAAO,IAAK,CAAA,eAAA,CAAgB,WAAY,CAAA,EAAA,EAAI,OAAO,CAAA,CAAA;AAAA,GACrD;AAAA,EAEA,MAAM,cACJ,CAAA,EAAA,EACA,OACe,EAAA;AACf,IAAM,MAAA,qBAAA,GAAA,CACJ,MAAM,IAAA,CAAK,aAAc,CAAA,SAAA;AAAA,MACvB,CAAC,EAAE,UAAY,EAAAkG,qCAAA,EAAiC,CAAA;AAAA,MAChD,EAAE,WAAa,EAAA,OAAA,CAAQ,WAAY,EAAA;AAAA,OAErC,CAAC,CAAA,CAAA;AAEH,IAAI,IAAA,qBAAA,CAAsB,MAAW,KAAAT,sCAAA,CAAgB,IAAM,EAAA;AACzD,MAAA,MAAM,IAAIb,sBAAgB,EAAA,CAAA;AAAA,KAC5B;AAEA,IAAA,OAAO,IAAK,CAAA,eAAA,CAAgB,cAAe,CAAA,EAAA,EAAI,OAAO,CAAA,CAAA;AAAA,GACxD;AAAA,EAEA,MAAM,mBACJ,CAAA,SAAA,EACA,OACmB,EAAA;AACnB,IAAM,MAAA,qBAAA,GAAA,CACJ,MAAM,IAAA,CAAK,aAAc,CAAA,SAAA;AAAA,MACvB,CAAC,EAAE,UAAY,EAAAqB,mCAAA,EAA+B,CAAA;AAAA,MAC9C,EAAE,WAAa,EAAA,OAAA,CAAQ,WAAY,EAAA;AAAA,OAErC,CAAC,CAAA,CAAA;AAEH,IAAI,IAAA,qBAAA,CAAsB,MAAW,KAAAR,sCAAA,CAAgB,IAAM,EAAA;AACzD,MAAA,MAAM,IAAIzF,oBAAc,EAAA,CAAA;AAAA,KAC1B;AACA,IAAA,OAAO,IAAK,CAAA,eAAA,CAAgB,mBAAoB,CAAA,SAAA,EAAW,OAAO,CAAA,CAAA;AAAA,GACpE;AACF;;ACpGA,eAAsB,iCAAiC,OAInC,EAAA;AAClB,EAAA,MAAM,EAAE,IAAA,EAAM,UAAY,EAAA,SAAA,EAAc,GAAA,OAAA,CAAA;AAIxC,EAAA,IAAI,YAAe,GAAA,CAAA,CAAA;AACnB,EAAA,KAAA,MAAW,IAAQ,IAAA4C,uBAAA,CAAO,KAAM,CAAA,UAAA,EAAY,GAAI,CAAG,EAAA;AACjD,IAAA,MAAM,EAAE,gBAAA,EACN,GAAA,MAAM,kDAAmD,CAAA;AAAA,MACvD,MAAM,OAAQ,CAAA,IAAA;AAAA,MACd,IAAA;AAAA,MACA,SAAA;AAAA,KACD,CAAA,CAAA;AAGH,IAAA,KAAA,MAAW,YAAgB,IAAAA,uBAAA,CAAO,KAAM,CAAA,gBAAA,EAAkB,GAAI,CAAG,EAAA;AAC/D,MAAA,MAAM,0CAA2C,CAAA;AAAA,QAC/C,MAAM,OAAQ,CAAA,IAAA;AAAA,QACd,UAAY,EAAA,YAAA;AAAA,OACb,CAAA,CAAA;AACD,MAAM,MAAA,IAAA,CACH,QACA,CAAA,IAAA,CAAK,eAAe,CACpB,CAAA,OAAA,CAAQ,cAAc,YAAY,CAAA,CAAA;AAAA,KACvC;AAKA,IAAA,MAAM,IAAkC,CAAA,0BAA0B,CAC/D,CAAA,KAAA,CAAM,YAAc,EAAA,GAAA,EAAK,SAAS,CAAA,CAClC,OAAQ,CAAA,mBAAA,EAAqB,IAAI,CAAA,CACjC,MAAO,EAAA,CAAA;AAEV,IAAA,YAAA,IAAgB,gBAAiB,CAAA,MAAA,CAAA;AAAA,GACnC;AAEA,EAAO,OAAA,YAAA,CAAA;AACT,CAAA;AAEA,eAAe,mDAAmD,OAItB,EAAA;AAC1C,EAAA,MAAM,EAAE,IAAA,EAAM,IAAM,EAAA,SAAA,EAAc,GAAA,OAAA,CAAA;AAElC,EAAM,MAAA,OAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAwBJ,MAAM,IACH,CAAA,aAAA;AAAA,MAAc,aAAA;AAAA,MAAe,CAAC,YAAY,CAAA;AAAA,MAAG,aAC5C,OACG,CAAA,MAAA,CAAO,mBAAmB,CAAA,CAC1B,KAAK,0BAA0B,CAAA,CAC/B,KAAM,CAAA,YAAA,EAAc,KAAK,SAAS,CAAA,CAClC,OAAQ,CAAA,mBAAA,EAAqB,IAAI,CACjC,CAAA,KAAA;AAAA,QAAM,eACL,SACG,CAAA,MAAA,CAAO,4CAA4C,CACnD,CAAA,IAAA,CAAK,aAAa,CAClB,CAAA,IAAA;AAAA,UACC,0BAAA;AAAA,UACA,wBAAA;AAAA,UACA,4CAAA;AAAA,SACF;AAAA,OACJ;AAAA,KAoBH,CAAA,aAAA;AAAA,MACC,WAAA;AAAA,MACA,CAAC,YAAA,EAAc,mBAAqB,EAAA,mBAAA,EAAqB,SAAS,CAAA;AAAA,MAClE,aACE,OACG,CAAA,MAAA;AAAA,QACC,qCAAA;AAAA,QACA,4CAAA;AAAA,QACA,4CAAA;AAAA,QACA,wBAAA;AAAA,OACF,CACC,IAAK,CAAA,aAAa,CAClB,CAAA,IAAA;AAAA,QACC,0BAAA;AAAA,QACA,4CAAA;AAAA,QACA,wBAAA;AAAA,OAED,CAAA,KAAA;AAAA,QAAM,eACL,SACG,CAAA,MAAA;AAAA,UACC,qCAAA;AAAA,UACA,4CAAA;AAAA,UACA,4CAAA;AAAA,UACA,mBAAA;AAAA,SACF,CACC,IAAK,CAAA,WAAW,CAChB,CAAA,IAAA;AAAA,UACC,0BAAA;AAAA,UACA,4CAAA;AAAA,UACA,6BAAA;AAAA,SACF;AAAA,OACJ;AAAA,KA+BL,CAAA,IAAA;AAAA,MAAK,UAAA;AAAA,MAAY,CAAC,YAAY,CAAA;AAAA,MAAG,CAAA,iBAAA,KAChC,iBACG,CAAA,MAAA,CAAO,SAAS,CAAA,CAChB,KAAK,WAAW,CAAA,CAChB,YAAa,CAAA,sBAAsB,CACnC,CAAA,KAAA;AAAA,QAAM,CAAA,eAAA,KACL,gBACG,KAAM,CAAA,sBAAA,EAAwB,MAAM,SAAS,CAAA,CAC7C,YAAa,CAAA,6BAAA,EAA+B,IAAI,CAAA;AAAA,OACrD;AAAA,MAGH,MAAO,CAAA,sCAAsC,CAC7C,CAAA,IAAA,CAAK,aAAa,CAClB,CAAA,aAAA;AAAA,MACC,UAAA;AAAA,MACA,qBAAA;AAAA,MACA,wBAAA;AAAA,KACF,CACC,SAAU,CAAA,qBAAqB,CAC/B,CAAA,IAAA,CAAK,CAAQ,IAAA,KAAA,IAAA,CAAK,GAAI,CAAA,CAAA,GAAA,KAAO,GAAI,CAAA,UAAU,CAAC,CAAA;AAAA,GAAA,CAAA;AAEjD,EAAO,OAAA,EAAE,kBAAkB,OAAQ,EAAA,CAAA;AACrC,CAAA;AAEA,eAAe,2CAA2C,OAGvD,EAAA;AACD,EAAM,MAAA,EAAE,IAAM,EAAA,UAAA,EAAe,GAAA,OAAA,CAAA;AAO7B,EAAM,MAAA,WAAA,GAAc,MAAM,IACvB,CAAA,MAAA,CAAO,sCAAsC,CAC7C,CAAA,IAAA,CAAK,WAAW,CAChB,CAAA,IAAA;AAAA,IACC,eAAA;AAAA,IACA,6BAAA;AAAA,IACA,0BAAA;AAAA,GAED,CAAA,OAAA,CAAQ,6BAA+B,EAAA,UAAU,CACjD,CAAA,IAAA,CAAK,CAAQ,IAAA,KAAA,IAAA,CAAK,GAAI,CAAA,CAAA,GAAA,KAAO,GAAI,CAAA,SAAS,CAAC,CAAA,CAAA;AAE9C,EAAA,KAAA,MAAW,GAAO,IAAAA,uBAAA,CAAO,KAAM,CAAA,WAAA,EAAa,GAAI,CAAG,EAAA;AACjD,IAAA,MAAM,IACH,CAAA,KAAA,CAA0B,gBAAgB,CAAA,CAC1C,MAAO,CAAA;AAAA,MACN,IAAM,EAAA,iBAAA;AAAA,KACP,CAAA,CACA,OAAQ,CAAA,WAAA,EAAa,GAAG,CAAA,CAAA;AAC3B,IAAA,MAAM,IACH,CAAA,KAAA,CAAyB,eAAe,CAAA,CACxC,MAAO,CAAA;AAAA,MACN,WAAa,EAAA,iBAAA;AAAA,MACb,cAAA,EAAgB,IAAK,CAAA,EAAA,CAAG,GAAI,EAAA;AAAA,KAC7B,CAAA,CACA,OAAQ,CAAA,WAAA,EAAa,GAAG,CAAA,CAAA;AAAA,GAC7B;AACF;;AChPA,eAAsB,qBAAqB,OAGzB,EAAA;AAChB,EAAM,MAAA,EAAE,EAAI,EAAA,IAAA,EAAS,GAAA,OAAA,CAAA;AAErB,EAAA,MAAM,GAAsB,eAAe,CAAA,CACxC,QAAQ,WAAa,EAAA,SAAS,iBAAiB,KAAO,EAAA;AACrD,IAAA,KAAA,CACG,OAAQ,CAAA,KAAA,EAAO,IAAI,CAAA,CACnB,MAAO,CAAA;AAAA,MACN,SAAW,EAAA,wBAAA;AAAA,KACZ,CACA,CAAA,IAAA,CAAK,cAAc,CAAA,CAAA;AAAA,GACvB,EACA,MAAO,CAAA,EAAE,gBAAgB,EAAG,CAAA,EAAA,CAAG,GAAI,EAAA,EAAG,CAAA,CAAA;AAC3C;;ACAA,MAAM,UAAa,GAAA,EAAA,CAAA;AAEZ,MAAM,uBAAoD,CAAA;AAAA,EAC/D,YACmB,OAIjB,EAAA;AAJiB,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;AAAA,GAIhB;AAAA,EAEH,MAAM,YAAe,EAAiD,EAAA;AACpE,IAAI,IAAA;AACF,MAAA,IAAI,MAAwB,GAAA,KAAA,CAAA,CAAA;AAC5B,MAAM,MAAA,IAAA,CAAK,QAAQ,QAAS,CAAA,WAAA;AAAA,QAC1B,OAAM,EAAM,KAAA;AAIV,UAAS,MAAA,GAAA,MAAM,GAAG,EAAE,CAAA,CAAA;AAAA,SACtB;AAAA,QACA;AAAA;AAAA,UAEE,qBAAuB,EAAA,IAAA;AAAA,SACzB;AAAA,OACF,CAAA;AACA,MAAO,OAAA,MAAA,CAAA;AAAA,aACA,CAAG,EAAA;AACV,MAAA,IAAA,CAAK,OAAQ,CAAA,MAAA,CAAO,KAAM,CAAA,CAAA,0BAAA,EAA6B,CAAC,CAAE,CAAA,CAAA,CAAA;AAC1D,MAAA,MAAM,aAAa,CAAC,CAAA,CAAA;AAAA,KACtB;AAAA,GACF;AAAA,EAEA,MAAM,0BACJ,CAAA,QAAA,EACA,OACe,EAAA;AACf,IAAA,MAAM,EAAK,GAAA,QAAA,CAAA;AACX,IAAM,MAAA,EAAE,OAAO,QAAU,EAAA,QAAA,KAAa,MAAM,IAAA,CAAK,WAAY,CAAA,EAAA,EAAI,OAAO,CAAA,CAAA;AAExE,IAAA,IAAI,SAAS,MAAQ,EAAA;AACnB,MAAM,MAAA,YAAA,GAAe,MAAM,gCAAiC,CAAA;AAAA,QAC1D,IAAM,EAAA,EAAA;AAAA,QACN,UAAY,EAAA,QAAA;AAAA,QACZ,WAAW,OAAQ,CAAA,SAAA;AAAA,OACpB,CAAA,CAAA;AACD,MAAA,IAAA,CAAK,QAAQ,MAAO,CAAA,KAAA;AAAA,QAClB,YAAY,YAAY,CAAA,WAAA,EAAc,IAAK,CAAA,SAAA,CAAU,QAAQ,CAAC,CAAA,CAAA;AAAA,OAChE,CAAA;AAAA,KACF;AAEA,IAAA,IAAI,MAAM,MAAQ,EAAA;AAUhB,MAAA,KAAA,MAAW,KAAS,IAAAA,uBAAA,CAAO,KAAM,CAAA,KAAA,EAAO,EAAE,CAAG,EAAA;AAC3C,QAAI,IAAA;AACF,UAAA,MAAM,EAAG,CAAA,WAAA;AAAA,YACP,eAAA;AAAA,YACA,KAAA,CAAM,IAAI,CAAS,IAAA,MAAA;AAAA,cACjB,WAAWQ,OAAK,EAAA;AAAA,cAChB,UAAY,EAAAN,+BAAA,CAAmB,IAAK,CAAA,QAAA,CAAS,MAAM,CAAA;AAAA,cACnD,kBAAoB,EAAA,IAAA,CAAK,SAAU,CAAA,IAAA,CAAK,SAAS,MAAM,CAAA;AAAA,cACvD,kBAAkB,IAAK,CAAA,IAAA;AAAA,cACvB,MAAQ,EAAA,EAAA;AAAA,cACR,YAAA,EAAc,KAAK,QAAS,CAAA,WAAA;AAAA,cAC5B,cAAA,EAAgB,EAAG,CAAA,EAAA,CAAG,GAAI,EAAA;AAAA,cAC1B,iBAAA,EAAmB,EAAG,CAAA,EAAA,CAAG,GAAI,EAAA;AAAA,aAC7B,CAAA,CAAA;AAAA,YACF,UAAA;AAAA,WACF,CAAA;AACA,UAAA,MAAM,EAAG,CAAA,WAAA;AAAA,YACP,0BAAA;AAAA,YACA,KAAA,CAAM,IAAI,CAAS,IAAA,MAAA;AAAA,cACjB,YAAY,OAAQ,CAAA,SAAA;AAAA,cACpB,iBAAmB,EAAAA,+BAAA,CAAmB,IAAK,CAAA,QAAA,CAAS,MAAM,CAAA;AAAA,aAC1D,CAAA,CAAA;AAAA,YACF,UAAA;AAAA,WACF,CAAA;AAAA,iBACO,KAAO,EAAA;AACd,UAAI,IAAA,CAACS,qCAAwB,CAAA,KAAK,CAAG,EAAA;AACnC,YAAM,MAAA,KAAA,CAAA;AAAA,WACD,MAAA;AACL,YAAA,IAAA,CAAK,QAAQ,MAAO,CAAA,KAAA;AAAA,cAClB,uDAAuD,KAAK,CAAA,CAAA;AAAA,aAC9D,CAAA;AACA,YAAS,QAAA,CAAA,IAAA,CAAK,GAAG,KAAK,CAAA,CAAA;AAAA,WACxB;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAEA,IAAA,IAAI,SAAS,MAAQ,EAAA;AACnB,MAAW,KAAA,MAAA;AAAA,QACT,QAAA,EAAU,EAAE,MAAA,EAAQ,WAAY,EAAA;AAAA,QAChC,IAAA;AAAA,WACG,QAAU,EAAA;AACb,QAAM,MAAA,SAAA,GAAYT,gCAAmB,MAAM,CAAA,CAAA;AAE3C,QAAI,IAAA;AACF,UAAI,IAAA,EAAA,GAAK,MAAM,uBAAwB,CAAA;AAAA,YACrC,EAAA;AAAA,YACA,MAAA;AAAA,YACA,IAAA;AAAA,YACA,WAAA;AAAA,WACD,CAAA,CAAA;AACD,UAAA,IAAI,CAAC,EAAI,EAAA;AACP,YAAA,EAAA,GAAK,MAAM,uBAAwB,CAAA;AAAA,cACjC,EAAA;AAAA,cACA,MAAA;AAAA,cACA,IAAA;AAAA,cACA,WAAA;AAAA,cACA,MAAA,EAAQ,KAAK,OAAQ,CAAA,MAAA;AAAA,aACtB,CAAA,CAAA;AAAA,WACH;AAEA,UAAA,MAAM,EAAgC,CAAA,0BAA0B,CAC7D,CAAA,KAAA,CAAM,qBAAqB,SAAS,CAAA,CACpC,QAAS,CAAA,EAAE,UAAY,EAAA,OAAA,CAAQ,SAAU,EAAC,EAC1C,MAAO,EAAA,CAAA;AAEV,UAAA,IAAI,EAAI,EAAA;AACN,YAAM,MAAA,EAAA;AAAA,cACJ,0BAAA;AAAA,cACA,MAAO,CAAA;AAAA,cACP,YAAY,OAAQ,CAAA,SAAA;AAAA,cACpB,iBAAmB,EAAA,SAAA;AAAA,aACpB,CAAA,CAAA;AAAA,WACI,MAAA;AACL,YAAM,MAAA,cAAA,GAAiB,MAAM,wBAAyB,CAAA;AAAA,cACpD,EAAA;AAAA,cACA,SAAA;AAAA,cACA,WAAA;AAAA,aACD,CAAA,CAAA;AACD,YAAA,IAAI,cAAgB,EAAA;AAClB,cAAA,IAAA,CAAK,QAAQ,MAAO,CAAA,IAAA;AAAA,gBAClB,CAAA,OAAA,EAAU,QAAQ,SAAS,CAAA,gCAAA,EAAmC,SAAS,CAA0B,uBAAA,EAAA,cAAc,iBAAiB,WAAW,CAAA,CAAA;AAAA,eAC7I,CAAA;AAAA,aACF;AAAA,WACF;AAAA,iBACO,KAAO,EAAA;AACd,UAAA,IAAA,CAAK,QAAQ,MAAO,CAAA,KAAA;AAAA,YAClB,kBAAkB,SAAS,CAAA,eAAA,EAAkB,OAAQ,CAAA,SAAS,MAAM,KAAK,CAAA,CAAA;AAAA,WAC3E,CAAA;AAAA,SACF;AAAA,OACF;AAAA,KACF;AAAA,GACF;AAAA,EAEA,MAAM,oBACJ,CAAA,QAAA,EACA,OACA,EAAA;AACA,IAAA,MAAM,EAAK,GAAA,QAAA,CAAA;AACX,IAAA,MAAM,qBAAqB,EAAE,EAAA,EAAI,IAAM,EAAA,OAAA,CAAQ,MAAM,CAAA,CAAA;AAAA,GACvD;AAAA,EAEA,MAAc,WACZ,CAAA,EAAA,EACA,OAKC,EAAA;AAnNL,IAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAoNI,IAAI,IAAA,OAAA,CAAQ,SAAS,OAAS,EAAA;AAC5B,MAAO,OAAA;AAAA,QACL,OAAO,EAAC;AAAA,QACR,QAAU,EAAA,OAAA,CAAQ,KAAM,CAAA,GAAA,CAAI,CAAM,CAAA,MAAA;AAAA,UAChC,QAAU,EAAA,CAAA;AAAA,UACV,IAAA,EAAMe,oBAAmB,CAAA,CAAA,CAAE,MAAM,CAAA;AAAA,SACjC,CAAA,CAAA;AAAA,QACF,UAAU,OAAQ,CAAA,OAAA,CAAQ,GAAI,CAAA,CAAA,CAAA,KAAK,EAAE,SAAS,CAAA;AAAA,OAChD,CAAA;AAAA,KACF;AAGA,IAAA,MAAM,UAAU,MAAM,EAAA;AAAA,MACpB,0BAAA;AAAA,KACF,CACG,SAA4B,eAAiB,EAAA;AAAA,MAC5C,iBAAmB,EAAA,YAAA;AAAA,KACpB,EACA,KAAM,CAAA,EAAE,YAAY,OAAQ,CAAA,SAAA,EAAW,CAAA,CACvC,MAAO,CAAA;AAAA,MACN,iBAAmB,EAAA,4CAAA;AAAA,MACnB,YAAc,EAAA,4BAAA;AAAA,MACd,gBAAkB,EAAA,gCAAA;AAAA,KACnB,CAAA,CAAA;AAEH,IAAA,MAAM,KAAQ,GAAA,OAAA,CAAQ,KAAM,CAAA,GAAA,CAAI,CAAa,QAAA,MAAA;AAAA,MAC3C,QAAA;AAAA,MACA,GAAA,EAAKf,+BAAmB,CAAA,QAAA,CAAS,MAAM,CAAA;AAAA,MACvC,IAAA,EAAMe,oBAAmB,CAAA,QAAA,CAAS,MAAM,CAAA;AAAA,KACxC,CAAA,CAAA,CAAA;AAEF,IAAA,MAAM,aAAa,IAAI,GAAA;AAAA,MACrB,OAAA,CAAQ,IAAI,CAAK,CAAA,KAAA;AAAA,QACf,CAAE,CAAA,iBAAA;AAAA,QACF;AAAA,UACE,aAAa,CAAE,CAAA,YAAA;AAAA,UACf,eAAe,CAAE,CAAA,gBAAA;AAAA,SACnB;AAAA,OACD,CAAA;AAAA,KACH,CAAA;AACA,IAAM,MAAA,UAAA,GAAa,IAAI,GAAI,CAAA,KAAA,CAAM,IAAI,CAAQ,IAAA,KAAA,IAAA,CAAK,GAAG,CAAC,CAAA,CAAA;AAEtD,IAAM,MAAA,KAAA,GAAQ,IAAI,KAAkD,EAAA,CAAA;AACpE,IAAM,MAAA,QAAA,GAAW,IAAI,KAAkD,EAAA,CAAA;AACvE,IAAA,MAAM,QAAW,GAAA,OAAA,CACd,GAAI,CAAA,CAAA,GAAA,KAAO,GAAI,CAAA,iBAAiB,CAChC,CAAA,MAAA,CAAO,CAAO,GAAA,KAAA,CAAC,UAAW,CAAA,GAAA,CAAI,GAAG,CAAC,CAAA,CAAA;AAErC,IAAA,KAAA,MAAW,QAAQ,KAAO,EAAA;AACxB,MAAA,MAAM,MAAS,GAAA,UAAA,CAAW,GAAI,CAAA,IAAA,CAAK,GAAG,CAAA,CAAA;AACtC,MAAA,MAAM,aAAa,EAAE,QAAA,EAAU,KAAK,QAAU,EAAA,IAAA,EAAM,KAAK,IAAK,EAAA,CAAA;AAC9D,MAAA,IAAI,CAAC,MAAQ,EAAA;AAEX,QAAA,KAAA,CAAM,KAAK,UAAU,CAAA,CAAA;AAAA,OACvB,MAAA,IAAA,CAAA,CACG,sCAAQ,WAAR,KAAA,IAAA,GAAA,EAAA,GAAuB,cACvB,EAAK,GAAA,IAAA,CAAA,QAAA,CAAS,WAAd,KAAA,IAAA,GAAA,EAAA,GAA6B,KAC9B,CAAA,CAAA,EAAA;AAEA,QAAS,QAAA,CAAA,IAAA,CAAK,KAAK,GAAG,CAAA,CAAA;AACtB,QAAA,KAAA,CAAM,KAAK,UAAU,CAAA,CAAA;AAAA,OACZ,MAAA,IAAA,MAAA,CAAO,aAAkB,KAAA,IAAA,CAAK,IAAM,EAAA;AAE7C,QAAA,QAAA,CAAS,KAAK,UAAU,CAAA,CAAA;AAAA,OAC1B;AAAA,KACF;AAEA,IAAO,OAAA,EAAE,KAAO,EAAA,QAAA,EAAU,QAAS,EAAA,CAAA;AAAA,GACrC;AACF;;AC5PA,MAAM,kBAAqB,GAAA,EAAA,CAAA;AAEpB,MAAM,sBAAkD,CAAA;AAAA,EAC7D,YACmB,OAIjB,EAAA;AAJiB,IAAA,IAAA,CAAA,OAAA,GAAA,OAAA,CAAA;AAAA,GAIhB;AAAA,EAEH,MAAM,YAAe,EAAiD,EAAA;AACpE,IAAI,IAAA;AACF,MAAA,IAAI,MAAwB,GAAA,KAAA,CAAA,CAAA;AAE5B,MAAM,MAAA,IAAA,CAAK,QAAQ,QAAS,CAAA,WAAA;AAAA,QAC1B,OAAM,EAAM,KAAA;AAGV,UAAS,MAAA,GAAA,MAAM,GAAG,EAAE,CAAA,CAAA;AAAA,SACtB;AAAA,QACA;AAAA;AAAA,UAEE,qBAAuB,EAAA,IAAA;AAAA,SACzB;AAAA,OACF,CAAA;AAEA,MAAO,OAAA,MAAA,CAAA;AAAA,aACA,CAAG,EAAA;AACV,MAAA,IAAA,CAAK,OAAQ,CAAA,MAAA,CAAO,KAAM,CAAA,CAAA,0BAAA,EAA6B,CAAC,CAAE,CAAA,CAAA,CAAA;AAC1D,MAAA,MAAM,aAAa,CAAC,CAAA,CAAA;AAAA,KACtB;AAAA,GACF;AAAA,EAEA,MAAM,aACJ,CAAA,QAAA,EACA,OAC8B,EAAA;AAjElC,IAAA,IAAA,EAAA,CAAA;AAkEI,IAAA,MAAM,EAAK,GAAA,QAAA,CAAA;AACX,IAAM,MAAA,EAAE,WAAc,GAAA,OAAA,CAAA;AACtB,IAAM,MAAA,UAAA,GAAa,IAAI,KAAc,EAAA,CAAA;AAErC,IAAI,IAAA,UAAA,GAAa,SAAU,CAAA,iBAAA,CAAkB,OAAO,CAAA,CAAA;AACpD,IAAA,KAAA,IAAS,KAAQ,GAAA,CAAA,EAAG,KAAS,IAAA,kBAAA,EAAoB,SAAS,CAAG,EAAA;AAC3D,MAAA,MAAM,OAAO,MAAM,EAAA;AAAA,QACjB,0BAAA;AAAA,QAEC,KAAM,CAAA,EAAE,mBAAmB,UAAW,EAAC,EACvC,MAAO,EAAA,CAAA;AAEV,MAAI,IAAA,IAAA,CAAK,WAAW,CAAG,EAAA;AACrB,QAAA,IAAI,UAAU,CAAG,EAAA;AACf,UAAA,MAAM,IAAI7D,oBAAA,CAAc,CAAU,OAAA,EAAA,UAAU,CAAY,UAAA,CAAA,CAAA,CAAA;AAAA,SAC1D;AACA,QAAA,MAAM,IAAIA,oBAAA;AAAA,UACR,CAAA,OAAA,EAAU,SAAS,CAAA,wCAAA,EAA2C,UAAU,CAAA,CAAA;AAAA,SAC1E,CAAA;AAAA,OACF;AAEA,MAAA,MAAM,aAAY,EAAK,GAAA,IAAA,CAAA,IAAA,CAAK,OAAK,CAAE,CAAA,iBAAiB,MAAlC,IAAqC,GAAA,KAAA,CAAA,GAAA,EAAA,CAAA,iBAAA,CAAA;AACvD,MAAA,IAAI,CAAC,SAAW,EAAA;AAGd,QAAA,OAAO,EAAE,UAAW,EAAA,CAAA;AAAA,OACtB;AACA,MAAA,UAAA,CAAW,KAAK,SAAS,CAAA,CAAA;AACzB,MAAa,UAAA,GAAA,SAAA,CAAA;AAAA,KACf;AACA,IAAA,MAAM,IAAI,KAAA;AAAA,MACR,CAAA,6BAAA,EAAgC,SAAS,CAAA,2BAAA,EAA8B,kBAAkB,CAAA,CAAA;AAAA,KAC3F,CAAA;AAAA,GACF;AAAA,EAEA,MAAM,OAAQ,CAAA,QAAA,EAAuB,OAAwC,EAAA;AAC3E,IAAA,MAAM,EAAK,GAAA,QAAA,CAAA;AACX,IAAM,MAAA,EAAE,WAAc,GAAA,OAAA,CAAA;AAEtB,IAAM,MAAA,YAAA,GAAe,MAAM,EAAsB,CAAA,eAAe,EAC7D,KAAM,CAAA,EAAE,YAAY,SAAU,CAAA,iBAAA,CAAkB,OAAO,CAAE,EAAC,EAC1D,MAAO,CAAA,EAAE,gBAAgB,EAAG,CAAA,EAAA,CAAG,GAAI,EAAA,EAAG,CAAA,CAAA;AACzC,IAAA,IAAI,iBAAiB,CAAG,EAAA;AACtB,MAAA,MAAM,IAAIA,oBAAA,CAAc,CAAsB,mBAAA,EAAA,SAAS,CAAc,YAAA,CAAA,CAAA,CAAA;AAAA,KACvE;AAAA,GACF;AACF;;;;;;;;ACmDO,MAAM,cAAe,CAAA;AAAA,EA8BlB,YAAY,GAAyB,EAAA;AA7B7C,IAAiB,aAAA,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;AACjB,IAAQ,aAAA,CAAA,IAAA,EAAA,gBAAA,CAAA,CAAA;AACR,IAAQ,aAAA,CAAA,IAAA,EAAA,uBAAA,CAAA,CAAA;AACR,IAAQ,aAAA,CAAA,IAAA,EAAA,sBAAA,CAAA,CAAA;AACR,IAAQ,aAAA,CAAA,IAAA,EAAA,uBAAA,CAAA,CAAA;AACR,IAAQ,aAAA,CAAA,IAAA,EAAA,iBAAA,CAAA,CAAA;AACR,IAAQ,aAAA,CAAA,IAAA,EAAA,YAAA,CAAA,CAAA;AACR,IAAQ,aAAA,CAAA,IAAA,EAAA,mBAAA,CAAA,CAAA;AACR,IAAQ,aAAA,CAAA,IAAA,EAAA,mBAAA,CAAA,CAAA;AACR,IAAQ,aAAA,CAAA,IAAA,EAAA,QAAA,CAAA,CAAA;AACR,IAAQ,aAAA,CAAA,IAAA,EAAA,mBAAA,CAAA,CAAA;AAIR,IAAQ,aAAA,CAAA,IAAA,EAAA,oBAAA,CAAA,CAAA;AACR,IAAQ,aAAA,CAAA,IAAA,EAAA,kBAAA,CAAA,CAAA;AACR,IAAiB,aAAA,CAAA,IAAA,EAAA,aAAA,CAAA,CAAA;AACjB,IAAiB,aAAA,CAAA,IAAA,EAAA,iBAAA,CAAA,CAAA;AACjB,IAAQ,aAAA,CAAA,IAAA,EAAA,qBAAA,CAAA,CAAA;AACR,IAAA,aAAA,CAAA,IAAA,EAAQ,iCAAkC,EAAA,KAAA,CAAA,CAAA;AAC1C,IAAQ,aAAA,CAAA,IAAA,EAAA,aAAA,CAAA,CAAA;AAUN,IAAA,IAAA,CAAK,GAAM,GAAA,GAAA,CAAA;AACX,IAAA,IAAA,CAAK,iBAAiB,EAAC,CAAA;AACvB,IAAA,IAAA,CAAK,qBAAwB,GAAA,KAAA,CAAA;AAC7B,IAAA,IAAA,CAAK,uBAAuB,EAAC,CAAA;AAC7B,IAAA,IAAA,CAAK,wBAAwB,EAAC,CAAA;AAC9B,IAAA,IAAA,CAAK,kBAAkB,EAAC,CAAA;AACxB,IAAA,IAAA,CAAK,aAAa,EAAC,CAAA;AACnB,IAAA,IAAA,CAAK,oBAAoB,EAAC,CAAA;AAC1B,IAAA,IAAA,CAAK,iBAAoB,GAAA,KAAA,CAAA;AACzB,IAAA,IAAA,CAAK,MAAS,GAAA,KAAA,CAAA,CAAA;AACd,IAAK,IAAA,CAAA,WAAA,GAAc,CAAC,GAAGmG,wBAAkB,CAAA,CAAA;AACzC,IAAK,IAAA,CAAA,eAAA,GAAkB,MAAO,CAAA,MAAA,CAAOC,eAAsB,CAAA,CAAA;AAC3D,IAAK,IAAA,CAAA,mBAAA,GAAsB,CAAC,KAAK,CAAA,CAAA;AAEjC,IAAA,IAAA,CAAK,qBAAqB,cAAe,CAAA,4BAAA;AAAA,MACvC,GAAI,CAAA,MAAA;AAAA,KACN,CAAA;AAAA,GACF;AAAA;AAAA;AAAA;AAAA,EAtBA,OAAO,OAAO,GAAyC,EAAA;AACrD,IAAO,OAAA,IAAI,eAAe,GAAG,CAAA,CAAA;AAAA,GAC/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAiCA,mBACK,QACa,EAAA;AAChB,IAAA,IAAA,CAAK,cAAe,CAAA,IAAA,CAAK,GAAG,QAAA,CAAS,MAAM,CAAA,CAAA;AAC3C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,6BAA6B,OAAiC,EAAA;AAC5D,IAAA,IAAA,CAAK,qBAAqB,8BAA+B,CAAA;AAAA,MACvD,UAAY,EAAA,OAAA;AAAA,MACZ,YAAY,OAAU,GAAA,GAAA;AAAA,KACvB,CAAA,CAAA;AACD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,sBACE,kBACgB,EAAA;AAChB,IAAA,IAAA,CAAK,kBAAqB,GAAA,kBAAA,CAAA;AAC1B,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAoB,gBAAoD,EAAA;AACtE,IAAA,IAAA,CAAK,gBAAmB,GAAA,gBAAA,CAAA;AACxB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAeA,sBAAsB,QAA0C,EAAA;AAC9D,IAAK,IAAA,CAAA,cAAA,GAAiB,CAAC,GAAG,QAAQ,CAAA,CAAA;AAClC,IAAA,IAAA,CAAK,qBAAwB,GAAA,IAAA,CAAA;AAC7B,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,sBAAA,CACE,KACA,QACgB,EAAA;AAChB,IAAK,IAAA,CAAA,oBAAA,CAAqB,GAAG,CAAI,GAAA,QAAA,CAAA;AACjC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAYA,yBAAyB,UAAiD,EAAA;AACxE,IAAOxD,uBAAA,CAAA,KAAA,CAAM,IAAK,CAAA,qBAAA,EAAuB,UAAU,CAAA,CAAA;AACnD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,qBACK,SACa,EAAA;AAChB,IAAA,IAAA,CAAK,eAAgB,CAAA,IAAA,CAAK,GAAG,SAAA,CAAU,MAAM,CAAA,CAAA;AAC7C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,gBACK,UACa,EAAA;AAChB,IAAA,IAAA,CAAK,UAAW,CAAA,IAAA,CAAK,GAAG,UAAA,CAAW,MAAM,CAAA,CAAA;AACzC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,kBAAkB,UAAgD,EAAA;AAChE,IAAK,IAAA,CAAA,UAAA,GAAa,CAAC,GAAG,UAAU,CAAA,CAAA;AAChC,IAAA,IAAA,CAAK,iBAAoB,GAAA,IAAA,CAAA;AACzB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,oBAA2C,GAAA;AACzC,IAAA,MAAM,EAAE,MAAA,EAAQ,MAAQ,EAAA,MAAA,KAAW,IAAK,CAAA,GAAA,CAAA;AACxC,IAAM,MAAA,YAAA,GAAe1C,2BAAgB,CAAA,UAAA,CAAW,MAAM,CAAA,CAAA;AAEtD,IAAO,OAAA;AAAA,MACL,IAAI,mBAAoB,EAAA;AAAA,MACxB,IAAI,kBAAA,CAAmB,EAAE,MAAA,EAAQ,QAAQ,CAAA;AAAA,MACzC,oBAAoB,UAAW,CAAA,MAAA,EAAQ,EAAE,MAAA,EAAQ,QAAQ,CAAA;AAAA,MACzD,IAAI,+BAAA,CAAgC,EAAE,YAAA,EAAc,CAAA;AAAA,KACtD,CAAA;AAAA,GACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAUA,wBACK,SACa,EAAA;AAChB,IAAA,IAAA,CAAK,iBAAkB,CAAA,IAAA,CAAK,GAAG,SAAA,CAAU,MAAM,CAAA,CAAA;AAC/C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,oBAAoB,MAAgD,EAAA;AAClE,IAAA,IAAA,CAAK,MAAS,GAAA,MAAA,CAAA;AACd,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,kBAAkB,WAAoD,EAAA;AACpE,IAAA,IAAA,CAAK,WAAY,CAAA,IAAA,CAAK,GAAG,WAAA,CAAY,MAAM,CAAA,CAAA;AAC3C,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,sBACK,eAGH,EAAA;AACA,IAAA,IAAA,CAAK,eAAgB,CAAA,IAAA,CAAK,GAAG,eAAA,CAAgB,MAAM,CAAA,CAAA;AACnD,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,wBAAwB,oBAAgD,EAAA;AACtE,IAAA,IAAA,CAAK,mBAAsB,GAAA,oBAAA,CAAA;AAC3B,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,kCAA2C,GAAA;AACzC,IAAA,IAAA,CAAK,+BAAkC,GAAA,IAAA,CAAA;AACvC,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA;AAAA,EAKA,eAAe,MAAqC,EAAA;AAClD,IAAA,IAAA,CAAK,WAAc,GAAA,MAAA,CAAA;AACnB,IAAO,OAAA,IAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA;AAAA,EAKA,MAAM,KAGH,GAAA;AAldL,IAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAmdI,IAAM,MAAA;AAAA,MACJ,MAAA;AAAA,MACA,QAAA;AAAA,MACA,MAAA;AAAA,MACA,WAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAA,GAAYmG,2BAAc,CAAA,UAAA,CAAW,MAAM,CAAA;AAAA,QACzC,IAAK,CAAA,GAAA,CAAA;AAET,IAAA,MAAM,EAAE,IAAA,EAAM,QAAS,EAAA,GAAIC,sCAAyB,CAAA;AAAA,MAClD,GAAG,IAAK,CAAA,GAAA;AAAA,MACR,SAAA;AAAA,KACD,CAAA,CAAA;AAED,IAAM,MAAA,MAAA,GAAS,KAAK,iBAAkB,EAAA,CAAA;AACtC,IAAM,MAAA,UAAA,GAAa,KAAK,eAAgB,EAAA,CAAA;AACxC,IAAM,MAAA,MAAA,GAAS,KAAK,MAAU,IAAA,uBAAA,CAAA;AAE9B,IAAM,MAAA,QAAA,GAAW,MAAM,QAAA,CAAS,SAAU,EAAA,CAAA;AAC1C,IAAA,IAAI,EAAC,CAAA,EAAA,GAAA,QAAA,CAAS,UAAT,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAqB,IAAM,CAAA,EAAA;AAC9B,MAAA,MAAA,CAAO,KAAK,+BAA+B,CAAA,CAAA;AAC3C,MAAA,MAAM,wBAAwB,QAAQ,CAAA,CAAA;AAAA,KACxC;AAEA,IAAM,MAAA,QAAA,GAAW,eAAgB,CAAA,UAAA,CAAW,MAAQ,EAAA;AAAA,MAClD,IAAM,EAAA,QAAA;AAAA,MACN,MAAA;AAAA,KACD,CAAA,CAAA;AAED,IAAM,MAAA,kBAAA,GAAqB,IAAI,yBAA0B,CAAA;AAAA,MACvD,QAAU,EAAA,QAAA;AAAA,MACV,MAAA;AAAA,MACA,iBAAiB,IAAK,CAAA,kBAAA;AAAA,MACtB,aAAa,IAAK,CAAA,WAAA;AAAA,KACnB,CAAA,CAAA;AACD,IAAM,MAAA,gBAAA,GAAmB,IAAI,uBAAwB,CAAA;AAAA,MACnD,QAAU,EAAA,QAAA;AAAA,MACV,MAAA;AAAA,KACD,CAAA,CAAA;AACD,IAAM,MAAA,eAAA,GAAkB,IAAI,sBAAuB,CAAA;AAAA,MACjD,QAAU,EAAA,QAAA;AAAA,MACV,MAAA;AAAA,KACD,CAAA,CAAA;AACD,IAAM,MAAA,YAAA,GAAepG,2BAAgB,CAAA,UAAA,CAAW,MAAM,CAAA,CAAA;AACtD,IAAM,MAAA,aAAA,GAAgB,2BAA4B,CAAA,UAAA,CAAW,MAAM,CAAA,CAAA;AACnE,IAAM,MAAA,YAAA,GAAe,IAAI,oCAAqC,CAAA;AAAA,MAC5D,UAAA;AAAA,MACA,YAAA;AAAA,MACA,aAAA;AAAA,MACA,MAAA;AAAA,MACA,MAAA;AAAA,MACA,MAAA;AAAA,MACA,iCAAiC,IAAK,CAAA,+BAAA;AAAA,KACvC,CAAA,CAAA;AACD,IAAM,MAAA,2BAAA,GAA8B,IAAI,sBAAuB,CAAA;AAAA,MAC7D,QAAU,EAAA,QAAA;AAAA,MACV,MAAA;AAAA,MACA,QAAA;AAAA,KACD,CAAA,CAAA;AAED,IAAI,IAAA,kBAAA,CAAA;AACJ,IAAA,IAAI,0BAA0B,WAAa,EAAA;AACzC,MAAqB,kBAAA,GAAA,WAAA,CAAA;AAAA,KAChB,MAAA;AACL,MAAO,MAAA,CAAA,IAAA;AAAA,QACL,oJAAA;AAAA,OACF,CAAA;AACA,MAAA,kBAAA,GAAqBqG,6CAAsB,WAAW,CAAA,CAAA;AAAA,KACxD;AAEA,IAAA,MAAM,kBAAkB,IAAI,yBAAA;AAAA,MAC1B,2BAAA;AAAA,MACA,kBAAA;AAAA,MACAC,+CAAA,CAA2B,KAAK,eAAe,CAAA;AAAA,KACjD,CAAA;AACA,IAAA,MAAM,8BAA8BC,sDAAkC,CAAA;AAAA,MACpE,YAAc,EAAAb,kCAAA;AAAA,MACd,YAAA,EAAc,OAAO,YAA2B,KAAA;AAC9C,QAAA,MAAM,EAAE,QAAA,EAAa,GAAA,MAAM,4BAA4B,QAAS,CAAA;AAAA,UAC9D,WAAA,EAAa,MAAM,IAAA,CAAK,wBAAyB,EAAA;AAAA,UACjD,MAAQ,EAAA;AAAA,YACN,KAAA,EAAO,YAAa,CAAA,GAAA,CAAI,CAAe,WAAA,KAAA;AACrC,cAAA,MAAM,EAAE,IAAM,EAAA,SAAA,EAAW,IAAK,EAAA,GAAIvE,4BAAe,WAAW,CAAA,CAAA;AAE5D,cAAA,OAAO,iBAAkB,CAAA;AAAA,gBACvB,IAAA;AAAA,gBACA,oBAAsB,EAAA,SAAA;AAAA,gBACtB,eAAiB,EAAA,IAAA;AAAA,eAClB,CAAA,CAAA;AAAA,aACF,CAAA;AAAA,WACH;AAAA,SACD,CAAA,CAAA;AAED,QAAM,MAAA,aAAA,GAAgBqF,YAAM,CAAA,QAAA,EAAU5D,+BAAkB,CAAA,CAAA;AAExD,QAAA,OAAO,YAAa,CAAA,GAAA;AAAA,UAClB,iBACE,aAAc,CAAAA,+BAAA,CAAmBzB,2BAAe,CAAA,WAAW,CAAC,CAAC,CAAA;AAAA,SACjE,CAAA;AAAA,OACF;AAAA,MACA,aAAa,IAAK,CAAA,WAAA;AAAA,MAClB,OAAO,IAAK,CAAA,eAAA;AAAA,KACb,CAAA,CAAA;AAED,IAAM,MAAA,aAAA,GAAgB,IAAI,oBAAA,CAAqB,QAAQ,CAAA,CAAA;AACvD,IAAM,MAAA,sBAAA,GAAyB,IAAI,4BAAA,CAA6B,MAAM,CAAA,CAAA;AACtE,IAAA,MAAM,kBAAkBuB,uBAAO,CAAA,MAAA;AAAA,MAC7B,CAAC,GAAG,IAAK,CAAA,eAAA,EAAiB,eAAe,sBAAsB,CAAA;AAAA,MAC/D,CAAA,QAAA,KAAY,SAAS,eAAgB,EAAA;AAAA,KACvC,CAAA;AAEA,IAAM,MAAA,gBAAA,GAAmB,IAAI,8BAA+B,CAAA;AAAA,MAC1D,MAAA;AAAA,MACA,SAAA;AAAA,MACA,MAAA;AAAA,MACA,IAAM,EAAA,QAAA;AAAA,MACN,kBAAA;AAAA,MACA,YAAA;AAAA,MACA,QAAA;AAAA,MACA,UAAA,EAAY,MAAMM,iBAAA,CAAW,MAAM,CAAA;AAAA,MACnC,iBAAmB,EAAA,GAAA;AAAA,MACnB,mBAAmB,CAAS,KAAA,KAAA;AA5kBlC,QAAAuB,IAAAA,GAAAA,CAAAA;AA6kBQ,QAAA,CAAAA,GAAA,GAAA,IAAA,CAAK,iBAAL,KAAA,IAAA,GAAA,KAAA,CAAA,GAAAA,IAAA,IAAyB,CAAA,IAAA,EAAA,KAAA,CAAA,CAAA;AAAA,OAC3B;AAAA,MACA,aAAa,IAAK,CAAA,WAAA;AAAA,KACnB,CAAA,CAAA;AAED,IAAM,MAAA,gBAAA,GAAA,CACJ,UAAK,gBAAL,KAAA,IAAA,GAAA,EAAA,GACA,IAAI,oBAAqB,CAAA,MAAA,EAAQ,YAAc,EAAA,IAAA,CAAK,iBAAiB,CAAA,CAAA;AACvE,IAAA,MAAM,kBAAkB,IAAI,yBAAA;AAAA,MAC1B,IAAI,sBAAuB,CAAA,aAAA,EAAe,YAAc,EAAA;AAAA,QACtD,sBAAsB,IAAK,CAAA,mBAAA;AAAA,OAC5B,CAAA;AAAA,MACD,kBAAA;AAAA,KACF,CAAA;AACA,IAAA,MAAM,iBAAiB,IAAI,wBAAA;AAAA,MACzB,IAAI,qBAAA,CAAsB,EAAE,QAAA,EAAU,iBAAiB,CAAA;AAAA,MACvD,kBAAA;AAAA,KACF,CAAA;AAEA,IAAM,MAAA,MAAA,GAAS,MAAM,YAAa,CAAA;AAAA,MAChC,eAAA;AAAA,MACA,gBAAA;AAAA,MACA,eAAA;AAAA,MACA,YAAA;AAAA,MACA,cAAA;AAAA,MACA,MAAA;AAAA,MACA,MAAA;AAAA,MACA,2BAAA;AAAA,MACA,IAAA;AAAA,MACA,QAAA;AAAA,KACD,CAAA,CAAA;AAED,IAAM,MAAA,sBAAA,CAAuB,kBAAkB,eAAe,CAAA,CAAA;AAE9D,IAAO,OAAA;AAAA,MACL,gBAAkB,EAAA;AAAA,QAChB,MAAM,KAAQ,GAAA;AACZ,UAAA,MAAM,iBAAiB,KAAM,EAAA,CAAA;AAC7B,UAAA,MAAM,SAAS,KAAM,EAAA,CAAA;AAAA,SACvB;AAAA,QACA,MAAM,IAAO,GAAA;AACX,UAAA,MAAM,iBAAiB,IAAK,EAAA,CAAA;AAC5B,UAAA,MAAM,SAAS,IAAK,EAAA,CAAA;AAAA,SACtB;AAAA,OACF;AAAA,MACA,MAAA;AAAA,KACF,CAAA;AAAA,GACF;AAAA,EAEA,UAAU,OAKP,EAAA;AACD,IAAA,IAAA,CAAK,oBAAoB,OAAQ,CAAA,iBAAA,CAAA;AAAA,GACnC;AAAA,EAEQ,iBAAkC,GAAA;AACxC,IAAM,MAAA,cAAA,GAAiC,IAAK,CAAA,qBAAA,GACxC,CAAC,IAAIkC,sCAA2B,EAAA,GAAG,IAAK,CAAA,cAAc,CACtD,GAAA;AAAA,MACE,IAAIA,oCAAwB,EAAA;AAAA,MAC5B,IAAIC,yCAA6B,EAAA;AAAA,MACjC,IAAIC,4CAAgC,EAAA;AAAA,MACpC,IAAIC,oCAAA;AAAA,QACFC,0BAAA,CAAc,KAAK,qBAAqB,CAAA;AAAA,OAC1C;AAAA,MACA,GAAG,IAAK,CAAA,cAAA;AAAA,KACV,CAAA;AAEJ,IAAO,OAAAC,2BAAA,CAAe,MAAM,cAAc,CAAA,CAAA;AAAA,GAC5C;AAAA,EAEQ,eAAsC,GAAA;AAC5C,IAAA,MAAM,EAAE,MAAA,EAAQ,MAAO,EAAA,GAAI,IAAK,CAAA,GAAA,CAAA;AAChC,IAAM,MAAA,YAAA,GAAe9G,2BAAgB,CAAA,UAAA,CAAW,MAAM,CAAA,CAAA;AAEtD,IAAA,IAAA,CAAK,+BAAgC,EAAA,CAAA;AAErC,IAAA,MAAM,oBAA4D,GAAA;AAAA,MAChE,IAAM,EAAA,uBAAA;AAAA,MACN,IAAM,EAAA,uBAAA;AAAA,MACN,IAAM,EAAA,uBAAA;AAAA,MACN,GAAG,IAAK,CAAA,oBAAA;AAAA,KACV,CAAA;AAGA,IAAA,MAAM,UAAiC,GAAA;AAAA,MACrC,IAAI,oBAAqB,CAAA;AAAA,QACvB,SAAW,EAAA,oBAAA;AAAA,QACX,MAAA;AAAA,QACA,YAAA;AAAA,OACD,CAAA;AAAA,KACH,CAAA;AAEA,IAAM,MAAA,2BAAA,GAA8B,IAAI,2BAA4B,EAAA,CAAA;AAGpE,IACE,IAAA,CAAC,KAAK,UAAW,CAAA,IAAA;AAAA,MACf,CACE,SAAA,KAAA,SAAA,CAAU,gBAAiB,EAAA,KAC3B,4BAA4B,gBAAiB,EAAA;AAAA,KAEjD,EAAA;AACA,MAAA,UAAA,CAAW,KAAK,2BAA2B,CAAA,CAAA;AAAA,KAC7C;AAGA,IAAI,IAAA,CAAC,KAAK,iBAAmB,EAAA;AAC3B,MAAA,UAAA,CAAW,IAAK,CAAA,GAAG,IAAK,CAAA,oBAAA,EAAsB,CAAA,CAAA;AAAA,KAChD;AAGA,IAAW,UAAA,CAAA,IAAA,CAAK,GAAG,IAAA,CAAK,UAAU,CAAA,CAAA;AAElC,IAAA,IAAA,CAAK,+BAA+B,UAAU,CAAA,CAAA;AAE9C,IAAO,OAAA,UAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA,EAIQ,+BAAkC,GAAA;AACxC,IAAA,MAAM,EAAK,GAAA,IAAA,CAAK,GAAI,CAAA,MAAA,CAAO,kBAAkB,oBAAoB,CAAA,CAAA;AACjE,IAAI,IAAA,EAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAI,IAAI,QAAW,CAAA,EAAA;AACrB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,uGAAA,CAAA;AAAA,OACF,CAAA;AAAA,KACF;AACA,IAAI,IAAA,EAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAI,IAAI,WAAc,CAAA,EAAA;AACxB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,0GAAA,CAAA;AAAA,OACF,CAAA;AAAA,KACF;AACA,IAAI,IAAA,EAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAI,IAAI,cAAiB,CAAA,EAAA;AAC3B,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,gHAAA,CAAA;AAAA,OACF,CAAA;AAAA,KACF;AACA,IAAI,IAAA,EAAA,IAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAAI,IAAI,UAAa,CAAA,EAAA;AACvB,MAAA,MAAM,IAAI,KAAA;AAAA,QACR,CAAA,wGAAA,CAAA;AAAA,OACF,CAAA;AAAA,KACF;AAAA,GACF;AAAA;AAAA,EAGQ,+BAA+B,UAAgC,EAAA;AAluBzE,IAAA,IAAA,EAAA,EAAA,EAAA,CAAA;AAmuBI,IAAA,MAAM,gBAAmB,GAAA,iDAAA,CAAA;AACzB,IAAI,IAAA,OAAA,CAAQ,GAAI,CAAA,gBAAgB,CAAG,EAAA;AACjC,MAAA,OAAA;AAAA,KACF;AAEA,IAAA,MAAM,gBAAgB,IAAI,GAAA;AAAA,MAAA,CACxB,EAAK,GAAA,CAAA,EAAA,GAAA,IAAA,CAAA,GAAA,CAAI,MACN,CAAA,sBAAA,CAAuB,mBAAmB,CAD7C,KAAA,IAAA,GAAA,KAAA,CAAA,GAAA,EAAA,CAEI,GAAI,CAAA,CAAA,CAAA,KAAK,CAAE,CAAA,SAAA,CAAU,MAAM,CAAA,CAAA,KAF/B,YAEqC,EAAC;AAAA,KACxC,CAAA;AACA,IAAM,MAAA,cAAA,GAAiB,IAAI,GAAI,CAAA,UAAA,CAAW,IAAI,CAAK,CAAA,KAAA,CAAA,CAAE,gBAAiB,EAAC,CAAC,CAAA,CAAA;AAExE,IAAS,SAAA,KAAA,CACP,YACA,EAAA,aAAA,EACA,eACA,EAAA;AACA,MACE,IAAA,aAAA,CAAc,IAAI,YAAY,CAAA,IAC9B,CAAC,cAAe,CAAA,GAAA,CAAI,aAAa,CACjC,EAAA;AACA,QAAA,MAAM,IAAI,KAAA;AAAA,UACR;AAAA,YACE,4DAA4D,YAAY,CAAA,CAAA,CAAA;AAAA,YACxE,yDAAyD,aAAa,CAAA,WAAA,CAAA;AAAA,YACtE,CAAA,+EAAA,CAAA;AAAA,YACA,CAAA,iFAAA,CAAA;AAAA,YACA,mBAAmB,eAAe,CAAA,6CAAA,CAAA;AAAA,YAClC,CAAA,qFAAA,CAAA;AAAA,YACA,uCAAuC,gBAAgB,CAAA,WAAA,CAAA;AAAA,WACzD,CAAE,KAAK,GAAG,CAAA;AAAA,SACZ,CAAA;AAAA,OACF;AAAA,KACF;AAEA,IAAA,KAAA;AAAA,MACE,oBAAA;AAAA,MACA,sCAAA;AAAA,MACA,wCAAA;AAAA,KACF,CAAA;AACA,IAAA,KAAA;AAAA,MACE,cAAA;AAAA,MACA,yBAAA;AAAA,MACA,yDAAA;AAAA,KACF,CAAA;AACA,IAAA,KAAA;AAAA,MACE,iBAAA;AAAA,MACA,+BAAA;AAAA,MACA,wDAAA;AAAA,KACF,CAAA;AACA,IAAA,KAAA;AAAA,MACE,qBAAA;AAAA,MACA,6BAAA;AAAA,MACA,4DAAA;AAAA,KACF,CAAA;AACA,IAAA,KAAA;AAAA,MACE,kBAAA;AAAA,MACA,0BAAA;AAAA,MACA,yDAAA;AAAA,KACF,CAAA;AACA,IAAA,KAAA;AAAA,MACE,YAAA;AAAA,MACA,0BAAA;AAAA,MACA,mDAAA;AAAA,KACF,CAAA;AACA,IAAA,KAAA;AAAA,MACE,kBAAA;AAAA,MACA,0BAAA;AAAA,MACA,yDAAA;AAAA,KACF,CAAA;AACA,IAAA,KAAA;AAAA,MACE,UAAA;AAAA,MACA,wBAAA;AAAA,MACA,iDAAA;AAAA,KACF,CAAA;AACA,IAAA,KAAA;AAAA,MACE,qBAAA;AAAA,MACA,kCAAA;AAAA,MACA,kDAAA;AAAA,KACF,CAAA;AAAA,GACF;AAAA,EAEA,OAAe,6BACb+G,QAC4B,EAAA;AAC5B,IAAA,MAAM,qBAAwB,GAAA,4BAAA,CAAA;AAE9B,IAAA,IAAI,CAACA,QAAA,CAAO,GAAI,CAAA,qBAAqB,CAAG,EAAA;AACtC,MAAA,OAAO,8BAA+B,CAAA;AAAA,QACpC,UAAY,EAAA,GAAA;AAAA,QACZ,UAAY,EAAA,GAAA;AAAA,OACb,CAAA,CAAA;AAAA,KACH;AAEA,IAAM,MAAA,QAAA,GAAWC,8BAAuBD,QAAQ,EAAA;AAAA,MAC9C,GAAK,EAAA,qBAAA;AAAA,KACN,CAAA,CAAA;AACD,IAAA,MAAM,UAAU,IAAK,CAAA,GAAA;AAAA,MACnB,CAAA;AAAA,MACA,IAAK,CAAA,KAAA,CAAMjC,4BAAuB,CAAA,QAAQ,IAAI,GAAI,CAAA;AAAA,KACpD,CAAA;AAEA,IAAA,OAAO,8BAA+B,CAAA;AAAA,MACpC,UAAY,EAAA,OAAA;AAAA,MACZ,YAAY,OAAU,GAAA,GAAA;AAAA,KACvB,CAAA,CAAA;AAAA,GACH;AACF;;;;;;;;;;;;;;;;"}
\ No newline at end of file
diff --git a/node_modules/@backstage/plugin-catalog-backend/dist/index.cjs.js b/node_modules/@backstage/plugin-catalog-backend/dist/index.cjs.js
index 71eb78f..b0df95e 100644
--- a/node_modules/@backstage/plugin-catalog-backend/dist/index.cjs.js
+++ b/node_modules/@backstage/plugin-catalog-backend/dist/index.cjs.js
@@ -31,6 +31,7 @@ require('zod');
 require('@backstage/types');
 require('yn');
 require('@backstage/backend-openapi-utils');
+require('@janus-idp/backstage-plugin-audit-log-node');
 require('@backstage/plugin-permission-common');
 require('minimatch');
 require('@backstage/config');
diff --git a/node_modules/@backstage/plugin-catalog-backend/dist/index.cjs.js.map b/node_modules/@backstage/plugin-catalog-backend/dist/index.cjs.js.map
index 094863a..a12d5ab 100644
--- a/node_modules/@backstage/plugin-catalog-backend/dist/index.cjs.js.map
+++ b/node_modules/@backstage/plugin-catalog-backend/dist/index.cjs.js.map
@@ -1 +1 @@
-{"version":3,"file":"index.cjs.js","sources":["../src/modules/core/AnnotateScmSlugEntityProcessor.ts","../src/modules/core/LocationEntityProcessor.ts","../src/modules/core/transformLegacyPolicyToProcessor.ts","../src/search/DefaultCatalogCollator.ts","../src/deprecated.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport parseGitUrl from 'git-url-parse';\nimport { identity, merge, pickBy } from 'lodash';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport { CatalogProcessor } from '@backstage/plugin-catalog-node';\n\nconst GITHUB_ACTIONS_ANNOTATION = 'github.com/project-slug';\nconst GITLAB_ACTIONS_ANNOTATION = 'gitlab.com/project-slug';\nconst AZURE_ACTIONS_ANNOTATION = 'dev.azure.com/project-repo';\n\n/** @public */\nexport class AnnotateScmSlugEntityProcessor implements CatalogProcessor {\n  constructor(\n    private readonly opts: {\n      scmIntegrationRegistry: ScmIntegrationRegistry;\n      kinds?: string[];\n    },\n  ) {}\n\n  getProcessorName(): string {\n    return 'AnnotateScmSlugEntityProcessor';\n  }\n\n  static fromConfig(\n    config: Config,\n    options?: { kinds?: string[] },\n  ): AnnotateScmSlugEntityProcessor {\n    return new AnnotateScmSlugEntityProcessor({\n      scmIntegrationRegistry: ScmIntegrations.fromConfig(config),\n      kinds: options?.kinds,\n    });\n  }\n\n  async preProcessEntity(\n    entity: Entity,\n    location: LocationSpec,\n  ): Promise<Entity> {\n    const applicableKinds = (this.opts.kinds ?? ['Component']).map(k =>\n      k.toLocaleLowerCase('en-US'),\n    );\n    if (\n      !applicableKinds.includes(entity.kind.toLocaleLowerCase('en-US')) ||\n      location.type !== 'url'\n    ) {\n      return entity;\n    }\n\n    const scmIntegration = this.opts.scmIntegrationRegistry.byUrl(\n      location.target,\n    );\n\n    if (!scmIntegration) {\n      return entity;\n    }\n\n    let annotation;\n    switch (scmIntegration.type) {\n      case 'github':\n        annotation = GITHUB_ACTIONS_ANNOTATION;\n        break;\n      case 'gitlab':\n        annotation = GITLAB_ACTIONS_ANNOTATION;\n        break;\n      case 'azure':\n        annotation = AZURE_ACTIONS_ANNOTATION;\n        break;\n      default:\n        return entity;\n    }\n\n    let projectSlug = entity.metadata.annotations?.[annotation];\n    if (!projectSlug) {\n      const gitUrl = parseGitUrl(location.target);\n      projectSlug = `${gitUrl.owner}/${gitUrl.name}`;\n    }\n\n    return merge(\n      {\n        metadata: {\n          annotations: pickBy(\n            {\n              [annotation]: projectSlug,\n            },\n            identity,\n          ),\n        },\n      },\n      entity,\n    );\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, LocationEntity } from '@backstage/catalog-model';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport path from 'path';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport {\n  processingResult,\n  CatalogProcessor,\n  CatalogProcessorEmit,\n} from '@backstage/plugin-catalog-node';\n\nexport function toAbsoluteUrl(\n  integrations: ScmIntegrationRegistry,\n  base: LocationSpec,\n  target: string,\n): string {\n  try {\n    if (base.type === 'file') {\n      if (target.startsWith('.')) {\n        return path.join(path.dirname(base.target), target);\n      }\n      return target;\n    }\n    return integrations.resolveUrl({ url: target, base: base.target });\n  } catch (e) {\n    return target;\n  }\n}\n\n/**\n * @public\n * @deprecated This processor should no longer be used\n */\nexport type LocationEntityProcessorOptions = {\n  integrations: ScmIntegrationRegistry;\n};\n\n/**\n * Legacy processor, should not be used.\n *\n * @remarks\n *\n * In the old catalog architecture, this processor translated Location entities\n * into URLs that should be fetched. This is no longer needed since the engine\n * handles this internally.\n *\n * @public\n * @deprecated This processor should no longer be used\n */\nexport class LocationEntityProcessor implements CatalogProcessor {\n  constructor(private readonly options: LocationEntityProcessorOptions) {}\n\n  getProcessorName(): string {\n    return 'LocationEntityProcessor';\n  }\n\n  async postProcessEntity(\n    entity: Entity,\n    location: LocationSpec,\n    emit: CatalogProcessorEmit,\n  ): Promise<Entity> {\n    if (entity.kind === 'Location') {\n      const locationEntity = entity as LocationEntity;\n\n      const type = locationEntity.spec.type || location.type;\n      if (type === 'file' && location.target.endsWith(path.sep)) {\n        emit(\n          processingResult.inputError(\n            location,\n            `LocationEntityProcessor cannot handle ${type} type location with target ${location.target} that ends with a path separator`,\n          ),\n        );\n      }\n\n      const targets = new Array<string>();\n      if (locationEntity.spec.target) {\n        targets.push(locationEntity.spec.target);\n      }\n      if (locationEntity.spec.targets) {\n        targets.push(...locationEntity.spec.targets);\n      }\n\n      for (const maybeRelativeTarget of targets) {\n        const target = toAbsoluteUrl(\n          this.options.integrations,\n          location,\n          maybeRelativeTarget,\n        );\n        emit(processingResult.location({ type, target }));\n      }\n    }\n\n    return entity;\n  }\n}\n","/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EntityPolicy } from '@backstage/catalog-model';\nimport { CatalogProcessor } from '@backstage/plugin-catalog-node';\n\n/**\n * Transform a given entity policy to an entity processor.\n * @param policy - The policy to transform\n * @returns A new entity processor that uses the entity policy.\n * @public\n */\nexport function transformLegacyPolicyToProcessor(\n  policy: EntityPolicy,\n): CatalogProcessor {\n  return {\n    getProcessorName() {\n      return policy.constructor.name;\n    },\n    async preProcessEntity(entity) {\n      // If enforcing the policy fails, throw the policy error.\n      const result = await policy.enforce(entity);\n      if (!result) {\n        return entity;\n      }\n      return result;\n    },\n  };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PluginEndpointDiscovery,\n  TokenManager,\n} from '@backstage/backend-common';\nimport {\n  Entity,\n  isUserEntity,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  CatalogApi,\n  CatalogClient,\n  GetEntitiesRequest,\n} from '@backstage/catalog-client';\nimport { catalogEntityReadPermission } from '@backstage/plugin-catalog-common/alpha';\nimport { CatalogEntityDocument } from '@backstage/plugin-catalog-common';\nimport { Permission } from '@backstage/plugin-permission-common';\n\n/**\n * @public\n * @deprecated Upgrade to a more recent `@backstage/plugin-search-backend-node` and\n * use `DefaultCatalogCollatorFactory` instead.\n */\nexport class DefaultCatalogCollator {\n  protected discovery: PluginEndpointDiscovery;\n  protected locationTemplate: string;\n  protected filter?: GetEntitiesRequest['filter'];\n  protected readonly catalogClient: CatalogApi;\n  public readonly type: string = 'software-catalog';\n  public readonly visibilityPermission: Permission =\n    catalogEntityReadPermission;\n  protected tokenManager: TokenManager;\n\n  static fromConfig(\n    _config: Config,\n    options: {\n      discovery: PluginEndpointDiscovery;\n      tokenManager: TokenManager;\n      filter?: GetEntitiesRequest['filter'];\n    },\n  ) {\n    return new DefaultCatalogCollator({\n      ...options,\n    });\n  }\n\n  constructor(options: {\n    discovery: PluginEndpointDiscovery;\n    tokenManager: TokenManager;\n    locationTemplate?: string;\n    filter?: GetEntitiesRequest['filter'];\n    catalogClient?: CatalogApi;\n  }) {\n    const { discovery, locationTemplate, filter, catalogClient, tokenManager } =\n      options;\n\n    this.discovery = discovery;\n    this.locationTemplate =\n      locationTemplate || '/catalog/:namespace/:kind/:name';\n    this.filter = filter;\n    this.catalogClient =\n      catalogClient || new CatalogClient({ discoveryApi: discovery });\n    this.tokenManager = tokenManager;\n  }\n\n  protected applyArgsToFormat(\n    format: string,\n    args: Record<string, string>,\n  ): string {\n    let formatted = format;\n    for (const [key, value] of Object.entries(args)) {\n      formatted = formatted.replace(`:${key}`, value);\n    }\n    return formatted.toLowerCase();\n  }\n\n  private getDocumentText(entity: Entity): string {\n    let documentText = entity.metadata.description || '';\n    if (isUserEntity(entity)) {\n      if (entity.spec?.profile?.displayName && documentText) {\n        // combine displayName and description\n        const displayName = entity.spec?.profile?.displayName;\n        documentText = displayName.concat(' : ', documentText);\n      } else {\n        documentText = entity.spec?.profile?.displayName || documentText;\n      }\n    }\n    return documentText;\n  }\n\n  async execute() {\n    const { token } = await this.tokenManager.getToken();\n    const response = await this.catalogClient.getEntities(\n      {\n        filter: this.filter,\n      },\n      { token },\n    );\n    return response.items.map((entity: Entity): CatalogEntityDocument => {\n      return {\n        title: entity.metadata.title ?? entity.metadata.name,\n        location: this.applyArgsToFormat(this.locationTemplate, {\n          namespace: entity.metadata.namespace || 'default',\n          kind: entity.kind,\n          name: entity.metadata.name,\n        }),\n        text: this.getDocumentText(entity),\n        componentType: entity.spec?.type?.toString() || 'other',\n        type: entity.spec?.type?.toString() || 'other',\n        namespace: entity.metadata.namespace || 'default',\n        kind: entity.kind,\n        lifecycle: (entity.spec?.lifecycle as string) || '',\n        owner: (entity.spec?.owner as string) || '',\n        authorization: {\n          resourceRef: stringifyEntityRef(entity),\n        },\n      };\n    });\n  }\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  type AnalyzeLocationEntityField as _AnalyzeLocationEntityField,\n  type AnalyzeLocationExistingEntity as _AnalyzeLocationExistingEntity,\n  type AnalyzeLocationGenerateEntity as _AnalyzeLocationGenerateEntity,\n  type AnalyzeLocationRequest as _AnalyzeLocationRequest,\n  type AnalyzeLocationResponse as _AnalyzeLocationResponse,\n  type LocationSpec as _LocationSpec,\n} from '@backstage/plugin-catalog-common';\nimport {\n  locationSpecToMetadataName as _locationSpecToMetadataName,\n  locationSpecToLocationEntity as _locationSpecToLocationEntity,\n  processingResult as _processingResult,\n  type EntitiesSearchFilter as _EntitiesSearchFilter,\n  type EntityFilter as _EntityFilter,\n  type DeferredEntity as _DeferredEntity,\n  type EntityRelationSpec as _EntityRelationSpec,\n  type CatalogProcessor as _CatalogProcessor,\n  type CatalogProcessorParser as _CatalogProcessorParser,\n  type CatalogProcessorCache as _CatalogProcessorCache,\n  type CatalogProcessorEmit as _CatalogProcessorEmit,\n  type CatalogProcessorLocationResult as _CatalogProcessorLocationResult,\n  type CatalogProcessorEntityResult as _CatalogProcessorEntityResult,\n  type CatalogProcessorRelationResult as _CatalogProcessorRelationResult,\n  type CatalogProcessorErrorResult as _CatalogProcessorErrorResult,\n  type CatalogProcessorRefreshKeysResult as _CatalogProcessorRefreshKeysResult,\n  type CatalogProcessorResult as _CatalogProcessorResult,\n  type EntityProvider as _EntityProvider,\n  type EntityProviderConnection as _EntityProviderConnection,\n  type EntityProviderMutation as _EntityProviderMutation,\n  type AnalyzeOptions as _AnalyzeOptions,\n  type PlaceholderResolver as _PlaceholderResolver,\n  type PlaceholderResolverParams as _PlaceholderResolverParams,\n  type PlaceholderResolverRead as _PlaceholderResolverRead,\n  type PlaceholderResolverResolveUrl as _PlaceholderResolverResolveUrl,\n  type ScmLocationAnalyzer as _ScmLocationAnalyzer,\n} from '@backstage/plugin-catalog-node';\nimport {\n  defaultCatalogCollatorEntityTransformer as _defaultCatalogCollatorEntityTransformer,\n  DefaultCatalogCollatorFactory as _DefaultCatalogCollatorFactory,\n  type CatalogCollatorEntityTransformer as _CatalogCollatorEntityTransformer,\n  type DefaultCatalogCollatorFactoryOptions as _DefaultCatalogCollatorFactoryOptions,\n} from '@backstage/plugin-search-backend-module-catalog';\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport const locationSpecToMetadataName = _locationSpecToMetadataName;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport const locationSpecToLocationEntity = _locationSpecToLocationEntity;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport const processingResult = _processingResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type EntitiesSearchFilter = _EntitiesSearchFilter;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type EntityFilter = _EntityFilter;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type DeferredEntity = _DeferredEntity;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type EntityRelationSpec = _EntityRelationSpec;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessor = _CatalogProcessor;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorParser = _CatalogProcessorParser;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorCache = _CatalogProcessorCache;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorEmit = _CatalogProcessorEmit;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorLocationResult = _CatalogProcessorLocationResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorEntityResult = _CatalogProcessorEntityResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorRelationResult = _CatalogProcessorRelationResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorErrorResult = _CatalogProcessorErrorResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorRefreshKeysResult =\n  _CatalogProcessorRefreshKeysResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorResult = _CatalogProcessorResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type EntityProvider = _EntityProvider;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type EntityProviderConnection = _EntityProviderConnection;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type EntityProviderMutation = _EntityProviderMutation;\n\n/**\n * Holds the entity location information.\n *\n * @remarks\n *\n *  `presence` flag: when using repo importer plugin, location is being created before the component yaml file is merged to the main branch.\n *  This flag is then set to indicate that the file can be not present.\n *  default value: 'required'.\n *\n * @public\n * @deprecated use the same type from `@backstage/plugin-catalog-common` instead\n */\nexport type LocationSpec = _LocationSpec;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type AnalyzeOptions = _AnalyzeOptions;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type ScmLocationAnalyzer = _ScmLocationAnalyzer;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type PlaceholderResolver = _PlaceholderResolver;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type PlaceholderResolverParams = _PlaceholderResolverParams;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type PlaceholderResolverRead = _PlaceholderResolverRead;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type PlaceholderResolverResolveUrl = _PlaceholderResolverResolveUrl;\n\n/**\n * @public\n * @deprecated use the same type from `@backstage/plugin-catalog-common` instead\n */\nexport type AnalyzeLocationRequest = _AnalyzeLocationRequest;\n/**\n * @public\n * @deprecated use the same type from `@backstage/plugin-catalog-common` instead\n */\nexport type AnalyzeLocationResponse = _AnalyzeLocationResponse;\n\n/**\n * If the folder pointed to already contained catalog info yaml files, they are\n * read and emitted like this so that the frontend can inform the user that it\n * located them and can make sure to register them as well if they weren't\n * already\n * @public\n * @deprecated use the same type from `@backstage/plugin-catalog-common` instead\n */\nexport type AnalyzeLocationExistingEntity = _AnalyzeLocationExistingEntity;\n/**\n * This is some form of representation of what the analyzer could deduce.\n * We should probably have a chat about how this can best be conveyed to\n * the frontend. It'll probably contain a (possibly incomplete) entity, plus\n * enough info for the frontend to know what form data to show to the user\n * for overriding/completing the info.\n * @public\n * @deprecated use the same type from `@backstage/plugin-catalog-common` instead\n */\nexport type AnalyzeLocationGenerateEntity = _AnalyzeLocationGenerateEntity;\n\n/**\n *\n * This is where I get really vague. Something like this perhaps? Or it could be\n * something like a json-schema that contains enough info for the frontend to\n * be able to present a form and explanations\n * @public\n * @deprecated use the same type from `@backstage/plugin-catalog-common` instead\n */\nexport type AnalyzeLocationEntityField = _AnalyzeLocationEntityField;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-search-backend-module-catalog` instead\n */\nexport const DefaultCatalogCollatorFactory = _DefaultCatalogCollatorFactory;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-search-backend-module-catalog` instead\n */\nexport const defaultCatalogCollatorEntityTransformer =\n  _defaultCatalogCollatorEntityTransformer;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-search-backend-module-catalog` instead\n */\nexport type DefaultCatalogCollatorFactoryOptions =\n  _DefaultCatalogCollatorFactoryOptions;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-search-backend-module-catalog` instead\n */\nexport type CatalogCollatorEntityTransformer =\n  _CatalogCollatorEntityTransformer;\n"],"names":["ScmIntegrations","parseGitUrl","merge","pickBy","identity","path","processingResult","catalogEntityReadPermission","catalogClient","CatalogClient","isUserEntity","stringifyEntityRef","_locationSpecToMetadataName","_locationSpecToLocationEntity","_processingResult","_DefaultCatalogCollatorFactory","_defaultCatalogCollatorEntityTransformer"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"index.cjs.js","sources":["../src/modules/core/AnnotateScmSlugEntityProcessor.ts","../src/modules/core/LocationEntityProcessor.ts","../src/modules/core/transformLegacyPolicyToProcessor.ts","../src/search/DefaultCatalogCollator.ts","../src/deprecated.ts"],"sourcesContent":["/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity } from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  ScmIntegrationRegistry,\n  ScmIntegrations,\n} from '@backstage/integration';\nimport parseGitUrl from 'git-url-parse';\nimport { identity, merge, pickBy } from 'lodash';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport { CatalogProcessor } from '@backstage/plugin-catalog-node';\n\nconst GITHUB_ACTIONS_ANNOTATION = 'github.com/project-slug';\nconst GITLAB_ACTIONS_ANNOTATION = 'gitlab.com/project-slug';\nconst AZURE_ACTIONS_ANNOTATION = 'dev.azure.com/project-repo';\n\n/** @public */\nexport class AnnotateScmSlugEntityProcessor implements CatalogProcessor {\n  constructor(\n    private readonly opts: {\n      scmIntegrationRegistry: ScmIntegrationRegistry;\n      kinds?: string[];\n    },\n  ) {}\n\n  getProcessorName(): string {\n    return 'AnnotateScmSlugEntityProcessor';\n  }\n\n  static fromConfig(\n    config: Config,\n    options?: { kinds?: string[] },\n  ): AnnotateScmSlugEntityProcessor {\n    return new AnnotateScmSlugEntityProcessor({\n      scmIntegrationRegistry: ScmIntegrations.fromConfig(config),\n      kinds: options?.kinds,\n    });\n  }\n\n  async preProcessEntity(\n    entity: Entity,\n    location: LocationSpec,\n  ): Promise<Entity> {\n    const applicableKinds = (this.opts.kinds ?? ['Component']).map(k =>\n      k.toLocaleLowerCase('en-US'),\n    );\n    if (\n      !applicableKinds.includes(entity.kind.toLocaleLowerCase('en-US')) ||\n      location.type !== 'url'\n    ) {\n      return entity;\n    }\n\n    const scmIntegration = this.opts.scmIntegrationRegistry.byUrl(\n      location.target,\n    );\n\n    if (!scmIntegration) {\n      return entity;\n    }\n\n    let annotation;\n    switch (scmIntegration.type) {\n      case 'github':\n        annotation = GITHUB_ACTIONS_ANNOTATION;\n        break;\n      case 'gitlab':\n        annotation = GITLAB_ACTIONS_ANNOTATION;\n        break;\n      case 'azure':\n        annotation = AZURE_ACTIONS_ANNOTATION;\n        break;\n      default:\n        return entity;\n    }\n\n    let projectSlug = entity.metadata.annotations?.[annotation];\n    if (!projectSlug) {\n      const gitUrl = parseGitUrl(location.target);\n      projectSlug = `${gitUrl.owner}/${gitUrl.name}`;\n    }\n\n    return merge(\n      {\n        metadata: {\n          annotations: pickBy(\n            {\n              [annotation]: projectSlug,\n            },\n            identity,\n          ),\n        },\n      },\n      entity,\n    );\n  }\n}\n","/*\n * Copyright 2020 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Entity, LocationEntity } from '@backstage/catalog-model';\nimport { ScmIntegrationRegistry } from '@backstage/integration';\nimport path from 'path';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport {\n  processingResult,\n  CatalogProcessor,\n  CatalogProcessorEmit,\n} from '@backstage/plugin-catalog-node';\n\nexport function toAbsoluteUrl(\n  integrations: ScmIntegrationRegistry,\n  base: LocationSpec,\n  target: string,\n): string {\n  try {\n    if (base.type === 'file') {\n      if (target.startsWith('.')) {\n        return path.join(path.dirname(base.target), target);\n      }\n      return target;\n    }\n    return integrations.resolveUrl({ url: target, base: base.target });\n  } catch (e) {\n    return target;\n  }\n}\n\n/**\n * @public\n * @deprecated This processor should no longer be used\n */\nexport type LocationEntityProcessorOptions = {\n  integrations: ScmIntegrationRegistry;\n};\n\n/**\n * Legacy processor, should not be used.\n *\n * @remarks\n *\n * In the old catalog architecture, this processor translated Location entities\n * into URLs that should be fetched. This is no longer needed since the engine\n * handles this internally.\n *\n * @public\n * @deprecated This processor should no longer be used\n */\nexport class LocationEntityProcessor implements CatalogProcessor {\n  constructor(private readonly options: LocationEntityProcessorOptions) {}\n\n  getProcessorName(): string {\n    return 'LocationEntityProcessor';\n  }\n\n  async postProcessEntity(\n    entity: Entity,\n    location: LocationSpec,\n    emit: CatalogProcessorEmit,\n  ): Promise<Entity> {\n    if (entity.kind === 'Location') {\n      const locationEntity = entity as LocationEntity;\n\n      const type = locationEntity.spec.type || location.type;\n      if (type === 'file' && location.target.endsWith(path.sep)) {\n        emit(\n          processingResult.inputError(\n            location,\n            `LocationEntityProcessor cannot handle ${type} type location with target ${location.target} that ends with a path separator`,\n          ),\n        );\n      }\n\n      const targets = new Array<string>();\n      if (locationEntity.spec.target) {\n        targets.push(locationEntity.spec.target);\n      }\n      if (locationEntity.spec.targets) {\n        targets.push(...locationEntity.spec.targets);\n      }\n\n      for (const maybeRelativeTarget of targets) {\n        const target = toAbsoluteUrl(\n          this.options.integrations,\n          location,\n          maybeRelativeTarget,\n        );\n        emit(processingResult.location({ type, target }));\n      }\n    }\n\n    return entity;\n  }\n}\n","/*\n * Copyright 2024 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { EntityPolicy } from '@backstage/catalog-model';\nimport { CatalogProcessor } from '@backstage/plugin-catalog-node';\n\n/**\n * Transform a given entity policy to an entity processor.\n * @param policy - The policy to transform\n * @returns A new entity processor that uses the entity policy.\n * @public\n */\nexport function transformLegacyPolicyToProcessor(\n  policy: EntityPolicy,\n): CatalogProcessor {\n  return {\n    getProcessorName() {\n      return policy.constructor.name;\n    },\n    async preProcessEntity(entity) {\n      // If enforcing the policy fails, throw the policy error.\n      const result = await policy.enforce(entity);\n      if (!result) {\n        return entity;\n      }\n      return result;\n    },\n  };\n}\n","/*\n * Copyright 2021 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  PluginEndpointDiscovery,\n  TokenManager,\n} from '@backstage/backend-common';\nimport {\n  Entity,\n  isUserEntity,\n  stringifyEntityRef,\n} from '@backstage/catalog-model';\nimport { Config } from '@backstage/config';\nimport {\n  CatalogApi,\n  CatalogClient,\n  GetEntitiesRequest,\n} from '@backstage/catalog-client';\nimport { catalogEntityReadPermission } from '@backstage/plugin-catalog-common/alpha';\nimport { CatalogEntityDocument } from '@backstage/plugin-catalog-common';\nimport { Permission } from '@backstage/plugin-permission-common';\n\n/**\n * @public\n * @deprecated Upgrade to a more recent `@backstage/plugin-search-backend-node` and\n * use `DefaultCatalogCollatorFactory` instead.\n */\nexport class DefaultCatalogCollator {\n  protected discovery: PluginEndpointDiscovery;\n  protected locationTemplate: string;\n  protected filter?: GetEntitiesRequest['filter'];\n  protected readonly catalogClient: CatalogApi;\n  public readonly type: string = 'software-catalog';\n  public readonly visibilityPermission: Permission =\n    catalogEntityReadPermission;\n  protected tokenManager: TokenManager;\n\n  static fromConfig(\n    _config: Config,\n    options: {\n      discovery: PluginEndpointDiscovery;\n      tokenManager: TokenManager;\n      filter?: GetEntitiesRequest['filter'];\n    },\n  ) {\n    return new DefaultCatalogCollator({\n      ...options,\n    });\n  }\n\n  constructor(options: {\n    discovery: PluginEndpointDiscovery;\n    tokenManager: TokenManager;\n    locationTemplate?: string;\n    filter?: GetEntitiesRequest['filter'];\n    catalogClient?: CatalogApi;\n  }) {\n    const { discovery, locationTemplate, filter, catalogClient, tokenManager } =\n      options;\n\n    this.discovery = discovery;\n    this.locationTemplate =\n      locationTemplate || '/catalog/:namespace/:kind/:name';\n    this.filter = filter;\n    this.catalogClient =\n      catalogClient || new CatalogClient({ discoveryApi: discovery });\n    this.tokenManager = tokenManager;\n  }\n\n  protected applyArgsToFormat(\n    format: string,\n    args: Record<string, string>,\n  ): string {\n    let formatted = format;\n    for (const [key, value] of Object.entries(args)) {\n      formatted = formatted.replace(`:${key}`, value);\n    }\n    return formatted.toLowerCase();\n  }\n\n  private getDocumentText(entity: Entity): string {\n    let documentText = entity.metadata.description || '';\n    if (isUserEntity(entity)) {\n      if (entity.spec?.profile?.displayName && documentText) {\n        // combine displayName and description\n        const displayName = entity.spec?.profile?.displayName;\n        documentText = displayName.concat(' : ', documentText);\n      } else {\n        documentText = entity.spec?.profile?.displayName || documentText;\n      }\n    }\n    return documentText;\n  }\n\n  async execute() {\n    const { token } = await this.tokenManager.getToken();\n    const response = await this.catalogClient.getEntities(\n      {\n        filter: this.filter,\n      },\n      { token },\n    );\n    return response.items.map((entity: Entity): CatalogEntityDocument => {\n      return {\n        title: entity.metadata.title ?? entity.metadata.name,\n        location: this.applyArgsToFormat(this.locationTemplate, {\n          namespace: entity.metadata.namespace || 'default',\n          kind: entity.kind,\n          name: entity.metadata.name,\n        }),\n        text: this.getDocumentText(entity),\n        componentType: entity.spec?.type?.toString() || 'other',\n        type: entity.spec?.type?.toString() || 'other',\n        namespace: entity.metadata.namespace || 'default',\n        kind: entity.kind,\n        lifecycle: (entity.spec?.lifecycle as string) || '',\n        owner: (entity.spec?.owner as string) || '',\n        authorization: {\n          resourceRef: stringifyEntityRef(entity),\n        },\n      };\n    });\n  }\n}\n","/*\n * Copyright 2023 The Backstage Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  type AnalyzeLocationEntityField as _AnalyzeLocationEntityField,\n  type AnalyzeLocationExistingEntity as _AnalyzeLocationExistingEntity,\n  type AnalyzeLocationGenerateEntity as _AnalyzeLocationGenerateEntity,\n  type AnalyzeLocationRequest as _AnalyzeLocationRequest,\n  type AnalyzeLocationResponse as _AnalyzeLocationResponse,\n  type LocationSpec as _LocationSpec,\n} from '@backstage/plugin-catalog-common';\nimport {\n  locationSpecToMetadataName as _locationSpecToMetadataName,\n  locationSpecToLocationEntity as _locationSpecToLocationEntity,\n  processingResult as _processingResult,\n  type EntitiesSearchFilter as _EntitiesSearchFilter,\n  type EntityFilter as _EntityFilter,\n  type DeferredEntity as _DeferredEntity,\n  type EntityRelationSpec as _EntityRelationSpec,\n  type CatalogProcessor as _CatalogProcessor,\n  type CatalogProcessorParser as _CatalogProcessorParser,\n  type CatalogProcessorCache as _CatalogProcessorCache,\n  type CatalogProcessorEmit as _CatalogProcessorEmit,\n  type CatalogProcessorLocationResult as _CatalogProcessorLocationResult,\n  type CatalogProcessorEntityResult as _CatalogProcessorEntityResult,\n  type CatalogProcessorRelationResult as _CatalogProcessorRelationResult,\n  type CatalogProcessorErrorResult as _CatalogProcessorErrorResult,\n  type CatalogProcessorRefreshKeysResult as _CatalogProcessorRefreshKeysResult,\n  type CatalogProcessorResult as _CatalogProcessorResult,\n  type EntityProvider as _EntityProvider,\n  type EntityProviderConnection as _EntityProviderConnection,\n  type EntityProviderMutation as _EntityProviderMutation,\n  type AnalyzeOptions as _AnalyzeOptions,\n  type PlaceholderResolver as _PlaceholderResolver,\n  type PlaceholderResolverParams as _PlaceholderResolverParams,\n  type PlaceholderResolverRead as _PlaceholderResolverRead,\n  type PlaceholderResolverResolveUrl as _PlaceholderResolverResolveUrl,\n  type ScmLocationAnalyzer as _ScmLocationAnalyzer,\n} from '@backstage/plugin-catalog-node';\nimport {\n  defaultCatalogCollatorEntityTransformer as _defaultCatalogCollatorEntityTransformer,\n  DefaultCatalogCollatorFactory as _DefaultCatalogCollatorFactory,\n  type CatalogCollatorEntityTransformer as _CatalogCollatorEntityTransformer,\n  type DefaultCatalogCollatorFactoryOptions as _DefaultCatalogCollatorFactoryOptions,\n} from '@backstage/plugin-search-backend-module-catalog';\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport const locationSpecToMetadataName = _locationSpecToMetadataName;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport const locationSpecToLocationEntity = _locationSpecToLocationEntity;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport const processingResult = _processingResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type EntitiesSearchFilter = _EntitiesSearchFilter;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type EntityFilter = _EntityFilter;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type DeferredEntity = _DeferredEntity;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type EntityRelationSpec = _EntityRelationSpec;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessor = _CatalogProcessor;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorParser = _CatalogProcessorParser;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorCache = _CatalogProcessorCache;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorEmit = _CatalogProcessorEmit;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorLocationResult = _CatalogProcessorLocationResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorEntityResult = _CatalogProcessorEntityResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorRelationResult = _CatalogProcessorRelationResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorErrorResult = _CatalogProcessorErrorResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorRefreshKeysResult =\n  _CatalogProcessorRefreshKeysResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type CatalogProcessorResult = _CatalogProcessorResult;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type EntityProvider = _EntityProvider;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type EntityProviderConnection = _EntityProviderConnection;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type EntityProviderMutation = _EntityProviderMutation;\n\n/**\n * Holds the entity location information.\n *\n * @remarks\n *\n *  `presence` flag: when using repo importer plugin, location is being created before the component yaml file is merged to the main branch.\n *  This flag is then set to indicate that the file can be not present.\n *  default value: 'required'.\n *\n * @public\n * @deprecated use the same type from `@backstage/plugin-catalog-common` instead\n */\nexport type LocationSpec = _LocationSpec;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type AnalyzeOptions = _AnalyzeOptions;\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type ScmLocationAnalyzer = _ScmLocationAnalyzer;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type PlaceholderResolver = _PlaceholderResolver;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type PlaceholderResolverParams = _PlaceholderResolverParams;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type PlaceholderResolverRead = _PlaceholderResolverRead;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-catalog-node` instead\n */\nexport type PlaceholderResolverResolveUrl = _PlaceholderResolverResolveUrl;\n\n/**\n * @public\n * @deprecated use the same type from `@backstage/plugin-catalog-common` instead\n */\nexport type AnalyzeLocationRequest = _AnalyzeLocationRequest;\n/**\n * @public\n * @deprecated use the same type from `@backstage/plugin-catalog-common` instead\n */\nexport type AnalyzeLocationResponse = _AnalyzeLocationResponse;\n\n/**\n * If the folder pointed to already contained catalog info yaml files, they are\n * read and emitted like this so that the frontend can inform the user that it\n * located them and can make sure to register them as well if they weren't\n * already\n * @public\n * @deprecated use the same type from `@backstage/plugin-catalog-common` instead\n */\nexport type AnalyzeLocationExistingEntity = _AnalyzeLocationExistingEntity;\n/**\n * This is some form of representation of what the analyzer could deduce.\n * We should probably have a chat about how this can best be conveyed to\n * the frontend. It'll probably contain a (possibly incomplete) entity, plus\n * enough info for the frontend to know what form data to show to the user\n * for overriding/completing the info.\n * @public\n * @deprecated use the same type from `@backstage/plugin-catalog-common` instead\n */\nexport type AnalyzeLocationGenerateEntity = _AnalyzeLocationGenerateEntity;\n\n/**\n *\n * This is where I get really vague. Something like this perhaps? Or it could be\n * something like a json-schema that contains enough info for the frontend to\n * be able to present a form and explanations\n * @public\n * @deprecated use the same type from `@backstage/plugin-catalog-common` instead\n */\nexport type AnalyzeLocationEntityField = _AnalyzeLocationEntityField;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-search-backend-module-catalog` instead\n */\nexport const DefaultCatalogCollatorFactory = _DefaultCatalogCollatorFactory;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-search-backend-module-catalog` instead\n */\nexport const defaultCatalogCollatorEntityTransformer =\n  _defaultCatalogCollatorEntityTransformer;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-search-backend-module-catalog` instead\n */\nexport type DefaultCatalogCollatorFactoryOptions =\n  _DefaultCatalogCollatorFactoryOptions;\n\n/**\n * @public\n * @deprecated import from `@backstage/plugin-search-backend-module-catalog` instead\n */\nexport type CatalogCollatorEntityTransformer =\n  _CatalogCollatorEntityTransformer;\n"],"names":["ScmIntegrations","parseGitUrl","merge","pickBy","identity","path","processingResult","catalogEntityReadPermission","catalogClient","CatalogClient","isUserEntity","stringifyEntityRef","_locationSpecToMetadataName","_locationSpecToLocationEntity","_processingResult","_DefaultCatalogCollatorFactory","_defaultCatalogCollatorEntityTransformer"],"mappings":"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"}
\ No newline at end of file
