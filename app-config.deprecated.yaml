app:
  title: Janus IDP Backstage Showcase
  baseUrl: http://localhost:3000
  # Plugin: Segment
  analytics:
    segment:
      writeKey: ${SEGMENT_WRITE_KEY}
      maskIP: ${SEGMENT_MASK_IP} # prevents IP addresses from being sent if true
      testMode: ${SEGMENT_TEST_MODE} # prevents data from being sent if true
  branding:
    fullLogo: ${BASE64_EMBEDDED_FULL_LOGO}
    iconLogo: ${BASE64_EMBEDDED_ICON_LOGO}
    theme:
      light:
        primaryColor: ${PRIMARY_LIGHT_COLOR}
        headerColor1: ${HEADER_LIGHT_COLOR_1}
        headerColor2: ${HEADER_LIGHT_COLOR_2}
        navigationIndicatorColor: ${NAV_INDICATOR_LIGHT_COLOR}
      dark:
        primaryColor: ${PRIMARY_DARK_COLOR}
        headerColor1: ${HEADER_DARK_COLOR_1}
        headerColor2: ${HEADER_DARK_COLOR_2}
        navigationIndicatorColor: ${NAV_INDICATOR_DARK_COLOR}
organization:
  name: My Org

backend:
  # Required for authentication. This secret is shared by all backend plugins.
  # In development mode a temporary secret is automatically created.
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_AUTH_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
    connect-src:
      - "'self'"
      - 'http:'
      - 'https:'
    # Plugin: Jira
    img-src:
      # "'self'" and 'data' are from the backstage default but must be set since img-src is overwritten
      - "'self'"
      - 'data:'
      # Allow your Jira instance for @roadiehq/backstage-plugin-jira
      - ${JIRA_URL}
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  # Plugin: GitHub
  github:
    - host: github.com
      # This is a GitHub App. You can find out how to generate this file, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/github-apps
      apps:
        # - $include: github-app-backstage-showcase-credentials.yaml
        - appId: ${GITHUB_APP_APP_ID}
          webhookUrl: ${GITHUB_APP_WEBHOOK_URL}
          clientId: ${GITHUB_APP_CLIENT_ID}
          clientSecret: ${GITHUB_APP_CLIENT_SECRET}
          webhookSecret: ${GITHUB_APP_WEBHOOK_SECRET}
          privateKey: |
            ${GITHUB_APP_PRIVATE_KEY}

  # Plugin: GitLab
  gitlab:
    - host: ${GITLAB_HOST}
      token: ${GITLAB_TOKEN}
      apiBaseUrl: ${GITLAB_API_BASE_URL}

  # Plugin: Azure DevOps
  azure:
    - host: dev.azure.com
      token: ${AZURE_TOKEN}

  # Plugin: Bitbucket Server
  bitbucketServer:
    - host: ${BITBUCKET_SERVER_HOST}
      apiBaseUrl: ${BITBUCKET_API_BASE_URL}
      username: ${BITBUCKET_SERVER_USERNAME}
      password: ${BITBUCKET_SERVER_PASSWORD}

# Plugin: Azure DevOps
azureDevOps:
  host: dev.azure.com
  token: ${AZURE_TOKEN}
  organization: ${AZURE_ORG}

proxy:
  endpoints:
    # Plugin: Quay
    '/quay/api':
      target: https://quay.io/
      headers:
        X-Requested-With: 'XMLHttpRequest'
        # Uncomment the following line to access a private Quay Repository using a token
        # Authorization: 'Bearer <YOUR TOKEN>'
      changeOrigin: true
      secure: true

    # Plugin: SonarQube
    '/sonarqube':
      # if not using sonarqube, assign SONARQUBE_URL to https://sonarcloud.io
      # target: https://sonarcloud.io/api
      target: ${SONARQUBE_URL}/api
      allowedMethods: ['GET']
      auth: ${SONARQUBE_TOKEN}

    # Plugin: Jenkins
    '/jenkins/api':
      target: ${JENKINS_URL}
      headers:
        Authorization: ${JENKINS_TOKEN}

    # Plugin: Jira
    '/jira/api':
      target: ${JIRA_URL}
      headers:
        Authorization: ${JIRA_TOKEN}
        Accept: 'application/json'
        Content-Type: 'application/json'
        X-Atlassian-Token: 'no-check'
        User-Agent: ${JIRA_USER_AGENT}

    # Plugin: Jfrog Artifactory
    '/jfrog-artifactory/api':
      target: ${ARTIFACTORY_URL}
      headers:
        Authorization: Bearer ${ARTIFACTORY_TOKEN}
      # Change to "false" in case of using self hosted artifactory instance with a self-signed certificate
      secure: ${ARTIFACTORY_SECURE}

    # Plugin: PagerDuty
    '/pagerduty':
      target: https://api.pagerduty.com
      headers:
        Authorization: Token token=${PAGERDUTY_TOKEN}

    # Plugin: Dynatrace
    '/dynatrace':
      target: ${DYNATRACE_API_URL}
      headers:
        # This API access token requires entities.read and problems.read permissions
        # For more info on how to generate this token: https://www.dynatrace.com/support/help/dynatrace-api/basics/dynatrace-api-authentication
        Authorization: 'Api-Token ${DYNATRACE_ACCESS_TOKEN}'

    # Plugin: Nexus Repository Manager
    '/nexus-repository-manager':
      target: ${NEXUS_REPOSITORY_MANAGER_URL}
      headers:
        X-Requested-With: 'XMLHttpRequest'
        # Uncomment the following line to access a private Nexus Repository Manager using a token
        # Authorization: 'Bearer <NEXUS_REPOSITORY_MANAGER_TOKEN>'
      changeOrigin: true
      # Change to "false" in case of using self hosted Nexus Repository Manager instance with a self-signed certificate
      secure: ${NEXUS_REPOSITORY_MANAGER_SECURE}

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach

# Plugin: TechDocs
techdocs:
  builder: ${TECHDOCS_BUILDER_TYPE}
  generator:
    runIn: ${TECHDOCS_GENERATOR_TYPE}
  publisher:
    type: ${TECHDOCS_PUBLISHER_TYPE}
    awsS3:
      bucketName: ${BUCKET_NAME}
      region: ${BUCKET_REGION_VAULT}
      endpoint: ${BUCKET_URL}
      s3ForcePathStyle: true
      credentials:
        accessKeyId: ${AWS_ACCESS_KEY_ID}
        secretAccessKey: ${AWS_SECRET_ACCESS_KEY}

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  providers:
    # Plugin: GitHub
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}

scaffolder:
  {}
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, Group, Resource, Location, Template, API]
  locations:
    - type: url
      target: https://github.com/janus-idp/backstage-showcase/blob/main/catalog-entities/all.yaml

    - type: url
      target: https://github.com/janus-idp/software-templates/blob/main/showcase-templates.yaml

  providers:
    # Plugin: Keycloak
    keycloakOrg:
      default:
        baseUrl: ${KEYCLOAK_BASE_URL}
        loginRealm: ${KEYCLOAK_LOGIN_REALM}
        realm: ${KEYCLOAK_REALM}
        clientId: ${KEYCLOAK_CLIENT_ID}
        clientSecret: ${KEYCLOAK_CLIENT_SECRET}

    # Plugin: OCM
    ocm:
      default:
        name: ${OCM_HUB_NAME}
        url: ${OCM_HUB_URL}
        serviceAccountToken: ${moc_infra_token}
        owner: janus-authors

    # Plugin: GitHub Org Data
    githubOrg:
      default:
        id: production
        orgUrl: ${GITHUB_ORG_URL}

    # Plugin: GitHub Discovery
    # uncomment following lines and set GITHUB_ORG to enable GitHub Discovery
    # github:
    #   providerId:
    #     organization: "${GITHUB_ORG}"

    # Plugin: AAP backend plugin
    aap:
      prod:
        baseUrl: ${AAP_BASE_URL}
        authorization: ${AAP_AUTH_TOKEN}

# Plugin: Kubernetes, OCM
kubernetes:
  customResources:
    - group: 'tekton.dev'
      apiVersion: 'v1beta1'
      plural: 'pipelines'
    - group: 'tekton.dev'
      apiVersion: 'v1beta1'
      plural: 'pipelineruns'
    - group: 'tekton.dev'
      apiVersion: 'v1beta1'
      plural: 'taskruns'
    - group: 'route.openshift.io'
      apiVersion: 'v1'
      plural: 'routes'
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - name: ${K8S_CLUSTER_NAME}
          url: ${K8S_CLUSTER_URL}
          authProvider: 'serviceAccount'
          skipTLSVerify: true
          serviceAccountToken: ${K8S_CLUSTER_TOKEN}

# Plugin: ArgoCD
argocd:
  username: ${ARGOCD_USERNAME}
  password: ${ARGOCD_PASSWORD}
  appLocatorMethods:
    - type: 'config'
      instances:
        - name: argoInstance1
          url: ${ARGOCD_INSTANCE1_URL}
          token: ${ARGOCD_AUTH_TOKEN}
        - name: argoInstance2
          url: ${ARGOCD_INSTANCE2_URL}
          token: ${ARGOCD_AUTH_TOKEN2}

# Plugin: SonarQube
sonarqube:
  baseUrl: ${SONARQUBE_URL}
  apiKey: ${SONARQUBE_TOKEN}

# Plugin: Jenkins
jenkins:
  instances:
    - name: default
      baseUrl: ${JENKINS_URL}
      username: ${JENKINS_USERNAME}
      apiKey: ${JENKINS_TOKEN}

# Plugin: PagerDuty
pagerduty:
  # uncomment the following, and provide a URL to override the default URL used for events
  # eventsBaseUrl: <PagerDuty Event URL>

# Plugin: Lighthouse
lighthouse:
  baseUrl: ${LIGHTHOUSE_BASEURL}

# Plugin: Dynatrace
dynatrace:
  baseUrl: ${DYNATRACE_URL}

# Plugin: Permission
permission:
  enabled: ${PERMISSION_ENABLED}

enabled:
  kubernetes: ${K8S_ENABLED}
  techdocs: ${TECHDOCS_ENABLED}
  argocd: ${ARGOCD_ENABLED}
  sonarqube: ${SONARQUBE_ENABLED}
  keycloak: ${KEYCLOAK_ENABLED}
  ocm: ${OCM_ENABLED}
  github: ${GITHUB_ENABLED}
  githubOrg: ${GITHUB_ORG_ENABLED}
  gitlab: ${GITLAB_ENABLED}
  azureDevOps: ${AZURE_ENABLED}
  jenkins: ${JENKINS_ENABLED}
  permission: ${PERMISSION_ENABLED}
  metrics: ${METRICS_ENABLED}
  aap: ${AAP_ENABLED}

dynamicPlugins:
  rootDirectory: dynamic-plugins-root
  frontend: {}