app:
  title: Janus IDP Backstage Showcase
  baseUrl: http://localhost:3000

organization:
  name: Janus IDP

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/tutorials/backend-to-backend-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      # This is a GitHub App. You can find out how to generate this file, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/github-apps
      apps:
        - $include: github-app-backstage-showcase-credentials.yaml

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # '/test':
  #   target: 'https://example.com'
  #   changeOrigin: true
  '/quay/api':
    target: https://quay.io/
    headers:
      X-Requested-With: 'XMLHttpRequest'
      # Uncomment the following line to access a private Quay Repository using a token
      # Authorization: 'Bearer <YOUR TOKEN>'
    changeOrigin: true
    secure: true
  '/snyk':
    target: https://snyk.io/api/v1
    headers:
      User-Agent: tech-services/backstage-plugin/1.0
      Authorization: token ${SNYK_TOKEN}

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'docker' # Alternatives - 'local'
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  providers:
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location, Template]
  locations:
    # File locations are relative to the backend process, typically `packages/backend`

    # Local components
    - type: file
      target: ../../catalog-entities/components.yaml
      rules:
        - allow: [Component]

    # Local organizational data
    - type: file
      target: ../../catalog-entities/org.yaml
      rules:
        - allow: [User, Group]

    # Local systems
    - type: file
      target: ../../catalog-entities/systems.yaml
      rules:
        - allow: [System]

    # For when building the image with Docker
    # Local components
    - type: file
      target: ./catalog-entities/components.yaml
      rules:
        - allow: [Component]

    # Local organizational data
    - type: file
      target: ./catalog-entities/org.yaml
      rules:
        - allow: [User, Group]

    # Local systems
    - type: file
      target: ./catalog-entities/systems.yaml
      rules:
        - allow: [System]

    - type: url
      target: https://github.com/janus-idp/software-templates/blob/main/showcase-templates.yaml
      rules:
        - allow: [Template]

  providers:
    keycloakOrg:
      default:
        baseUrl: ${KEYCLOAK_BASE_URL}
        loginRealm: ${KEYCLOAK_LOGIN_REALM}
        realm: ${KEYCLOAK_REALM}
        clientId: ${KEYCLOAK_CLIENT_ID}
        clientSecret: ${KEYCLOAK_CLIENT_SECRET}

kubernetes:
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - name: ${K8S_CLUSTER_NAME}
          url: ${K8S_CLUSTER_URL}
          authProvider: 'serviceAccount'
          skipTLSVerify: true
          serviceAccountToken: ${K8S_CLUSTER_TOKEN}

ocm:
  hub:
    name: ${OCM_HUB_NAME}
    url: ${OCM_HUB_URL}
    serviceAccountToken: ${moc_infra_token}

argocd:
  username: ${ARGOCD_USERNAME}
  password: ${ARGOCD_PASSWORD}
  appLocatorMethods:
    - type: 'config'
      instances:
        - name: argoInstance1
          url: ${ARGOCD_INSTANCE1_URL}
          token: ${ARGOCD_AUTH_TOKEN}
        - name: argoInstance2
          url: ${ARGOCD_INSTANCE2_URL}
          token: ${ARGOCD_AUTH_TOKEN2}
