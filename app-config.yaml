app:
  title: Janus IDP Backstage Showcase
  baseUrl: http://localhost:3000

organization:
  name: Janus IDP

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  cache:
    store: memory
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      # This is a GitHub App. You can find out how to generate this file, and more information
      # about setting up the GitHub integration here: https://backstage.io/docs/integrations/github/github-apps
      apps:
        - $include: github-app-backstage-showcase-credentials.yaml
  gitlab:
    - host: gitlab.com
      token: ${GITLAB_TOKEN}

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # '/test':
  #   target: 'https://example.com'
  #   changeOrigin: true
  '/quay/api':
    target: https://quay.io/
    headers:
      X-Requested-With: 'XMLHttpRequest'
      # Uncomment the following line to access a private Quay Repository using a token
      # Authorization: 'Bearer <YOUR TOKEN>'
    changeOrigin: true
    secure: true

  '/sonarqube':
    # if not using sonarqube, assign SONARQUBE_URL to https://sonarcloud.io
    # target: https://sonarcloud.io/api
    target: ${SONARQUBE_URL}/api
    allowedMethods: ['GET']
    auth: ${SONARQUBE_TOKEN}

  '/jenkins/api':
    target: ${JENKINS_URL}
    headers:
      Authorization: ${JENKINS_TOKEN}

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: ${TECHDOCS_BUILDER_TYPE}
  generator:
    runIn: ${TECHDOCS_GENERATOR_TYPE}
  publisher:
    type: ${TECHDOCS_PUBLISHER_TYPE}
    awsS3:
      bucketName: ${BUCKET_NAME}
      region: ${BUCKET_REGION_VAULT}
      endpoint: ${BUCKET_URL}
      s3ForcePathStyle: true
      credentials:
        accessKeyId: ${AWS_ACCESS_KEY_ID}
        secretAccessKey: ${AWS_SECRET_ACCESS_KEY}

auth:
  # see https://backstage.io/docs/auth/ to learn about auth providers
  environment: development
  providers:
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, Group, Resource, Location, Template, API]
  locations:
    - type: url
      target: https://github.com/janus-idp/backstage-showcase/blob/main/catalog-entities/all.yaml

    - type: url
      target: https://github.com/janus-idp/software-templates/blob/main/showcase-templates.yaml

  providers:
    keycloakOrg:
      default:
        baseUrl: ${KEYCLOAK_BASE_URL}
        loginRealm: ${KEYCLOAK_LOGIN_REALM}
        realm: ${KEYCLOAK_REALM}
        clientId: ${KEYCLOAK_CLIENT_ID}
        clientSecret: ${KEYCLOAK_CLIENT_SECRET}

    ocm:
      operate-first:
        name: ${OCM_HUB_NAME}
        url: ${OCM_HUB_URL}
        serviceAccountToken: ${moc_infra_token}
        owner: janus-authors

    githubOrg:
      default:
        id: production
        orgUrl: ${GITHUB_ORG_URL}

kubernetes:
  customResources:
    - group: 'tekton.dev'
      apiVersion: 'v1beta1'
      plural: 'pipelineruns'
    - group: 'tekton.dev'
      apiVersion: 'v1beta1'
      plural: 'taskruns'
  serviceLocatorMethod:
    type: 'multiTenant'
  clusterLocatorMethods:
    - type: 'config'
      clusters:
        - name: ${K8S_CLUSTER_NAME}
          url: ${K8S_CLUSTER_URL}
          authProvider: 'serviceAccount'
          skipTLSVerify: true
          serviceAccountToken: ${K8S_CLUSTER_TOKEN}

argocd:
  username: ${ARGOCD_USERNAME}
  password: ${ARGOCD_PASSWORD}
  appLocatorMethods:
    - type: 'config'
      instances:
        - name: argoInstance1
          url: ${ARGOCD_INSTANCE1_URL}
          token: ${ARGOCD_AUTH_TOKEN}
        - name: argoInstance2
          url: ${ARGOCD_INSTANCE2_URL}
          token: ${ARGOCD_AUTH_TOKEN2}

sonarqube:
  baseUrl: ${SONARQUBE_URL}
  apiKey: ${SONARQUBE_TOKEN}

jenkins:
  instances:
  - name: default
    baseUrl: ${JENKINS_URL}
    username: ${JENKINS_USERNAME}
    apiKey: ${JENKINS_TOKEN}

enabled:
  kubernetes: ${K8S_ENABLED}
  techdocs: ${TECHDOCS_ENABLED}
  argocd: ${ARGOCD_ENABLED}
  sonarqube: ${SONARQUBE_ENABLED}
  keycloak: ${KEYCLOAK_ENABLED}
  ocm: ${OCM_ENABLED}
  github: ${GITHUB_ENABLED}
  githubOrg: ${GITHUB_ORG_ENABLED}
  gitlab: ${GITLAB_ENABLED}
  jenkins: ${JENKINS_ENABLED}
