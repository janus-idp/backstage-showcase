app:
  title: Janus IDP Backstage Showcase
  baseUrl: http://localhost:3000
  branding:
    fullLogo: ${BASE64_EMBEDDED_FULL_LOGO}
    iconLogo: ${BASE64_EMBEDDED_ICON_LOGO}
    theme:
      light:
        primaryColor: ${PRIMARY_LIGHT_COLOR}
        headerColor1: ${HEADER_LIGHT_COLOR_1}
        headerColor2: ${HEADER_LIGHT_COLOR_2}
        navigationIndicatorColor: ${NAV_INDICATOR_LIGHT_COLOR}
      dark:
        primaryColor: ${PRIMARY_DARK_COLOR}
        headerColor1: ${HEADER_DARK_COLOR_1}
        headerColor2: ${HEADER_DARK_COLOR_2}
        navigationIndicatorColor: ${NAV_INDICATOR_DARK_COLOR}

organization:
  name: ${ORGANIZATION_NAME}

backend:
  # Required for authentication. This secret is shared by all backend plugins.
  # In development mode a temporary secret is automatically created.
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  # auth:
  #   keys:
  #     - secret: ${BACKEND_AUTH_SECRET}
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
    connect-src:
      - "'self'"
      - 'http:'
      - 'https:'
    # Plugin: Jira
    img-src:
      # "'self'" and 'data' are from the backstage default but must be set since img-src is overwritten
      - "'self'"
      - 'data:'
      # Allow your Jira instance for @roadiehq/backstage-plugin-jira
      - ${JIRA_URL}
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
    client: better-sqlite3
    connection: ':memory:'
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

proxy:
  endpoints:
    # Plugin: Quay
    '/quay/api':
      target: https://quay.io/
      headers:
        X-Requested-With: 'XMLHttpRequest'
        # Uncomment the following line to access a private Quay Repository using a token
        # Authorization: 'Bearer <YOUR TOKEN>'
      changeOrigin: true
      secure: true

    # Plugin: SonarQube
    '/sonarqube':
      # if not using sonarqube, assign SONARQUBE_URL to https://sonarcloud.io
      # target: https://sonarcloud.io/api
      target: ${SONARQUBE_URL}/api
      allowedMethods: ['GET']
      auth: ${SONARQUBE_TOKEN}

    # Plugin: Jenkins
    '/jenkins/api':
      target: ${JENKINS_URL}
      headers:
        Authorization: ${JENKINS_TOKEN}

    # Plugin: Jira
    '/jira/api':
      target: ${JIRA_URL}
      headers:
        Authorization: ${JIRA_TOKEN}
        Accept: 'application/json'
        Content-Type: 'application/json'
        X-Atlassian-Token: 'no-check'
        User-Agent: ${JIRA_USER_AGENT}

    # Plugin: ACR
    '/acr/api':
      target: ${ACR_URL}
      changeOrigin: true
      headers:
        # If you use Bearer Token for authorization, please replace the 'Basic' with 'Bearer' in the following line.
        Authorization: 'Bearer ${ACR_AUTH_TOKEN}'
      # Change to "false" in case of using self hosted artifactory instance with a self-signed certificate
      secure: true

    # Plugin: Jfrog Artifactory
    '/jfrog-artifactory/api':
      target: ${ARTIFACTORY_URL}
      headers:
        Authorization: Bearer ${ARTIFACTORY_TOKEN}
      # Change to "false" in case of using self hosted artifactory instance with a self-signed certificate
      secure: ${ARTIFACTORY_SECURE}

    # Plugin: PagerDuty
    '/pagerduty':
      target: https://api.pagerduty.com
      headers:
        Authorization: Token token=${PAGERDUTY_TOKEN}

    # Plugin: Dynatrace
    '/dynatrace':
      target: ${DYNATRACE_API_URL}
      headers:
        # This API access token requires entities.read and problems.read permissions
        # For more info on how to generate this token: https://www.dynatrace.com/support/help/dynatrace-api/basics/dynatrace-api-authentication
        Authorization: 'Api-Token ${DYNATRACE_ACCESS_TOKEN}'

    # Plugin: Nexus Repository Manager
    '/nexus-repository-manager':
      target: ${NEXUS_REPOSITORY_MANAGER_URL}
      headers:
        X-Requested-With: 'XMLHttpRequest'
        # Uncomment the following line to access a private Nexus Repository Manager using a token
        # Authorization: 'Bearer <NEXUS_REPOSITORY_MANAGER_TOKEN>'
      changeOrigin: true
      # Change to "false" in case of using self hosted Nexus Repository Manager instance with a self-signed certificate
      secure: ${NEXUS_REPOSITORY_MANAGER_SECURE}

scaffolder:
  {}
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, Group, Resource, Location, Template, API]
  locations:
    - type: url
      target: https://github.com/janus-idp/backstage-showcase/blob/main/catalog-entities/all.yaml

    - type: url
      target: https://github.com/janus-idp/software-templates/blob/main/showcase-templates.yaml

# Plugin: PagerDuty
pagerduty:
  # uncomment the following, and provide a URL to override the default URL used for events
  # eventsBaseUrl: <PagerDuty Event URL>

# Plugin: Lighthouse
lighthouse:
  baseUrl: ${LIGHTHOUSE_BASEURL}

# Plugin: Dynatrace
dynatrace:
  baseUrl: ${DYNATRACE_URL}

# Plugin: Permission
permission:
  enabled: ${PERMISSION_ENABLED}

dynamicPlugins:
  rootDirectory: dynamic-plugins-root
